[{"title":"curl_cffi请求指南","url":"/2025/05/27/curl-cffi请求指南/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>curl_cffi请求指南</strong></font>\n\n<!--more-->\n\n### Post方式：`multipart/form-data`\n\n`\"Content-Type\":\"multipart/form-data\"`\n\n```python\nfrom curl_cffi import requests, CurlMime\nmp = CurlMime()  # 该类是 curl_cffi的上传文件类\n\nurl = \"http://192.168.2.3:8080/upload\"  # 请求地址\n\n# 文本内容 json\npayload = {\n    'save_path': '/data/mp4_file/test3',\n    'md5': '4b9975069087e0f0f9e13bf4111b7a03',\n}\n\n\nwith open(\"/Users/kama/水3.mp4\", \"rb\") as file:\n    data = file.read()\n\n# 添加文件到 multiple\nmp.addpart(\n    name=\"file\",\n    content_type=\"application/octet-stream\",\n    filename=\"水3.mp4\",\n    data=data,\n)\n\n# 开始发送请求\nresponse = requests.post(url, data=payload, multipart=mp, impersonate=\"chrome120\")\nprint(response.text)\n```\n\n","tags":["request","请求示例","指南"],"categories":["Python","爬虫","Post请求"]},{"title":"正在运行的-Docker-容器打包镜像方法","url":"/2025/02/28/正在运行的-Docker-容器打包镜像方法/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>正在运行的-Docker-容器打包镜像方法</strong></font>\n\n<!--more-->\n\n#### ‌**1. 使用 `docker commit` 命令直接打包**‌\n\n‌**适用场景**‌：快速保存当前容器的运行状态为镜像，适合临时调试或快速迁移。\n‌**步骤**‌：\n\n1. ‌**获取容器 ID**‌\n\n   ```bash\n   docker ps  # 查看正在运行的容器，记录目标容器的 ID ‌:ml-citation{ref=\"1,3\" data=\"citationList\"}  \n   ```\n\n2. ‌**提交容器为新镜像**‌\n\n   ```bash\n   docker commit <容器ID> <新镜像名>:<标签>  # 例如：docker commit abc123 my-app:v1 ‌:ml-citation{ref=\"1,2\" data=\"citationList\"}  \n   ```\n\n3. ‌**验证镜像是否生成**‌\n\n   ```bash\n   docker images  # 检查列表中是否包含新镜像 :ml-citation{ref=\"2,3\" data=\"citationList\"}  \n   ```\n\n------\n\n#### ‌**2. 导出镜像为可迁移文件**‌\n\n‌**适用场景**‌：将镜像保存为 `.tar` 文件，便于传输或备份。\n‌**步骤**‌：\n\n1. ‌**导出镜像为 `.tar` 文件**‌\n\n   ```bash\n   docker save -o <文件名>.tar <镜像名>:<标签>  # 例如：docker save -o my-app.tar my-app:v1 ‌:ml-citation{ref=\"4,5\" data=\"citationList\"}  \n   ```\n\n2. ‌**在目标服务器导入镜像**‌\n\n   ```bash\n   docker load -i <文件名>.tar  # 从 `.tar` 文件恢复镜像 :ml-citation{ref=\"4,5\" data=\"citationList\"}  \n   ```\n\n------\n\n#### ‌**3. 其他注意事项**‌\n\n- ‌**`docker commit` 的局限性**‌\n\n  - 此方法生成的镜像缺乏构建过程的透明性，难以追溯修改历史，不推荐用于生产环境 ‌23。\n  - 推荐使用 `Dockerfile` 构建标准化镜像，确保可重复性和版本控制 ‌23。\n\n- ‌**多镜像打包**‌\n\n  - 若需打包多个镜像到单个文件，可使用 `docker save` 同时指定多个镜像名：\n\n    ```bash\n    docker save -o all-images.tar image1:v1 image2:v2  # 合并导出多个镜像 :ml-citation{ref=\"7\" data=\"citationList\"}  \n    ```\n\n------\n\n### ‌**操作流程示意图**‌\n\n```bash\n运行中容器 → `docker commit` → 新镜像 → `docker save` → .tar 文件 → 传输 → `docker load` → 目标环境  \n```\n\n通过上述步骤，可快速完成运行中容器的镜像打包与迁移。","tags":["docker","镜像","打包"],"categories":["Docker","打包"]},{"title":"破解cloudflare拦截神器_puppeteer","url":"/2025/02/25/破解cloudflare拦截神器-puppeteer/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>破解cloudflare拦截神器_puppeteer</strong></font>\n\n<!--more-->\n\n### 安装番外：安装node.js环境\n\n#### 安装`nvm`管理器\n\n+ 第1步：mac 安装：\n\n```bash\nbrew install nvm\n```\n\n+ 第2_1步：命令安装：\n\n```bash\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n或\n$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n+ 第2_2步：国内安装\n\n```bash\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n或\n$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n+ 第3步：添加环境\n\n```bash\n# 1、这是本地不存在配置文件的时候提示需要添加的配置\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n\n# 2、这是本地存在配置文件的时候提示需要添加的配置（推荐）\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\n+ 第4步：加载环境：\n\n```bash\nsource ~/.zshrc\n```\n\n+ 第5步：测试安装是否成功\n\n```bash\n$ nvm -v\n或\n$ nvm use system\n```\n\n+ 第6步：`nvm`相关命令\n\n```bash\nnvm install stable\nnvm install <version>     # 安装指定版本 node\nnvm uninstall <version>   # 删除指定版本 node\n\nnvm use <version>         # 切换使用指定的版本 node\nnvm alias default <version>   # 永久版本 - 所有窗口生效指定版本\n\nnvm ls    # 列出所有安装的版本\nnvm ls-remote   # 列出所有远程服务器的版本（官方 node version list）\nnvm current   # 显示当前的版本\nnvm alias <name> <version>   # 给不同的版本号添加别名\nnvm unalias <name>   # 删除已定义的别名\n\nnvm reinstall-packages <version>     # 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包\n```\n\n\n\n### 第一步：安装puppeteer\n\n```bash\nnpm i puppeteer\n```\n\n### 第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth\n\n```bash\nnpm install puppeteer-extra puppeteer-extra-plugin-stealth express\n```\n\n### 第三步：使用nodejs获取数据：\n\n```js\nconst puppeteer = require('puppeteer-extra')\nconst StealthPlugin = require('puppeteer-extra-plugin-stealth')\npuppeteer.use(StealthPlugin())\nconst {executablePath} = require('puppeteer')\n\npuppeteer.launch({ headless: false, executablePath: executablePath() }).then(async browser => {\n    const page = await browser.newPage()\n    await page.goto('https://xxx.com')\n\n    // 使用 Promise 来等待\n    await new Promise(resolve => setTimeout(resolve, 2000))  // 等待 2 秒\n    // 获取页面的文本内容\n    const pageContent = await page.evaluate(() => {\n        return document.body.innerText;  // 获取页面的所有文本\n    });\n\n    // 打印页面文本内容\n    console.log(pageContent);\n    await page.screenshot({ path: 'cointracker_home.png', fullPage: true })\n    await browser.close()\n})\n```\n\n### 第四步：当然你也可以把他写成接口\n\n```\n.....\n```\n\n","tags":["逆向","nodejs","puppeteer","后端"],"categories":["_A7-逆向","puppeteer"]},{"title":"一套JS可逆加密算法，基于crypto-js","url":"/2025/02/21/一套JS可逆加密算法，基于crypto-js/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>一套JS可逆加密算法，基于crypto-js</strong></font>\n\n<!--more-->\n\n在JavaScript中，你可以使用多种方法来实现可逆加密。\n这里是一个简单的例子，使用的是`crypto-js`库的`AES`加密方法。\n\n首先，你需要安装`crypto-js`库。你可以通过`npm`来安装：\n\n### 安装：\n\n```bash\nnpm install crypto-js\n```\n\n然后，你可以使用以下代码来实现AES加密和解密：\n\n```js\nconst CryptoJS = require('crypto-js');  \n  \nfunction encrypt(text, secretKey) {  \n    const key = CryptoJS.enc.Utf8.parse(secretKey);  \n    const iv = CryptoJS.lib.WordArray.create(new ArrayBuffer(16));  \n    const encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(text), key, { iv: iv });  \n    return encrypted.toString();  \n}  \n  \nfunction decrypt(ciphertext, secretKey) {  \n    const key = CryptoJS.enc.Utf8.parse(secretKey);  \n    const iv = CryptoJS.lib.WordArray.create(new ArrayBuffer(16));  \n    const decrypted = CryptoJS.AES.decrypt(ciphertext, key, { iv: iv });  \n    return decrypted.toString(CryptoJS.enc.Utf8);  \n}  \n  \n// 测试代码  \nconst secretKey = 'mySecretKey';  \nconst text = 'Hello, World!';  \nconst encryptedText = encrypt(text, secretKey);  \nconsole.log('Encrypted: ' + encryptedText);  \nconst decryptedText = decrypt(encryptedText, secretKey);  \nconsole.log('Decrypted: ' + decryptedText);\n```\n\n在这个例子中，我们首先导入了`crypto-js`库。然后，我们定义了两个函数：`encrypt`和`decrypt`。\n`encrypt`函数接收一个文本和一个密钥作为参数，并返回加密后的文本。\n`decrypt`函数接收一个密文和一个密钥作为参数，并返回解密后的文本。\n\n注意，这个例子使用了`AES`加密算法，并且使用了相同的密钥进行加密和解密。\n在实际应用中，你应该使用一个安全的密钥管理方法来存储和传输密钥。","tags":["python","逆向","JavaScript"],"categories":["_A7-逆向","JavaScript"]},{"title":"手把手教你搭建Docker私有仓库Harbor","url":"/2025/02/16/手把手教你搭建Docker私有仓库Harbor/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>手把手教你搭建Docker私有仓库Harbor</strong></font>\n\n本文搬运自：[手把手教你搭建Docker私有仓库Harbor - sowler - 博客园](https://www.cnblogs.com/sowler/p/18242819)\n\n<!--more-->\n\n#### 1、什么是Docker私有仓库\n\nDocker私有仓库是用于存储和管理Docker镜像的私有存储库。Docker默认会有一个公共的仓库Docker Hub，而与Docker Hub不同，私有仓库是受限访问的，只有授权用户才能够上传、下载和管理其中的镜像。这种私有仓库可以部署在本地云环境中，用于组织内部开发、测试和生产环境中的容器镜像管理。保证数据安全性。\n\n#### 2、Docker有哪些私有仓库\n\n**以下是一些常见的Docker私有仓库：**\n\n- **Harbor**：作为一个企业级的Docker Registry服务，Harbor提供了安全、可信赖的镜像存储和管理功能。它支持RBAC权限控制、镜像复制、镜像签名、漏洞扫描等功能。\n- **Docker Trusted Registry (DTR)**：由Docker官方推出的企业级Docker私有仓库服务，与Docker Engine紧密集成，支持高度的安全性和可靠性。\n- **Portus**：一个开源的Docker镜像管理和认证服务，提供用户管理、团队管理、镜像审核等功能，与Docker Registry兼容。\n- **Nexus Repository Manager**：虽然主要是用于构建和管理Java组件，但也可以用作Docker私有仓库。它具有强大的存储管理和权限控制功能。\n- **GitLab Container Registry**：GitLab集成了容器注册表功能，允许您存储、管理和分发Docker镜像。这是GitLab自带的功能，无需额外部署。\n- **AWS Elastic Container Registry (ECR)**：如果使用AWS云服务，可以考虑使用AWS ECR作为私有仓库。它与AWS的其他服务集成紧密，对AWS用户来说是一个方便的选择。\n\n本篇使用Harbor搭建Docker私有仓库。\n\n#### 3、Harbor简介\n\nHarbor是一个开源的企业级Docker Registry服务，它提供了一个安全、可信赖的仓库来存储和管理Docker镜像。Harbor翻译为中文名称为\"庇护；居住;\"。可以理解为是Docker镜像的\"居住环境\"或者是镜像的\"庇护所\"。Harbor最初由VMware公司开发，旨在解决企业级Docker镜像管理的安全和可信任性问题。VMware于2016年发布，在2017年，VMware将Harbor开源，这使得更广泛的社区和组织可以自由地使用和贡献代码。Harbor是一个成熟、功能丰富且安全可靠的企业级Docker Registry服务，为企业容器化应用的部署和管理提供了强大的支持。\n\nHarbor官网地址：[Harbor (goharbor.io)](https://goharbor.io/)\n\nGithub开源地址：https://github.com/goharbor/harbor\n\n#### 4、Harbor下载\n\n##### 4.1、通过Linux命令下载\n\n```sh\nwget https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz\n```\n\n##### 4.2、GitHub下载\n\n下载地址：https://github.com/goharbor/harbor/releases 下载离线版本\n\n![img](https://s2.loli.net/2025/02/16/meHfNQrXgctVMnx.png)\n\n下载成功后，把包通过 `xftp` 上传到服务器。\n\n##### 4.3、解压\n\n解压文件\n\n```sh\ntar -zxvf harbor-offline-installer-v2.10.0.tgz \n```\n\n#### 5、启动Harbor\n\n##### 5.1、修改配置文件\n\n复制`harbor.yml.tmpl` 文件并重命名为`harbor.yml`修改此配置文件，需要设置hostname、端口、数据库密码等。\n\n```sh\ncp harbor.yml.tmpl harbor.yml #拷贝\n\nvim harbor.yml\n```\n\n修改配置文件：\n\n```yaml\n#修改hostname的值，如果没有域名就使用本机IP地址\nhostname: 192.168.42.133\n\n#配置启动端口号\n# http related config \nhttp:\n  # port for http, default is 80. If https enabled, this port will redirect to https port\n  port: 5000\n\n# 如果没有申请证书，需要隐藏https\n#https:\n  # https port for harbor, default is 443\n#  port: 443\n  # The path of cert and key files for nginx\n#  certificate: /your/certificate/path\n#  private_key: /your/private/key/path\n\n#启动成功后，admin用户登录密码\n# Remember Change the admin password from UI after launching Harbor.\nharbor_admin_password: AdminHarbor12345\n```\n\n![img](https://s2.loli.net/2025/02/16/uflyIABjz3amckh.png)\n\n##### 5.2、启动\n\n配置文件修改成功后，执行 `install.sh` 脚本进行安装harbor\n\n```sh\n./install.sh \n```\n\n启动报错：\n\n```ABAP\n[Step 0]: checking if docker is installed ...\n\nNote: docker version: 26.1.3\n\n[Step 1]: checking docker-compose is installed ...\n/opt/harbor/common.sh: line 119: docker-compose: command not found\n✖ Failed to parse docker-compose version.\n```\n\n可以看到，该服务器安装的 `docker` 没有安装 `docker-compose` 插件\n\n##### 5.3、安装docker-compose\n\n进入`docker-compose` 官网下载执行文件，地址： https://github.com/docker/compose 下载成功后，把可执行文件加入`Linux` 系统命令目录\n\n```sh\ncp docker-compose-linux-x86_64 /usr/local/bin/\n```\n\n重命名：\n\n```sh\nmv docker-compose-linux-x86_64 docker-compose\n```\n\n授权：\n\n```sh\nchmod +x /usr/local/bin/docker-compose\n```\n\n执行命令查看是否安装成功：\n\n```sh\ndocker-compose --version\n```\n\n如果需要卸载，直接删除即可：\n\n```sh\nrm -f /usr/bin/docker-compose\n```\n\n##### 5.4、再次启动\n\n再次执行 `./install.sh`\n\n![img](https://s2.loli.net/2025/02/16/ilOpYecKCy7wGTZ.png)\n\n提示安装成功。接下来就可以访问Harbor了。访问IP+端口：[http://192.168.42.133:5000](http://192.168.42.133:5000/)\n![img](https://s2.loli.net/2025/02/16/FrRKhnkacDUV8lG.png)\n\n访问成功，由于Harbor是通过docker管理的，所以启动非常方便。如果首页访问成功说明Docker私有仓库已经部署成功了。\n\n#### 6、Harbor Web页面操作说明\n\n默认用户名是admin，密码是启动时设置的密码：`AdminHarbor12345`\n\n![img](https://s2.loli.net/2025/02/16/9SnuUoJsKBzCFpA.png)\n\n登录成功进入主页面了。从系统首页可以看到系统分为三个菜单：项目、日志、系统管理。\n\n##### 6.1、项目\n\n项目管理顾名思义就是用来管理项目的。可以为每一个开发项目创建一个私有项目库，然后把Docker镜像存储到指定的项目中，为每个项目实现项目镜像隔离。创建项目的时候，Harbor提供了公开库（public repository）和私有库（private repository）两种类型的镜像存储空间。\n\n![img](https://s2.loli.net/2025/02/16/F34W9pclPBSkQHa.png)\n\n通过详情信息可以看到：**公开库中的镜像是对所有用户可见和可访问的，任何人都可以查看和拉取其中的镜像。而私有库中的镜像则需要登录才能访问控制，只有被授权的用户或团队才能够查看、拉取和推送镜像。** 可以根据需要创建相关的项目。\n\n![img](https://s2.loli.net/2025/02/16/l1pfKPiZngO9sXW.png)\n\n项目创建成功后，可以点击进入项目。在里面可以为每个项目单独设置不同的配置信息。可以为每一个项目添加成员信息。\n\n![img](https://s2.loli.net/2025/02/16/yBMfu4NG6PHYxdX.png)\n\n角色权限说明：\n\n- **项目管理员（Project Administrator）：**拥有项目的最高权限，可以对项目进行全面管理，包括创建和删除项目、管理项目成员和权限、配置项目属性、查看项目日志等。\n- **维护人员（Maintainer）：**类似于项目管理员，但权限稍低，通常用于协助管理项目，可以进行项目的部分管理操作，如添加和删除镜像、配置镜像的复制和同步规则等。\n- **开发者（Developer）：**具有对项目中镜像仓库的读写权限，可以拉取、推送和删除镜像，以及管理部分项目配置，但不能进行项目管理操作。\n- **访客（Guest）：**只具有对项目中镜像仓库的只读权限，可以查看镜像和元数据，但无法对镜像进行修改或删除操作。通常用于分享项目或镜像给外部团队或用户。\n- **受限访客（Restricted Guest）：**是一种更加受限的访客角色，通常用于提供给外部用户或系统，具有对项目中镜像仓库的只读权限，但可能会限制访问的部分内容或功能。\n\n在右上角显示推送命令，可以通过提示命令进行docker镜像推送。\n\n![img](https://s2.loli.net/2025/02/16/RFEucUsbXL2jYyG.png)\n\n##### 6.2、日志\n\n日志菜单就是记录用户操作日志信息的。\n\n![img](https://s2.loli.net/2025/02/16/B7HKfokDjcG4yNE.png)\n\n##### 6.3、系统管理\n\n系统管理主要用来管理Harbor用户人员信息、镜像仓库的各种配置、权限和系统设置。\n\n![img](https://s2.loli.net/2025/02/16/KfL2ViA7z8JyWvT.png)\n\n#### 7、Docker命令使用私有仓库\n\n##### 7.1、登录\n\n首先登录私有仓库地址：\n\n```sh\ndocker login  -u admin -p AdminHarbor12345 http://192.168.42.133:5000\n```\n\n会报错：\n\n```sh\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nError response from daemon: Get \"https://192.168.42.133:5000/v2/\": proxyconnect tcp: dial tcp 192.168.65.7:3128: connect: connection refused\n```\n\ndocker认为这个地址是不安全的，所以需要在docker守护进程配置文件中把该地址加入安全范围。\n\n```sh\n{\n  \"registry-mirrors\": [\"https://ejes884z.mirror.aliyuncs.com\"],\n  \"log-driver\":\"json-file\",\n  \"log-opts\": {\"max-size\":\"1g\", \"max-file\":\"3\"},\n  \"live-restore\": true,\n  \"insecure-registries\": [\"192.168.42.133:5000\"]\n}\n\n# insecure-registries 不安全的注册表配置一些不安全的地址信息，让Docker认为是安全的。多个地址使用 \",\" 分割\n```\n\n加入配置成功后，再次登录。\n\n```sh\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n```\n\n通过输出发现登录成功。认证信息存储在 `~/.docker/config.json` 文件中，只要登录信息存在，登录会一直生效不需要每次推送拉取之前都登录。\n\n##### 7.2、推送\n\n重新命名镜像名称\n\n```sh\ndocker tag 94543a6c1aef 192.168.42.133:5000/blog_project/nginx:1.26.0\n```\n\n推送\n\n```sh\ndocker push 192.168.42.133:5000/blog_project/nginx:1.26.0\n```\n\n查看Harbor仓库，推送成功。\n\n![img](https://s2.loli.net/2025/02/16/rejyKzPso7aNGOw.png)\n\n##### 7.3、拉取\n\n通过另一台服务器，使用 `docker pull`拉取镜像从私有仓库拉取镜像：\n\n```sh\ndocker pull 192.168.42.133:5000/blog_project/nginx:1.26.0\n```\n\n拉取成功\n\n![img](https://s2.loli.net/2025/02/16/VQRZWvfTwSmdIbj.png)\n\n查看下载数，发现已经更新了。\n\n![img](https://s2.loli.net/2025/02/16/kmbMnuydhpYTw5a.png)\n\n#### 8、总结\n\n关于使用Harbor搭建Docker私有仓库就介绍完毕了，如果大家有兴趣可以查看一下其他搭建方式，然后在它们之间进行对比一下看看那种方式更适合。本篇为入门级Harbor的基础使用，其他功能可以自行研究。","tags":["docker","Harbor"],"categories":["_A5-安装教程","Docker"]},{"title":"在苹果Silicon芯片（M1/M2/M3）Mac电脑上使用Docker","url":"/2025/02/06/在苹果Silicon芯片（M1-M2-M3）Mac电脑上使用Docker/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>在苹果Silicon芯片（M1/M2/M3）Mac电脑上使用Docker</strong></font>\n\n###### 本文搬运自[在苹果Silicon芯片（M1/M2/M3）Mac电脑上使用Docker | 教程 | Tinkink](https://tutorials.tinkink.net/zh-hans/mac/how-to-use-docker-on-m1-mac.html)\n\n<!--more-->\n\n## 背景和困难\n\n苹果于 2020 年正式发布了搭载自研芯片 Apple Silicon 的电脑，随电脑发布的第一款芯片型号为 M1 。这款芯片的架构由经典的 x86 改为了 ARM 架构。\n\n为了解决 CPU 架构变更带来的软件不兼容问题，苹果在 MacOS 中附带了用了转译 APP 代码的 Rosetta 2 。这个软件可以在运行时将 x86 架构的代码转译为 ARM 架构的代码，从而使得大部分软件无缝地运行在搭载新芯片的 MacOS 上。\n\n尽管大部分的软件已经可以在 Apple Silicon （M1/M2/M3）芯片上正常运行，但有一类特殊的软件却一直无法很顺利地运行——虚拟化软件。这包括虚拟机和 Docker 之类的软件。\n\n经典的虚拟机软件如 VirtualBox 明确表示没有支持计划。而 Parallels Desktop 虽然支持，但价格让人望而生畏。\n\n因为 Docker 在非 Linux 系统中实际上也依赖于一个虚拟化的 Linux 作为 Host，因此在虚拟机没有完善的解决方法时，Docker 也是没有办法顺畅运行的。\n\n## 官方方案\n\nDocker Desktop For Mac 提供了可以在 Apple Silicon 芯片上运行的版本，它使用了 QEMU 来处理不同架构的虚拟化问题。但是它对有一定规模的公司不再免费。因此如果你在一个稍具规模的公司，可能不会选择使用 Docker Desktop For Mac。如果你是个人使用，那么 Docker Desktop For Mac 仍然是一个非常不错的解决方案。\n\n## Lima\n\n[Lima](https://github.com/lima-vm/lima) 是一个免费的开源软件，同样使用 QEMU 来处理不同架构的虚拟化问题。和 Docker Desktop For Mac 不同的是，它的容器软件使用的是 Containerd 而不是 Docker。\n\n> 在容器的发展历史中，一开始只有 Docker ，但随后社区希望容器可以标准化，因此诞生了 CRI 标准。Containerd 是一个这个标准的一种实现，Docker 也同样遵守这个标准。因此 Containerd 与 Docker 在使用时几乎可以兼容。\n\n按照官方教程，使用 Homebrew 安装 lima 之后就可以使用了：\n\n```bash\n# 安装\nbrew install lima\n\n# 启动\nlimactl start\n```\n\n此时就可以使用`nerdctl`来进行 Containerd 的各种操作。\n\n```bash\nlima nerdctl run -d --name nginx -p 80:80 nginx:alpine\n```\n\n可以看到，`lima nerdctl`的使用与`docker`几乎一模一样。使用完成后除了将容器关掉外，还可以将虚拟化环境也关闭，以节约内存：\n\n```bash\nlimactl stop\n```\n\nlima 还可以设置非常多虚拟化的细节，也可以设置多个虚拟环境。更多使用细节可查看官方文档：<(https://github.com/lima-vm/lima>\n\n## Colima\n\n[Colima](https://github.com/abiosoft/colima) 是一个基于 Lima 的封装，同样是免费的开源软件，但是它的容器软件使用的是 Docker。\n\nColima 的安装使用也非常简单：\n\n```bash\n# 如果你没有安装过 docker 客户端，需要先安装\nbrew install docker\n# 安装 colima\nbrew install colima\n```\n\n使用时，只需要使用 `colima` 命令即可：\n\n```bash\ncolima start\n```\n\n待启动完成后，就可以正常使用`docker`命令了，不需要额外进行其它的设置。\n\n使用完成后同样可以将虚拟化环境关闭：\n\n```bash\ncolima stop\n```\n\n## OrbStack\n\n\"OrbStack 是在 macOS 上运行 Docker 容器和 Linux 机器的快速、轻量、简单的方式。您可以将其视为超级 WSL 和 Docker Desktop 的 macOS 版本，所有这些都在一个易于使用的应用程序中。\"（来自官方网站。）\n\nOrbStack 提供了一个 GUI 界面来管理 macOS 上的 Docker 容器和 Linux 机器。以及一个命令行界面。\n\n您可以从官方网站下载：https://orbstack.dev/，或使用 Homebrew 安装：\n\n```bash\nbrew install --cask orbstack\n```\n\n```bash\nRunning `brew update --auto-update`...\n\n...\n\n...\n\n==> Caveats\nOpen the OrbStack app to finish setup.\n\n==> Downloading https://cdn-updates.orbstack.dev/arm64/OrbStack_v0.5.1_985_arm64.dmg\n######################################################################## 100.0%\n==> Installing Cask orbstack\n==> Moving App 'OrbStack.app' to '/Applications/OrbStack.app'\n🍺  orbstack was successfully installed!\n```\n\n只需启动 OrbStack，您现在就可以使用 Docker 了。\n\n![OrbStack 的截图](https://tutorials.tinkink.net/assets/01.screenshot-orbstack.a5020e54.png)\n\n## 小结\n\n- Apple Silicon 芯片的 Mac 设备使用 Docker 不是很容易\n- Docker Desktop For Mac 可用，但是对大中型公司收费\n- Lima & Colima 是免费开源的解决方案\n- OrbStack 是一个 GUI 解决方案","tags":["python","mongodb","django","Centos7","数据库"],"categories":["_9-数据库","mongodb"]},{"title":"alibaba3 使用Python管理器pyenv安装python3.13","url":"/2024/12/09/alibaba3安装python3-13/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>alibaba3 使用Python管理器pyenv安装python3.13</strong></font>\n\n<!--more-->\n\n- 使用 `pyenv` 安装 Python 3.12 是一个灵活且方便的方法，它允许你在同一个系统上管理多个 Python 版本。以下是使用 `pyenv` 安装 Python 3.12 的详细步骤：\n\n  ### 1. 安装依赖\n\n  首先，你需要安装一些依赖项，这些依赖项在编译 Python 源代码时是必需的。在 CentOS 7 上，你可以使用 `yum` 来安装这些依赖项：\n\n  ```bash\n  sudo yum install -y gcc zlib-devel bzip2-devel libffi-devel readline-devel sqlite-devel openssl-devel tk-devel xz-devel libffi-devel\n  ```\n\n  ### 2. 安装 pyenv\n\n  接下来，你需要安装 `pyenv`。`pyenv` 是一个用 Bash 编写的脚本，它允许你轻松切换和管理多个 Python 版本。你可以通过以下步骤安装 `pyenv`：\n\n  - 使用 `git` 克隆 `pyenv` 的仓库到你的主目录下（或任何你偏好的位置）：\n\n  ```bash\n  cd ~\n  git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n  ```\n\n  - 将 `pyenv` 初始化脚本添加到你的 shell 配置文件中（如 `~/.bashrc` 或 `~/.bash_profile`）。这将允许你在每个新的 shell 会话中自动加载 `pyenv`：\n\n  ```bash\n  echo 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' >> ~/.bashrc\n  echo 'eval \"$(pyenv init --path)\"' >> ~/.bashrc\n  echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc\n  source ~/.bashrc\n  ```\n\n  ### 3. 安装 Python 3.13\n\n  现在，你可以使用 `pyenv` 来安装 Python 3.13 了：\n\n  ```bash\n  pyenv install 3.13.x  # x 表示小版本号，你可以根据需要安装具体的版本，如 3.13.0\n  ```\n\n  这个命令会从互联网上下载 Python 3.13 的源代码，并在你的系统上编译和安装它。这可能需要一些时间，具体取决于你的网络连接和计算机性能。\n\n  ### 4. 设置全局或本地 Python 版本\n\n  安装完成后，你可以使用以下命令之一来设置全局或本地 Python 版本：\n\n  - 设置全局 Python 版本：\n\n  ```bash\n  pyenv global 3.13.x\n  ```\n\n  这将使 Python 3.12 成为你系统上的默认 Python 版本。\n\n  - 设置当前目录下的 Python 版本（本地版本）：\n\n  ```bash\n  pyenv local 3.13.x\n  ```\n\n  这将在当前目录及其子目录中设置 Python 3.13 为默认版本。当你进入这些目录时，`pyenv` 会自动切换到指定的 Python 版本。\n\n  ### 5. 验证安装\n\n  最后，你可以通过以下命令来验证 Python 3.13 是否已成功安装：\n\n  ```bash\n  python --version\n  ```\n\n  或者，如果你想要确保你正在使用的是通过 `pyenv` 安装的 Python 3.13，你可以使用 `pyenv` 的 `which` 命令来找到 Python 解释器的路径：\n\n  ```bash\n  pyenv which python\n  ```\n\n  如果一切设置正确，这些命令应该会显示 Python 3.13 的版本号或解释器的路径。\n\n  ### 注意事项\n\n  - 在使用 `pyenv` 安装 Python 版本时，确保你的系统已经安装了编译该版本所需的依赖项。\n  - `pyenv` 会在你的主目录下创建一个 `.pyenv` 目录来存储不同版本的 Python。这不会干扰系统默认的 Python 版本。\n  - 如果你在使用 `pyenv` 时遇到任何问题，可以查阅 `pyenv` 的官方文档或在互联网上搜索相关的解决方案。","tags":["pyenv","Python","python3.13"],"categories":["_A5-安装教程","Python"]},{"title":"Centos7-Docker下安装mongodb","url":"/2024/11/11/Centos7-Docker下安装mongodb/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Centos7-Docker下安装mongodb：</strong></font>\n\n<!--more-->\n\n#### Ps：本文参考自：[在centos7上使用 docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本） - 流走在黑夜深巷的猫 - 博客园](https://www.cnblogs.com/Da-Mao/p/17804525.html)\n\n# 在centos7上使用 docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本）\n\n因为博主在使用docker安装mongodb并挂载时，发现在网上搜了好多都是以前版本的mongodb，并且按照他们操作总是在进入mongodb出问题，博主搞了好久终于弄好了，故写下博客，供有需要的的人参考。博主安装和官网有些区别，想看官网快速搭建的——>[Mongodb官网快速指南]<——(https://www.mongodb.com/docs/manual/tutorial/install-mongodb-community-with-docker/ \"Mongodb官网快速指南\")废话不多说开搞！\n\n### 一、安装mongodb\n\n1.1查看版本(不想看版本的，这一步可以跳过)\n\n```sql\ndocker search mongo\n```\n\n![image](https://s2.loli.net/2024/11/11/n2TSfQMmGd7DAeZ.png)\n1.2拉取mongodb镜像\n\n```shell\n# 默认下载最新版本（也就是latest）\ndocker pull mongo\n# 上面也可以写成\ndocker pull mongo:latest\n\n##上面代码不行，提示你没权限，你就按照提示这上面代码前sudo（使用的账户是root权限）\nsudo docker pull mongo\n```\n\n![image](https://s2.loli.net/2024/11/11/UVOw2SyX7qxeRh6.png)\n1.3.查看本地已下载镜像，并查看是否下载mongo镜像\n\n```bash\ndocker image ls -a\n```\n\n![image](https://s2.loli.net/2024/11/11/aW1Iephz8SDJxXM.png)\n1.4.在宿主机上挂载并运行\n\n```powershell\n# 1.4.1首先创建一个要挂载的文件（这里-p后面的文件地址就写你自己想要创建的）\nmkdir -p /data/docker_volume/mongo/data\n\n# 1.4.2.然后运行容器并挂载\n    ## 需要验证\ndocker run -p 27017:27017 --name mymongo -v /data/docker_volume/mongo/data:/data/db -d mongo --auth\n    ##不需要验证\ndocker run -p 27017:27017 --name mymongo -v /data/docker_volume/mongo/data:/data/db -d mongo\n\n# 如果不限制log输出大小， 会一直写下去，最后系统崩溃.  该命令限制log输出大小为 5M\n#  # 设置日志大小限制为 5MB（5 * 1024 * 1024 字节）\ndocker run --restart=always -p 27017:27017 --name mymongo -v /data/docker_volume/mongo/data:/data/db -e MONGO_LOG_MAX_SIZE=5242880 -d mongo --auth\n\n# Mac下部署需要特殊的文件夹权限\ndocker run --restart=always -p 27017:27017 --name mymongo -v /Users/kamala/Docker/MongoDB/s1/data:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -e MONGO_LOG_MAX_SIZE=5242880 --user 1000:50 -d mongo --wiredTigerCacheSizeGB 1 --auth\n#  1.4.3.查看是否运行\ndocker ps -a\n```\n\n在上面的命令中，几个命令参数的详细解释如下：\n`-p` 映射容器服务的 `27017` 端口到宿主机的 `27017` 端口。外部可以直接通过 宿主机` ip:27017` 访问到 `mongo` 的服务\n`-v `为设置容器的挂载目录，这里是将本机的“`/data/docker_volume/mongo/data`”目录挂载到容器中的`/data/db`中，作为 `mongodb` 的存储目录\n`--name` 为设置该容器的名称\n`-d` 设置容器以守护进程方式运行（后台运行）\n`–auth` 需要验证就加，不需要验证，就去掉。默认`mongodb`是不使用用户认证\n![image](https://s2.loli.net/2024/11/11/BKb3wsrdzVeNmpf.png)\n1.5.设置`mongodb`随`docker`自启动（这一步可加可不加，看你个人)\n\n```sql\ndocker update mymongo --restart=always\n```\n\n注意：这里的`mymongo`是容器的名字（上面1.4.2哪里运行容器`--name`后起的名字），不是镜像的名字。\n\n### 二、创建其数据库的用户名和密码\n\n#### ①如果你不需要设置用户和密码，下面就不用看了，直接可以连接`mongo`了（这种就像是裸奔不安全）\n\n#### ②如果你在上面 容器运行挂载选择需验证方式（在1.4.2处）\n\n2.2.1 首先 登录`mymongo`容器，进入`admin`数据库\n\n```bash\ndocker exec -it mymongo mongosh admin\n```\n\n![image](https://s2.loli.net/2024/11/11/QMvnOdIRasP8ZcC.png)\n2.2.2 然后 按照 2.3.4步骤往下走\n\n#### ③其余的就往下看\n\n2.3.1.进入`mongo`容器\n\n```bash\ndocker exec -it mymongo /bin/bash\n```\n\n![image](https://s2.loli.net/2024/11/11/l7MfPw48DsjXqB5.png)\n注意：这里的mymongo是容器的名字，不是镜像的名字。（忘记容器名字，可使用docker ps -a 查看容器名）\n![image](https://s2.loli.net/2024/11/11/kyrz5UoOGif84u7.png)\n2.3.2.进入`mongosh`中\n\n```bash\n# 进入mongo shell\nmongosh\n```\n\n注：`mongosh 6.0`版本之后使用，`mongo 6.0`版本之前使用，博主就是在这里出问题的，博主安装最新`mongodb`版本，但是使用的是 `mongo` 所以一直出现问题：`bash: mongo: command not found`\n![image](https://s2.loli.net/2024/11/11/x7UL5mqQFgT2ICr.png)\n\n![image](https://s2.loli.net/2024/11/11/qYEI7iGAwlKRrBs.png)\n2.3.3.进入`admin`数据库\n\n```perl\nuse admin\n```\n\n![image](https://s2.loli.net/2024/11/11/PJqHpUT7eV9iX1o.png)\n2.3.4 创建一个用户，`mongodb`默认没有用户\n\n```bash\n# 1.这里创建用户名为root，密码为mongo2023，角色（该用户的权限）为root，数据库为admin（你们按照你们自己的设置）\n# 用户名：root，密码：mongo2023，角色：root，数据库：admin\n\ndb.createUser({user:'root',pwd:'mongo2023',roles:[{role:'root',db:'admin'}]})\n\n\n# 2.认证登录db.auth('用户名','密码')，打印1则代表认证通过\ndb.auth('root','mongo2023')\n```\n\n![image](https://s2.loli.net/2024/11/11/qbLpfzJ9Ue5NWYm.png)\n到这里就完成了创建用户和设置密码，如果要退出 Ctrl+D 或者 exit 退出mongodb\n\n### 三、客户端连接mongodb\n\n如果刚才的安装是在服务器上，想远程连接mongodb还请先查看服务器端口27017放行（对外开放这个端口）\n![image](https://s2.loli.net/2024/11/11/OgdTXcSE5Ip6YGW.png)\n\n","tags":["python","mongodb","django","Centos7","数据库"],"categories":["_9-数据库","mongodb"]},{"title":"在Django中使用MySQL(mysqlclient版本)作为数据库","url":"/2024/10/18/在Django中使用MySQL(mysqlclient版本)作为数据库/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>在Django中使用MySQL(mysqlclient版本)作为数据库</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>1、安装库</strong></font>\n\n```\npip3 install mysqlclient\n```\n\n<font color=#b0171f size=2 face=宋体><strong></strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>2、**配置Django的`DATABASES`设置**：</strong></font>\n在你的Django项目的`settings.py`文件中，找到`DATABASES`设置并修改它以使用MySQL。以下是一个示例配置：\n\n```python\nDATABASES = {  \n    'default': {  \n        'ENGINE': 'django.db.backends.mysql',  \n        'NAME': 'your_database_name',  # 数据库名  \n        'USER': 'your_mysql_username',  # MySQL用户名  \n        'PASSWORD': 'your_mysql_password',  # MySQL密码  \n        'HOST': 'localhost',  # 数据库服务器地址  \n        'PORT': '3306',  # 数据库服务器端口（默认是3306）  \n        'OPTIONS': {  \n            'charset': 'utf8mb4',  \n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES';\",  \n        }\n    }  \n}\n```\n\n<font color=red size=5 face=宋体><strong>Error：安装`mysqlclient`报错：</strong></font> \n\n官方指引：https://pypi.org/project/mysqlclient/#:~:text=Building%EE%80%80%20mysqlclient%EE%80%81\n\n```python\n# 说明：缺少必要库，所以安装失败\n\nbrew install mysql-client pkg-config\nexport PKG_CONFIG_PATH=\"$(brew --prefix)/opt/mysql-client/lib/pkgconfig\"\npip install mysqlclient\n```\n\n![image-20241018010930611](https://s2.loli.net/2024/10/18/9sefPiSWAyQRV8b.png)\n\n#### 完成安装\n\n![image-20241018011119528](https://s2.loli.net/2024/10/18/5c6oeQdgWvDRCXV.png)","tags":["python","django","数据库"],"categories":["_9-数据库","mysql"]},{"title":"远程修改-ESXI-8.0-管理ip地址","url":"/2024/08/18/远程修改-ESXI-8-0-管理ip地址/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**远程修改 ESXI 8.0 管理ip地址**</strong></font>\n\n<!--more-->\n\n###  **场景：**\n\n适用于不方便在设备边操作而又需要修改管理地址的场景。\n\n适用于不方便外接显示器的场景。\n\n### **注意：**\n\n生产环境一定确定好网络配置信息否则可能会因为网络配置不正确导致无法正常访问。\n\n### **步骤：**\n\n#### 1.开启SSH远程访问\n\n启用安全 `Shell`（也就是 `EXSi` 可以被 `SSH` 访问的功能）\n\n![img](https://s2.loli.net/2024/08/18/jXvEum9nVrO1aq8.png)\n\n#### 2.\n\n+ 使用 `SecureCRT SSH2` 连接 `ESXi` 主机，现在使用 `dcui` 并没有任何反应，在 `Session` 标签栏右键点击 `Disconnect` 。\n+ 这里我测试用 `Finalshell` 也是完全没问题的\n\n```bash\nThe time and date of this login have been sent to the system logs.\n\nWARNING:\n   All commands run on the ESXi shell are logged and may be included in\n   support bundles. Do not provide passwords directly on the command line.\n   Most tools can prompt for secrets or accept them from standard input.\n\nVMware offers supported, powerful system administration tools.  Please\nsee www.vmware.com/go/sysadmintools for details.\n\nThe ESXi Shell can be disabled by an administrative user. See the\nvSphere Security documentation for more information.\n[root@localhost:~] \n[root@localhost:~] dcui \n```\n\n#### 3.连接到SSH\n\n+ 如果是使用 `Finalshell` 则可省略此步骤\n+ 在 `Session` 标签栏右键点击 `Session Option` 修改 `Terminal` 类型为 `Xterm` 后重新 `SSH2` 连接\n\n![img](https://s2.loli.net/2024/08/18/e7AEdlkaJ4ghpPt.png)\n\n#### **4.使用 `dcui` 工具**\n\n+ 再次使用 `dcui` 工具，这时已经可以进入 `EXSi` 的系统管理界面。\n\n![img](https://s2.loli.net/2024/08/18/MvdVH8r7BLy1Kfs.png)\n\n#### 5.登录到控制中心\n\n+ 点击 `F2` 进行 `Customize System` 输入用户名、密码进入\n\n![img](https://s2.loli.net/2024/08/18/zO1Ehr7yvmHFgcC.png)\n\n#### 6.修改管理IP地址\n\n+ 选择 `Configure Management Network`\n\n![img](https://s2.loli.net/2024/08/18/eyDBxsMbLrXRgHI.png)\n\n#### 7.选择 `IPv4 Configuration`\n\n![img](https://s2.loli.net/2024/08/18/Z45nGUCewczAKby.png)\n\n#### 8.配置静态IP地址，然后点击回车\n\n![img](https://s2.loli.net/2024/08/18/2m6uOn3w5T8WjUh.png)\n\n#### 9.点击 `Esc` 选择 `Yes` 应用配置并且重启管理网络\n\n![img](https://s2.loli.net/2024/08/18/8M4Ichq1xCzebUs.png)\n\n#### 10.此时已近可以用修改后的IP地址登录管理ESXi主机\n\n![img](https://s2.loli.net/2024/08/18/OrPAf7l54TLonhd.png)","tags":["esxi"],"categories":["_A8-工具","esxi"]},{"title":"Arm版-ubuntu-安装-Docker教程","url":"/2024/08/09/Arm版-ubuntu-安装-Docker教程/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Arm版 ubuntu 安装 Docker教程</strong></font>\n\n<!--more-->\n\n如果你想要使用阿里云的Docker源而不是官方的Docker源，你需要修改`add-apt-repository`命令中的URL。阿里云的Docker源可能会提供更快的下载速度，特别是对于位于中国的用户。\n\n以下是使用阿里云Docker源的步骤：\n\n1. **添加阿里云的Docker GPG密钥**：\n\n```bash\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n1. **设置Docker存储库**：\n\n这里你需要替换官方的Docker源URL为阿里云的源URL。注意，阿里云的源可能不包含`[arch=arm64]`这样的架构标识，因为阿里云会根据你访问的源自动提供适合你架构的软件包。\n\n```bash\nsudo add-apt-repository \"deb [arch=arm64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n但是，通常阿里云源会自动处理架构问题，所以你可能不需要指定`[arch=arm64]`。如果不确定，可以先尝试不加架构标识：\n\n```bash\nsudo add-apt-repository \"deb http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n1. **更新软件包索引并安装Docker**：\n\n```bash\nsudo apt-get update  \nsudo apt-get install -y docker-ce docker-ce-cli containerd.io\n```\n\n1. **启动Docker服务**：\n\n```bash\nsudo systemctl start docker  \nsudo systemctl enable docker\n```\n\n1. **测试Docker安装**：\n\n```bash\nbash复制代码\n\ndocker --version\n```\n\n确保在运行这些命令之前，你的系统已经是最新的，并且你已经卸载了任何旧版本的Docker。如果你遇到任何问题，检查你的网络连接，以及确保你使用的命令和源URL是最新的。","tags":["docker","ubuntu","arm","工具"],"categories":["_A5-安装教程","Docker"]},{"title":"内存小于-1G，宝塔面板-9.0.0-无法安装-mysql-解决方法","url":"/2024/08/08/内存小于-1G，宝塔面板-9-0-0-无法安装-mysql-解决方法/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>内存小于 1G，宝塔面板`9.0.0`无法安装`mysql`解决方法</strong></font>\n\n<!--more-->\n\n宝塔官方限制了内存小于`1G`无法安装`mysql`\n\n<font color=#00b2c2 size=5 face=宋体><strong>解决方法：</strong></font>\n\n找到路径：`/www/server/panel/class` 下的 `panelPlugin.py`\n\n![image-20240808124006141](https://s2.loli.net/2024/08/09/XxNRyJokGCQa6e9.png)\n\n定位到>>> 关键字 `limit_list` 将如下注释掉即可\n\n![image-20240808123340813](https://s2.loli.net/2024/08/08/WutVP8LYhXv9rxN.png)","tags":["系统","运维","宝塔"],"categories":["_A3-linux","宝塔面板"]},{"title":"在Django中使用MySQL作为数据库","url":"/2024/06/26/在Django中使用MySQL作为数据库/","content":"\n## <font color=#00b2c2 size=5 face=宋体><strong>在Django中使用MySQL作为数据库：</strong></font>\n\n<!--more-->\n\n在Django中使用MySQL作为数据库，你需要遵循以下步骤来设置你的`DATABASES`配置：\n\n1. **安装MySQL客户端库**：\n   对于Python，你需要安装一个MySQL客户端库，如`mysqlclient`或`PyMySQL`。`mysqlclient`是Django官方推荐的，但它在某些系统上可能难以安装。`PyMySQL`是一个纯Python实现的MySQL客户端，可以作为`mysqlclient`的替代。\n\n   使用pip安装`PyMySQL`（如果你选择使用它）：\n\n   ```bash\n   pip install PyMySQL\n   ```\n   \n   对于`mysqlclient`，安装方法取决于你的操作系统和Python版本。\n\n2. **配置Django的`DATABASES`设置**：\n   在你的Django项目的`settings.py`文件中，找到`DATABASES`设置并修改它以使用MySQL。以下是一个示例配置：\n\n   ```python\n   DATABASES = {  \n       'default': {  \n           'ENGINE': 'django.db.backends.mysql',  \n           'NAME': 'your_database_name',  # 数据库名  \n           'USER': 'your_mysql_username',  # MySQL用户名  \n           'PASSWORD': 'your_mysql_password',  # MySQL密码  \n           'HOST': 'localhost',  # 数据库服务器地址  \n           'PORT': '3306',  # 数据库服务器端口（默认是3306）  \n           'OPTIONS': {  \n               'charset': 'utf8mb4',  \n               'init_command': \"SET sql_mode='STRICT_TRANS_TABLES';\",  \n           },  \n           # 如果你使用的是PyMySQL，你需要添加以下行来告诉Django使用它  \n           # 'OPTIONS': {  \n           #     'init_command': \"SET sql_mode='STRICT_TRANS_TABLES';\",  \n           #     'read_default_file': '/path/to/my.cnf',  # 可选，指向你的MySQL配置文件  \n           #     'charset': 'utf8mb4',  \n           #     'use_unicode': True,  \n           # },  \n           # 'TEST': {  \n           #     'CHARSET': 'utf8mb4',  \n           #     'COLLATION': 'utf8mb4_unicode_ci',  \n           # },  \n       }  \n   }\n   ```\n\n   注意：如果你选择使用`PyMySQL`作为客户端，并且Django版本在3.0之前，你可能需要在`__init__.py`文件中添加一些代码来让Django知道使用`PyMySQL`：\n\n   ```python\n   # 在你的Django应用的__init__.py文件中  \n   import pymysql  \n   pymysql.install_as_MySQLdb()\n   ```\n\n   对于Django 3.0及更高版本，Django默认支持`PyMySQL`，但你可能需要在`DATABASES`设置中添加一个`'NAME': 'mysql.connector.django'`来指定使用它（取决于你是否通过第三方包安装了额外的MySQL连接器）。\n\n3. **创建数据库**：\n   在MySQL中，你需要手动创建数据库（除非你的Django项目在迁移时设置了自动创建）。你可以使用MySQL命令行工具或图形界面工具（如phpMyAdmin、MySQL Workbench等）来创建数据库。\n\n4. **运行迁移**：\n   在Django项目中，使用以下命令来创建和管理数据库表：\n\n   ```bash\n   python manage.py makemigrations  \n   python manage.py migrate\n   ```\n\n   这些命令将基于你的模型（在`models.py`文件中定义）来创建或修改数据库表。\n\n5. **测试连接**：\n   在Django shell或视图中尝试查询数据库以确保连接正常。\n\n6. **（可选）配置MySQL用户权限**：\n   确保你为Django应用创建的MySQL用户有足够的权限来访问和修改数据库。","tags":["python","django","数据库"],"categories":["_9-数据库","mysql"]},{"title":"在CentOS-7上安装Go-1.22","url":"/2024/06/11/在CentOS-7上安装Go-1-22/","content":"\n## <font color=#00b2c2 size=5 face=宋体><strong>在CentOS 7上安装Go 1.22：</strong></font>\n\n<!--more-->\n\n### 在CentOS 7上安装Go 1.22.2的步骤如下：\n\n#### 一、准备工作\n\n1. 确保你的`CentOS 7`系统已经更新到最新状态，可以通过以下命令进行更新：\n\n   ```bash\n   sudo yum update\n   ```\n\n2. 检查系统是否已安装`Go`的旧版本，如果有，则先卸载：\n\n   ```bash\n   sudo yum remove golang\n   ```\n\n#### 二、下载并安装Go 1.22.2\n\n1. 访问Go的官方网站或使用提供的下载链接来获取`Go 1.22.2`的`Linux-amd64`版本。你可以直接通过`wget`命令下载：\n\n   ```bash\n   cd /usr/local/src  \n   wget https://golang.google.cn/dl/go1.22.2.linux-amd64.tar.gz\n   ```\n\n2. 解压下载的Go压缩包到`/usr/local`目录下：\n\n   ```bash\n   sudo tar -zxvf go1.22.2.linux-amd64.tar.gz -C /usr/local/\n   ```\n\n   这将把Go的安装文件解压到`/usr/local/go`目录下。\n\n#### 三、配置环境变量\n\n1. 打开`/etc/profile`文件，并在文件末尾添加以下配置：\n\n   ```bash\n   export GOROOT=/usr/local/go  \n   export PATH=$PATH:$GOROOT/bin  \n   export GOPATH=/opt/go  # 或者你可以设置为其他目录，作为你的工作区  \n   export PATH=$PATH:$GOPATH/bin\n   ```\n\n2. 应用更改：\n\n   ```bash\n   source /etc/profile\n   ```\n\n   或者使用`su -`命令重新登录shell会话。\n\n#### 四、验证安装\n\n1. 在终端中输入`go version`来检查Go的版本：\n\n   ```bash\n   go version\n   ```\n\n   如果安装成功，你应该看到类似于`go version go1.22.2 linux/amd64`的输出。\n\n#### 五、解决依赖下载速度过慢的问题（可选）\n\n如果你的网络环境中Go依赖包的下载速度过慢，你可以设置`GOPROXY`环境变量来使用国内的代理服务器，如`Goproxy.cn`：\n\n```bash\ngo env -w GO111MODULE=on  \ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n\n这样设置后，Go的依赖包将会从指定的代理服务器下载，通常会有更快的下载速度。\n\n以上就是在`CentOS 7`上安装`Go 1.22.2`的详细步骤。请注意，Go的最新版本可能已经更新，但上述步骤对于安装任何版本的Go都是通用的，只需将版本号替换为你要安装的版本即可。","tags":["教程","安装","go"],"categories":["_A5-安装教程","Golang"]},{"title":"centos7-配置连接-OpenVPN教程","url":"/2024/06/11/centos7-配置连接-OpenVPN教程/","content":"\n## <font color=#00b2c2 size=5 face=宋体><strong>CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）</strong></font>\n\n<!--more-->\n\n一般来说，提供Web服务的Linux服务器是很少需要连接`OpenVPN`的，但是个人`Linux`计算机在很多时候就需要连接`OpenVPN`了。比如以`Linux`为开发环境，需要连接公司的`OpenVPN`等等。\n\n本文将以`CentOS`系统为例，介绍在终端下连接远程`OpenVPN`服务的方法。\n\n### 1，安装`OpenVPN`\n\n首先需要安装`OpenVPN`客户端。一般来说直接使用`yum`即可（在`Debian`系中是`apt-get`）。执行如下命令安装：\n\n```bash\n[root@www ~]# yum install openvpn\n```\n\n稍等片刻将自动安装好`openvpn`需要的软件包。安装完成后，应该出现`/etc/openvpn/`文件夹。\n\n### 2，配置OpenVPN\n\n作为客户端，`OpenVPN`并没有特定的配置文件，而是由服务器提供方给出一个配置文件。\n\n对于认证，`OpenVPN`提供了两种认证方法：基于用户名/密码的认证与SSL证书认证。用户名/密码的认证方法无法（或较难）限制一个账号同时连接多个客户端，而采用证书，则可保证同一证书同一时间只能有一个客户端连接。当然，这些都是由服务器端决定的，不需要客户端进行选择。\n首先将`OpenVPN`服务器提供商发给你的配置文件解压，并将所有文件都复制到 `/etc/openvpn/`中。\n这些文件中至少包含一个`.ovpn`文件；如果服务器需要证书认证，则应该还存在另外三个证书文件。\n\n**看懂`OpenVPN`配置格式。下面是一个`.ovpn`配置示例：**\n\n```\nclient\ndev tap\nproto tcp-client\nremote 192.168.135.75 1194\nresolv-retry infinite\nnobind\nmute-replay-warnings\nredirect-gateway\nca /etc/ca.crt\ncert /etc/client.crt\nkey /etc/client.key\ncomp-lzo\nverb 4\n```\n\n一般来说，红色的内容可能需要你进行修改。将红色的内容修改成这三个文件的实际位置。然后保存即可。\n\n### **3，连接OpenVPN**\n\n在配置好.ovpn文件后，执行\n\n```bash\nopenvpn /etc/***.ovpn\n```\n\n即可连接服务器了。注意，上面的参数应该换成你的配置文件实际位置。\n此时，终端会回显很多连接日志。如果连接不成功，则可以通过这些日志来确定出错位置。如果要断开，只需要通过`Ctrl+C`强制终止即可。\n上面的命令在实际中并不方便，因为它要占用一个独立的终端。在测试成功后，使用以下命令即可在后台连接`OpenVPN`：\n\n```bash\nopenvpn /etc/***.ovpn > /dev/null &\n```\n\n值得称赞的是，`openvpn`非常智能，在连接异常中断、无法连接服务器、断网的情况下，它会自动重连。因此，如果希望开机即自动连接`OpenVPN`，或者是`VPN`常年在线，则可将上述命令行加入\n\n```bash\n/etc/rc.local\n```\n\n中。注意，命令末尾的&符号不能省略，否则将可能阻塞系统的正常启动。","tags":["梯子","代理"],"categories":["_A8-工具","梯子"]},{"title":"Centos7安装Python3和升级SQLite高版本","url":"/2024/06/01/Centos7安装Python3和升级SQLite高版本/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>概要：</strong></font>\n\n<!--more-->\n\n编写此文是因为在Linux上跑Django项目时报错：sqlite3.NotSupportedError: deterministic=True requires SQLite 3.8.3 or highe（此时已经安装了python3）。查询之后发现是因为centos上的sqlite3版本过低导致。\n去验证一下：在centos上进入python，可以看到`sqlite3`的版本为`3.7.17`。\n\n```bash\nPython 3.8.12 (default, Jun 21 2019, 00:36:41)\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sqlite3\n>>> sqlite3.sqlite_version\n'3.7.17'\n>>> exit()\n```\n\n### 原因已经找到，下面开始执行。\n\n因为sqlite3是在python3安装时进行连接的，我的云服务器已经安装过了，所以需要卸载，如果还没有安装python3的，可以跳过这一步。\n\n注：此处仅删除python3，尽量别删除原装的python2.7.5，因为centos7有一些命令是依赖2.7.5的。\n\n```\nwhereis python3 |xargs rm -frv   # 此为强制删除，也可以使用yum命令删除\n```\n\n### 二、下载、编译、安装新版`SQLite`\n\n#### 1.下载新版sqlite\n\n注：此处给两种下载方法，都可以使\n\n（1）下载前需要建立一个文件夹，用于放置压缩包。此处选择/home为主目录，可以根据自身习惯更改下载存储地址。\n\n```\nmkdir /root/sqlite3\n```\n\n#### 2.使用wget下载\n\n到SQLite官网的下载页面：https://sqlite.org/download.html 这里是最新的版本。\n\n![在这里插入图片描述](https://s2.loli.net/2024/06/01/cZBAPEHd2DfwgSm.png)\n\n源码有两个文件，选择第二个（`sqlite-autoconf-3420000.tar.gz`），因为这个有配置文件。复制其链接，然后在终端执行：\n\n```bash\ncd /home/tools/sqlite3  #切换到下载路径\nwget https://www.sqlite.org/2024/sqlite-autoconf-3460000.tar.gz  #执行下载\n```\n\n等待下载完毕即可\n\n### 3.本地下载，再上传到云服务器\n\n还是这个网址：https://sqlite.org/download.html ，然后点击（sqlite-autoconf-3420000.tar.gz）直接下载到Windows本地\n\n然后通过electerm的sftp直接上传到/home/tools/sqlite3\n\n上传方式不一，自行选择（Xshell或者Winscp都可)\n### 4.解压\n\n```bash\ntar -zxvf sqlite-autoconf-3420000.tar.gz \n```\n\n解压后可以看到有新的文件夹：sqlite-autoconf-3420000，进入该目录进行sqlite3的编译和安装。\n\n![在这里插入图片描述](https://s2.loli.net/2024/06/01/QRNo3wVPsOFUBeq.png)\n\n```bash\ncd sqlite-autoconf-3420000\n```\n\n### 2.编译和安装\n\n```bash\n# （1）新建安装目录（根据自己习惯选择安装路径）\nmkdir /usr/local/sqlite3.42\n# （2）编译\n./configure --prefix=/usr/local/sqlite3.42/\n# 固定语法，‘–prefix’后接安装路径。结束时提示：Complete!即可\n\n# （3）安装\nmake clean   # 清除缓存\nmake && make install  # 安装\n```\n\n提示：Successfully…即可，否则清除缓存后，重新编译\n\n以上述方式安装后，会把编译好的二进制文件安装到`/usr/local/sqlite3.42/lib`， 把头文件`sqlite3.h sqlite3ext.h`安装到`/usr/local/sqlite3.42/include`，我们需要知道这两个路径。\n\n#### （4）建立软连接（快捷方式）\n\n```bash\ncd /usr/bin   # 切换到bin路径\nls -la sqlite*  # 查看sqlite已经存在的软连接\n若提示：ls: cannot access sqlite*: No such file or directory。则还未建立软连接，直接执行下面的代码，建立软连接即可\nln -s /usr/local/sqlite3.42/bin/sqlite3 /usr/bin/sqlite3\n```\n\n注：其中`/usr/local/sqlite3.42/bin/sqlite3`为sqlite3的安装路径下的bin路径中的sqlite3，`/usr/bin/sqlite3`为固定位置\n\n若显示\n\n![在这里插入图片描述](https://s2.loli.net/2024/06/01/DKIgqOE1vpbc8sk.png)\n\n需要先删除该软连接，再新建\n\n```bash\nrm -rf sqlite3   # 删除\nln -s /usr/local/sqlite3.42/bin/sqlite3 /usr/bin/sqlite3   # 新建\nls -la sqlite*  # 查看软连接\nsqlite3 --version  # 查看版本\n```\n\n最终效果为\n\n![在这里插入图片描述](https://s2.loli.net/2024/06/01/zeOsb495yZ2nRmH.png)\n\n##### （5）配置系统lib库\n\n```bash\necho \"/usr/local/sqlite3.42/lib\" > /etc/ld.so.conf.d/sqlite3.conf\nldconfig\n```\n\n### 三、下载、编译和安装Python3\n\n#### 1.下载\n\n下载方法和sqlite3的下载相似。本文安装的python3.8.12版本，官网地址为：https://www.python.org/ftp/python/3.8.12/\n\n```bash\nmkdir /home/tools/python3    # 新建下载存储路径\ncd /home/tools/python3    # 切换到存储路径\nwget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tar.xz  # 使用wget直接下载\n```\n\n同样的，也可以在本地下载之后，通过ftp上传。\n\n```bash\ntar -zxvf Python-3.8.12.tgz  # 解压\n```\n\n解压之后可以看到多了一个文件夹，直接切换过去\n\n![在这里插入图片描述](https://s2.loli.net/2024/06/01/XrVREg3cFvqDQLl.png)\n\n```\ncd Python-3.8.12/\n```\n\n#### 2.编译安装\n\n##### （1）安装\n\n编译安装之前建议在/usr/local路径下建立安装路径（根据自身习惯选择）\n\n```bash\nmkdir /usr/local/python3\n```\n\n原本python3的编译为下面的方法，但是，没有加参数的默认安装，python会自动导入原版本的sqlite3.7.17，\n\n```bash\ncd /home/tools/python/Python-3.8.12/   # 切换到解压后的路径\n./configure --prefix=/usr/local/python3  # 编译，‘--prefix’后接安装路径\nmake clean   # 清除缓存\nmake && make install   # 安装 \n```\n\n将上述代码修改为:\n\n```bash\ncd /home/tools/python/Python-3.8.12/   # 切换到解压后的路径\n# 编译，‘--prefix’后接安装路径，其中LD_RUN_PATH和LDFLAGS为sqlite3的二进制文件位置路径，CPPFLAGS是头文件的位置路径。上面安装sqlite3时已经提到。\nLD_RUN_PATH=/usr/local/sqlite3.42/lib/ ./configure LDFLAGS=\"-L/usr/local/sqlite3.42/lib\" CPPFLAGS=\"-I/usr/local/sqlite3.42/include\"  --prefix=/usr/local/python3/ --enable-shared --with-ssl\n\nLD_RUN_PATH=/usr/local/sqlite3.42/lib/ make  # 编译时将sqlite3的二进制文件路径添加到动态链接库的搜索路径中\nmake clean   # 清除缓存\nmake && make install  # 安装\n```\n\n##### （2）建立软连接（快捷方式）\n\n建立方法与sqlite3的软连接建立方式相同\n\n```bash\nls -la python*   # 查看python已存在的软连接\n```\n\n一般情况下，如果是新建立的系统，会存在以下三个软连接\n\n![在这里插入图片描述](https://s2.loli.net/2024/06/01/2FJ7YEy9gHd56N8.png)\n\n以上软连接不做更改（因为很多系统命令会依赖python2.7），直接新建一个python3的软连接即可\n\n```\nln -s /usr/local/python3/bin/python3 /usr/bin/python3\n```\n\n最终效果\n\n至此，sqlite3和python3已经安装并且连接好了，可进行如下验证\n\n![在这里插入图片描述](https://s2.loli.net/2024/06/01/KkVGCsJPiF1hAwR.png)\n\n```bash\n[root@iZf8z170cg4zcnds9u2p10Z bin]# python3   # 进入python3\nPython 3.8.12 (default, Jun  5 2023, 16:00:05) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sqlite3\n>>> sqlite3.sqlite_version\n'3.42.0'\n>>>exit()\n```\n\n可以看到，其中python版本为3.8.12，并且python3内的sqlite3版本为3.42.0，升级成功\n","tags":["python","django","SQLite","error"],"categories":["_A5-安装教程","Python"]},{"title":"【爬虫】巧用-js2py-（附带bug解决）","url":"/2024/05/25/【爬虫】巧用-js2py-（附带bug解决）/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>【爬虫】巧用-js2py-（附带bug解决）：</strong></font>\n\n<!--more-->\n\n本文搬运自CSDN：[传送阵](https://blog.csdn.net/sc_lilei/article/details/100122347)\n\n项目地址： https://github.com/PiotrDabkowski/Js2Py\n\n项目介绍：（根据github）此项目完全用Python编写，支持Python2/3。可以在Python中执行JS代码，并获取JS对象值。\n\n目前支持ES5，ES6仍在测试中。\n\n一句话解释：一个纯Python的JS解释器。\n\n推荐指数：四颗星  （博主用过其他的库如execjs, pyv8，多多少少都没有这个库的功能完备）\n\n## 安装：\n\n```python\npip3 install js2py\n```\n\n本文主要介绍js2py的EvalJs对象，因为它是功能最完备的。\n\n\n\n## 1. 执行简单的JS代码\n\n```python\nimport js2py\njs = \"\"\"\n    a =1 \n    b =1\n    function f(x){\n        return x*x\n    }\n    \"\"\"\nctx = js2py.EvalJs()  # 初始化context对象\nctx.execute(js)  # 执行js\nprint(ctx.a)  # >>1   获取js变量\nprint(ctx.f(9))  # >>81  执行js函数\n```\n\n说明：EvalJs对象支持在同一个上下文中执行多次多段js代码，并能通过属性的方式获取js变量，非常好用。\n\n## **2. Python与JS对象交互**\n\n```python\nimport js2py\njs = \"\"\"\n    function f(arg1, arg2){\n        return arg1+arg2\n    }\n    end = f(a,b)\n    \"\"\"\nctx = js2py.EvalJs(context={'a':1, 'b':2})  # 初始化context对象,通过字典形式传入python对象与js交互\nctx.execute(js)  # 执行js\nprint(ctx.end)  # 3\n```\n\n## **3. 在JS代码中引入外部JS库(需要安装nodejs环境)**\n\n```python\nimport js2py\njs = \"\"\"var path = require('path')\n        p=path.join('/foo/bar', 'file')\n        \"\"\"\nctx = js2py.EvalJs(enable_require=True)  # 开启require功能\nctx.execute(js)  # 执行js\nprint(ctx.p)  # /foo/bar/file\njs = \"\"\"p = p+p\"\"\"\nctx.execute(js)  # 执行js\nprint(ctx.p)  # /foo/bar/file/foo/bar/file\n```\n\n关于require在js2py中使用有个bug，会在最后说明。\n\n## **4. Python与JS混编**\n\n```python\nCryptoJS = js2py.require('crypto-js')\ndata = [{'id':1}, {'id':2}]\nJSON = js2py.eval_js('JSON')\n \nciphertext = CryptoJS.AES.encrypt(JSON.stringify(data), 'secret key 123')\nbytes = CryptoJS.AES.decrypt(ciphertext.toString(), 'secret key 123')\ndecryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)).to_list()\n \nprint(decryptedData)  # [{'id':1}, {'id':2}]\n```\n\n## 5. 最后\n\n在对js2py这个库的摸索使用中，发现了不少的问题(bug)，发现作者最后一次处理issue是在2018年11月了，超过20个issue未处理，博主也把遇到的问题提了两个上去，不知道能不能收到回复。\n\n博主修复的bug：在windows 10 上使用这个库执行带有require语句的JS代码时遇到的错误\n\n```python\nCould not link required node_modules\n```\n\n**解决**：经过反复测试与检查，发现是subprocess库在windows上执行shell命令有bug。具体是这样，在Python包安装路径下的js2py/node_import.py的17行有以下代码：\n\n```python\nassert subprocess.call(\n        'cd %s;npm install babel-core babel-cli babel-preset-es2015 babel-polyfill babelify browserify browserify-shim'\n        % repr(DIRNAME),\n        shell=True,\n        cwd=DIRNAME) == 0, 'Could not link required node_modules'\n```\n\n其实这里作者的cd命令是多余的，因为cwd参数已经指定了命令的执行路径，无需再cd进入路径。\n\n除了这里，还要修改这个文件第79行，一样的问题。\n\n最后友情提醒，如果你的环境不能科学上网，你最好修改一下npm的源：\n\n```python\n npm config set registry https://registry.npm.taobao.org\n```\n\n避免网络问题导致不必要的麻烦，因为执行的JS代码依赖外部库时，这个库会在后台执行npm install操作(仅一次)。\n\n**其他：**\n\n因为博主也是搞爬虫的，所有有时会用到这样的库，这次就做一下完整的记录，助己助人。\n\n本博客欢迎留言 :) ","tags":["Js","js2py"],"categories":["_A7-逆向","JavaScript"]},{"title":"网站克隆工具-httrack","url":"/2024/05/24/网站克隆工具-httrack/","content":"\n\n\n## <font color=#00b2c2 size=5 face=宋体><strong>网站克隆工具-httrack：</strong></font>\n\n<!--more-->\n\n本文搬运自[kali-网站克隆工具-httrack_kali克隆网站-CSDN博客](https://blog.csdn.net/qq_32393893/article/details/105049728)\n\n<font color=#f26522 size=4 face=宋体><strong>以下为 kali命令，如果是mac的同学，请自行使用`brew` 替换 `apt-get`即可</strong></font>\n\nHTTrack是一款网站克隆工具，主要用户克隆网站。渗透测试人员可以将目标网站克隆到本地进行查看，包含了所有的页面和离线文件，是可以进行社会工程学攻击，是钓鱼网站的利器。\n\n### 1，安装 \n\n**`sudo apt-get isntall httarck`**\n\n![](https://s2.loli.net/2024/05/24/NputOms3gJha7IB.png)\n\n<font color=#b0171f size=3 face=宋体><strong>（如果已经安装了，就会像上图这样）</strong></font>\n\n### 2，新建一个文件夹放置下载的网站\n\n**`mkdir site`**\n\n![](https://s2.loli.net/2024/05/24/jcJ4LeKEPmY87bi.png)\n\n### 3，切换到新建的文件夹中\n\n**`cd site`**\n\n### 4，启动httrack\n\n**`httrack`**\n\n### 5，进行设置\n\n![](https://s2.loli.net/2024/05/24/Phwa4YpE8u32LVJ.png)\n\n### 6，已经将网站保存在本地了\n\n![](https://s2.loli.net/2024/05/24/CigUqDpQuRf1VvJ.png)\n\n","tags":["工具","克隆","网站"],"categories":["_A8-工具","网站克隆工具"]},{"title":"收藏-常用脚本","url":"/2024/05/11/收藏-常用脚本/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>收藏-常用脚本：</strong></font>\n\n<!--more-->\n\n[Python、Go 打包运行代码 ](https://blog.teadan.com/2024/04/02/Python、Go 打包运行代码/)\n\n[python-虚拟环境包(requirements.txt)的导出与安装 ](https://blog.teadan.com/2024/03/20/python-虚拟环境包(requirements.txt)的导出与安装/)\n\n[Nginx跨域解决方案 ](https://blog.teadan.com/2023/03/20/Nginx跨域解决方案/)\n\n[Django_学习笔记 ](https://blog.teadan.com/2023/05/22/Django-学习笔记/)\n\n[关于Jet Brains历史版本获取 ](https://blog.teadan.com/2023/03/20/关于Jet-Brains历史版本获取/)\n\n[django-跨域支持配置 ](https://blog.teadan.com/2024/03/20/django-跨域支持配置/)\n\n[宝塔部署Django进程守护Supervisor](https://blog.teadan.com/2023/03/20/宝塔部署Django进程守护Supervisor/)\n\n[pip-更换源 ](https://blog.teadan.com/2024/05/01/pip-更换源/)\n\n[必备工具-代码类 ](https://blog.teadan.com/2024/04/24/必备工具-代码类/)\n\n[一键搞定多层跳板访问目标机器 ](https://blog.teadan.com/2024/04/13/一键搞定多层跳板访问目标机器/)\n\n[Shadowsocks 一键安装脚本（四合一） ](https://blog.teadan.com/2024/01/25/Shadowsocks-一键安装脚本（四合一）/)\n\n[必备工具 ](https://blog.teadan.com/2023/07/11/必备工具/)\n\n[centos测网速脚本 ](https://blog.teadan.com/2023/06/13/centos测网速脚本/)\n\n[python 时间格式返回值 ](https://blog.teadan.com/2023/05/27/python-时间格式返回值/)\n\n[ThreadPoolExecutor多线程返回值 ](https://blog.teadan.com/2023/03/20/ThreadPoolExecutor多线程返回值/)\n\n[V2ray官方一键安装脚本(2021/10) ](https://blog.teadan.com/2023/03/20/V2ray官方一键安装脚本-2021-10/)\n\n[m3u8下载协议不在白名单 ](https://blog.teadan.com/2023/03/20/m3u8下载协议不在白名单/)\n","tags":["收藏","常用脚本"],"categories":["_A8-工具","常用脚本"]},{"title":"移动光猫-吉比特 H3-1S H3-2S获取超级密码方法(亲测可用！！)","url":"/2024/04/15/移动光猫-吉比特-H3-1S-H3-2S获取超级密码方法-亲测可用！！/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>**移动光猫-吉比特 H3-1S H3-2S获取超级密码方法**:</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>1.使用光猫背后的普通用户名登录进光猫，浏览器复制以下链接打开</strong></font>\n\n[http://192.168.1.1/usr=CMCCAdmin ... md=1&telnet.gch](http://192.168.1.1/usr=CMCCAdmin&psw=aDm8H%MdA&cmd=1&telnet.gch)\n\n<font color=#f26522 size=4 face=宋体><strong>2.电脑启用 telnet</strong></font>\n\n![开启telnet成功](https://s2.loli.net/2024/05/09/uKpnNMcji45sfxv.png)\n\n<font color=#f26522 size=4 face=宋体><strong>3.通过telnet进入光猫</strong></font>\n\n\n输入：\n\n`telnet 192.168.1.1`\n\n用户名、密码如下：\n`CMCCAdmin`\n`aDm8H%MdA`\n\n<font color=red size=3 face=宋体><strong>注意：密码默认不显示 不需要重复输入</strong></font>\n\n![连接状态](https://s2.loli.net/2024/05/09/4riCBgt57fanybh.png)\n<font color=#f26522 size=4 face=宋体><strong>4.查看一下登陆信息,可以看到账号密码全部进行了加密</strong></font>\n\n```bash\nsidbg 1 DB p DevAuthInfo\n```\n\n输入上面的命令后将会显示下面的内容：\n\n```bash\n<Tbl name=\"DevAuthInfo\" RowCount=\"2\">\n<Row No=\"0\">\n<DM name=\"ViewName\" val=\"IGD.AU1\"/>\n<DM name=\"Enable\" val=\"1\"/>\n<DM name=\"IsOnline\" val=\"0\"/>\n<DM name=\"AppID\" val=\"1\"/>\n<DM name=\"User\" val=\"******\"/>\n<DM name=\"Pass\" val=\"******\"/>\n<DM name=\"Level\" val=\"1\"/>\n<DM name=\"Extra\" val=\"\"/>\n<DM name=\"ExtraInt\" val=\"0\"/>\n</Row>\n<Row No=\"1\">\n<DM name=\"ViewName\" val=\"IGD.AU2\"/>\n<DM name=\"Enable\" val=\"1\"/>\n<DM name=\"IsOnline\" val=\"0\"/>\n<DM name=\"AppID\" val=\"1\"/>\n<DM name=\"User\" val=\"******\"/>\n<DM name=\"Pass\" val=\"******\"/>\n<DM name=\"Level\" val=\"2\"/>\n<DM name=\"Extra\" val=\"\"/>\n<DM name=\"ExtraInt\" val=\"0\"/>\n</Row>\n</Tbl> \n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>5.修改CMCCAdmin用户的登录密码</strong></font>\n\n\n输入下面的命令更改CMCCAdmin的密码：\n\nsidbg 1 DB set DevAuthInfo 0 Pass admin\n\nPass后面是CMCCAdmin的登录密码\n\n再输入下面的命令保存即可\n\n```bash\nsidbg 1 DB save\n```\n\n\n\n完成后即可使用CMCCAdmin+更改后的密码即可登录光猫后台。\n\n祝各位使用愉快！\n","tags":["运维","移动","光猫","超级用户"],"categories":["_S9-折腾","光猫"]},{"title":"一键搞定多层跳板访问目标机器","url":"/2024/04/13/一键搞定多层跳板访问目标机器/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>一、免密码登录ssh</strong></font>\n\n<!--more-->\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、生成钥匙对</strong></font>\n\n  ```bash\n  # 生成key，但首先你得安装ssh\n  ssh-keygen -t rsa -b 2048\n  # 一路按回车换行，终端输出大概是这样\n  # Generating public/private rsa key pair.\n  # Enter file in which to save the key (/home/username/.ssh/id_rsa): \n  # Enter passphrase (empty for no passphrase): \n  # Enter same passphrase again: \n  # Your identification has been saved in /home/username/.ssh/id_rsa.\n  # Your public key has been saved in /home/username/.ssh/id_rsa.pub.\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、将共钥传输给远端主机</strong></font>\n\n  ```bash\n  # id@server 是你的用户名和远端主机地址喔\n  ssh-copy-id id@server\n  # 按规定输入远端主机密码后，成功的话能看到终端输出\n  # Number of key(s) added:        1\n  ```\n\n<font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>公钥储存在远端主机这个文件里：.ssh/authorized_keys，现在当你重新再通过SSH连接到远端主机时，已经不再需要密码啦！</strong></font>\n\n<font color=#00b2c2 size=5 face=宋体><strong>二、使用`跳板`连接到`目标机器`(ProxyJump)</strong></font>\n\n 本节内容参考自：[SSH 通过跳板机直接访问内网机器](https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/07/18/ssh-proxyjump/)、[SSH使用技巧-免密码/自动代理](https://atomlab.org/posts/code/ssh-trick/)\n\n<font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>需要 `OpenSSH 7.3` 以上版本才可以使用 `ProxyJump`, 使用下列命令查看`OpenSSH` 版本：</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、直接命令`临时使用`：</strong></font>\n\n  ```bash\n  ssh -J [email protected]:port1,[email protected]:port2\n  \n  # 可以直接使用上述命令通过跳板机直接登录内网机器，比如：\n  # ssh username@目标机器IP -p 22 -J username@跳板机IP:22\n  # 如果需要通过多个跳板机则以 , 分割：\n  # ssh username@目标机器IP -p 22 -J username1@跳板机IP1:22,username2@跳板机IP2:22\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、长期使用`配置文件`||`~\\.ssh\\config`：</strong></font>\n\n  ```bash\n  Host tiaoban1    # 代表跳板机 1\n      HostName 跳板机 1 的 IP\n      Port 22    # ssh 连接端口\n      User username1    # 跳板机 1 的用户名\n  \n  Host tiaoban2    # 代表跳板机 2\n      HostName 跳板机 2 的 IP\n      Port 22    # ssh 连接端口\n      User username2    # 跳板机 2 的用户名\n  \n  Host target    # 代表目标机器的名字\n      HostName 目标机器 IP    # 这个是目标机器的 IP\n      Port 22    # 目标机器 ssh 的端口\n      User username_target    # 目标机器的用户名\n      ProxyJump tiaoban1,tiaoban2\n  \n  Host 10.10.0.*    # 使用通配符 * 代表 10.10.0.1 - 10.10.0.255\n      Port 22    # 服务器端口\n      User username    # 服务器用户名\n      ProxyJump tiaoban1,tiaoban2\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>3、使用方法：</strong></font>\n\n  ```bash\n  ssh tiaoban1   # 连接到跳板机 1\n  \n  ssh target   # 连接到目标机器\n  ```\n\n<font color=#00b2c2 size=5 face=宋体><strong>三、安装`expect`交互</strong></font>\n\n 本节内容参考自：[Shell脚本交互之：自动输入密码](https://blog.csdn.net/zhangjikuan/article/details/51105166)\n\n<font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>用于与控制台交互，如果上面的内容无法 免密登录服务器，可以用这种方法</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、安装 `expect`：</strong></font>\n\n  ```shell\n  # ubuntu or debian\n  sudo apt-get install expect\n  \n  # centos7\n  yum install expect\n  \n  # mac os  // 没有brew 去搜一下，怎么安装 brew\n  brew install expect\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、语法：</strong></font>\n\n  ```bash\n  #!/usr/bin/expect -f\n  # #!/bin/expect   //原文此处是错误，导致 no such file or directory  正确的写法是 #!/usr/bin/expect -f\n  set timeout 30\n  spawn ssh -l jikuan.zjk 10.125.25.189\n  expect \"password:\"\n  send \"zjk123\\r\"\n  interact\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>3、说明：</strong></font>\n\n  ```\n  在运行脚本时候要expect  file，不能sh file了\n  上面语句第一句是设定超时时间为30s，spawn是expect的语句，执行命令前都要加这句\n  expect \"password：\"这句意思是交互获取是否返回password：关键字，因为在执行ssh时会返回输入password的提示：jikuan.zjk@10.125.25.189's password:\n  send就是将密码zjk123发送过去\n  interact代表执行完留在远程控制台，不加这句执行完后返回本地控制台\n  ```\n\n","tags":["运维","ssh","跳板"],"categories":["_A5-安装教程","SSH"]},{"title":"禹神 Vue3 前端笔记","url":"/2024/02/22/禹神-Vue3-前端笔记/","content":"\n\n\n# 1. Vue3简介\n\n<!--more-->\n\n- 2020年9月18日，`Vue.js`发布版`3.0`版本，代号：`One Piece`（n\n- 经历了：[4800+次提交](https://github.com/vuejs/core/commits/main)、[40+个RFC](https://github.com/vuejs/rfcs/tree/master/active-rfcs)、[600+次PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+)、[300+贡献者](https://github.com/vuejs/core/graphs/contributors)\n- 官方发版地址：[Release v3.0.0 One Piece · vuejs/core](https://github.com/vuejs/core/releases/tag/v3.0.0)\n- 截止2023年10月，最新的公开版本为：`3.3.4`\n\n  <img src=\"https://s2.loli.net/2024/02/22/GLPQrNvRBaWe9Ts.png\" alt=\"image.png\" style=\"zoom:30%;\" /> \n\n## 1.1. 【性能的提升】\n\n- 打包大小减少`41%`。\n\n- 初次渲染快`55%`, 更新渲染快`133%`。\n\n- 内存减少`54%`。\n\n  \n## 1.2.【 源码的升级】\n\n- 使用`Proxy`代替`defineProperty`实现响应式。\n\n- 重写虚拟`DOM`的实现和`Tree-Shaking`。\n\n  \n## 1.3. 【拥抱TypeScript】\n\n- `Vue3`可以更好的支持`TypeScript`。\n\n  \n## 1.4. 【新的特性】\n\n1. `Composition API`（组合`API`）：\n   - `setup`\n   - `ref`与`reactive`\n   - `computed`与`watch`\n   \n     ......\n   \n2. 新的内置组件：\n   - `Fragment`\n   - `Teleport`\n   - `Suspense`\n\n     ......\n\n3. 其他改变：\n   - 新的生命周期钩子\n   - `data` 选项应始终被声明为一个函数\n   - 移除`keyCode`支持作为` v-on` 的修饰符\n\n     ......\n\n\n\n# 2. 创建Vue3工程\n\n## 2.1. 【基于 vue-cli 创建】\n点击查看[官方文档](https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create)\n\n> 备注：目前`vue-cli`已处于维护模式，官方推荐基于 `Vite` 创建项目。\n\n```shell\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n\n## 安装或者升级你的@vue/cli \nnpm install -g @vue/cli\n\n## 执行创建命令\nvue create vue_test\n\n##  随后选择3.x\n##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)\n##  > 3.x\n##    2.x\n\n## 启动\ncd vue_test\nnpm run serve\n```\n\n---\n\n## 2.2. 【基于 vite 创建】(推荐)\n`vite` 是新一代前端构建工具，官网地址：[https://vitejs.cn](https://vitejs.cn/)，`vite`的优势如下：\n\n- 轻量快速的热重载（`HMR`），能实现极速的服务启动。\n- 对 `TypeScript`、`JSX`、`CSS` 等支持开箱即用。\n- 真正的按需编译，不再等待整个应用编译完成。\n- `webpack`构建 与 `vite`构建对比图如下：\n<img src=\"https://s2.loli.net/2024/02/22/Zjp9rwdhWu1zaHK.png\" alt=\"webpack构建\" title=\"webpack构建\" style=\"zoom:20%;box-shadow:0 0 10px black\" />\t<img src=\"https://s2.loli.net/2024/02/22/UmeJz1Hgxk7rOyN.png\" alt=\"vite构建\" title=\"vite构建\" style=\"zoom: 20%;box-shadow:0 0 10px black\" />\n* 具体操作如下（点击查看[官方文档](https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application)）\n\n```shell\n## 1.创建命令\nnpm create vue@latest\n\n## 2.具体配置\n## 配置项目名称\n√ Project name: vue3_test\n## 是否添加TypeScript支持\n√ Add TypeScript?  Yes\n## 是否添加JSX支持\n√ Add JSX Support?  No\n## 是否添加路由环境\n√ Add Vue Router for Single Page Application development?  No\n## 是否添加pinia环境\n√ Add Pinia for state management?  No\n## 是否添加单元测试\n√ Add Vitest for Unit Testing?  No\n## 是否添加端到端测试方案\n√ Add an End-to-End Testing Solution? » No\n## 是否添加ESLint语法检查\n√ Add ESLint for code quality?  Yes\n## 是否添加Prettiert代码格式化\n√ Add Prettier for code formatting?  No\n```\n自己动手编写一个App组件\n\n```html\n<template>\n  <div class=\"app\">\n    <h1>你好啊！</h1>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App' //组件名\n  }\n</script>\n\n<style>\n  .app {\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  }\n</style>\n```\n\n安装官方推荐的`vscode`插件：\n\n<img src=\"https://s2.loli.net/2024/02/22/R1E6rZBwxaFkghs.png\" alt=\"Snipaste_2023-10-08_20-46-34\" style=\"zoom:50%;\" /> \n\n<img src=\"https://s2.loli.net/2024/02/22/tprjsKJVG97YvhI.png\" alt=\"image-20231218085906380\" style=\"zoom:42%;\" /> \n\n总结：\n\n- `Vite` 项目中，`index.html` 是项目的入口文件，在项目最外层。\n- 加载`index.html`后，`Vite` 解析 `<script type=\"module\" src=\"xxx\">` 指向的`JavaScript`。\n- `Vue3`**中是通过 **`createApp` 函数创建一个应用实例。\n## 2.3. 【一个简单的效果】\n\n`Vue3`向下兼容`Vue2`语法，且`Vue3`中的模板中可以没有根标签\n\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App',\n    data() {\n      return {\n        name:'张三',\n        age:18,\n        tel:'13888888888'\n      }\n    },\n    methods:{\n      changeName(){\n        this.name = 'zhang-san'\n      },\n      changeAge(){\n        this.age += 1\n      },\n      showTel(){\n        alert(this.tel)\n      }\n    },\n  }\n</script>\n```\n\n\n# 3. Vue3核心语法\n## 3.1.  【OptionsAPI 与 CompositionAPI】\n\n- `Vue2`的`API`设计是`Options`（配置）风格的。\n- `Vue3`的`API`设计是`Composition`（组合）风格的。\n###  Options API 的弊端\n\n`Options`类型的 `API`，数据、方法、计算属性等，是分散在：`data`、`methods`、`computed`中的，若想新增或者修改一个需求，就需要分别修改：`data`、`methods`、`computed`，不便于维护和复用。\n\n<img src=\"https://s2.loli.net/2024/02/22/kvMuHFr4tSRKGmB.gif\" alt=\"1.gif\" style=\"zoom:70%;border-radius:20px\" /><img src=\"https://s2.loli.net/2024/02/22/lbNcvXTUHEzKe96.gif\" alt=\"2.gif\" style=\"zoom:70%;border-radius:20px\" />\n\n### Composition API 的优势\n\n可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。\n\n<img src=\"https://s2.loli.net/2024/02/22/LVDAY2KZjREvb9F.gif\" alt=\"3.gif\" style=\"height:300px;border-radius:10px\"  /><img src=\"https://s2.loli.net/2024/02/22/hG9SmEjf8d2esDc.gif\" alt=\"4.gif\" style=\"height:300px;border-radius:10px\"  />\n\n> 说明：以上四张动图原创作者：大帅老猿\n\n## 3.2. 【拉开序幕的 setup】\n### setup 概述\n`setup`是`Vue3`中一个新的配置项，值是一个函数，它是 `Composition API` **“表演的舞台**_**”**_，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在`setup`中。\n\n特点如下：\n\n- `setup`函数返回的对象中的内容，可直接在模板中使用。\n- `setup`中访问`this`是`undefined`。\n- `setup`函数会在`beforeCreate`之前调用，它是“领先”所有钩子执行的。\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n    setup(){\n      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name = '张三'\n      let age = 18\n      let tel = '13888888888'\n\n      // 方法，原来写在methods中\n      function changeName(){\n        name = 'zhang-san' //注意：此时这么修改name页面是不变化的\n        console.log(name)\n      }\n      function changeAge(){\n        age += 1 //注意：此时这么修改age页面是不变化的\n        console.log(age)\n      }\n      function showTel(){\n        alert(tel)\n      }\n\n      // 返回一个对象，对象中的内容，模板中可以直接使用\n      return {name,age,tel,changeName,changeAge,showTel}\n    }\n  }\n</script>\n```\n### setup 的返回值\n\n- 若返回一个**对象**：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**\n- 若返回一个**函数**：则可以自定义渲染内容，代码如下：\n```html\nsetup(){\n  return ()=> '你好啊！'\n}\n```\n### setup 与 Options API 的关系\n\n- `Vue2` 的配置（`data`、`methos`......）中**可以访问到** `setup`中的属性、方法。\n- 但在`setup`中**不能访问到**`Vue2`的配置（`data`、`methos`......）。\n- 如果与`Vue2`冲突，则`setup`优先。\n### setup 语法糖\n`setup`函数有一个语法糖，这个语法糖，可以让我们把`setup`独立出去，代码如下：\n\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changName\">修改名字</button>\n    <button @click=\"changAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n  }\n</script>\n\n<!-- 下面的写法是setup语法糖 -->\n<script setup lang=\"ts\">\n  console.log(this) //undefined\n  \n  // 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name = '张三'\n  let age = 18\n  let tel = '13888888888'\n\n  // 方法\n  function changName(){\n    name = '李四'//注意：此时这么修改name页面是不变化的\n  }\n  function changAge(){\n    console.log(age)\n    age += 1 //注意：此时这么修改age页面是不变化的\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n扩展：上述代码，还需要编写一个不写`setup`的`script`标签，去指定组件名字，比较麻烦，我们可以借助`vite`中的插件简化\n\n1. 第一步：`npm i vite-plugin-vue-setup-extend -D`\n2. 第二步：`vite.config.ts`\n```html\nimport { defineConfig } from 'vite'\nimport VueSetupExtend from 'vite-plugin-vue-setup-extend'\n\nexport default defineConfig({\n  plugins: [ VueSetupExtend() ]\n})\n```\n\n3. 第三步：`<script setup lang=\"ts\" name=\"Person\">`\n## 3.3. 【ref 创建：基本类型的响应式数据】\n\n- **作用：**定义响应式变量。\n- **语法：**`let xxx = ref(初始值)`。\n- **返回值：**一个`RefImpl`的实例对象，简称`ref对象`或`ref`，`ref`对象的`value`**属性是响应式的**。\n- **注意点：**\n   - `JS`中操作数据需要：`xxx.value`，但模板中不需要`.value`，直接使用即可。\n   - 对于`let name = ref('张三')`来说，`name`不是响应式的，`name.value`是响应式的。\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Person\">\n  import {ref} from 'vue'\n  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name = ref('张三')\n  let age = ref(18)\n  // tel就是一个普通的字符串，不是响应式的\n  let tel = '13888888888'\n\n  function changeName(){\n    // JS中操作ref对象时候需要.value\n    name.value = '李四'\n    console.log(name.value)\n\n    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    // name = ref('zhang-san')\n  }\n  function changeAge(){\n    // JS中操作ref对象时候需要.value\n    age.value += 1 \n    console.log(age.value)\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n## 3.4. 【reactive 创建：对象类型的响应式数据】\n\n- **作用：**定义一个**响应式对象**（基本类型不要用它，要用`ref`，否则报错）\n- **语法：**`let 响应式对象= reactive(源对象)`。\n- **返回值：**一个`Proxy`的实例对象，简称：响应式对象。\n- **注意点：**`reactive`定义的响应式数据是“深层次”的。\n```html\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { reactive } from 'vue'\n\n// 数据\nlet car = reactive({ brand: '奔驰', price: 100 })\nlet games = reactive([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = reactive({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nfunction changeCarPrice() {\n  car.price += 10\n}\nfunction changeFirstGame() {\n  games[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.a.b.c.d = 999\n}\n</script>\n```\n## 3.5. 【ref 创建：对象类型的响应式数据】\n\n- 其实`ref`接收的数据可以是：**基本类型**、**对象类型**。\n- 若`ref`接收的是对象类型，内部其实也是调用了`reactive`函数。\n```html\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { ref } from 'vue'\n\n// 数据\nlet car = ref({ brand: '奔驰', price: 100 })\nlet games = ref([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = ref({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nconsole.log(car)\n\nfunction changeCarPrice() {\n  car.value.price += 10\n}\nfunction changeFirstGame() {\n  games.value[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.value.a.b.c.d = 999\n}\n</script>\n```\n## 3.6. 【ref 对比 reactive】\n宏观角度看：\n\n> 1. `ref`用来定义：**基本类型数据**、**对象类型数据**；\n>\n> 2. `reactive`用来定义：**对象类型数据**。\n\n- 区别：\n\n> 1. `ref`创建的变量必须使用`.value`（可以使用`volar`插件自动添加`.value`）。\n>\n>    <img src=\"https://s2.loli.net/2024/02/22/OWeGVjZkt341D5h.png\" alt=\"自动补充value\" style=\"zoom:50%;border-radius:20px\" /> \n>\n> 2. `reactive`重新分配一个新对象，会**失去**响应式（可以使用`Object.assign`去整体替换）。\n\n- 使用原则：\n> 1. 若需要一个基本类型的响应式数据，必须使用`ref`。\n> 2. 若需要一个响应式对象，层级不深，`ref`、`reactive`都可以。\n> 3. 若需要一个响应式对象，且层级较深，推荐使用`reactive`。\n\n## 3.7. 【toRefs 与 toRef】\n\n- 作用：将一个响应式对象中的每一个属性，转换为`ref`对象。\n- 备注：`toRefs`与`toRef`功能一致，但`toRefs`可以批量转换。\n- 语法如下：\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{person.name}}</h2>\n    <h2>年龄：{{person.age}}</h2>\n    <h2>性别：{{person.gender}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeGender\">修改性别</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,reactive,toRefs,toRef} from 'vue'\n\n  // 数据\n  let person = reactive({name:'张三', age:18, gender:'男'})\n\t\n  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let {name,gender} =  toRefs(person)\n\t\n  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age = toRef(person,'age')\n\n  // 方法\n  function changeName(){\n    name.value += '~'\n  }\n  function changeAge(){\n    age.value += 1\n  }\n  function changeGender(){\n    gender.value = '女'\n  }\n</script>\n```\n## 3.8. 【computed】\n\n作用：根据已有数据计算出新数据（和`Vue2`中的`computed`作用一致）。\n\n<img src=\"https://s2.loli.net/2024/02/22/vnDHLu7oJBd96tj.gif\" style=\"zoom:20%;\" />  \n\n```html\n<template>\n  <div class=\"person\">\n    姓：<input type=\"text\" v-model=\"firstName\"> <br>\n    名：<input type=\"text\" v-model=\"lastName\"> <br>\n    全名：<span>{{fullName}}</span> <br>\n    <button @click=\"changeFullName\">全名改为：li-si</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"App\">\n  import {ref,computed} from 'vue'\n\n  let firstName = ref('zhang')\n  let lastName = ref('san')\n\n  // 计算属性——只读取，不修改\n  /* let fullName = computed(()=>{\n    return firstName.value + '-' + lastName.value\n  }) */\n\n\n  // 计算属性——既读取又修改\n  let fullName = computed({\n    // 读取\n    get(){\n      return firstName.value + '-' + lastName.value\n    },\n    // 修改\n    set(val){\n      console.log('有人修改了fullName',val)\n      firstName.value = val.split('-')[0]\n      lastName.value = val.split('-')[1]\n    }\n  })\n\n  function changeFullName(){\n    fullName.value = 'li-si'\n  } \n</script>\n```\n## 3.9.【watch】\n\n- 作用：监视数据的变化（和`Vue2`中的`watch`作用一致）\n- 特点：`Vue3`中的`watch`只能监视以下**四种数据**：\n> 1. `ref`定义的数据。\n> 2. `reactive`定义的数据。\n> 3. 函数返回一个值（`getter`函数）。\n> 4. 一个包含上述内容的数组。\n\n我们在`Vue3`中使用`watch`的时候，通常会遇到以下几种情况：\n### * 情况一\n监视`ref`定义的【基本类型】数据：直接写数据名即可，监视的是其`value`值的改变。\n\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况一：监视【ref】定义的【基本类型】数据</h1>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"changeSum\">点我sum+1</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let sum = ref(0)\n  // 方法\n  function changeSum(){\n    sum.value += 1\n  }\n  // 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch = watch(sum,(newValue,oldValue)=>{\n    console.log('sum变化了',newValue,oldValue)\n    if(newValue >= 10){\n      stopWatch()\n    }\n  })\n</script>\n```\n### * 情况二\n监视`ref`定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。\n\n> 注意：\n>\n> * 若修改的是`ref`定义的对象中的属性，`newValue` 和 `oldValue` 都是新值，因为它们是同一个对象。\n>\n> * 若修改整个`ref`定义的对象，`newValue` 是新值， `oldValue` 是旧值，因为不是同一个对象了。\n\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况二：监视【ref】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let person = ref({\n    name:'张三',\n    age:18\n  })\n  // 方法\n  function changeName(){\n    person.value.name += '~'\n  }\n  function changeAge(){\n    person.value.age += 1\n  }\n  function changePerson(){\n    person.value = {name:'李四',age:90}\n  }\n  /* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  */\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  },{deep:true})\n  \n</script>\n```\n### *  情况三\n监视`reactive`定义的【对象类型】数据，且默认开启了深度监视。\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况三：监视【reactive】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n    <hr>\n    <h2>测试：{{obj.a.b.c}}</h2>\n    <button @click=\"test\">修改obj.a.b.c</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18\n  })\n  let obj = reactive({\n    a:{\n      b:{\n        c:666\n      }\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changePerson(){\n    Object.assign(person,{name:'李四',age:80})\n  }\n  function test(){\n    obj.a.b.c = 888\n  }\n\n  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  })\n  watch(obj,(newValue,oldValue)=>{\n    console.log('Obj变化了',newValue,oldValue)\n  })\n</script>\n```\n### * 情况四\n监视`ref`或`reactive`定义的【对象类型】数据中的**某个属性**，注意点如下：\n\n1. 若该属性值**不是**【对象类型】，需要写成函数形式。\n2. 若该属性值是**依然**是【对象类型】，可直接编，也可写成函数，建议写成函数。\n\n结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。\n\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  /* watch(()=> person.name,(newValue,oldValue)=>{\n    console.log('person.name变化了',newValue,oldValue)\n  }) */\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()=>person.car,(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n</script>\n```\n### * 情况五\n监视上述的多个数据\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况五：监视上述的多个数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况五：监视上述的多个数据\n  watch([()=>person.name,person.car],(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n\n</script>\n```\n## 3.10. 【watchEffect】\n\n* 官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。\n\n* `watch`对比`watchEffect`\n\n  > 1. 都能监听响应式数据的变化，不同的是监听数据变化的方式不同\n  >\n  > 2. `watch`：要明确指出监视的数据\n  >\n  > 3. `watchEffect`：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。\n\n* 示例代码：\n\n  ```html\n  <template>\n    <div class=\"person\">\n      <h1>需求：水温达到50℃，或水位达到20cm，则联系服务器</h1>\n      <h2 id=\"demo\">水温：{{temp}}</h2>\n      <h2>水位：{{height}}</h2>\n      <button @click=\"changePrice\">水温+1</button>\n      <button @click=\"changeSum\">水位+10</button>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"Person\">\n    import {ref,watch,watchEffect} from 'vue'\n    // 数据\n    let temp = ref(0)\n    let height = ref(0)\n  \n    // 方法\n    function changePrice(){\n      temp.value += 10\n    }\n    function changeSum(){\n      height.value += 1\n    }\n  \n    // 用watch实现，需要明确的指出要监视：temp、height\n    watch([temp,height],(value)=>{\n      // 从value中获取最新的temp值、height值\n      const [newTemp,newHeight] = value\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(newTemp >= 50 || newHeight >= 20){\n        console.log('联系服务器')\n      }\n    })\n  \n    // 用watchEffect实现，不用\n    const stopWtach = watchEffect(()=>{\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(temp.value >= 50 || height.value >= 20){\n        console.log(document.getElementById('demo')?.innerText)\n        console.log('联系服务器')\n      }\n      // 水温达到100，或水位达到50，取消监视\n      if(temp.value === 100 || height.value === 50){\n        console.log('清理了')\n        stopWtach()\n      }\n    })\n  </script>\n  ```\n  \n  \n\n## 3.11. 【标签的 ref 属性】\n\n作用：用于注册模板引用。\n\n> * 用在普通`DOM`标签上，获取的是`DOM`节点。\n>\n> * 用在组件标签上，获取的是组件实例对象。\n\n用在普通`DOM`标签上：\n\n```html\n<template>\n  <div class=\"person\">\n    <h1 ref=\"title1\">尚硅谷</h1>\n    <h2 ref=\"title2\">前端</h2>\n    <h3 ref=\"title3\">Vue</h3>\n    <input type=\"text\" ref=\"inpt\"> <br><br>\n    <button @click=\"showLog\">点我打印内容</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref} from 'vue'\n\t\n  let title1 = ref()\n  let title2 = ref()\n  let title3 = ref()\n\n  function showLog(){\n    // 通过id获取元素\n    const t1 = document.getElementById('title1')\n    // 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((<HTMLElement>t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t/************************************/\n\t\t\n    // 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  }\n</script>\n```\n\n用在组件标签上：\n\n```html\n<!-- 父组件App.vue -->\n<template>\n  <Person ref=\"ren\"/>\n  <button @click=\"test\">测试</button>\n</template>\n\n<script lang=\"ts\" setup name=\"App\">\n  import Person from './components/Person.vue'\n  import {ref} from 'vue'\n\n  let ren = ref()\n\n  function test(){\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  }\n</script>\n\n\n<!-- 子组件Person.vue中要使用defineExpose暴露内容 -->\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,defineExpose} from 'vue'\n\t// 数据\n  let name = ref('张三')\n  let age = ref(18)\n  /****************************/\n  /****************************/\n  // 使用defineExpose将组件中的数据交给外部\n  defineExpose({name,age})\n</script>\n```\n\n\n\n## 3.12. 【props】\n\n> ```js\n> // 定义一个接口，限制每个Person对象的格式\n> export interface PersonInter {\n> id:string,\n> name:string,\n>  age:number\n> }\n> \n> // 定义一个自定义类型Persons\n> export type Persons = Array<PersonInter>\n> ```\n>\n> `App.vue`中代码：\n>\n> ```html\n> <template>\n> \t<Person :list=\"persons\"/>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"App\">\n> import Person from './components/Person.vue'\n> import {reactive} from 'vue'\n>  import {type Persons} from './types'\n> \n>  let persons = reactive<Persons>([\n>   {id:'e98219e12',name:'张三',age:18},\n>    {id:'e98219e13',name:'李四',age:19},\n>     {id:'e98219e14',name:'王五',age:20}\n>   ])\n> </script>\n> \n> ```\n>\n> `Person.vue`中代码：\n>\n> ```html\n> <template>\n> <div class=\"person\">\n> <ul>\n>   <li v-for=\"item in list\" :key=\"item.id\">\n>      {{item.name}}--{{item.age}}\n>    </li>\n>  </ul>\n> </div>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"Person\">\n> import {defineProps} from 'vue'\n> import {type PersonInter} from '@/types'\n> \n> // 第一种写法：仅接收\n> // const props = defineProps(['list'])\n> \n> // 第二种写法：接收+限制类型\n> // defineProps<{list:Persons}>()\n> \n> // 第三种写法：接收+限制类型+指定默认值+限制必要性\n> let props = withDefaults(defineProps<{list?:Persons}>(),{\n>   list:()=>[{id:'asdasg01',name:'小猪佩奇',age:18}]\n> })\n> console.log(props)\n> </script>\n> ```\n>\n\n## 3.13. 【生命周期】\n\n* 概念：`Vue`组件实例在创建时要经历一系列的初始化步骤，在此过程中`Vue`会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子\n\n* 规律：\n\n  > 生命周期整体分为四个阶段，分别是：**创建、挂载、更新、销毁**，每个阶段都有两个钩子，一前一后。\n\n* `Vue2`的生命周期\n\n  > 创建阶段：`beforeCreate`、`created`\n  >\n  > 挂载阶段：`beforeMount`、`mounted`\n  >\n  > 更新阶段：`beforeUpdate`、`updated`\n  >\n  > 销毁阶段：`beforeDestroy`、`destroyed`\n\n* `Vue3`的生命周期\n\n  > 创建阶段：`setup`\n  >\n  > 挂载阶段：`onBeforeMount`、`onMounted`\n  >\n  > 更新阶段：`onBeforeUpdate`、`onUpdated`\n  >\n  > 卸载阶段：`onBeforeUnmount`、`onUnmounted`\n\n* 常用的钩子：`onMounted`(挂载完毕)、`onUpdated`(更新完毕)、`onBeforeUnmount`(卸载之前)\n\n* 示例代码：\n\n  ```html\n  <template>\n    <div class=\"person\">\n      <h2>当前求和为：{{ sum }}</h2>\n      <button @click=\"changeSum\">点我sum+1</button>\n    </div>\n  </template>\n  \n  <!-- vue3写法 -->\n  <script lang=\"ts\" setup name=\"Person\">\n    import { \n      ref, \n      onBeforeMount, \n      onMounted, \n      onBeforeUpdate, \n      onUpdated, \n      onBeforeUnmount, \n      onUnmounted \n    } from 'vue'\n  \n    // 数据\n    let sum = ref(0)\n    // 方法\n    function changeSum() {\n      sum.value += 1\n    }\n    console.log('setup')\n    // 生命周期钩子\n    onBeforeMount(()=>{\n      console.log('挂载之前')\n    })\n    onMounted(()=>{\n      console.log('挂载完毕')\n    })\n    onBeforeUpdate(()=>{\n      console.log('更新之前')\n    })\n    onUpdated(()=>{\n      console.log('更新完毕')\n    })\n    onBeforeUnmount(()=>{\n      console.log('卸载之前')\n    })\n    onUnmounted(()=>{\n      console.log('卸载完毕')\n    })\n  </script>\n  ```\n\n## 3.14. 【自定义hook】\n\n- 什么是`hook`？—— 本质是一个函数，把`setup`函数中使用的`Composition API`进行了封装，类似于`vue2.x`中的`mixin`。\n\n- 自定义`hook`的优势：复用代码, 让`setup`中的逻辑更清楚易懂。\n\n示例代码：\n\n- `useSum.ts`中内容如下：\n\n  ```html\n  import {ref,onMounted} from 'vue'\n  \n  export default function(){\n    let sum = ref(0)\n  \n    const increment = ()=>{\n      sum.value += 1\n    }\n    const decrement = ()=>{\n      sum.value -= 1\n    }\n    onMounted(()=>{\n      increment()\n    })\n  \n    //向外部暴露数据\n    return {sum,increment,decrement}\n  }\t\t\n  ```\n  \n- `useDog.ts`中内容如下：\n\n  ```js\n  import {reactive,onMounted} from 'vue'\n  import axios,{AxiosError} from 'axios'\n  \n  export default function(){\n    let dogList = reactive<string[]>([])\n  \n    // 方法\n    async function getDog(){\n      try {\n        // 发请求\n        let {data} = await axios.get('https://dog.ceo/api/breed/pembroke/images/random')\n        // 维护数据\n        dogList.push(data.message)\n      } catch (error) {\n        // 处理错误\n        const err = <AxiosError>error\n        console.log(err.message)\n      }\n    }\n  \n    // 挂载钩子\n    onMounted(()=>{\n      getDog()\n    })\n  \t\n    //向外部暴露数据\n    return {dogList,getDog}\n  }\n  ```\n\n- 组件中具体使用：\n\n  ```html\n  <template>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"increment\">点我+1</button>\n    <button @click=\"decrement\">点我-1</button>\n    <hr>\n    <img v-for=\"(u,index) in dogList.urlList\" :key=\"index\" :src=\"(u as string)\"> \n    <span v-show=\"dogList.isLoading\">加载中......</span><br>\n    <button @click=\"getDog\">再来一只狗</button>\n  </template>\n  \n  <script lang=\"ts\">\n    import {defineComponent} from 'vue'\n  \n    export default defineComponent({\n      name:'App',\n    })\n  </script>\n  \n  <script setup lang=\"ts\">\n    import useSum from './hooks/useSum'\n    import useDog from './hooks/useDog'\n  \t\n    let {sum,increment,decrement} = useSum()\n    let {dogList,getDog} = useDog()\n  </script>\n  ```\n\n    \n\n---\n\n# 4. 路由\n\n## 4.1. 【对路由的理解】\n\n<img src=\"https://s2.loli.net/2024/02/22/DwoFp1lznKBvS5R.png\" alt=\"image-20231018144351536\" style=\"zoom:20%;border-radius:40px\" /> \n\n## 4.2. 【基本切换效果】\n\n- `Vue3`中要使用`vue-router`的最新版本，目前是`4`版本。\n\n- 路由配置文件代码如下：\n\n  ```js\n  import {createRouter,createWebHistory} from 'vue-router'\n  import Home from '@/pages/Home.vue'\n  import News from '@/pages/News.vue'\n  import About from '@/pages/About.vue'\n  \n  const router = createRouter({\n  \thistory:createWebHistory(),\n  \troutes:[\n  \t\t{\n  \t\t\tpath:'/home',\n  \t\t\tcomponent:Home\n  \t\t},\n  \t\t{\n  \t\t\tpath:'/about',\n  \t\t\tcomponent:About\n  \t\t}\n  \t]\n  })\n  export default router\n  ```\n* `main.ts`代码如下：\n\n  ```js\n  import router from './router/index'\n  app.use(router)\n  \n  app.mount('#app')\n  ```\n\n- `App.vue`代码如下\n\n  ```html\n  <template>\n    <div class=\"app\">\n      <h2 class=\"title\">Vue路由测试</h2>\n      <!-- 导航区 -->\n      <div class=\"navigate\">\n        <RouterLink to=\"/home\" active-class=\"active\">首页</RouterLink>\n        <RouterLink to=\"/news\" active-class=\"active\">新闻</RouterLink>\n        <RouterLink to=\"/about\" active-class=\"active\">关于</RouterLink>\n      </div>\n      <!-- 展示区 -->\n      <div class=\"main-content\">\n        <RouterView></RouterView>\n      </div>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"App\">\n    import {RouterLink,RouterView} from 'vue-router'  \n  </script>\n  ```\n\n## 4.3. 【两个注意点】\n\n> 1. 路由组件通常存放在`pages` 或 `views`文件夹，一般组件通常存放在`components`文件夹。\n>\n> 2. 通过点击导航，视觉效果上“消失” 了的路由组件，默认是被**卸载**掉的，需要的时候再去**挂载**。\n\n## 4.4.【路由器工作模式】\n\n1. `history`模式\n\n   > 优点：`URL`更加美观，不带有`#`，更接近传统的网站`URL`。\n   >\n   > 缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有`404`错误。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHistory(), //history模式\n   > \t/******/\n   > })\n   > ```\n\n2. `hash`模式\n\n   > 优点：兼容性更好，因为不需要服务器端处理路径。\n   >\n   > 缺点：`URL`带有`#`不太美观，且在`SEO`优化方面相对较差。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHashHistory(), //hash模式\n   > \t/******/\n   > })\n   > ```\n\n## 4.5. 【to的两种写法】\n\n```html\n<!-- 第一种：to的字符串写法 -->\n<router-link active-class=\"active\" to=\"/home\">主页</router-link>\n\n<!-- 第二种：to的对象写法 -->\n<router-link active-class=\"active\" :to=\"{path:'/home'}\">Home</router-link>\n```\n\n## 4.6. 【命名路由】\n\n作用：可以简化路由跳转及传参（后面就讲）。\n\n给路由规则命名：\n\n```js\nroutes:[\n  {\n    name:'zhuye',\n    path:'/home',\n    component:Home\n  },\n  {\n    name:'xinwen',\n    path:'/news',\n    component:News,\n  },\n  {\n    name:'guanyu',\n    path:'/about',\n    component:About\n  }\n]\n```\n\n跳转路由：\n\n```html\n<!--简化前：需要写完整的路径（to的字符串写法） -->\n<router-link to=\"/news/detail\">跳转</router-link>\n\n<!--简化后：直接通过名字跳转（to的对象写法配合name属性） -->\n<router-link :to=\"{name:'guanyu'}\">跳转</router-link>\n```\n\n\n\n## 4.7. 【嵌套路由】\n\n1. 编写`News`的子路由：`Detail.vue`\n\n2. 配置路由规则，使用`children`配置项：\n\n   ```ts\n   const router = createRouter({\n     history:createWebHistory(),\n   \troutes:[\n   \t\t{\n   \t\t\tname:'zhuye',\n   \t\t\tpath:'/home',\n   \t\t\tcomponent:Home\n   \t\t},\n   \t\t{\n   \t\t\tname:'xinwen',\n   \t\t\tpath:'/news',\n   \t\t\tcomponent:News,\n   \t\t\tchildren:[\n   \t\t\t\t{\n   \t\t\t\t\tname:'xiang',\n   \t\t\t\t\tpath:'detail',\n   \t\t\t\t\tcomponent:Detail\n   \t\t\t\t}\n   \t\t\t]\n   \t\t},\n   \t\t{\n   \t\t\tname:'guanyu',\n   \t\t\tpath:'/about',\n   \t\t\tcomponent:About\n   \t\t}\n   \t]\n   })\n   export default router\n   ```\n   \n3. 跳转路由（记得要加完整路径）：\n\n   ```html\n   <router-link to=\"/news/detail\">xxxx</router-link>\n   <!-- 或 -->\n   <router-link :to=\"{path:'/news/detail'}\">xxxx</router-link>\n   ```\n\n4. 记得去`Home`组件中预留一个`<router-view>`\n\n   ```html\n   <template>\n     <div class=\"news\">\n       <nav class=\"news-list\">\n         <RouterLink v-for=\"news in newsList\" :key=\"news.id\" :to=\"{path:'/news/detail'}\">\n           {{news.name}}\n         </RouterLink>\n       </nav>\n       <div class=\"news-detail\">\n         <RouterView/>\n       </div>\n     </div>\n   </template>\n   ```\n\n   \n\n## 4.8. 【路由传参】\n\n### query参数\n\n   1. 传递参数\n\n      ```html\n      <!-- 跳转并携带query参数（to的字符串写法） -->\n      <router-link to=\"/news/detail?a=1&b=2&content=欢迎你\">\n      \t跳转\n      </router-link>\n      \t\t\t\t\n      <!-- 跳转并携带query参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          //name:'xiang', //用name也可以跳转\n          path:'/news/detail',\n          query:{\n            id:news.id,\n            title:news.title,\n            content:news.content\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印query参数\n      console.log(route.query)\n      ```\n\n\n### params参数\n\n   1. 传递参数\n\n      ```html\n      <!-- 跳转并携带params参数（to的字符串写法） -->\n      <RouterLink :to=\"`/news/detail/001/新闻001/内容001`\">{{news.title}}</RouterLink>\n      \t\t\t\t\n      <!-- 跳转并携带params参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          name:'xiang', //用name跳转\n          params:{\n            id:news.id,\n            title:news.title,\n            content:news.title\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印params参数\n      console.log(route.params)\n      ```\n\n> 备注1：传递`params`参数时，若使用`to`的对象写法，必须使用`name`配置项，不能用`path`。\n>\n> 备注2：传递`params`参数时，需要提前在规则中占位。\n\n## 4.9. 【路由的props配置】\n\n作用：让路由组件更方便的收到参数（可以将路由参数作为`props`传给组件）\n\n```js\n{\n\tname:'xiang',\n\tpath:'detail/:id/:title/:content',\n\tcomponent:Detail,\n\n  // props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件\n  // props:{a:1,b:2,c:3}, \n\n  // props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件\n  // props:true\n  \n  // props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件\n  props(route){\n    return route.query\n  }\n}\n```\n\n## 4.10. 【 replace属性】\n\n  1. 作用：控制路由跳转时操作浏览器历史记录的模式。\n\n  2. 浏览器的历史记录有两种写入方式：分别为```push```和```replace```：\n\n     - ```push```是追加历史记录（默认值）。\n     - `replace`是替换当前记录。\n\n  3. 开启`replace`模式：\n\n     ```html\n     <RouterLink replace .......>News</RouterLink>\n     ```\n\n## 4.11. 【编程式导航】\n\n路由组件的两个重要的属性：`$route`和`$router`变成了两个`hooks`\n\n```js\nimport {useRoute,useRouter} from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconsole.log(route.query)\nconsole.log(route.parmas)\nconsole.log(router.push)\nconsole.log(router.replace)\n```\n\n## 4.12. 【重定向】\n\n1. 作用：将特定的路径，重新定向到已有路由。\n\n2. 具体编码：\n\n   ```js\n   {\n       path:'/',\n       redirect:'/about'\n   }\n   ```\n\n\n\n# 5. pinia \n\n## 5.1【准备一个效果】\n\n<img src=\"https://s2.loli.net/2024/02/22/GbKyu4poHJZtgw2.gif\" alt=\"pinia_example\" style=\"zoom:30%;border:3px solid\" /> \n\n## 5.2【搭建 pinia 环境】\n\n第一步：`npm install pinia`\n\n第二步：操作`src/main.ts`\n\n```ts\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n/* 引入createPinia，用于创建pinia */\nimport { createPinia } from 'pinia'\n\n/* 创建pinia */\nconst pinia = createPinia()\nconst app = createApp(App)\n\n/* 使用插件 */{}\napp.use(pinia)\napp.mount('#app')\n```\n\n此时开发者工具中已经有了`pinia`选项\n\n<img src=\"https://s2.loli.net/2024/02/22/avODA9IErUTojih.png\" style=\"zoom:80%;border:1px solid black;border-radius:10px\" />\n\n## 5.3【存储+读取数据】\n\n1. `Store`是一个保存：**状态**、**业务逻辑** 的实体，每个组件都可以**读取**、**写入**它。\n\n2. 它有三个概念：`state`、`getter`、`action`，相当于组件中的： `data`、 `computed` 和 `methods`。\n\n3. 具体编码：`src/store/count.ts`\n\n   ```ts\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useCountStore = defineStore('count',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         sum:6\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n\n4. 具体编码：`src/store/talk.ts`\n\n   ```js\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useTalkStore = defineStore('talk',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         talkList:[\n           {id:'yuysada01',content:'你今天有点怪，哪里怪？怪好看的！'},\n        \t\t{id:'yuysada02',content:'草莓、蓝莓、蔓越莓，你想我了没？'},\n           {id:'yuysada03',content:'心里给你留了一块地，我的死心塌地'}\n         ]\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n   \n5. 组件中使用`state`中的数据\n\n   ```html\n   <template>\n     <h2>当前求和为：{{ sumStore.sum }}</h2>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     // 引入对应的useXxxxxStore\t\n     import {useSumStore} from '@/store/sum'\n     \n     // 调用useXxxxxStore得到对应的store\n     const sumStore = useSumStore()\n   </script>\n   ```\n\n   ```html\n   <template>\n   \t<ul>\n       <li v-for=\"talk in talkStore.talkList\" :key=\"talk.id\">\n         {{ talk.content }}\n       </li>\n     </ul>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     import axios from 'axios'\n     import {useTalkStore} from '@/store/talk'\n   \n     const talkStore = useTalkStore()\n   </script>\n   ```\n\n   \n\n## 5.4.【修改数据】(三种方式)\n\n1. 第一种修改方式，直接修改\n\n   ```ts\n   countStore.sum = 666\n   ```\n\n2. 第二种修改方式：批量修改\n\n   ```ts\n   countStore.$patch({\n     sum:999,\n     school:'atguigu'\n   })\n   ```\n\n3. 第三种修改方式：借助`action`修改（`action`中可以编写一些业务逻辑）\n\n   ```js\n   import { defineStore } from 'pinia'\n   \n   export const useCountStore = defineStore('count', {\n     /*************/\n     actions: {\n       //加\n       increment(value:number) {\n         if (this.sum < 10) {\n           //操作countStore中的sum\n           this.sum += value\n         }\n       },\n       //减\n       decrement(value:number){\n         if(this.sum > 1){\n           this.sum -= value\n         }\n       }\n     },\n     /*************/\n   })\n   ```\n\n4. 组件中调用`action`即可\n\n   ```js\n   // 使用countStore\n   const countStore = useCountStore()\n   \n   // 调用对应action\n   countStore.incrementOdd(n.value)\n   ```\n\n\n## 5.5.【storeToRefs】\n\n- 借助`storeToRefs`将`store`中的数据转为`ref`对象，方便在模板中使用。\n- 注意：`pinia`提供的`storeToRefs`只会将数据做转换，而`Vue`的`toRefs`会转换`store`中数据。\n\n```html\n<template>\n\t<div class=\"count\">\n\t\t<h2>当前求和为：{{sum}}</h2>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Count\">\n  import { useCountStore } from '@/store/count'\n  /* 引入storeToRefs */\n  import { storeToRefs } from 'pinia'\n\n\t/* 得到countStore */\n  const countStore = useCountStore()\n  /* 使用storeToRefs转换countStore，随后解构 */\n  const {sum} = storeToRefs(countStore)\n</script>\n\n```\n\n## 5.6.【getters】\n\n  1. 概念：当`state`中的数据，需要经过处理后再使用时，可以使用`getters`配置。\n\n  2. 追加```getters```配置。\n\n     ```js\n     // 引入defineStore用于创建store\n     import {defineStore} from 'pinia'\n     \n     // 定义并暴露一个store\n     export const useCountStore = defineStore('count',{\n       // 动作\n       actions:{\n         /************/\n       },\n       // 状态\n       state(){\n         return {\n           sum:1,\n           school:'atguigu'\n         }\n       },\n       // 计算\n       getters:{\n         bigSum:(state):number => state.sum *10,\n         upperSchool():string{\n           return this. school.toUpperCase()\n         }\n       }\n     })\n     ```\n\n  3. 组件中读取数据：\n\n     ```js\n     const {increment,decrement} = countStore\n     let {sum,school,bigSum,upperSchool} = storeToRefs(countStore)\n     ```\n\n     \n\n## 5.7.【$subscribe】\n\n通过 store 的 `$subscribe()` 方法侦听 `state` 及其变化\n\n```ts\ntalkStore.$subscribe((mutate,state)=>{\n  console.log('LoveTalk',mutate,state)\n  localStorage.setItem('talk',JSON.stringify(talkList.value))\n})\n```\n\n\n\n## 5.8. 【store组合式写法】\n\n```ts\nimport {defineStore} from 'pinia'\nimport axios from 'axios'\nimport {nanoid} from 'nanoid'\nimport {reactive} from 'vue'\n\nexport const useTalkStore = defineStore('talk',()=>{\n  // talkList就是state\n  const talkList = reactive(\n    JSON.parse(localStorage.getItem('talkList') as string) || []\n  )\n\n  // getATalk函数相当于action\n  async function getATalk(){\n    // 发请求，下面这行的写法是：连续解构赋值+重命名\n    let {data:{content:title}} = await axios.get('https://api.uomg.com/api/rand.qinghua?format=json')\n    // 把请求回来的字符串，包装成一个对象\n    let obj = {id:nanoid(),title}\n    // 放到数组中\n    talkList.unshift(obj)\n  }\n  return {talkList,getATalk}\n})\n```\n\n\n\n# 6. 组件通信\n\n**`Vue3`组件通信和`Vue2`的区别：**\n\n* 移出事件总线，使用`mitt`代替。\n\n- `vuex`换成了`pinia`。\n- 把`.sync`优化到了`v-model`里面了。\n- 把`$listeners`所有的东西，合并到`$attrs`中了。\n- `$children`被砍掉了。\n\n**常见搭配形式：**\n\n<img src=\"https://s2.loli.net/2024/02/22/WZaSR8Mor15mfIT.png\" alt=\"image-20231119185900990\" style=\"zoom:60%;\" /> \n\n## 6.1. 【props】\n\n概述：`props`是使用频率最高的一种通信方式，常用与 ：**父 ↔ 子**。\n\n- 若 **父传子**：属性值是**非函数**。\n- 若 **子传父**：属性值是**函数**。\n\n父组件：\n\n```html\n<template>\n  <div class=\"father\">\n    <h3>父组件，</h3>\n\t\t<h4>我的车：{{ car }}</h4>\n\t\t<h4>儿子给的玩具：{{ toy }}</h4>\n\t\t<Child :car=\"car\" :getToy=\"getToy\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\t// 数据\n\tconst car = ref('奔驰')\n\tconst toy = ref()\n\t// 方法\n\tfunction getToy(value:string){\n\t\ttoy.value = value\n\t}\n</script>\n```\n\n子组件\n\n```html\n<template>\n  <div class=\"child\">\n    <h3>子组件</h3>\n\t\t<h4>我的玩具：{{ toy }}</h4>\n\t\t<h4>父给我的车：{{ car }}</h4>\n\t\t<button @click=\"getToy(toy)\">玩具给父亲</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport { ref } from \"vue\";\n\tconst toy = ref('奥特曼')\n\t\n\tdefineProps(['car','getToy'])\n</script>\n```\n\n## 6.2. 【自定义事件】\n\n1. 概述：自定义事件常用于：**子 => 父。**\n2. 注意区分好：原生事件、自定义事件。\n\n- 原生事件：\n  - 事件名是特定的（`click`、`mosueenter`等等）\t\n  - 事件对象`$event`: 是包含事件相关信息的对象（`pageX`、`pageY`、`target`、`keyCode`）\n- 自定义事件：\n  - 事件名是任意名称\n  - <strong style=\"color:red\">事件对象`$event`: 是调用`emit`时所提供的数据，可以是任意类型！！！</strong >\n\n3. 示例：\n\n   ```html\n   <!--在父组件中，给子组件绑定自定义事件：-->\n   <Child @send-toy=\"toy = $event\"/>\n   \n   <!--注意区分原生事件与自定义事件中的$event-->\n   <button @click=\"toy = $event\">测试</button>\n   ```\n\n   ```js\n   //子组件中，触发事件：\n   this.$emit('send-toy', 具体数据)\n   ```\n\n## 6.3. 【mitt】\n\n概述：与消息订阅与发布（`pubsub`）功能类似，可以实现任意组件间通信。\n\n安装`mitt`\n\n```shell\nnpm i mitt\n```\n\n新建文件：`src\\utils\\emitter.ts`\n\n```javascript\n// 引入mitt \nimport mitt from \"mitt\";\n\n// 创建emitter\nconst emitter = mitt()\n\n/*\n  // 绑定事件\n  emitter.on('abc',(value)=>{\n    console.log('abc事件被触发',value)\n  })\n  emitter.on('xyz',(value)=>{\n    console.log('xyz事件被触发',value)\n  })\n\n  setInterval(() => {\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  }, 1000);\n\n  setTimeout(() => {\n    // 清理事件\n    emitter.all.clear()\n  }, 3000); \n*/\n\n// 创建并暴露mitt\nexport default emitter\n```\n\n接收数据的组件中：绑定事件、同时在销毁前解绑事件：\n\n```typescript\nimport emitter from \"@/utils/emitter\";\nimport { onUnmounted } from \"vue\";\n\n// 绑定事件\nemitter.on('send-toy',(value)=>{\n  console.log('send-toy事件被触发',value)\n})\n\nonUnmounted(()=>{\n  // 解绑事件\n  emitter.off('send-toy')\n})\n```\n\n【第三步】：提供数据的组件，在合适的时候触发事件\n\n```javascript\nimport emitter from \"@/utils/emitter\";\n\nfunction sendToy(){\n  // 触发事件\n  emitter.emit('send-toy',toy.value)\n}\n```\n\n**注意这个重要的内置关系，总线依赖着这个内置关系**\n\n## 6.4.【v-model】\n\n1. 概述：实现 **父↔子** 之间相互通信。\n\n2. 前序知识 —— `v-model`的本质\n\n   ```html\n   <!-- 使用v-model指令 -->\n   <input type=\"text\" v-model=\"userName\">\n   \n   <!-- v-model的本质是下面这行代码 -->\n   <input \n     type=\"text\" \n     :value=\"userName\" \n     @input=\"userName =(<HTMLInputElement>$event.target).value\"\n   >\n   ```\n\n3. 组件标签上的`v-model`的本质：`:moldeValue` ＋ `update:modelValue`事件。\n\n   ```html\n   <!-- 组件标签上使用v-model指令 -->\n   <AtguiguInput v-model=\"userName\"/>\n   \n   <!-- 组件标签上v-model的本质 -->\n   <AtguiguInput :modelValue=\"userName\" @update:model-value=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```html\n   <template>\n     <div class=\"box\">\n       <!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 -->\n   \t\t<!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件-->\n       <input \n          type=\"text\" \n          :value=\"modelValue\" \n          @input=\"emit('update:model-value',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['modelValue'])\n     // 声明事件\n     const emit = defineEmits(['update:model-value'])\n   </script>\n   ```\n\n4. 也可以更换`value`，例如改成`abc`\n\n   ```html\n   <!-- 也可以更换value，例如改成abc-->\n   <AtguiguInput v-model:abc=\"userName\"/>\n   \n   <!-- 上面代码的本质如下 -->\n   <AtguiguInput :abc=\"userName\" @update:abc=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```html\n   <template>\n     <div class=\"box\">\n       <input \n          type=\"text\" \n          :value=\"abc\" \n          @input=\"emit('update:abc',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['abc'])\n     // 声明事件\n     const emit = defineEmits(['update:abc'])\n   </script>\n   ```\n\n5. 如果`value`可以更换，那么就可以在组件标签上多次使用`v-model`\n\n   ```html\n   <AtguiguInput v-model:abc=\"userName\" v-model:xyz=\"password\"/>\n   ```\n\n   \n\n\n## 6.5.【$attrs 】\n\n1. 概述：`$attrs`用于实现**当前组件的父组件**，向**当前组件的子组件**通信（**祖→孙**）。\n\n2. 具体说明：`$attrs`是一个对象，包含所有父组件传入的标签属性。\n\n   >  注意：`$attrs`会自动排除`props`中声明的属性(可以认为声明过的 `props` 被子组件自己“消费”了)\n\n父组件：\n\n```html\n<template>\n  <div class=\"father\">\n    <h3>父组件</h3>\n\t\t<Child :a=\"a\" :b=\"b\" :c=\"c\" :d=\"d\" v-bind=\"{x:100,y:200}\" :updateA=\"updateA\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\tlet a = ref(1)\n\tlet b = ref(2)\n\tlet c = ref(3)\n\tlet d = ref(4)\n\n\tfunction updateA(value){\n\t\ta.value = value\n\t}\n</script>\n```\n\n子组件：\n\n```html\n<template>\n\t<div class=\"child\">\n\t\t<h3>子组件</h3>\n\t\t<GrandChild v-bind=\"$attrs\"/>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport GrandChild from './GrandChild.vue'\n</script>\n```\n\n孙组件：\n\n```html\n<template>\n\t<div class=\"grand-child\">\n\t\t<h3>孙组件</h3>\n\t\t<h4>a：{{ a }}</h4>\n\t\t<h4>b：{{ b }}</h4>\n\t\t<h4>c：{{ c }}</h4>\n\t\t<h4>d：{{ d }}</h4>\n\t\t<h4>x：{{ x }}</h4>\n\t\t<h4>y：{{ y }}</h4>\n\t\t<button @click=\"updateA(666)\">点我更新A</button>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"GrandChild\">\n\tdefineProps(['a','b','c','d','x','y','updateA'])\n</script>\n```\n\n## 6.6. 【$refs、$parent】\n\n1. 概述：\n\n   * `$refs`用于 ：**父→子。**\n   * `$parent`用于：**子→父。**\n\n2. 原理如下：\n\n   | 属性      | 说明                                                     |\n   | --------- | -------------------------------------------------------- |\n   | `$refs`   | 值为对象，包含所有被`ref`属性标识的`DOM`元素或组件实例。 |\n   | `$parent` | 值为对象，当前组件的父组件实例对象。                     |\n\n## 6.7. 【provide、inject】\n\n1. 概述：实现**祖孙组件**直接通信\n\n2. 具体使用：\n\n   * 在祖先组件中通过`provide`配置向后代组件提供数据\n   * 在后代组件中通过`inject`配置来声明接收数据\n\n4. 具体编码：\n\n   【第一步】父组件中，使用`provide`提供数据\n\n   ```html\n   <template>\n     <div class=\"father\">\n       <h3>父组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"money += 1\">资产+1</button>\n       <button @click=\"car.price += 1\">汽车价格+1</button>\n       <Child/>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Father\">\n     import Child from './Child.vue'\n     import { ref,reactive,provide } from \"vue\";\n     // 数据\n     let money = ref(100)\n     let car = reactive({\n       brand:'奔驰',\n       price:100\n     })\n     // 用于更新money的方法\n     function updateMoney(value:number){\n       money.value += value\n     }\n     // 提供数据\n     provide('moneyContext',{money,updateMoney})\n     provide('car',car)\n   </script>\n   ```\n   \n   > 注意：子组件中不用编写任何东西，是不受到任何打扰的\n   \n   【第二步】孙组件中使用`inject`配置项接受数据。\n   \n   ```html\n   <template>\n     <div class=\"grand-child\">\n       <h3>我是孙组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"updateMoney(6)\">点我</button>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"GrandChild\">\n     import { inject } from 'vue';\n     // 注入数据\n    let {money,updateMoney} = inject('moneyContext',{money:0,updateMoney:(x:number)=>{}})\n     let car = inject('car')\n   </script>\n   ```\n\n\n## 6.8. 【pinia】\n\n参考之前`pinia`部分的讲解\n\n## 6.9. 【slot】\n\n### 1. 默认插槽\n\n![img](https://s2.loli.net/2024/02/22/KDmNvArchICu3PF.png)\n\n```html\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <ul>\n            <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n          </ul>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <!-- 默认插槽 -->\n            <slot></slot>\n          </div>\n        </template>\n```\n\n### 2. 具名插槽\n\n```html\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <template v-slot:s1>\n            <ul>\n              <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n            </ul>\n          </template>\n          <template #s2>\n            <a href=\"\">更多</a>\n          </template>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <slot name=\"s1\"></slot>\n            <slot name=\"s2\"></slot>\n          </div>\n        </template>\n```\n\n### 3. 作用域插槽 \n\n1. 理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在`News`组件中，但使用数据所遍历出来的结构由`App`组件决定）\n\n3. 具体编码：\n\n   ```html\n   父组件中：\n         <Game v-slot=\"params\">\n         <!-- <Game v-slot:default=\"params\"> -->\n         <!-- <Game #default=\"params\"> -->\n           <ul>\n             <li v-for=\"g in params.games\" :key=\"g.id\">{{ g.name }}</li>\n           </ul>\n         </Game>\n   \n   子组件中：\n         <template>\n           <div class=\"category\">\n             <h2>今日游戏榜单</h2>\n             <slot :games=\"games\" a=\"哈哈\"></slot>\n           </div>\n         </template>\n   \n         <script setup lang=\"ts\" name=\"Category\">\n           import {reactive} from 'vue'\n           let games = reactive([\n             {id:'asgdytsa01',name:'英雄联盟'},\n             {id:'asgdytsa02',name:'王者荣耀'},\n             {id:'asgdytsa03',name:'红色警戒'},\n             {id:'asgdytsa04',name:'斗罗大陆'}\n           ])\n         </script>\n   ```\n\n\n\n# 7. 其它 API\n\n## 7.1.【shallowRef 与 shallowReactive 】\n\n### `shallowRef`\n\n1. 作用：创建一个响应式数据，但只对顶层属性进行响应式处理。\n\n2. 用法：\n\n   ```js\n   let myVar = shallowRef(initialValue);\n   ```\n\n3. 特点：只跟踪引用值的变化，不关心值内部的属性变化。\n\n### `shallowReactive`\n\n1. 作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的\n\n2. 用法：\n\n   ```js\n   const myObj = shallowReactive({ ... });\n   ```\n\n3. 特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。\n\n### 总结\n\n> 通过使用 [`shallowRef()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref) 和 [`shallowReactive()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive) 来绕开深度响应。浅层式 `API` 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。\n\n\n\n## 7.2.【readonly 与 shallowReadonly】\n\n### **`readonly`**\n\n1. 作用：用于创建一个对象的深只读副本。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const readOnlyCopy = readonly(original);\n   ```\n\n3. 特点：\n\n   * 对象的所有嵌套属性都将变为只读。\n   * 任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。\n\n4. 应用场景：\n   * 创建不可变的状态快照。\n   * 保护全局状态或配置不被修改。\n\n### **`shallowReadonly`**\n\n1. 作用：与 `readonly` 类似，但只作用于对象的顶层属性。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const shallowReadOnlyCopy = shallowReadonly(original);\n   ```\n\n3. 特点：\n\n   * 只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。\n\n   * 适用于只需保护对象顶层属性的场景。\n\n     \n\n## 7.3.【toRaw 与 markRaw】\n\n### `toRaw`\n\n1. 作用：用于获取一个响应式对象的原始对象， `toRaw` 返回的对象不再是响应式的，不会触发视图更新。\n\n   > 官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。\n\n   > 何时使用？ —— 在需要将响应式对象传递给非 `Vue` 的库或外部系统时，使用 `toRaw` 可以确保它们收到的是普通对象\n\n2. 具体编码：\n\n   ```js\n   import { reactive,toRaw,markRaw,isReactive } from \"vue\";\n   \n   /* toRaw */\n   // 响应式对象\n   let person = reactive({name:'tony',age:18})\n   // 原始对象\n   let rawPerson = toRaw(person)\n   \n   \n   /* markRaw */\n   let citysd = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   console.log(isReactive(person))\n   console.log(isReactive(rawPerson))\n   console.log(isReactive(citys))\n   console.log(isReactive(citys2))\n   ```\n\n### `markRaw`\n\n1. 作用：标记一个对象，使其**永远不会**变成响应式的。\n\n   > 例如使用`mockjs`时，为了防止误把`mockjs`变为响应式对象，可以使用 `markRaw` 去标记`mockjs`\n\n2. 编码：\n\n   ```js\n   /* markRaw */\n   let citys = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   ```\n\n## 7.4.【customRef】\n\n作用：创建一个自定义的`ref`，并对其依赖项跟踪和更新触发进行逻辑控制。\n\n实现防抖效果（`useSumRef.ts`）：\n\n```typescript\nimport {customRef } from \"vue\";\n\nexport default function(initValue:string,delay:number){\n  let msg = customRef((track,trigger)=>{\n    let timer:number\n    return {\n      get(){\n        track() // 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新\n        return initValue\n      },\n      set(value){\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n          initValue = value\n          trigger() //通知Vue数据msg变化了\n        }, delay);\n      }\n    }\n  }) \n  return {msg}\n}\n```\n\n组件中使用：\n\n\n\n\n\n# 8. Vue3新组件\n\n## 8.1. 【Teleport】\n\n- 什么是Teleport？—— Teleport 是一种能够将我们的**组件html结构**移动到指定位置的技术。\n\n```html\n<teleport to='body' >\n    <div class=\"modal\" v-show=\"isShow\">\n      <h2>我是一个弹窗</h2>\n      <p>我是弹窗中的一些内容</p>\n      <button @click=\"isShow = false\">关闭弹窗</button>\n    </div>\n</teleport>\n```\n\n## 8.2. 【Suspense】\n\n-  等待异步组件时渲染一些额外内容，让应用有更好的用户体验 \n-  使用步骤： \n   -  异步引入组件\n   -  使用`Suspense`包裹组件，并配置好`default` 与 `fallback`\n\n```tsx\nimport { defineAsyncComponent,Suspense } from \"vue\";\nconst Child = defineAsyncComponent(()=>import('./Child.vue'))\n```\n\n```html\n<template>\n    <div class=\"app\">\n        <h3>我是App组件</h3>\n        <Suspense>\n          <template v-slot:default>\n            <Child/>\n          </template>\n          <template v-slot:fallback>\n            <h3>加载中.......</h3>\n          </template>\n        </Suspense>\n    </div>\n</template>\n```\n\n\n\n## 8.3.【全局API转移到应用对象】\n\n- `app.component`\n- `app.config`\n- `app.directive`\n- `app.mount`\n- `app.unmount`\n- `app.use`\n\n## 8.4.【其他】\n\n- 过渡类名 `v-enter` 修改为 `v-enter-from`、过渡类名 `v-leave` 修改为 `v-leave-from`。\n\n\n- `keyCode` 作为 `v-on` 修饰符的支持。\n\n- `v-model` 指令在组件上的使用已经被重新设计，替换掉了 `v-bind.sync。`\n\n- `v-if` 和 `v-for` 在同一个元素身上使用时的优先级发生了变化。\n\n- 移除了`$on`、`$off` 和 `$once` 实例方法。\n\n- 移除了过滤器 `filter`。\n\n- 移除了`$children` 实例 `propert`。\n\n  ......\n","tags":["学习笔记","vue3.0"],"categories":["_A2-前端","vue3.0"]},{"title":"CentOS 7 编译安装 Python 3.12.0_CentOS7升级Python3","url":"/2024/02/16/CentOS-7-编译安装-Python-3-12-0-CentOS7升级Python3/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>CentOS 7 编译安装 Python 3.12.0_CentOS7</strong></font>\n\n<!--more-->\n\n## <font color=#f26522 size=5 face=宋体><strong>前言</strong></font>\n\n### <font color=#00b2c2 size=4 face=宋体><strong>本文主旨</strong></font>\n\n+ 原本 CentOS 7 下通过 Yum 安装的 Python3 版本为 3.6。由于版本太低，不满足一些应用程序对 Python 版本的最低要求。\n\n+ 因此，本文要在 CentOS 7 以编译安装的方式升级 Python 的版本到当前（2023-12）的最新版本—— Python 3.12.0。\n\n+ 因为 CentOS 7 原先的 OpenSSL 版本太旧，不满足高版本 Python 编译安装的最低要求，因而要先升级 OpenSSL 版本到 v1.1.1x，同样是通过编译的方式。\n\n+ 要安装高版本的软件，最好先升级 GCC 的版本，本文将升级 GCC 工具包到 v11。\n\n+ 所有 Python 源代码存档于：https://www.python.org/ftp/python/\n\n### <font color=#00b2c2 size=4 face=宋体><strong>什么是 Python</strong></font>\n\n+ **Python** 是一种广泛使用的解释型的高级且通过的计算机编程语言。\n\n### <font color=#00b2c2 size=4 face=宋体><strong>Python 的特点</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>**python** 有以下的特点：</strong></font>\n\n+ 1. 它同时支持结构化、过程式、反射式、面向对象函数式编程。\n+ 2. 它是动态的脚本编程语言，并具有垃圾回收功能，能够自动管理内存的使用。\n+ 3. 它简洁的语法能够让开发者以更少更清晰的代码来表达想法；\n+ 4. Python 代码使用空格缩进而非符号的方式来区分代码块，这使得用它写的代码相比之下更具有可读性；\n+ 5. Python 若有极强的跨平台能力，可在几乎所有的操作系统中使用；\n+ 6. Python 是自由的开源的且由社群驱动的软件，目前由 “Pyhton 软件基金会” 管理；\n+ 7. Python 是近年来最受欢迎的编程语言之一，当前（2023年12月），它以近 15% 的市场占有率在世界排名第一，碾压 C语言、CPP 和 Java 等传统受欢迎的编程语言。\n\n以上资料来源于网上。\n\n![CentOS 7 升级 Python 3.12.0](https://s2.loli.net/2024/02/16/bw9PR8FTEVGf1Ax.png)\n\n## <font color=#00b2c2 size=5 face=宋体><strong>升级 GCC</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>安装开发工具包</strong></font>\n\n首先要安装 CentOS 7 的开发工具包，以免到时覆盖掉新的 GCC 可执行文件。\n\n```shell\nyum update -y\nyum group install -y \"development tools\"\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>安装 GCC-11</strong></font>\n\n```bash\nyum update -y\nyum install -y centos-release-scl\nyum install -y devtoolset-11\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>启用 GCC-11 相关的组件</strong></font>\n\n```bash\ncat /etc/bashrc | grep -i \"/opt/rh/devtoolset-11/enable\"\n\nif [ $? -gt 0  ]; then\n    echo \"source /opt/rh/devtoolset-11/enable\" >>/etc/bashrc\nfi\nsource /etc/bashrc\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>创建软链接到系统可执行目录</strong></font>\n\n```bash\nln -vsf /opt/rh/devtoolset-11/root/bin/* /usr/bin/\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>检验 GCC-11 是否安装成功</strong></font>\n\n```bash\n/usr/bin/gcc --version | grep \"gcc (GCC) 11.\"\ncode=$?\n\nif [ $code -gt 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++GCC-11 安装失败！\"\n    echo \"错误码： $code\"\nelse\n    echo \"+++++++++++++++++++++++++++++++++GCC-11 安装成功！\"\nfi\n```\n\n## <font color=#f26522 size=4 face=宋体><strong>升级 OpenSSL 到 1.1.1</strong></font>\n\n由于当前的 OpenSSL v1.1.1 最高版本是 v1.1.1w，于是便安装这个。\n\n最新版在右边链接的网页： https://ftp.openssl.org/source/。\n\n### <font color=#f26522 size=4 face=宋体><strong>安装 OpenSSL 编译要求的依赖</strong></font>\n\n```bash\nyum install -y wget zlib-devel perl-IPC-Cmd perl-Test-Simple\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>设定一个变量，用来安放 OpenSSL 新版本名称</strong></font>\n\n一定要执行这一步，因为这关系到后面下载和文件目录的名字。\n\n```bash\nOPENSSL_VER=1.1.1w\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>进入 /tmp 目录</strong></font>\n\n以后的操作均在此目录及其子目录进行。\n\n```bash\ncd /tmp\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>下载最新版本的 OpenSSL 源代码</strong></font>\n\n```bash\n# 下载可能很慢，甚至会超时\n# 这时可以删除原文件，再重新下载\nwget https://ftp.openssl.org/source/openssl-${OPENSSL_VER}.tar.gz\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>解压缩和进入源码目录</strong></font>\n\n```bash\ntar zxf openssl-${OPENSSL_VER}.tar.gz\ncode=$?\n\nif [ $code -gt 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++OpenSSL 源码压缩包解压失败！\"\n    echo \"错误代码： $code\"\nelse\n    cd openssl-${OPENSSL_VER}/\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>配置和编译</strong></font>\n\n```bash\n./config --prefix=/usr/local/openssl-${OPENSSL_VER} --openssldir=/etc/ssl-${OPENSSL_VER} shared zlib\ncode=$?\n\nif [ $code -gt 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++配置源码失败！\"\n    echo \"错误代码: $code\"\nelse\n    echo \"+++++++++++++++++++++++++++++++++开始编译 OpenSSL v${OPENSSL_VER}\"\n    make -j2\n    code=$?\n    if [ $code -gt 0 ]; then\n        echo \"+++++++++++++++++++++++++++++++++编译 OpenSSL 失败！\"\n        echo \"错误代码: $code\"\n    else\n        echo \"+++++++++++++++++++++++++++++++++编译 OpenSSL 成功！\"\n    fi\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>安装 OpenSSL</strong></font>\n\n编译成功后的一步是执行安装命令：\n\n```bash\nif [ $code -eq 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++开始安装 OpenSSL v${OPENSSL_VER}\"\n    make install\n    code=$?\n    if [ $code -gt 0 ]; then\n        echo \"+++++++++++++++++++++++++++++++++OpenSSL v${OPENSSL_VER} 安装失败！\"\n        echo \"错误代码： $code\"\n    else\n        echo \"+++++++++++++++++++++++++++++++++成功安装 OpenSSL v${OPENSSL_VER}！\"\n    fi\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>将新安装的 OpenSSL 库文件目录路径放进系统中</strong></font>\n\n```bash\nif [ $code -eq 0 ]; then\n    bash -c \"echo '/usr/local/openssl-${OPENSSL_VER}/lib' >> /etc/ld.so.conf\"\n    ldconfig -v\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>查看新安装的 libssl 动态库是否存在</strong></font>\n\n```bash\nldconfig -v |grep -i \"libssl\"\n```\n\n执行结果：\n\n```bash\nlibssl.so.1.1 -> libssl.so.1.1\nlibssl3.so -> libssl3.so\nlibssl.so.10 -> libssl.so.1.0.2k\n```\n\n至此，完成对 OpenSSL 的升级安装。\n\n接下来安装当前最新版本的 Python。\n\n## <font color=#f26522 size=4 face=宋体><strong>编译升级 Python</strong></font>\n\n### <font color=#f26522 size=4 face=宋体><strong>安装依赖</strong></font>\n\n```bash\nyum install -y wget bzip2-devel libffi-devel \\\n    ncurses-devel gdbm-devel xz-devel sqlite-devel \\\n    tk-devel uuid-devel readline-devel\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>设置版本号</strong></font>\n\n最新源码包可在 https://www.python.org/ftp/python/ 找到。\n\n```bash\nPYTHON_VERSION=3.12.0\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>下载 Python 源代码压缩包</strong></font>\n\n```bash\ncd /tmp\nwget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz\ncode=$?\nif [ $code -gt 0 ]; then\n    # 下载失败请重试\n    echo \"+++++++++++++++++++++++++++++++++Python 源代码下载失败！\"\n    echo \"错误代码： $code\"\nelse\n    echo \"+++++++++++++++++++++++++++++++++Python 源代码包下载成功！\"\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>解压缩</strong></font>\n\n```bash\ntar Jxf Python-${PYTHON_VERSION}.tar.xz\ncode=$?\n\nif [ $code -gt 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++解压缩失败！\"\n    echo \"错误代码： $code\"\nelse\n    echo \"+++++++++++++++++++++++++++++++++解压缩成功！\"\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>进入 Python 源码目录</strong></font>\n\n```bash\necho \"+++++++++++++++++++++++++++++++++cd Python-${PYTHON_VERSION}\"\ncd Python-${PYTHON_VERSION}\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>确认当前编译安装的环境条件</strong></font>\n\n```bash\necho \"OpenSSL ver: ${OPENSSL_VER}\"\necho \"Python ver: ${PYTHON_VERSION}\"\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>进行编译条件操作</strong></font>\n\n```bash\n./configure --prefix=/usr/local/python-${PYTHON_VERSION} --with-openssl=/usr/local/openssl-${OPENSSL_VER} --with-openssl-rpath=/usr/local/openssl-${OPENSSL_VER}/lib --enable-shared --enable-ipv6 ax_cv_c_float_words_bigendian=no --enable-optimizations\ncode=$?\n\nif [ $code -gt 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++Python 编译条件配置执行失败！\"\n    echo \"错误代码： $code\"\nelse\n    echo \"+++++++++++++++++++++++++++++++++Python 编译条件配置执行成功！\"\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>进行 Python 的编译操作</strong></font>\n\n```bash\nmake -j2\ncode=$?\n\nif [ $code -gt 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++Python 编译失败\"\n    echo \"错误代码： $code\"\nelse\n    echo \"+++++++++++++++++++++++++++++++++成功进行 Python 编译操作！\"\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>安装 Python v1.12</strong></font>\n\n```bash\nmake altinstall\ncode=$?\n\nif [ $code -gt 0 ]; then\n    echo \"+++++++++++++++++++++++++++++++++Python 安装失败！\"\n    echo \"错误代码： $code\"\nelse\n    echo \"+++++++++++++++++++++++++++++++++Python 安装成功！\"\nfi\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>把新 Python 的库目录放进系统</strong></font>\n\n```bash\nbash -c \"echo \\\"/usr/local/python-${PYTHON_VERSION}/lib\\\" >> /etc/ld.so.conf\"\nldconfig -v\n## 以下命令来查实库目录是否已添加\nldconfig -v | grep -i \"python\"\n```\n\n执行结果：\n\n```bash\nlibpython3.so -> libpython3.so\nlibpython3.12.so.1.0 -> libpython3.12.so.1.0\nlibpython2.7.so.1.0 -> libpython2.7.so.1.0\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>设置新 Python 的环境变量</strong></font>\n\n```bash\necho \"export PATH=\\\"${PATH}:/usr/local/python-${PYTHON_VERSION}/bin\\\"\" >>/etc/bashrc\nsource /etc/bashrc\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>将新 Python 的可执行文件覆盖系统原有的文件</strong></font>\n\n```bash\nln -sf /usr/local/python-${PYTHON_VERSION}/bin/python3.12 /usr/bin/python3\nln -sf /usr/local/python-${PYTHON_VERSION}/bin/pip3.12 /usr/bin/pip3\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>设置 PyPI 的国内软件源并升级自身</strong></font>\n\n```bash\n# 设置国内源\nmkdir ~/.pip\ncat >~/.pip/pip.conf <<EOF\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\nEOF\n\n# 升级 PyPI\npython3 -m pip install --upgrade pip\n```\n","tags":["linux","python","安装"],"categories":["_A5-安装教程","Python"]},{"title":"Centos7 开启远程SSH登录、开启网卡","url":"/2024/02/15/Centos7-开启远程SSH登录、开启网卡/","content":"\n### <font color=#00b2c2 size=5 face=宋体><strong>[CentOS7开启SSH远程登陆](https://www.cnblogs.com/travis-li/p/12550370.html)</strong></font>\n\n<!--more-->\n\n<font color=#b0171f size=2 face=宋体><strong>在虚拟机（[Vmware](https://so.csdn.net/so/search?q=Vmware&spm=1001.2101.3001.7020) Workstation）下，安装了`CentOS7`，现在想通过SSH工具连接虚拟机中的CentOS7</strong></font>\n\n1、  首先，要确保`CentOS7`安装了  `openssh-server`，在终端中输入  `yum list installed | grep openssh-server`\n\n ![img](https://s2.loli.net/2024/02/15/BjxbiRzYFfLOHwP.png)\n\n此处显示已经安装了  `openssh-server`，如果又没任何输出显示表示没有安装  `openssh-server`，通过输入  `yum install openssh-server`\n\n ![img](https://s2.loli.net/2024/02/15/ascQCiwotzjdSrR.png)\n\n来进行安装openssh-server\n\n2、  找到了 ` /etc/ssh/`  目录下的sshd服务配置文件 `sshd_config`，用Vim编辑器打开\n\n将文件中，关于监听端口、监听地址前的 # 号去除\n\n ![img](https://s2.loli.net/2024/02/15/uX3tFzO5YbLJAZQ.png)\n\n然后开启允许远程登录\n\n ![img](https://s2.loli.net/2024/02/15/89kQdlumbaErKPD.png)\n\n最后，开启使用用户名密码来作为连接验证\n\n ![img](https://s2.loli.net/2024/02/15/312hzSq7sPUjEAr.png)\n\n保存文件，退出\n\n \n\n3、  开启  sshd  服务，输入 `sudo service sshd start`\n\n ![img](https://s2.loli.net/2024/02/15/MdFH25S3zuRkYXL.png)\n\n检查  sshd  服务是否已经开启，输入`ps -e | grep sshd`\n\n ![img](https://s2.loli.net/2024/02/15/ERLSi5ntIubMsp2.png)\n\n或者输入`netstat -an | grep 22`  检查  22 号端口是否开启监听\n\n ![img](https://s2.loli.net/2024/02/15/6bpkOMCdFqHzUls.png)\n\n \n\n4、为了免去每次开启 CentOS 时，都要手动开启  sshd 服务，可以将 sshd 服务添加至自启动列表中，输入\n\n ![img](https://s2.loli.net/2024/02/15/dtIuKZGW4FbDx9A.png)\n\n可以通过输入`systemctl list-unit-files | grep sshd`，查看是否开启了sshd 服务自启动\n\n![img](https://s2.loli.net/2024/02/15/Do46kFpKlIagPYf.png)\n\n---\n\n---\n\n\n\n<font color=#00b2c2 size=5 face=宋体><strong> 如果Ifconfig 无法使用，又无法安装的情况下：</strong></font>\n\n# CentOS下查看本机ip地址方法\n\n输入ifconfig（原来ifconfig已失效）\n\n ![img](https://s2.loli.net/2024/02/15/cdQTvRO6SYkqVzI.png)\n\n我们可以输入`ip address`，命令是存在的,但是只能查看到本机ip 127.0.0.1\n\n![img](https://s2.loli.net/2024/02/15/H8ALyPJpI2B4f5C.png)\n\n 若需要具体本机IP则按照下面进行操作\n\n你需要打开网卡配置文件 `/etc/sysconfig/network-scripts/ifcfg-ens33` ，将`ONBOOT` 修改为`yes`，也就是启动网卡\n\n![img](https://s2.loli.net/2024/02/15/vilmH9w7Wn8sbxg.png)\n\n然后重启网络服务\n\n```shell\nsudo service network restart\n```\n\n再次输入 `ip address`就可以看到ip地址了\n\n![img](https://s2.loli.net/2024/02/15/fVui2QdN7skrYhv.png)\n","tags":["centos7","ssh","远程登录"],"categories":["_A5-安装教程","SSH"]},{"title":"centos7安装openVPN教程","url":"/2024/02/14/centos7安装openVPN教程/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>centos7安装openVPN教程：</strong></font>\n\n<!--more-->\n\n+ <font color=#b0171f size=2 face=宋体><strong>支持 `Debian 9`或 `Centos 7/8`或 `Ubuntu 18`或更高版本</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>OpenVPN搭建代码：</strong></font>\n\n```bash\nwget https://git.io/vpn -O openvpn-install.sh && bash openvpn-install.sh\n```\n\n<font color=#f26522 size=4 face=宋体><strong>FinalShell下载</strong></font>\n\n```bash\nhttps://wa6.lanzoui.com/ihjg2y3h14j\n\nFinalShell备用下载（含MAC版）：https://drive.google.com/drive/folders/1yUKRCn58kzDM6FRIadIWO8e5cDLz1mrx?usp=sharing\n```\n","tags":["梯子","代理"],"categories":["_A8-工具","梯子"]},{"title":"解压密码是中文 怎么办？","url":"/2024/02/04/解压密码是中文-怎么办？/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>解压密码是中文 怎么办？</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>一、安装unar软件包：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Linux（Debian系列）：</strong></font>\n\n```shell\napt install unar\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>Linux（RedHat系列）：</strong></font>\n\n```shell\nyum install unar\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>MacOS：</strong></font>\n\n```shell\nbrew install unar \n```\n\n<font color=#f26522 size=4 face=宋体><strong>二、使用unar来解压：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>例如：使用密码“数据科学交流群189158789”解压“机器学习.zip”到目录“机器学习2”的命令如下：</strong></font>\n\n```\nunar -e GBK -E GBK -p 数据科学交流群189158789 -o ./机器学习2 机器学习.zip\n```\n\n","tags":["中文解压密码"],"categories":["_A9-错误解决","中文解压密码"]},{"title":"Centos7下，使用docker部署docker-selenium,远程请求chrome_drive","url":"/2024/01/29/centos7下，使用docker部署docker-selenium-远程请求chrome-drive/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>Centos7下，使用docker部署docker-selenium,远程请求chrome_drive：</strong></font>\n\n<!--more-->\n\n+ <font color=#f26522 size=4 face=宋体><strong>[远程WebDriver | Selenium](https://www.selenium.dev/zh-cn/documentation/webdriver/drivers/remote_webdriver/)</strong></font>\n+ <font color=#f26522 size=4 face=宋体><strong>官方Github：</strong></font>[SeleniumHQ/docker-selenium: Provides a simple way to run Selenium Grid with Chrome, Firefox, and Edge using Docker, making it easier to perform browser automation (github.com)](https://github.com/SeleniumHQ/docker-selenium)\n\n+ <font color=#f26522 size=4 face=宋体><strong>VNC 密码：`secret`</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>拉取镜像：</strong></font>\n\n```shell\ndocker pull standalone-chrome\n```\n\n+ <font color=#f26522 size=4 face=宋体><strong>部署docker_selenium：</strong></font>\n+ <font color=#00b2c2 size=4 face=宋体><strong>参考：</strong></font>[seleniumbase学习总结5 - docker-compose集成部署执行环境 - 掘金 (juejin.cn)](https://juejin.cn/post/7087386683062108196)\n\n```shell\ndocker run -d -p 3786:4444 -e SE_NODE_MAX_SESSIONS=100 -e NODE_MAX_INSTANCES=100 -e SE_NODE_OVERRIDE_MAX_SESSIONS=true -e E_SESSION_REQUEST_TIMEOUT=35 --name selenium-node-chrme1 -v /dev/shm:/dev/shm selenium/standalone-chrome\n\n# --restart  \n参数会在容器异常时重启，比如hub被压挂了等，在搭建重要项目是都是加上该参数\n\n# --scale chrome=num\ndocker-compose up -d --scale chrome=num //num是要启动节点的数量，chrome是docker-compose文件中节点的名称\n\n# 若需多个node，可重复执行以上命令，修改--name即可。\n\n# --shm-size=\"2g\"\n来使用主机的共享内存，防止容器崩溃,这是避免浏览器在 docker 容器内崩溃的已知解决方法，这里是 Chrome和Firefox的记录问题。2gb 的 shm 大小是任意的，但已知效果很好，您的特定用例可能需要不同的值，建议根据您的需要调整此值。\n\n# VNC_NO_PASSWORD=1\n没有密码验证的情况下运行 VNC\n\n# VNC_VIEW_ONLY=1\n仅查看模式下运行 VNC\n\n# -e SE_EVENT_BUS_HOST= < event_bus_ip | event_bus_name >\n# -e SE_EVENT_BUS_PUBLISH_PORT=4442\n# -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n节点配置选项： 告诉节点事件总线在哪里，以便它可以注册自己。\n\n# -e SE_NODE_MAX_SESSIONS=10\n增加每个容器的会话并发性\n\n# -v /home/ubuntu/files:/home/seluser/files\n注意：mkdir /home/ubuntu/files\nchown 1200:1201 /home/ubuntu/files\n挂载数据卷前操作\n\n# -e SE_OPTS= \"--log-level FINE\"\n可以通过将环境变量传递给容器来增加日志输出\n\n# docker logs -f <容器 ID | 容器名称>\n所有输出都发送到标准输出，因此可以通过运行检查\n\n# -e JAVA_OPTS=-Xmx512m\n告诉节点事件总线在哪里，以便它可以注册自己。\n\n# -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n# -e SCREEN_WIDTH=1366\n# -e SCREEN_HEIGHT=768\n# -e SCREEN_DEPTH=24\n# -e SCREEN_DPI=74\n设置屏幕分辨率\n\n# -e SE_NODE_SESSION_TIMEOUT\n网格 URL 和会话超时，默认300秒\n\n# -e E_SESSION_REQUEST_TIMEOUT=500\n超时为 500 秒\n\n# -e SE_SESSION_RETRY_INTERVAL=2\n重试间隔为 2 秒\n\n# -e SE_NODE_OVERRIDE_MAX_SESSIONS true\n启用视频录制\n\n# -e START_XVFB=false\n以无头模式运行,默认是true\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>UI面板地址：</strong></font>\n\n```\nhttp://127.0.0.1:3786/ui#\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>python 运行事例：</strong></font>\n\n```python\nfrom selenium import webdriver\n\noptions = webdriver.ChromeOptions()\ndriver = webdriver.Remote(command_executor=\"http://xxxxx:3786/wd/hub\", options=options)\ndriver.get(\"https://www.baidu.com\")\nprint(driver.page_source)\ndriver.close()\n\n```\n\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>好处：</strong></font>\n\n```txt\n那这样做的意义在哪里呢？\n我们都知道，selenium 通常是只需要下载一个驱动，然后就可以本地使用了\n\t- 特别需要注意的是，selenium下的驱动和浏览器的版本是对应的，如果版本不对应，那么是没办法请求的\n\n但是docker selenium 就不会有这种问题了，使用docker远程请求，会自动匹配\n```\n\n","tags":["docker","工具","centos7"],"categories":["Docker","部署"]},{"title":"使用coder-server打造在线IDE","url":"/2024/01/27/使用coder-server打造在线IDE/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>使用coder-server打造在线IDE：</strong></font>\n\n<!--more-->\n\n## <font color=#f26522 size=4 face=宋体><strong>前言：</strong></font>\n\n在平时的学习工作中，我们经常会用到代码编辑器，Vscode已经成为我们的首选。但是本地编辑器有个弊端就是当我们在家庭和公司之间移动的时候，无法连续编码。这个时候就有很多新兴的在线编辑器（web IDE）出现了，目前我最常用的就是腾讯的cloudstudio，但是其每天免费4小时的使用时长在某些时候可能不够用，这个时候我们就需要拥有自己的在线编辑器了。今天我们就一起来介绍下在线编辑器coder-server环境的搭建和基础使用。\n\n## <font color=#f26522 size=4 face=宋体><strong>关于cloud_studio</strong></font>\n\n首先声明，这不是广告。仅仅因为其免费好用。\n\n我们可以在[coding.net](https://coding.net/)注册账号，登录后，点击导航栏的Cloud Studio即可进入。\n![cloudstudio](https://s2.loli.net/2024/01/27/xsLaieJVWdAmqNP.png)\n\n然后我们根据自己需要的环境类型创建虚拟环境即可。\n\n![环境类型](https://s2.loli.net/2024/01/27/S3OjfvNbCHYm9hK.png)\n\n然后你就得到了一个非常方便好用的在线编辑器。\n\n![cloudstudio8c4g](https://s2.loli.net/2024/01/27/ClBLONA4EgbaZH5.png)\n\n> 从上图可以看到，这台服务器的性能还是很不错的，8核4G很强了，免费的还要什么自行车。\n\ncloudstudio非常适合白嫖党，但是今天它不是主角。\n\n## <font color=#00b2c2 size=5 face=宋体><strong>coder-server：</strong></font>\n\ncoder-server一个开源的基于vscode开发的在线编辑器工具。其支持二进制部署、Docker部署、HemlChart部署，目前还不支持windows部署，但是已经足够我们使用了。\n\n具体部署可以参考官方文档：https://coder.com/docs/code-server/latest/install。\n\n这里我们选择相对简单快捷的方式，Docker部署。\n\n### <font color=#f26522 size=4 face=宋体><strong>前置条件</strong></font>\n\n在部署coder-server前，你需要准备一台Linux虚机（建议CentOS 7），你可以去云厂商购买（用于生产），也可以使用VMware在个人电脑创建虚机（用于学习）。\n\n我是购买的腾讯云的轻量应用服务器。\n\n### <font color=#f26522 size=4 face=宋体><strong>拉取coder-server镜像</strong></font>\n\n```bash\ndocker pull codercom/code-server\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>启动coder-server</strong></font>\n\n```bash\ndocker run -d  --name coder-server -p 8082:8080 -e PASSWORD=123 codercom/code-server:latest\n```\n\n启动完成后，我们需要在云服务器的防火墙菜单中打开8082端口，然后就可以使用云服务器的公网ip进行登录使用了。（如果你是本地虚拟机，不需要处理防火墙，直接在浏览器访问虚拟机的ip:8082即可）\n\n### <font color=#f26522 size=4 face=宋体><strong>访问coder-server</strong></font>\n\n我们在浏览器访问云服务器的公网ip:8082。\n\n![coder-server登录界面](https://s2.loli.net/2024/01/27/pkbsfB8w5rvVyM1.png)\n\n输入密码123登录。\n![loginok](https://s2.loli.net/2024/01/27/1HuUbnL8NZvj62T.png)\n\n哇哦，这不就是vscode本vscode嘛。\n\n### <font color=#00b2c2 size=5 face=宋体><strong>安装插件：</strong></font>\n\ncoder-server和vscode一样，支持安装插件，我选择了几个常用的插件安装测试，均完美支持。\n\n![plugin](https://s2.loli.net/2024/01/27/luRLOitqv37s1I2.png)\n\n编码体验\n\n简单体验了下，实际编码体验和vscode没有差别。大家可以放心使用。\n\n### <font color=#f26522 size=4 face=宋体><strong>Tips</strong></font>\n\n因为coder-server专注于编辑器而对语言本身稍有忽略，比如其内置的python没有pip3工具，需要自己安装；而且内置的deb源速度较慢，需要自行替换。\n\n#### <font color=#f26522 size=4 face=宋体><strong>修改deb源</strong></font>\n\n因为自带的vi不要用，所以我们使用以下方式修改deb源，参考：[常用工具大全](https://www.u1s1.vip/archives/tools)。\n\n1. 复制国内源地址到编辑器的文件aaa中\n2. 使用命令 `cat aaa > /etc/apt/sources.list`\n3. 使用命令`apt update`更新源\n\n#### <font color=#f26522 size=4 face=宋体><strong>安装pip3</strong></font>\n\n在完成了修改deb源和更新deb源之后，我们就可以使用命令`apt install python3-pip`来安装pip3了。\n\n安装完成后，你就可以安装你所需要的库了。\n\n亲测可行。赶快行动起来吧。\n\n到此，结束。\n","tags":["在线编辑","部署","开发"],"categories":["_A8-工具","在线编辑器"]},{"title":"清除 宝塔面板 + Linux ssh 登陆日志","url":"/2024/01/16/清除-宝塔面板-Linux-ssh-登陆日志/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>清除 宝塔面板 + Linux ssh 登陆日志：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**1、登录宝塔面板，会在“面板操作日志”里，留下我们的登录信息**</strong></font>\n\n```python\n/www/server/panel/data/default.db    # 用navicat打开清除\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**2、清除 Linux SSH 登陆的 日志信息**</strong></font>\n\n```python\n# 下面的命令 直接执行即可\ncat /dev/null > /var/log/wtmp\ncat /dev/null > /var/log/btmp\ncat /dev/null > /var/log/lastlog\ncat /dev/null > /var/log/secure\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**3、Windows 清除远程桌面登陆**</strong></font>\n\n```python\n# 步骤1. 按“Win + R”键，然后输入“CMD”打开命令提示符\n# 步骤2. 然后依次输入以下命令，并在每个命令输入完成按下回车键\nreg delete “HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default” /va /f\nreg delete “HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers” /f\nreg add “HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers”\ndel /ah %homepath%\\documents\\default.rdp\n```\n\n","tags":["系统","运维","宝塔"],"categories":["_A3-linux","宝塔面板"]},{"title":"字符串的操作","url":"/2024/01/14/字符串的操作/","content":"\n### 字符串的操作：\n\n<!--more-->\n\n```python\n## 字符串转义\n\"\\n\"     # 换行符号\n\"\\'\"     # 表示单引号\n'\\\"'     # 表示双引号\n\"\\\\\"     # 反斜杠\n\"\\t\"     # 制表符\n\"\\r\"     # 回车符\n\n## 字符串的格式化输出\nname = \"小明\"\nage = 19\n# 方式1:\n\tprint(\"我的名字是：%s, 今年%d\" % (name, age))\n# 方式2:\n\t# python3.6版本+ 解释器可用\n\tprint(f\"我的名字是：{name}, 今年{age}\")\n  \n\nstr_ = \"hello world\"\nprint(len(str_))    `# 字符串长度  输出: 11\n```\n\n\n\n### 字符串的内置函数：\n\n| **方法**     | **作用**                           | **示例**                               | **输出**                 |\n| ------------ | ---------------------------------- | -------------------------------------- | ------------------------ |\n| upper        | 全部大写                           | \"Hello\".upper()                        | \"HELLO\"                  |\n| lower        | 全部小写                           | \"Hello\".lower()                        | \"hello\"                  |\n| startswith() | 是否以a开头                        | \"张三”.startswith(\"张”)                | True                     |\n| endswith()   | 是否以a结尾                        | \"meinv.png”.endswith(\".jpg”)           | False                    |\n| isdigit()    | 是否全数字                         | '123’.isdigit()                        | True                     |\n| strip()      | 去两边空格                         | \" hi yuan  \\n\".strip()                 | \"hi yuan\"                |\n| join()       | 将多个字符串连接在一起             | \"-”.join(['北京’, '上海', '深圳’])     | \"北京-上海-深圳\"         |\n| split()      | 按某字符分割字符串，默认按空格分隔 | \"北京-上海-深圳\".split(\"-\")            | ['北京', '上海', '深圳'] |\n| find()       | 搜索指定字符串，没有返回-1         | \"hello yuan”.find(\"yuan\")              | 6                        |\n| index()      | 同上，但是找不到会报错             | \"hello yuan”.index(\"yuan\")             | 6                        |\n| count()      | 统计指定的字符串出现的次数         | \"hello world\".count(\"l\")               | 3                        |\n| replace()    | 替换old为new                       | hello world'.replace(‘world',‘python') | \"hello python\"           |\n\n![image-20240114001507783](https://s2.loli.net/2024/01/14/t8sCS2kbD4QTBvJ.png)\n\n![image-20240114001542239](https://s2.loli.net/2024/01/14/aEjk71MpCwGNefb.png)\n\n![image-20240114001800127](https://s2.loli.net/2024/01/14/ISas9KCBZw1YReo.png)\n\n![image-20240114001853053](https://s2.loli.net/2024/01/14/zvaBIZyG4gf6ePp.png)\n","tags":["python","基础"],"categories":["Python","基础"]},{"title":"AI_计算机视觉_01_9*9乘法表&随机数生成与排序","url":"/2023/12/29/AI-计算机视觉-01-9-9乘法表-随机数生成与排序/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>AI_计算机视觉_01： 9*9乘法表&随机数生成与排序：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong></strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong></strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>Python Number 数据类型用于存储数值，包括int、long、float、double、complex</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>Python 中数学运算常用的函数基本都在math模块</strong></font>\n\n\n```python\nimport math\n\nprint(math.ceil(4.1))    # 返回数字的上入整数   5\nprint(math.floor(4.9))   # 返回数字的下舍整数   4\nprint(math.fabs(-10))    # 返回数字的绝对值     10.0\nprint(math.sqrt(9))      # 返回数字的平方根     3.0\nprint(math.exp(1))       # 返回e的x次幂        2.718281828459045\n```\n\n+ 2、<font color=#f26522 size=4 face=宋体><strong>Python 中随机数：</strong></font>\n\n  + <font color=#b0171f size=2 face=宋体><strong>随机生成一个［0,1）范围内的实数</strong></font>\n\n    ```python\n    import random\n    \n    ran = random.random()\n    print(rar)\n    \n    0.39523871821810574\n    ```\n\n  + <font color=#b0171f size=2 face=宋体><strong>随机生成一个［1,20）范围内的整数</strong></font>\n\n    ```python\n    import random\n    ran = random.randint(1,20)\n    print(ran)\n    \n    14\n    ```\n  + <font color=#b0171f size=2 face=宋体><strong>当使用random.seed（x）设定好种子之后，random（）生成的随机数将会是同一个。</strong></font>\n\n    ```python\n    import random\n    \n    print(\"--设置种子 seed-------＂）\n    random.seed(10)\n    print(\"Random number with seed 10:\", random.random())\n    \n    # 生成同一个随机数\n    print(\"Random number with seed 10:\", random.random())\n          \n    \n    # 设置种子 seed\n    # Random number with seed 10: 0.5714025946899135\n    # Random number with seed 10: 0.5714025946899135\n    ```\n  \n+ 3、<font color=#f26522 size=4 face=宋体><strong>列表的元素添加、合并：</strong></font>\n\n  + <font color=#b0171f size=2 face=宋体><strong>extend(): 合并列表: </strong></font>\n    \n    ```python\n    girls = [\"杨超越\"]\n    models = [\"刘雯\", \"奚梦瑶\"］\n    girls.extend(models)\n    \n    [\"杨超越\", \"刘雯\", \"奚梦瑶\"]\n    ```\n  \n  + <font color=#b0171f size=2 face=宋体><strong>insert(): 在指定位置添加: </strong></font>\n  \n    ```python\n    girle.insert(1, \"虞书欣\")\n    \n    [\"杨超越\", \"虞书欣\", \"刘雯\", \"奚梦瑶\"]\n    ```\n  \n+ 4、<font color=#f26522 size=4 face=宋体><strong>列表删除：</strong></font>\n\n  + <font color=#b0171f size=2 face=宋体><strong>del():  </strong></font>\n    \n    ```python\n    words = ['cat', 'hello' , 'pen', 'pencil', 'ruler']\n    del words[1]\n    print(words)\n    ```\n    \n  + <font color=#b0171f size=2 face=宋体><strong>remove():  </strong></font>\n    \n    ```python\n    words = ['cat', 'hello' , 'pen', 'pencil', 'ruler']\n    words.remove(\"cat\")\n    print(words)\n    ```\n    + <font color=#b0171f size=2 face=宋体><strong>pop():  </strong></font>\n    \n    ```python\n    words = ['cat', 'hello' , 'pen', 'pencil', 'ruler']\n    words.remove(1)\n    print(words)\n    ```\n  \n+ 5、<font color=#f26522 size=4 face=宋体><strong>os基础库：</strong></font>\n\n  ```python\n  path = \"/home/mypath/python_learn\"\n  os.path.exists(path)   # 判断括号里的文件是否存在，括号内可以是文件路径。返回布尔型。\n  \n  os.path.split(path)   # 判断括号里的文件是否存在，括号内可以是文件路径。返回布尔型。\n  [\"/home/mypath\", \"python_learn\"]\n  \n  os.path.splitext(path)   # 将path的文件名和扩展名分开。\n  [\"python\", \"py\"]\n  \n  os.path.isdir(path)  # 判断是否是文件夹 \n  \n  # 文件操作：\n  os.listdir(path)  # 列出路径下所有文件,将路径下所有文件存到list中。\n  os.mkdir(path, mode)  # 创建目录  path为要创建的目录。mode为目录设置的数字权限。\n  os.makedirs(path, mode)   # 递归创建目录  path为需要递归创建的目录。\n  \n  os.walk（） # 显示指定目录， 返回三个元素\n  \t- root   # 所指的是当前正在遍历的这个文件夹本身的路径；\n    - dirs   # 是一个列表，内容是该文件夹中所有文件夹的名字（不包括子目录）\n    - files  # 列表，内容是该文件夹中所有文件的名字（不包括子目录）\n  \n  # 文件重命名\n  os.rename(src, dst)  # 用于命名文件或目录，从src到dst，如果dst是一个存在的目录，将抛出OSError。\n  ```\n  \n  ![shutil_os拓展库](https://s2.loli.net/2023/12/29/aVjNvDOsCZQBpRA.png)\n\n![shutil_os拓展库](https://s2.loli.net/2023/12/29/LmAIporOdlPtNbT.png)","tags":["AI","计算机视觉","学习"],"categories":["Python","基础"]},{"title":"DeepNude 破解，获得高级版去掉水印","url":"/2023/12/26/DeepNude-破解，获得高级版去掉水印/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>DeepNude 破解，获得高级版去掉水印：</strong></font>\n\n<!--more-->\n\n## <font color=#f26522 size=4 face=宋体><strong>前言</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>前段时间DeepNude大火，官网被挤爆，然后又因为舆论原因被迫关闭了官网不再更新，其高级版也不能再购买，当然本身高级版50$的价格也让人望而却步。本文就告诉你如何破解获取高级版。过程十分简单</strong></font>\n\n\n\n## <font color=#f26522 size=4 face=宋体><strong>过程</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>只有简单的两步</strong></font>\n\n+ 1、打开DeepNude根目录，找到“color.cp36-win_amd64.pyd”文件并删除。\n\n+ 2、下载“color.py”文件，并放到根目录。\n  + 点击下载：[color.py](https://api.isoyu.com/Deepnude/color.py)\n  + 蓝奏云下载：[color.py.zip](https://wwwqe.lanzoul.com/iJi6u1j0womj)\n\n+ 如果不能自动下载请按`Ctrl`+`S`保存\n\n---\n\n\n\n<font color=#00b2c2 size=3 face=宋体><strong>到此就算破解完成，获得高级版了。</strong></font>\n\n<font color=#00b2c2 size=3 face=宋体><strong>如果出现闪退可能是图片路径有中文。</strong></font>\n","tags":["AI","换脸","教程","centos7"],"categories":["Python","AI"]},{"title":"Deepnude V3中文付费破解去水印AI算法“脱”衣工具","url":"/2023/12/26/Deepnude-V3中文付费破解去水印AI算法“脱”衣工具/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>Deepnude V3中文付费破解去水印AI算法“脱”衣工具：</strong></font>\n\n<!--more-->\n\n+ [Deepnude V3中文付费破解去水印AI算法“脱”衣工具 - 常用软件 - QQ神教程网 (qqshen.cn)](https://www.qqshen.cn/article-3131-1.html)\n+  **下载地址：https://pan.baidu.com/s/1pINFPIABoTJs83NYLsEEQw 提取码: bep4**  \n\n<font color=#b0171f size=2 face=宋体><strong>**PS：** 原图片泳装照效果最佳，可百度或TB搜索死库水</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong> 一、DeepNude V3改进说明：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、调整窗体尺寸，原尺寸为800\\*800，但很多人的屏幕分辨率不高，直接导致软件界面下方被整体挡住，无法进行任何操作。本次修改窗体尺寸为800\\*600，足以显示DeepNude[破解](https://www.52pojie.cn/)版窗体的下方按钮。</strong></font>\n+  <font color=#b0171f size=2 face=宋体><strong>2、全面中文支持：屏蔽初级版水印，直接显示高级版。高级版界面中的所有文字均为中文。 </strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>3、解决某些情况下的闪退：当图片尺寸被手动调整，并且尺寸变得不合要求时，会发生闪退，增加了这部分的错误提示，从而不再莫名其妙闪退。  </strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>二、DeepNude高级版破解版的使用说明：</strong></font>\n\n<font color=red size=4 face=宋体><strong>记住：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、如果软件装在C盘，启动时，一定要在软件图标上右键，选择【以管理员身份运行】</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>2、DeepNude闪退的解决办法当前软件基本上只有一种确定性的闪退情况：当图片路径中有中文或者图片名带中文时，明确会有闪退！此时，需要更改路径或更改文件名为字母或数字。</strong></font> \n+  <font color=#b0171f size=2 face=宋体><strong>3、DeepNude转换时报错的解决办法错误如下图：软件应该放在C盘了，由于使用过程中模型会有新的写入，因此需要给予管理员权限。</strong></font>\n\n![Deepnude V3中文付费破解去水印AI算法“脱”衣工具](https://s2.loli.net/2023/12/26/l5UhxDg14jkHbeT.png)**\n\n<font color=#f26522 size=4 face=宋体><strong> 三、DeepNude下载目前有2个版本可供下载：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、DeepNude安装包—无模型（适合下载过原始版本的人）.exe【107M】：这个包里没有模型文件和图标文件，安装后，将原来解压出来的DeepNude文件夹中找到目录pyqtlib、qtbin，移动到新安装的路径中，DeepNude内部路径保持不变。 </strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>2、DeepNude中文安装包—完整包（适合没下过的人）.exe【2.01G】：这个包里包含全部文件，安装后即可使用。打开软件时，一定要在图标上右键，选择【以管理员身份运行】，否则出错。</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>四、DeepNude背景及历史：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>据国外的评测机构Motherboard报道说，有外国网友开发出一款名叫DeepNude的PC软件，只要给DeepNude一张女性照片，借助神经网络技术，软件可以自动“脱掉”女性身上的衣服，显示出LUO体照片。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>目前DeepNude只能处理女性照片，如果原图露出来的皮肤越多，那么处理的效果就会越好；而对于男人的照片，最后得出的结果还是女性部位。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>目前来看，最新消息是DeepNude官网虽然还可以访问，但是已经没有任何下载和在线处理功能了。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>评测机构Motherboard还联系了DeepNude的开发人员，应要求，其采用匿名，化名为“阿尔贝托”（Alberto）。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>阿尔贝托说，DeepNude基于加州大学伯克利分校研究者开发的开源算法pix2pix创建，应用于Pytorch并且版本要采用最新的1.1.0版本，对他们来说，整个开发过程共使用1万张女性LUO图加以训练，而且以西方人的图片为主。这一算法与之前的人工智能换脸技术deepfake算法相似，也和无人车技术所使用的算法相似。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>“阿尔贝托”表示，该软件目前之所以只能用于女性照片，是因为女性LUO体图像更容易在网上找到，但他希望能创建一个男性版本的软件。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>他还表示，他继续这一实验是出于“有意思”和好奇心。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>“我不是偷窥狂。我是技术的爱好者，”他说，“继续提升这个算法，最近也是吸取了之前的教训（来自其它创业公司）和经济上的问题，我问我自己是否可以在这个算法上获得经济回报。这就是我创建DeepNude的原因。”但Motherboard指出，之前就有deepfake在网络上流传，但这种技术很容易就会成为伤害女性的工具——要么在未经同意的前提下使用女性照片，要么在网上恶意散布SQ内容。</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>而DeepNude相当于deepfake技术的进化版，操作更简单，处理速度更快。</strong></font>\n![Deepnude V3中文付费破解去水印AI算法“脱”衣工具](https://www.qqshen.cn/data/attachment/forum/201907/22/010344st6599910fz300yi.png)\n![Deepnude V3中文付费破解去水印AI算法“脱”衣工具](https://www.qqshen.cn/data/attachment/forum/201907/22/010344nknf464tj4ng22vt.png)\n![Deepnude V3中文付费破解去水印AI算法“脱”衣工具](https://www.qqshen.cn/data/attachment/forum/201907/22/010343uuboo7wvfejqqdr9.png)\n","tags":["AI","换脸","教程","centos7"],"categories":["Python","AI"]},{"title":"Deepnude “脱” 衣原理分析及下载","url":"/2023/12/26/Deepnude-“脱”-衣原理分析及下载/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>Deepnude “脱” 衣原理分析及下载</strong></font>\n\n<!--more-->\n\n- [Deepnude “脱” 衣原理分析及下载 - 无主界 (idleleo.com)](https://www.idleleo.com/07/2496)\n\n所属分类: [游戏/技术](https://www.idleleo.com/category/yxjs/)\n\nDeepnude前段时间可谓火的不行，虽然作者很快关闭了网站和app，但是其使用的原理是值得一探究竟的。再加上有些小伙伴可能也想深入了解相关技术，笔者便转载了相关文章以及下载地址供大家参考。\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/hPZwxbd6SXjez3r.webp)\n\n可以参考NVIDIA论文使用部分卷积和基于部分卷积的填充来修复不规则孔的图像。纸质代码部分转换。论文地址: [https://arxiv.org/abs/1804.07723和https://arxiv.org/abs/1811.11718](https://www.idleleo.com/go?url=https://arxiv.org/abs/1804.07723和https://arxiv.org/abs/1811.11718)\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/mioqkFd7VQ2nU5N.webp)\n\n在Image_Inpainting实验测试（[https://api.isoyu.com/Deepnude/Image_Inpainting(NVIDIA_2018).mp4](https://www.idleleo.com/go?url=https://api.isoyu.com/Deepnude/Image_Inpainting(NVIDIA_2018).mp4))视频的图像界面中，您只需使用工具简单地涂抹图像中不需要的内容。即使形状非常不规则，NVIDIA的模型也可以非常逼真地“恢复”图像。图片填充了涂抹的空白。它可以被描述为一键式P图片，并且“没有ps痕迹”。该研究基于Nvidia的桂林刘大佬的团队。他们发布了一种可以编辑图像或重建已损坏图像的深度学习方法，即使图像穿了个洞或丢失了像素。这是目前2018国家最先进的方法。\n\n### Pix2Pix(需要配对数据)\n\n论文参考: [https://arxiv.org/abs/1611.07004](https://www.idleleo.com/go?url=https://arxiv.org/abs/1611.07004)下面是训练Pix2Pix模型200个epochs后产生的输出。\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/posX7kaHelgELI8.webp)\n\n了解更多信息可以查看[https://github.com/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/pix2pix.ipynb](https://www.idleleo.com/go?url=https://blog.isoyu.com/go.php?url=https://github.com/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/pix2pix.ipynb)\n\n### CycleGAN（无需配对数据）\n\nCycleGAN使用循环一致性损失函数来实现训练，而无需配对数据。换句话说，它可以从一个域转换到另一个域，而无需在源域和目标域之间进行一对一映射。这开启了执行许多有趣任务的可能性，例如照片增强，图像着色，样式传输等。只需要源和目标数据集。参考论文[https://arxiv.org/abs/1703.10593](https://www.idleleo.com/go?url=https://arxiv.org/abs/1703.10593)\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/rWGI7ZT8sDMwLPm.webp)\n\n了解更多信息[https://github.com/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/cyclegan.ipynb](https://www.idleleo.com/go?url=https://github.com/tensorflow/docs/blob/master/site/en/r2/tutorials/generative/cyclegan.ipynb)\n\n## Windows版DeepNude使用过程\n\nDeepNude可以真正实现图像到图像的目的，并且生成的图像更加真实。\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/VUdStfTG3hmvel5.webp)\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/saO7UR8krt2cQAL.webp)\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/MGjNz8bq9ufvOrs.webp)\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/wYiRo7JsNh5IWDt.webp)\n\nPS: 删除deepnude根目录中的color.cp36-win_amd64.pyd文件，然后添加color.py([https://api.isoyu.com/Deepnude/color.py](https://www.idleleo.com/go?url=https://api.isoyu.com/Deepnude/color.py))文件以获取deepnude的高级版本。\n\n## 对deepnude下架争取再重新上架的建议\n\n1. **尺寸** 包括156M DeepNude_Windows_v2.0.0.zip和1.90G pyqtlib.rar。\n2. **速度** 转换图片需要30秒。\n3. **内容** 使用图像到图像神经网络自动从女性身上移除衣服以揭示她们的裸露。此应用程序适用于深度学习的错误应用。\n\n\\* DeepNude可以使用Tensorflow实现，并使用模型压缩技术。\n\n\\* DeepNude应该改变目前不尊重女性的做法。**总结**实际上，可以不需要Image-to-Image。我们可以使用GAN直接从随机值生成图像或从文本生成图像。 \n\nObj-GAN: [https://github.com/jamesli1618/](https://www.idleleo.com/go?url=https://github.com/jamesli1618/)\n\nObj-GANStoryGAN: [https://github.com/yitong91/StoryGAN](https://www.idleleo.com/go?url=https://github.com/yitong91/StoryGAN)\n\n微软人工智能研究院（Microsoft Research AI）开发的新 AI 技术可以理解自然语言描述、绘制草图、合成图像，然后根据草图框架和文字提供的个别单词细化细节。换句话说，这个网络可以根据描述日常场景的文字描述生成同样场景的图像。\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/xOfBpQZ1TjC5XqL.webp)\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/8QgA23iacxNHnIL.webp)\n\n当前最优的文本到图像生成模型可以基于单句描述生成逼真的鸟类图像。然而，文本到图像生成器远远不止仅对一个句子生成单个图像。给定一个多句段落，生成一系列图像，每个图像对应一个句子，完整地可视化整个故事。\n\n![Deepnude “脱” 衣原理分析及下载](https://s2.loli.net/2023/12/26/1VdW74oHOhRv6k2.webp)\n\n## Deepnude下载\n\n网友提供： [magnet:?xt=urn:btih:7be4eb8d640742d2ffebd6495e9392e9e2c399bc](magnet:?xt=urn:btih:7be4eb8d640742d2ffebd6495e9392e9e2c399bc)\n\n也有GitHub开源地址： [https://github.com/open-deepnude/open-deepnude](https://www.idleleo.com/go?url=https://github.com/open-deepnude/open-deepnude)\n","tags":["AI","换脸","教程","centos7"],"categories":["Python","AI"]},{"title":"逆向 参考站点记录","url":"/2023/12/25/逆向 参考站点记录/","content":"\n#### 逆向 JS 参考非常具有指导性 ：[数据科学SourceResearch](https://www.resourch.com/)\n\n<!--more-->\n\n#### 12 种方法来隐藏您的机器人自动化检测，如何使 Selenium 不可检测和隐身：https://www.itblogcn.com/article/2034.html\n\n#### 網絡爬蟲-cloudflare五秒等待驗證逆向破解：https://www.twblogs.net/a/5d8c8d4fbd9eee5327001af8\n\n##### 逆向lin狗 大佬 =>https://developer.aliyun.com/profile/iaxsqtcumsgky/highScore_1?spm=a2c6h.24874632.expert-profile.5.27efd78f3t7PF1\n\n#### <font color=#00b2c2 size=5 face=宋体><strong>Cloudflare 小记：</strong></font>https://blog.csdn.net/weixin_58584029/article/details/128719446\n\n##### [     Selenium真正绕过webdriver检测         ](https://www.cnblogs.com/Wl55387370/p/16553574.html)             https://www.cnblogs.com/Wl55387370/p/16553574.html\n\n\n\n\n\n\n\n###### 关键词搜索：selenium绕过检测\n","tags":["逆向","记录","Cloudflare"],"categories":["_A7-逆向","参考"]},{"title":"DeepFaceLab3：视频换脸完整流程","url":"/2023/11/25/DeepFaceLab3：视频换脸完整流程/","content":"\n\n\n# DeepFaceLab3：视频换脸完整流程\n\n<!--more-->\n\n本文搬运自：[DeepFaceLab3：视频换脸完整流程 – DeepFake中文网 (deepfaker.xyz)](https://www.deepfaker.xyz/?p=2272)\n\n对于刚入门的朋友来说，你给他直接上心法肯定没啥有，最直接的还是教招式。实操，才有感觉嘛！DeepFaceLab虽然版本一直在升级，但是整体步骤和执行逻辑并没有太大变化。所以老教程现在一样能用了。但是为了教程的完整性，我就全部重写一遍，稍作改进。\n\n## 安装软件\n\n安装过程其实非常简单。一般发布的软件包都是.exe结尾，本质上其实就是一个用7z压缩的压缩包而已。所以安装只要双击就好了，大家都会的！\n\n安装的时候需要注意几个点。\n\n \n\n**第一：**杀毒软件可能会有木马警报，添加信任就好。杀毒软件可能会无警报删文件，导致执行的时候出现未知错误。这种情况可以先退杀毒软件，安装完了就不受影响。\n\n**第二**：安装的时候记得选好路径\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426155730.jpg@!full)\n\n路径并没有硬性要求，默认是解压到安装包所在路径。有不少人对路径并不是很敏感。比如通过QQ群文件下载的，就直接解压在路径超深的QQ缓存目录中，这样可能会出问题，而且不好找。最好是放在C盘外的其他盘的根目录。文件路径不强制英文，但是依旧不推荐中文。文件名不要用特殊字符，降低出错概率。\n\n**第三：**\n\n输入密码\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426155742.jpg@!full)\n\n我发布的文件如果有密码，就都是deepfaker.xyz。不管哪个版本直接输入就好了。当然，你任性，也可以不输入。\n\n \n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426155754.jpg@!full)\n\n不输入就是上面这种结果。然后你点1，2，3，4每个步骤都点不动。因为不看英文或者大意，犯这个错误的也不少。\n\n \n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426155755.jpg@!full)\n\n正确的打开方式是这样的。里面会有_internal和workplace文件夹。前者放的是源代码和软件相关的内容，后者是工作目录，上一篇有讲过。除此之外还有一堆.bat结尾的文件。可以把这些称为脚本或者批处理文件。里面是一行行的DOS命令。\n\n批处理文件打开方式和EXE一模一样，Double kill ~~Double click  双击打开！每一个批处理文件都干一件事情，我们要做的就是按一定的顺序点击这些文件，就能完成换脸。是不是挺简单？\n\n## **执行步骤**\n\nDFL换脸的思路是，想将视频转换成图，从图片中提取人脸，从人脸中学习特征。然后应用模型，先对图片进行换脸，然后把图片合成视频，同时带上原视频的音轨。\n\n具体来说可以分为如下几步：\n\n- 源视频转图片\n- 目标视频转图片\n- 提取源头像\n- 提取目标头像\n- 训练模型\n- 应用模型\n- 合成视频\n\n批处理文件步骤如下：\n\n- 源视频转图片 extract images from video data_src.bat\n- 目标视频转图片 extract images from video data_dst FULL FPS.bat\n- 提取源头像 data_src faceset extract.bat\n- 目标头像提取 data_dst faceset extract.bat\n- 训练轻量级模型 train Quick96.bat/SAE/AMP\n- 应用轻量级模型 merge Quick96.bat /SAE/AMP\n- 合成 MP4 视频 merged to mp4.bat\n\n杂七杂八交代清楚了就可以开始操作，本文会将每一个步骤截图说明。但是为了控制文章的体型，以操作为主。一些常见错误或者参数详解，会在后续文章中完成。关于操作，这里做一个重点提示：遇事不决按回车！\n\n### Step1：源视频转图片\n\n双击批处理文件源视频转图片 extract images from video data_src.bat\n\n \n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160224.jpg@!full)\n\n跳出黑色窗口，输入10回车，然后输入jpg回车，就会自动开始将视频分解为图片。\n\nFPS：视频有一个指标叫帧率，常见有24，30，60等，代表一秒钟有几张。第一个参数输入10指的是一秒钟只取10张；不输入直接回车，默认帧率是30就取30张。因为很多影视剧画面相对固定，没必要全部取，否则后面会浪费大量提取时间，而且模型训练压力也会加大。\n\nFormat:  图片格式，主要是jpg和png。png是无损格式，但是JPG能在保证画质的情况下减少巨量的空间。所以如果不是要求特别变态，一般都用jpg。这样可以减少空间，节省时间\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160233.jpg@!full)\n\n正常情况下，这个步骤执行非常快，出现“搞定/done” 的字样就是执行完成了。完成后，workplace/data_src下面就会出现很多图片，这就是从视频里分解出来的图片。文件名一般为0000x.jpg，其实这里面命名可以随意，没有强制要求。这里还有一个aligned的文件夹，是为后面步骤准备的。\n\n### Step2：目标视频转图片\n\n双击批处理文件目标视频转图片 extract images from video data_dst FULL FPS.bat\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160244-1.jpg@!full)\n\n和上面的步骤类似，这次处理的是dst视频。因为dst必须一帧不落，所以没有FPS选项，只有图片格式这一个选项。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160254.jpg@!full)\n\n处理完后的图片保存在workspace/data_dst里面。\n\n### Step3：提取源头像\n\n双击批处理文件提取源头像 data_src faceset extract.bat\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160310.jpg@!full)\n\n这一步的作用是提取源素材图片中的人脸。这里有六个参数，一般只需一路回车即可。第一次使用需要缓存GPU内核，需要稍微等一等。开始提取后底部有显示进度，当进度到100%，会显示图片数量和提取到的人脸数量，并出现“搞定！！！” 就证明已经出来成功并且处理完成。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160320.jpg@!full)\n\n处理完成后，头像保存在data_src/aligned下面。\n\n不少人在这个环节会遇到问题。\n\n常见问题是：\n\n- 驱动不够新，去官网下载更新到最新版本即可。\n- 软件不够新，deepfaker.xyz 上获取新版\n- 显卡软件不匹配， A卡用Directx12，不要用rtx3000版。\n\n提取完之后，如果src素材比较复杂，就需要做一些筛选。这个筛选可以写一篇很长的文章。这里简要说一下。主要是把一些不需要的素材删除：\n\n- 很模糊的可以直接删除\n- 不是目标人物的可以直接删除\n- 图片残缺的删除\n- 脸部有遮挡的删除\n- 脸部光照差异特别大的删除\n- …..\n\n### Step4：提取目标头像\n\n双击批处理文件目标头像提取 data_dst faceset extract.bat\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160335.jpg@!full)\n\n这一步的作用是提取目标素材图片中的人脸。和上一步非常类似，这里就是少了一个“保存调试图片”的参数。其实也不是少了，而是默认就执行了。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160320-1.jpg@!full)\n\n提取的头像保存在data_dst/aligned的文件夹里。\n\n提取完之后也要对素材进行一个筛选。\n\n把不是目标人物的素材删掉，把头像旋转的图片删掉。一般来说文件名后缀_1的都可以删掉。dst的删除核心原则是要换的人脸留下，不要换的统统删掉。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160344.jpg@!full)\n\n这些图标保存在aligned_debug里面\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426160939.jpg@!full)\n\n大概其中一张图片，可以看到人脸上有三种颜色的线框。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161011.jpg@!full)\n\n红色就是头像截取的区域，蓝色是面部区域，绿色是人脸轮廓，以及五官定位的点。其实就是人脸的landmark。通过debug你可以直观的看到人脸识别算法识别了哪些区域，有没有识别正确。\n\n### Step5：训练模型\n\n双击批处理文件 训练轻量级模型 train Quick96.bat\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161024.jpg@!full)\n\n这一步是训练模型，所有步骤中最重要，最难，也是最耗时间的部分。目前新版本中主要包含三类模型，分别是Quick96,SAEHD,AMP 。\n\n我把Quick96翻译为轻量级模型，优点是所需配置低，显存低，速度快，操作简单。缺点是不能自定义，像素比较低，合成效果差一些。\n\n这个模型很简单，所以也非常适合拿来入门。所以本文就用这个来举例。SAEHD和AMP模型和模型训练的知识会另起一篇文章来介绍。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161034.jpg@!full)\n\nQuick96使用非常简单，双击批处理文件后，选择执行设备即可，这里一般都是选显卡，直接回车即可。设备选择完成之后，程序就会自动加载素材，并显示模型的参数，底部会有跳动的数字，然后会跳出一个预览窗口。\n\n先来说说底部的数字，总共五列，分别代表：模型保存时间，迭代次数，单次迭代时间，源损失，目标损失。迭代次数是越多越好，损失是越低越好，零就是无损了嘛~不过，不可能达到！\n\n下面来说说预览窗口\n\n \n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161101.jpg@!full)\n\n预览窗口包含操作提示、loss曲线，人脸区域。人脸区域总共五列。第一列是src，第三列是dst。第二，四，五列为算法生成列，刚开始是纯色，啥头像都没有。随着训练的进行，会慢慢出现轮廓，鼻子，眼睛，然后慢慢变清晰。\n\n训练的过程就是等待这几列变清晰的过程，最后一列就是换脸后的效果。\n\n这一个步骤并不会自动结束，需要自己判断，然后手动结束。可以通过损失值和预览图来进行判断。一般来说损失值（loss）值到了0.1x就差不多了。但是素材质量和数量不一样，会影响这个指标的变化速度。比如素材特别少，这个值降的特别快，特别低。图片不是很清晰，这个值也降的特别快，特别低。反过来，图片质量高，数量多，这个就很难降低。但是这样情况下训练出来的模型更好。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161116.jpg@!full)\n\n相比数字而已，通过预览图来判断就更加直观了。只要观察第二列是否无限接近第一列，第四列是否无限接近第三列。第五列的表情是否无限接近第四列。所有列的图片是否都足够清晰。如果答案是“Yes” ，那么按回车或者直接关闭窗口，进入下一步。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161246.jpg@!full)\n\n正常情况下模型会过几十分钟保存一次，也可以手动按S直接保存。关闭后，可以重新点击批处理文件继续训练，不用担心丢失进度。当然，要防止意外关机和重启，可能会损坏模型。\n\n### Step6：应用模型\n\n双击批处理文件 应用轻量级模型 merge Quick96.bat\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161315.jpg@!full)\n\n这个步骤要做的是将图片进行换脸。应用Quick96模型也很简单。启动直接按回车选中或者输入对应的数字选中上一步已经训练好的模型。然后软件就会加载模型并显示模型参数。\n\n然后需要配置两个参数：\n\n一个是是否启用交互模式，直接回车，默认启用。\n\n一个是线程数量，输入小于等于8的数字，回车。注意，如果你核心特别多，默认回车会报错的！\n\n稍等一会儿会弹出帮助界面。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161316.jpg@!full)\n\n这个界面并没有任何功能上的用处，只是显示了这个环节可以使用的快捷键。每个快捷键旁边都有中文注释，可以看个大概，具体的参数含义我会在后面的文章中做一个详细的介绍。\n\n点击这个界面，确保输入法为英文，按下键盘上的Tab，就可以进入合成预览界面\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161413.jpg@!full)\n\n进来后，默认情况下都会有人皮面具的感觉，这是正常现象。因为我们参数还没有调整！就这个素材来说，只要调整W/S，E/D 快捷键即可。调整后的效果如下：\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161414.jpg@!full)\n\n确认效果OK之后，按下快捷键shift+？（向后应用到所有帧） 然后再按下shift+>（自动合成） 就开始自动合成了。也可以通过键盘上的< 和 >进行手动切换，查看前后帧的合成效果。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161515.jpg@!full)\n\n黑色窗口会显示所有的合成参数，并且显示进度条，等100%完成之后，手动关闭窗口即可。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161525.jpg@!full)\n\n此时，在data_dst下面已经多了两个文件，一个是merged，一个是merged_mask\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161536.jpg@!full)\n\n进入merged可以看到很多图，这些图片中的人脸已经完全换脸。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161537.jpg@!full)\n\n进入merged_mask可以看到一些黑色的图片，中间有一个白色的区域。这些文件是为了方便后期制作。我们单纯使用DFL的不用太关心。\n\n### Step7：合成视频\n\n双击批处理文件 合成 MP4 视频 merged to mp4.bat\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161538.jpg@!full)\n\n这个步骤是将已经换好脸的图片转换成视频，并且会自动读取源视频的配置信息，包括帧率，音轨这些。这个环节只有一个输出码率的参数，常规来说3就够了。\n\n除了合成mp4之外，还可以合成无损视频，AVI ，MOV等格式，便于后期处理。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161708.jpg@!full)\n\n执行完成后，workspace下面多了两个文件，分别是result.mp4 和 result_mask.mp4 。前者就是我们需要的最终视频，后者是遮罩视频，供后期使用。\n\n![img](https://deepfakescn.oss-cn-hongkong.aliyuncs.com/2021/10/20230426161719.jpg@!full)\n\n双击打开视频，就可以看到最终效果啦。\n\n步骤其实不难，细节很多。有些是可以直接照搬别人经验的。有些需要自己不断摸索。这并不是什么傻瓜软件，要做出好的效果肯定是要花时间研究。就像即便送你PS，PR，你没有一定的学习积累不可能做出酷炫的效果。但是我可以保证，市面上几乎所有神乎其技的换脸视频都是基于DFL，有些可能专门准备了道具场景并使用了后期制作。\n\n \n\nDeepFaceLab3系列\n\n[DeepFaceLab3：软硬件以及系统要求](http://mp.weixin.qq.com/s?__biz=MzIzODA3NDAxMg==&mid=2247485262&idx=1&sn=c9a68694d262259524014b2ea840ab6f&chksm=e93fa6bdde482fabd2b2bfac280cdc5ca83bc142a6be25e1368bb14dd837d58be22d9ca4c800&scene=21#wechat_redirect)\n\n[DeepFaceLab3：工作目录和基本概念](http://mp.weixin.qq.com/s?__biz=MzIzODA3NDAxMg==&mid=2247485268&idx=1&sn=78e823524647646f5999c3cebad9f6ee&chksm=e93fa6a7de482fb14162f919875c84c769f7473594c5ccd62328b12e2517e72801d372164af2&scene=21#wechat_redirect)\n\n[DeepFaceLab3：视频换脸完整流程详解！](http://mp.weixin.qq.com/s?__biz=MzIzODA3NDAxMg==&mid=2247485305&idx=1&sn=3df780a1f454f00044564fc22c148851&chksm=e93fa68ade482f9ca80ac3f70830f87bfd2b7df8dc8ef5be22eae00a8aadbbfb851ff11aec4c&scene=21#wechat_redirect)\n\n[DeepFaceLab3：模型的异同，选择，基础操作！](http://mp.weixin.qq.com/s?__biz=MzIzODA3NDAxMg==&mid=2247485354&idx=1&sn=7dc90561bae425f879a19423de5603e8&chksm=e93fa659de482f4f4cdb96fd4c02d7ab68cc1a6330ea770a48c463e0f890b6245cfe54d08ec2&scene=21#wechat_redirect)\n\n\n\n  \n\n******************小尾巴*********************\n\n**申明：图文均由deepfakes 中文网原创，转发请注明出处，谢谢！本站仅分享技术，切勿用于非法用途**\n**微信公众号：托尼不是塔克（TonyNoStark），学习各种AI黑科技！**\n\n 软件下载：[点击进入](https://www.deepfaker.xyz/?page_id=24)\n 入门教程：[点击进入](https://www.deepfaker.xyz/?page_id=513)\n 深入学习：[知识星球](https://www.deepfaker.xyz/?p=2050)\n 专业服务：[脸魔 F M](https://www.deepfaker.xyz/?page_id=1661) \n","tags":["AI","换脸","教程","windows10"],"categories":["Python","AI"]},{"title":"黑客工具之Google Hacking的简单用法","url":"/2023/11/21/黑客工具之Google-Hacking的简单用法/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>黑客工具之Google Hacking的简单用法：</strong></font>\n\n<!--more-->\n\n本文搬运自：[黑客工具之Google Hacking的简单用法 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/400365865)\n\n+ 感谢大神：[黑客老鸟-九青](https://www.zhihu.com/people/shen-tou-ce-shi-yan-jiu-yuan-9ling) 无私的技术分享\n\n[黑客工具之Sqlmap详细使用教程 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/394955217)\n\n<font color=#f26522 size=4 face=宋体><strong>一、Google Hacking简介</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>Google Hacking 是利用谷歌搜索的强大，来在浩瀚的互联网中搜索到我们需要的信息。轻量级的搜索可以搜素出一些遗留后门，不想被发现的后台入口，中量级的搜索出一些用户信息泄露，源代码泄露，未授权访问等等，重量级的则可能是mdb文件下载，CMS 未被锁定install页面，网站配置密码，php远程文件包含漏洞等重要信息。</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>工具文章合集：</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>利用Google搜索我们想要的信息，需要配合谷歌搜索引擎的一些语法：</strong></font>\n\n## <font color=#00b2c2 size=5 face=宋体><strong>基本搜索：</strong></font>\n\n- <font color=#b0171f size=2 face=宋体><strong>逻辑与：and</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>逻辑或： or</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>逻辑非： -</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>完整匹配：\"关键词\"</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>通配符：* ?</strong></font>\n\n## <font color=#00b2c2 size=5 face=宋体><strong>高级搜索：</strong></font>\n\n**`intext:`**\n\n<font color=#b0171f size=2 face=宋体><strong>寻找正文中含有关键字的网页，例如： **`intext:后台登录`** 将只返回正文中包含 后台登录 的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/NXACjRzpHneSYwQ.webp)\n\n**`intitle:`**\n\n<font color=#b0171f size=2 face=宋体><strong>寻找标题中含有关键字的网页，例如： **`intitle:后台登录`** 将只返回标题中包含 后台登录 的网页，**`intitle:后台登录 密码`** 将返回标题中包含黑客而正文中包含中国的网页</strong></font>\n\n\n\n<img src=\"https://s2.loli.net/2023/11/21/3gvZFKjqV72Odth.webp\" alt=\"img\" style=\"zoom:80%;\" />\n\n**`allintitle:`**\n\n<font color=#b0171f size=2 face=宋体><strong>用法和intitle类似，只不过可以指定多个词，例如： **`alltitle:后台登录 管理员`** 将返回标题中包含黑客 和中国的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/9OmrYuAB7IQkanX.webp)\n\n**`inurl：`**\n\n<font color=#b0171f size=2 face=宋体><strong>将返回url中含有关键词的网页：例如：**`inurl:Login`** 将返回url中含有 Login 的网页</strong></font>\n\n\n\n![img](https://s2.loli.net/2023/11/21/5iV9hNSIz8kXrRj.webp)\n\n<font color=#b0171f size=2 face=宋体><strong>查找管理员登录页面</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/l7qb1jJod4PLUxi.webp)\n\n<font color=#b0171f size=2 face=宋体><strong>查找后台数据库管理页面</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/IpNlc1jhCStTdea.webp)\n\n**`allinurl:`**\n\n<font color=#b0171f size=2 face=宋体><strong>用法和inurl类似，只不过可以指定多个词，例如：**`inurl:Login admin`** 将返回url中含有 Login 和 admin 的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/krHj4pNaDJLI1v3.webp)\n\n**`site:`**\n\n<font color=#b0171f size=2 face=宋体><strong>指定访问的站点，例如： **site:[http://baidu.com](https://link.zhihu.com/?target=http%3A//baidu.com) inurl:Login** 将只在[http://baidu.com](https://link.zhihu.com/?target=http%3A//baidu.com) 中查找url中含有 Login的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/EYzLCaeMoH6h7pF.webp)\n\n**`filetype:`**\n\n<font color=#b0171f size=2 face=宋体><strong>指定访问的文件类型，例如：**`site:baidu.com filetype:pdf`** 将只返回http://baidu.com站点上文件类型为pdf的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/IapXLzVETZdBcb2.webp)\n\n**`link:`**\n\n<font color=#b0171f size=2 face=宋体><strong>指定链接的网页，例如：**`link:http://www.baidu.com`** 将返回所有包含指向 http://www.baidu.com的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/vUMQljuhrH39ICO.webp)\n\n**`related:`**\n\n<font color=#b0171f size=2 face=宋体><strong>相似类型的网页，例如：**`related:http://www.xjtu.edu.cn`** 将返回与 http://www.xjtu.edu.cn相似的页面，相似指的是网页的布局相似</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/ZckzpHesimbP7OS.webp)\n\n**`cache:`**\n\n<font color=#b0171f size=2 face=宋体><strong>网页快照，谷歌将返回给你他存储下来的历史页面，如果你同时制定了其他查询词，将在搜索结果里以高亮显示，例如：**`cache:http://www.hackingspirits.com guest`** ，将返回指定网站的缓存，并且正文中含有guest</strong></font>\n\n\n\n**`info:`**\n\n<font color=#b0171f size=2 face=宋体><strong>返回站点的指定信息，例如：`info:http://www.baidu.com` 将返回百度的一些信息</strong></font>\n\n**`define:`**\n\n<font color=#b0171f size=2 face=宋体><strong>返回某个词语的定义，例如：`define:Hacker`　　将返回关于Hacker的定义</strong></font>\n\n**`phonebook:`**\n\n<font color=#b0171f size=2 face=宋体><strong>电话簿查询美国街道地址和电话号码信息。例如：`phonebook:Lisa+CA` 将返回名字里面包含Lisa并住在加州的人的所有名字</strong></font>\n\n**`查找网站后台`**\n\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com intext:管理`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com inurl:login`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com intitle:后台`</strong></font>\n\n**`查看服务器使用的程序`**\n\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:asp`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:php`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:jsp`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:aspx`</strong></font>\n\n**`查看上传漏洞`**\n\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com inurl:file`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com inurl:load`</strong></font>\n\n**`Index of`**\n\n<font color=#b0171f size=2 face=宋体><strong>利用 `Index of`语法去发现允许目录浏览的web网站，就像在本地的普通目录一样。下面是一些有趣的查询：</strong></font>\n\n- `index of /admin`\n- `index of /passwd`\n- `index of /passwd`\n- `index of /mail`\n- `\"index of /\" +passwd`\n- `\"index of /\" +password.txt`\n- `\"index of /\" +.htaccess`\n- `\"index of /root\"`\n- `\"index of /cgi-bin\"`\n- `\"index of /logs\"`\n- `\"index of /config\"`\n\n<font color=#00b2c2 size=5 face=宋体><strong>**`inurl`**</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>而上面这些命令中用的最多的就是 `inurl: `了，利用这个命令，可以查到很多意想不到的东西</strong></font>\n\n- <font color=#b0171f size=2 face=宋体><strong>利用 allinurl:winnt/system32/ 查询：列出的服务器上本来应该受限制的诸如“system32” 等目录，如果你运气足够好，你会发现“system32” 目录里的“cmd.exe” 文件，并能执行他，接下来就是提升权限并攻克了。</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>查询 allinurl:wwwboard/passwd.txt 将列出所有有“WWWBoard Password vulnerability”漏洞的服务器，阅读更多请参见下面链接。</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>查询 inurl:.bash_history 将列出互联网上可以看见 “inurl:.bash_history” 文件的服务器。这是一个命令历史文件，这个文件包含了管理员执行的命令，有时会包含一些敏感信息比如管理员键入的密码。</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>查询 inurl:config.txt 将看见网上暴露了“inurl:config.txt”文件的服务器，这个文件包含了经过哈希编码的管理员的密码和数据库存取的关键</strong></font>信息。\n\n<font color=#f26522 size=4 face=宋体><strong>还有一些其他一些使用“`inurl:`”和“`allinurl:`”查询组合的例子：</strong></font>\n\n- `inurl:admin filetype:txt`\n- `inurl:admin filetype:db`\n- `inurl:admin filetype:cfg`\n- `inurl:mysql filetype:cfg`\n- `inurl:passwd filetype:txt`\n- `inurl:”wwwroot/*.”`\n- `inurl:adpassword.txt`\n- `inurl:webeditor.php`\n- `inurl:file_upload.php`\n- `inurl:gov filetype:xls “restricted”`\n- `index of ftp +.mdb allinurl:/cgi-bin/ +mailto`\n\n## <font color=#00b2c2 size=5 face=宋体><strong>查找有可能存在SQL注入的网站：</strong></font>\n\n**`inurl:id=1`**\n\n![img](https://s2.loli.net/2023/11/21/LW1ycq9jo4hXItm.webp)\n\n\n\n\n\n","tags":["渗透","hack","谷歌搜索工具"],"categories":["_A6-渗透","搜索工具"]},{"title":"AI换脸项目 - faceswap 基于Centos7 的部署、配置、训练、替换教程","url":"/2023/11/20/AI换脸项目-faceswap-基于Centos7-的部署、配置、训练、替换教程/","content":"\n\n\n<br>\n\n---\n\n<br>\n\n### <font color=#00b2c2 size=5 face=宋体><strong>AI换脸项目 - faceswap 基于Centos7 的部署、配置、训练、替换教程（原创）</strong></font>\n\n<!--more-->\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>知识拓展：</strong></font>\n\n+ [【精选】Nvidia GPU 最新计算能力表（CUDA Compute Capability）_cuda计算能力排行_Dust_Evc的博客-CSDN博客](https://blog.csdn.net/Dust_Evc/article/details/125019266)\n\n+ [训练指南-deepfakes/faceswap：训练Faceswap，模型恢复和分析，手把手教学，简单快速上手！ - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/377418009)\n\n+ [python - faceswap换脸程序安装及使用 - 个人文章 - SegmentFault 思否](https://segmentfault.com/a/1190000042846780)\n\n<font color=#f26522 size=4 face=宋体><strong>环境说明：</strong></font>\n\n+ 系统：Centos7.9\n+ Intel(R) Xeon(R) CPU E5-2678 v3\n+ 2部署方式：CPU\n+ 指令集强制要求（CPU方式安装）：AVX\n+ 软件：FFmpeg\n+ python版本：3.10（强制要求，非3.10，很多环境不支持）\n\n<br>\n\n---\n\n<br>\n\n#### <font color=#00b2c2 size=5 face=宋体><strong>1、编译安装 python 3.10 环境：</strong></font>\n\n```python\ncd /root\n\n#只是将python3.11的安装包下载到 /root目录下\nwget https://www.python.org/ftp/python/3.10.9/Python-3.10.9.tgz\n\n#下载最新的软件安装包\ntar -xzf Python-3.10.9.tgz\n\n#解压缩安装包\nyum -y install gcc zlib zlib-devel libffi libffi-devel\n\n#安装源码编译需要的编译环境\nyum install readline-devel\n\n#可以解决后期出现的方向键、删除键乱码问题，这里提前避免。\nyum install openssl-devel openssl11 openssl11-devel\n\n#安装openssl11，后期的pip3安装网络相关模块需要用到ssl模块。\nexport CFLAGS=$(pkg-config --cflags openssl11)\nexport LDFLAGS=$(pkg-config --libs openssl11)\n\n#设置编译FLAG，以便使用最新的openssl库\ncd /root/Python-3.10.9\n\n#进入刚解压缩的目录\n./configure --prefix=/usr/python --with-ssl\n\n#指定python3的安装目录为 /usr/python 并使用ssl模块，指定目录好处是\n#后期删除此文件夹就可以完全删除软件了。\nmake\nmake install\n\n#就是源码编译并安装了，时间会持续几分钟。\n# 如果下面命令执行，提示已经存在/usr/bin/python3 和 /usr/bin/pip3， 可以删除。建议删除，后续会方便很多，也可以不删除，后续执行python3.10也可\n# 删除命令：rm -rf /usr/bin/python3 /usr/bin/pip3  # 然后在执行下面的命令\nln -s /usr/python/bin/python3 /usr/bin/python3\nln -s /usr/python/bin/pip3 /usr/bin/pip3\n#指定链接，此后我们系统的任何地方输入python3就是我们安装的\n```\n\n<br>\n\n---\n\n<br><font color=#00b2c2 size=5 face=宋体><strong>2、yum 安装 ffmpeg 环境：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>yum官方不支持ffmpeg，所以我们需要添加第三方源</strong></font>\n\n```python\n# 安装epel-release，因为安装需要使用其他的repo源，所以需要epel支持：\nyum install -y epel-release rpm\n\n# 安装Nux-Dextop源：\nrpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\nyum repolist\n\n# 开始安装\nyum install -y ffmpeg\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>ffmpeg 相关常用命令：</strong></font>\n\n```python\n# 从视频input.mp4中，裁剪出从1分30秒开始的一分钟视频\nffmpeg -ss 0:1:30 -t 0:1:0 -i input.mp4 -vcodec copy -acodec copy out.mp4\n\n# 视频转图片，-r:每秒钟提取的帧数，默认为30\nffmpeg -i input.mp4 -r 10 output/video_%d.jpg\n\n# 图片转视频，-b:v：控制视频码率，默认为200，所以合成的视频像素很低\nffmpeg -i input/video_%04d.jpg -b:v 5626k out.mp4\n\n# 视频合成，分为两步，先把每个视频转成ts流，再合成一个视频\nffmpeg -i input1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb input1.ts\nffmpeg -i input2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb input2.ts\nffmpeg -i \"concat:input1.ts|input2.ts\" -acodec copy -vcodec copy -absf aac_adtstoasc concat.mp4\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#00b2c2 size=5 face=宋体><strong>3、部署安装 faceswap， 基于 Centos7：</strong></font>\n\n+ 官方文档说明：[faceswap/INSTALL.md at master · deepfakes/faceswap · GitHub](https://github.com/deepfakes/faceswap/blob/master/INSTALL.md)\n+ 官方项目地址：[GitHub - deepfakes/faceswap: Deepfakes Software For All](https://github.com/deepfakes/faceswap)\n\n```python\n# 进入root 根目录，创建一个 ai 文件夹 用来存放所有的ai文件\ncd /root\nmkdir ai\n\n# 进入 ai 文件夹\ncd /root/ai\n\n# 开始 clone 项目到本地\ngit clone --depth 1 https://github.com/deepfakes/faceswap.git\ncd faceswap\n\n# 安装项目相关依赖  不报错，就说明没问题\npython3 install -r ./requirements/requirements_cpu.txt\n\n# 安装完成，执行初始化\ncd /root/ai/faceswap\npython3 faceswap.py -h\n\n# 此时会跳出让你选择的界面，我们是cpu方式运行，就选择 cpu就好\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#00b2c2 size=5 face=宋体><strong>4、faceswap 项目运行：</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>后期部署参考：[换脸开源项目faceswap在centos的实现-CSDN博客](https://blog.csdn.net/qq_42370471/article/details/107448694)</strong></font>\n\n+ ### <font color=#f26522 size=4 face=宋体><strong>工作流程(此处要把 **gakki** 的脸换成 **刘亦菲**)：</strong></font>\n\n  + <font color=#b0171f size=2 face=宋体><strong>1、/root/ai/AiSetFiles/gakki：`要被换脸`的人原图，即从爬虫爬的图片</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>2、/root/ai/AiSetFiles/gakki_video：`要被换脸`的人视频</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>3、/root/ai/AiSetFiles/gakki_ready：`要被换脸`的人，原始图片/视频进行脸部特征抽取后，放置的文件夹</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>4、/root/ai/AiSetFiles/lyf：`要换成谁的脸`的人原图，即从爬虫爬的图片</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>5、/root/ai/AiSetFiles/lyf_video：`要换成谁的脸` 的人视频</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>6、/root/ai/AiSetFiles/lyf_ready：`要换成谁的脸`的人，原始图片/视频进行脸部特征抽取后，放置的文件夹</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>7、/root/ai/AiSetFiles/gakki_lyf_model：放置训练的模型文件</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>8、/root/ai/AiSetFiles/convert：放置模型跑出来的最终结果，即已经换脸后的文件</strong></font>\n\n+ <font color=#00b2c2 size=4 face=宋体><strong>1、抽取脸部特征：</strong></font>\n\n  ```python\n  # 抽取图片的脸部特征，传入的是文件夹，会保留原本的格式，即jpg文件抽取后的图片依然是jpg\n  python faceswap.py extract -i /root/ai/AiSetFiles/gakki -o /root/ai/AiSetFiles/gakki_ready\n  python faceswap.py extract -i /root/ai/AiSetFiles/lyf -o /root/ai/AiSetFiles/lyf_ready\n  # 抽取视频里每帧图片的脸部特征，传入的是视频文件，默认保存为png格式\n  python faceswap.py extract -i /root/ai/AiSetFiles/gakki_video/gakki.mp4 -o /root/ai/AiSetFiles/gakki_ready\n  python faceswap.py extract -i /root/ai/AiSetFiles/lyf_video/lyf.mp4 -o /root/ai/AiSetFiles/lyf_ready\n  \n  # 若是从网上下了多个短视频，可以使用上面的ffmpeg命令进行视频合并\n  \n  # 若传入的是视频，则提取面部特征后的图片数量一般会比较巨大，若是想自己控制输出图片的数量，可以使用ffmpeg将视频切成图片，然后当作图片进行处理。不过我的ffmpeg无法操作png格式，只能转成jpg格式，会导致丢失很多信息。png格式的文件一般要比jpg格式文件大得多，模型的效果也要好些\n  ```\n\n+ <font color=#00b2c2 size=4 face=宋体><strong>2、人工筛选：</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>图片进行面部特征抽取后，会变成下面这种大头照。</strong></font>\n  + <font color=red size=2 face=宋体><strong>这时候就需要进行人工筛选了，这一步是最耗时的，因为最后入模型的就是这些图片，因此需要仔细的筛选。</strong></font>\n\n![面部特征抽取后.png](https://s2.loli.net/2023/11/20/OJeaRcV6mdgsIP2.png)\n\n+ <font color=#00b2c2 size=4 face=宋体><strong>3、训练模型：</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>这里有个点要额外注意一下，我在使用`nohup`进行后台运行的时候，程序直接崩了，我也没搞清楚是什么问题，如果出现了这种情况，建议使用`jupyter-lab --port 9999 --allow-root`开启jupyter，然后在本地windows浏览器打开jupyter的终端，然后在这里进行模型训练。就不用担心关电脑后程序自动终止。</strong></font>\n  + <font color=#b0171f size=2 face=宋体><strong>模型训练没什么说的，这里的模型是手动停止的，自己觉得模型不再收敛，时间有差不多的时候，直接在命令行 `敲回车` 就可以直接停止了</strong></font>\n\n  ```python\n  # python3 faceswap.py train -A <要被换掉人的脸的抽取面部特征的文件夹> -B <想要替换成谁的脸的面部特征文件夹> -m <训练后的model存放文件夹>\n  python3 faceswap.py train -A /root/ai/AiSetFiles/gakki_ready -B /root/ai/AiSetFiles/lyf_ready -m /root/ai/AiSetFiles/gakki_lyf_model/\n  ```\n\n+ <font color=#00b2c2 size=4 face=宋体><strong>4、调用模型进行换脸：</strong></font>\n  \n  + <font color=#f26522 size=3 face=宋体><strong>对图片进行换脸：</strong></font>\n  \n  ```python\n  # python faceswap.py convert -i <输入文件夹> -o <输出文件夹> -m <模型文件夹>\n  python faceswap.py convert -i /root/ai/AiSetFiles/gakki -o /root/ai/AiSetFiles/convert -m /root/ai/AiSetFiles/gakki_lyf_model/\n  ```\n  \n  + <font color=#f26522 size=3 face=宋体><strong>对视频进行换脸：</strong></font>\n  \n    + 如果想对视频进行换脸，必须调用`ffmpeg`把视频切成图片，然后再调用上面的命令，最后再自己把图片拼成视频。涉及的`ffmpeg命令`都在上面。\n    + 换脸后生成的文件是png格式，如果ffmpeg操作不了png格式图片，就需要先转成jpg\n  \n  ```python\n  from PIL import Image\n  img = Image.open('lyf_1.png')\n  img.save('lyf_1.jpg')\n  \n  # 直接将png格式读进去，然后保存为jpg即可，再配合os模块即可批量转换\n  ```\n  \n    \n\n<font color=#00b2c2 size=5 face=宋体><strong>5、补充：</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>使用频繁的linux命令：</strong></font>\n\n  ```python\n  # 查看当前文件下的文件数量（仅文件）\n  ls -l | grep \"^-\" | wc -l\n  # 解压zip文件，可能会把一大堆文件直接解压在当前文件夹，建议在一个空文件夹内解压zip文件\n  unzip lyf.zip\n  # 压缩文件夹lyf内的所有文件\n  tar -zcvf lyf.tar.gz ./lyf\n  # 查看当前目录下所有的文件大小\n  du -sh *\n  ```\n\n","tags":["AI","换脸","教程","centos7"],"categories":["Python","AI"]},{"title":"aiohttp.ClientSession() 使用 multipart/form-data 上传文件和字符集","url":"/2023/10/25/aiohttp-ClientSession-使用-multipart-form-data-上传文件和字符集/","content":"\n\n\n# <font color=#00b2c2 size=5 face=宋体><strong>aiohttp 异步http请求-4.文件上传multipart/form-data：</strong></font>\n\n<!--more-->\n\n本文搬运自：https://www.cnblogs.com/yoyoketang/p/16173424.html\n\n# 前言\n\n<font color=#f26522 size=4 face=宋体><strong>文件上传接口，post 请求参数类型content-type:multipart/form-data，上传文件分2种情况</strong></font>\n\n- <font color=#b0171f size=2 face=宋体><strong>小文件上传，可以直接用open函数读取</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>大文件上传，aiohttp支持多种类型的文件以流媒体的形式上传</strong></font>\n\n# 官方文档示例\n\n<font color=#f26522 size=4 face=宋体><strong>上传 multipart 类型</strong></font>\n\n```python\nurl = 'http://httpbin.org/post'\nfiles = {'file': open('report.xls', 'rb')}\n\nawait session.post(url, data=files)\n```\n\n<font color=#f26522 size=4 face=宋体><strong>也可以明确设置`filename` 和 `content_type`</strong></font>\n\n```python\nurl = 'http://httpbin.org/post'\ndata = FormData()\ndata.add_field('file',\n               open('report.xls', 'rb'),\n               filename='report.xls',\n               content_type='application/vnd.ms-excel')\n\nawait session.post(url, data=data)\n```\n\n# 参考案例\n\n<font color=#f26522 size=4 face=宋体><strong>用fiddler抓包，查看抓到的接口，以下这种接口就是multipart/form-data</strong></font>\n\n```tex\nContent-Type: multipart/form-data\nbody参数是这种格式：\n\n-----------------------------22165374713946\nContent-Disposition: form-data; name=\"localUrl\"\n\nyoyoketang.png\n-----------------------------22165374713946\nContent-Disposition: form-data; name=\"imgFile\"; filename=\"yoyoketang.png\"\nContent-Type: image/png\n```\n\n\n\n![img](https://s2.loli.net/2023/10/25/aldeVAI3CNc85pj.png)\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>上面的接口需要传2个参数</strong></font>\n\n- <font color=#b0171f size=2 face=宋体><strong>title 传字符串</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>file 传一个文件</strong></font>\n\n<font color=red size=3 face=宋体><strong>官网文档写的是只传一个file参数，实际验证也可以传其它字符串参数，如下示例：</strong></font>\n\n```python\nimport aiohttp\nimport asyncio\n\n\nasync def main():\n    async with aiohttp.ClientSession('http://127.0.0.1:8000') as session:\n        files = {\n            'file': open('a.jpg', 'rb'),\n            'title': '文件上传'\n            }\n        async with session.post('/api/v1/upfile/', data=files) as resp:\n            print(resp.url)\n            print(await resp.text())\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n运行结果\n\n```bash\nhttp://http://127.0.0.1:8000/api/v1/upfile/\n{\"code\":0,\"msg\":\"success!\",\"data\":{\"file\":\"/media/up_image/a_TEn5GLR.jpg\",\"title\":\"文件上传\",\"timestamp\":\"2022-04-21 11:15:28\"}}\n```\n\n# 使用 FormData 类\n\n<font color=#f26522 size=4 face=宋体><strong>FormData 类自定义文件类型和名称</strong></font>\n\n```python\nimport aiohttp\nimport asyncio\nfrom aiohttp import FormData\n\n\nasync def main():\n    async with aiohttp.ClientSession('http://49.235.92.12:7005') as session:\n        data = FormData()\n        data.add_field('file',\n                       open('a.jpg', 'rb'),\n                       filename='a.jpg',\n                       content_type='image/png')\n        data.add_field('title', '文件上传1')\n        async with session.post('/api/v1/upfile/', data=data) as resp:\n            print(resp.url)\n            print(await resp.text())\n\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n# 大文件上传\n\n<font color=#b0171f size=3 face=宋体><strong>小文件上传可以直接open函数读取，大文件直接读取会非常消耗内容。aiohttp支持多种类型的流式上传，这使您可以发送大文件而无需将它们读入内存。</strong></font>\n<font color=#f26522 size=4 face=宋体><strong>作为一个简单的案例，只需为您的 body 提供一个类似文件的对象：</strong></font>\n\n```python\nwith open('massive-body', 'rb') as f:\n   await session.post('http://httpbin.org/post', data=f)\n```\n\n或者您可以使用异步生成器：\n\n```python\nasync def file_sender(file_name=None):\n    async with aiofiles.open(file_name, 'rb') as f:\n        chunk = await f.read(64*1024)\n        while chunk:\n            yield chunk\n            chunk = await f.read(64*1024)\n\n# Then you can use file_sender as a data provider:\n\nasync with session.post('http://httpbin.org/post',\n                        data=file_sender(file_name='huge_file')) as resp:\n    print(await resp.text())\n```\n\n<font color=#f26522 size=4 face=宋体><strong>因为该 content 属性是一个 StreamReader（提供异步迭代器协议），所以您可以将 get 和 post 请求链接在一起：</strong></font>\n\n```rust\nresp = await session.get('http://python.org')\nawait session.post('http://httpbin.org/post',\n                   data=resp.content)\n```\n\n\n\n<font color=red size=4 face=宋体><strong>**笔记 Python 3.5 没有对异步生成器的原生支持，使用 async_generator库作为解决方法。**</strong></font>\n3.1 版后已弃用：aiohttp仍支持aiohttp.streamer装饰器，但不推荐使用此方法，而支持异步生成器，如上所示。\n","tags":["python","异步、协程"],"categories":["Python","爬虫","Post请求"]},{"title":"centos7通过rc.local文件添加自启动服务","url":"/2023/10/15/centos7通过rc-local文件添加自启动服务/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>centos7通过rc.local文件添加自启动服务：</strong></font>\n\n<!--more-->\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>系统环境:</strong></font>\n\n+ <font color=#b0171f size=3 face=宋体><strong>Centos 7</strong></font>\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>1、赋予脚本执行权限</strong></font>\n\n```shell\nchmod +x /etc/rc.d/rc.local\nchmod +x /etc/rc.local\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>2、自动服务</strong></font>\n\n```shell\nsystemctl enable rc-local.service\nsystemctl start rc-local.service\nsystemctl status rc-local.service\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>3、添加启动脚本</strong></font>\n\n```shell\n[root@threegene-mongodb-4ee43df-prd ~]# more /etc/rc.local\n#!/bin/bash\n# THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES\n#\n# It is highly advisable to create own systemd services or udev rules\n# to run scripts during boot instead of using this file.\n#\n# In contrast to previous versions due to parallel execution during boot\n# this script will NOT be run after all other services.\n#\n# Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure\n# that this script will be executed during boot.\n\ntouch /var/lock/subsys/local\n/usr/local/services/mongodb/bin/mongod -f /home/middle/mongodb/conf/mongo.cnf\n/usr/local/services/mongodb_arbiter/bin/mongod -f /home/middle/mongodb_arbiter/conf/mongo.cnf\n\n\n```\n\n<br>\n\n---\n\n<br>\n\n","tags":["系统","运维","ftp","挂载"],"categories":["_A3-linux","启动"]},{"title":"Centos7 安装 pdf2image (PDF 转 图片)","url":"/2023/09/21/Centos7-安装-pdf2image-PDF-转-图片/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>Centos7 安装 pdf2image (PDF 转 图片)</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>前置环境：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Centos 安装 pdf2image</strong></font>\n\n```\nCentos安装pdf2image\n环境：centos8、python3.6.4\n\n库安装\n1、pip3 install poppler-utils\n2、pip3 install pdf2image\n3、yum install poppler\n4、yum install poppler-utils\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>Ubuntu 安装 pdf2image</strong></font>\n\n```\n1、pip3 install poppler-utils\n2、pip3 install pdf2image\n3、sudo apt-get install poppler\n4、sudo apt-get install poppler-utils\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>Mac OS 安装 pdf2image</strong></font>\n\n```\n1、pip3 install poppler-utils\n2、pip3 install pdf2image\n3、brew install poppler\n```\n\n<font color=#f26522 size=4 face=宋体><strong>核心代码：</strong></font>\n\n```python\nfrom pdf2image import convert_from_path\nimport random\n# 将PDF文件转换为图像\nimages = convert_from_path('s.pdf')\n\n# 保存图像到文件\nfor i, image in enumerate(images):\n    image.save('' + str(i+1) +'.jpg', 'JPEG')\n\n```\n\n","tags":["PDF","转换"],"categories":["Python","PDF"]},{"title":"centos7 NodeSource 安装Node.js","url":"/2023/09/16/centos7-NodeSource-安装Node-js/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>centos7 NodeSource 安装Node.js</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>使用nvm安装到 `node` 发现不是全局，所以改用这种方式安装</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>原文地址>>[如何在CentOS 7安装Node.js和npm | myfreax](https://www.myfreax.com/how-to-install-node-js-on-centos-7/)</strong></font>\n\n\n\n### <font color=#b0171f size=3 face=宋体><strong>安装Node.JS版本16.x。运行curl命令，下载并运行NodeSource安装脚本。</strong></font>\n\n```\n# 安装16\ncurl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -\n\n# 安装18\ncurl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -\n\n# 安装19\ncurl -fsSL https://rpm.nodesource.com/setup_19.x | sudo bash -\n\n# 安装20\ncurl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -\n\n# 安装21\ncurl -fsSL https://rpm.nodesource.com/setup_21.x | sudo bash -\n```\n\n<font color=#b0171f size=2 face=宋体><strong>该脚本会将NodeSource签名密钥添加到您的系统，创建yum储存库文件，安装所有必需的软件包，</strong></font><font color=#b0171f size=2 face=宋体><strong>并刷新yum缓存。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>如果您需要另一个Node.js版本， 比如`14.x`，将`setup_16.x`更改为`setup_14.x`。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>一旦启用NodeSource仓库，请运行命令`sudo yum install -y nodejs`安装Node.js和npm。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>Node.JS软件包同时包含`node`和`npm`二进制文件。可以运行命令`node --version`，`npm --version`打印其版本来验证Node.js和npm是否已成功安装。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>如果你使用的yarn不是npm，可以运行命令`sudo corepack enable yarn`安装yarn。然后运行命令`yarn -v`打印yarn版本号。</strong></font>\n\n```shell\nsudo yum install -y nodejs\ncorepack enable yarn npm\nnode --version\nnpm --version\nyarn -v\n```\n\n","tags":["工具","安装","nodejs"],"categories":["_A5-安装教程","Node"]},{"title":"centos下使用nvm安装nodejs","url":"/2023/09/16/centos下使用nvm安装nodejs/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>centos下使用nvm安装nodejs：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>之前安装nodejs的时候，怎么安装怎么报错</strong></font>\n\n+ 报错内容(yum安装)\n\n```txt\nnode: relocation error: /lib64/libnode.so.93: symbol FIPS_selftest, version OPENSSL_1_1_0g not defined in file libcrypto.so.1.1 with link time reference\n```\n\n<font color=#f26522 size=4 face=宋体><strong>然后...更改 nvm安装！ 完美解决，还傻瓜式</strong></font>\n\n---\n\n\n\n### <font color=red size=5 face=宋体><strong>1、安装 git</strong></font>\n\n```\nyum -y install git\n```\n\n### <font color=#00b2c2 size=5 face=宋体><strong>2、拉取nvm</strong></font>\n\n```\ngit clone https://github.com/creationix/nvm.git ~/.nvm\n```\n\n### <font color=red size=5 face=宋体><strong>3、生效环境</strong></font>\n\n```\nsource ~/.nvm/nvm.sh\n```\n\n### <font color=#00b2c2 size=5 face=宋体><strong>4、如果第3步 无效，请执行这里</strong></font>\n\n```bash\n#添加环境变量\nvim /root/.bashrc\n\n# 将下面内容 复制到文本中\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n\n# 保存\nesc > : > wq  #保存退出\n\n# 立即生效\nsource /root/.bashrc\n```\n\n### <font color=red size=5 face=宋体><strong>5、查看node版本</strong></font>\n\n```shell\nnode --version\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>6、nvm相关命令</strong></font>\n\n```bash\n# 查看可安装版本\nnvm list\n\n# 安装\nnvm install v16.20.2\n\n# 切换 使用版本\nnvm use v16.20.2\n\n# 卸载\nnvm uninstall v16.20.2\n```\n\n","tags":["NVM","nodejs安装教程"],"categories":["_A5-安装教程","Node"]},{"title":"根据主视频，自动设置片头的分辨率、Fps、编码器","url":"/2023/08/15/根据主视频，自动设置片头的分辨率、Fps、编码器/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>根据主视频，自动设置片头的分辨率、Fps、编码器：</strong></font>\n\n<!--more-->\n\n+ <font color=#f26522 size=4 face=宋体><strong>前提：</strong></font>\n  + <font color=#b0171f size=3 face=宋体><strong>安装：ffmpeg</strong></font>\n  + <font color=#b0171f size=3 face=宋体><strong>安装：python库 opencv-python `pip3 install opencv-python`</strong></font>\n\n```python\n  def set_start_video(self, video_path, start_video_path):\n    \"\"\"\n      :param video_path: 原始mp4 绝对路径\n      :param start_video_path:   片头的绝对路径\n      :return: \n    \"\"\"\n      video = cv2.VideoCapture(f\"{video_path}\")\n      # print(height, width)\n      # resolution1 = (int(video.get(cv2.CAP_PROP_FRAME_WIDTH)), int(video.get(cv2.CAP_PROP_FRAME_HEIGHT)))\n      # print(resolution1)\n\n      # 获取高度\n      height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))\n\n      # 获取宽度\n      width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))\n\n      # 获取帧率\n      fps = video.get(cv2.CAP_PROP_FPS)\n\n      # # 向上取整\n      # fps_a = math.ceil(fps)\n\t\t\t\n      # 保留2位小数\n      fps_a = '%.2f' % fps\n      # \"ffmpeg -i a.mp4 -r 30 b.mp4\"\n      # print(fps_a)\n\n      # 退出cv2\n      video.release()\n      cv2.destroyAllWindows()\n      \n\t\t\t# 开始获取编码器 因为我的本地opencv库版本低，尝试获取编码器格式失败，所以这里用另一种方式获取\n      command = f\"ffprobe -v quiet -select_streams v:0 -show_entries stream=codec_name -of default '{video_path}/v1.mp4'\"\n      result = subprocess.run(command, shell=True, stdout=subprocess.PIPE)\n      encoder = result.stdout.decode().strip()\n      new_encoder = re.search(\"codec_name=(?P<codec_name>.*?)\\n\", encoder)\n\t\t\t\n      # 编写执行命令字符串\n      cmd_str = f\"ffmpeg -i {start_video_path} -vf scale={width}:{height} -r {fps_a} -acodec aac -vcodec {new_encoder.group('codec_name')} {video_path}/xxx.ts\"   # 这里的xxx.ts 就是我们根据主视频修改后的片头\n      # 开始执行命令\n      os.system(cmd_str)\n```\n\n","tags":["python","ffmpeg"],"categories":["_A4-FFmpeg","设置片头"]},{"title":"利用m3u8文件机制添加片头","url":"/2023/08/15/利用m3u8文件机制添加片头/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>利用m3u8文件机制添加片头：</strong></font>\n\n<!--more-->\n\n```python\ndef set_header(m3u8_file_path, header_path):\n    \"\"\"\n    :param m3u8_file_path:  m3u8文件所在绝对路径\n    :param header_path:     视频片头播放绝对路径\n    :return:   False 片头已经添加， True 片头添加成功\n    \"\"\"\n    with open(m3u8_file_path, \"r\", encoding='utf-8') as f:\n        all_lines = f.readlines()\n        for i, item in enumerate(all_lines):\n            if \"#EXTINF:\" in item:\n                vernier = i\n                break\n        if header_path in all_lines[vernier+1]:\n            print(f\"已经添加了片头，请勿重复添加\")\n            return False\n        print(vernier)\n        all_lines.insert(vernier, \"#EXTINF:5,\\n\")   # 此处的5是时长\n        all_lines.insert(vernier + 1, f\"{header_path}\\n\")\n    with open(m3u8_file_path, \"w\", encoding='utf-8') as w_f:\n        for k_w in all_lines:\n            w_f.write(f\"{k_w}\")\n    return True\nif __name__ == '__main__':\n    set_header('test.m3u8', \"http://xxx.xxx.com/wuxing.ts\")\n\n```\n\n","tags":["python","ffmpeg"],"categories":["_A4-FFmpeg","设置片头"]},{"title":"centos7下挂载ftp服务器","url":"/2023/07/19/centos7下挂载ftp服务器/","content":"\n\n\n# centos7 下挂载ftp服务器\n\n<!--more-->\n\n使用curlftpfs挂载ftp服务器到本地\n\n[CENTOS下挂载ftp服务器 | 情文のBLOG (mingilin.com)](https://www.mingilin.com/2016/08/23/centos/centos-ftp/)\n\n## 安装\n\n```bash\nyum install curlftpfs\n```\n\n\n\n## 挂载\n\n```shell\ncurlftpfs -o codepage=utf8 ftp://username:password@192.168.192.168 /ftp\n## codepage:        编码\n## username:        FTP用户名\n## password:        FTP密码\n## 192.168.1.111:   FTP地址\n## /ftp:            准备挂载到的路径\n```\n\n\n\n## 卸载\n\n```shell\n## fusermount -u /ftp\numount /ftp\n```\n\n\n\n## 开机挂载\n\n```shell\necho \"curlftpfs#username:password@192.168.1.111 /ftp fuse allow_other,uid=0,gid=0 0 0\" >> /etc/fstab\n```\n\n","tags":["系统","运维","ftp","挂载"],"categories":["_A3-linux","挂载"]},{"title":"CentOS7使用curlftps挂载ftp为本地目录","url":"/2023/07/17/CentOS7使用curlftps挂载ftp为本地目录/","content":"\n\n\n# CentOS7使用curlftps挂载ftp为本地目录\n\n<!--more-->\n\n<font color=red size=4 face=宋体><strong>声明：</strong></font><font color=#b0171f size=3 face=宋体><strong>本文转载自   [`ch3nnn`](https://ch3nnn.blog.csdn.net/) >>> [CentOS7使用curlftps挂载ftp为本地目录](https://blog.csdn.net/weixin_43064185/article/details/116748177)</strong></font>。 <font color=#00b2c2 size=5 face=宋体><strong>并修改</strong></font>\n\ncurlftps是什么？在linux下它可以将ftp挂载为本地文件夹，这样的话操作或者管理文件起来会比较方便。\n\n## 一：以下皆以CentOS7下进行操作:\n\n```bash\n# 安装curlftps\nyum -y install epel-release\nyum -y install curlftpfs\n\n# 挂载\n# curlftps ftp://用户名:密码@ftp服务器地址 /挂载的文件夹\n\n# 例如\ncurlftps ftp://kaygb:kaygbpasswd@127.0.0.1 /www/wwwroot/ftp\n```\n\n## 二：编码转换\n\n+ 如果ftp包含特殊字符的话，需要进行ASCII编码转换\n\n| ASCII符号 | 中文名 | 编码之后的值 |\n| --------- | ------ | ------------ |\n| 空格      | 空格   | %20          |\n| ！        | 感叹号 | %21          |\n| &         | and    | %26          |\n| @         | at     | %40          |\n| /         | 斜杠   | %2F          |\n| :         | 冒号   | %3A          |\n| =         | 等于号 | %3D          |\n| ?         | 问好   | %3F          |\n| ~         | 波浪号 | %7E          |\n\n## 三：演示:\n\n+ 如果用户名类似：kaygb/kaygb\n\n+ 那么就要修改成：kaygb%2Fkaygb\n\n+ 最终的命令是\n\n```bash\ncurlftps ftp://kaygb%2Fkaygb:kaygbpasswd@127.0.0.1 /www/wwwroot/ftp\n```\n\n## 四：开放访问权限:\n\n```bash\n# 如果你和我一样，采用了类似可道云或者别的使用www用户的云盘程序，如果采用上述命令的话就会出现www用户无法访问的情况，那么我们就需要更改一下命令来设置访问权限\n# 允许root用户之外的用户访问\ncurlftpfs -o rw,allow_other ftp://kaygb%2Fkaygb:kaygbpasswd@127.0.0.1 /www/wwwroot/ftp\n```\n\n\n## 五：命令解读：\n\n```bash\n# rw：给读写的权限\n# allow_other：允许root用户之外的用户访问（www）\n\n# 指定www用户访问\n# 获取www的uid和gid\n>>> cat /etc/passwd | grep 你的用户名\n\n# 例如\n>>> cat /etc/passwd | grep www\n>>> www:x:1000:1000::/home/www:/bin/bash\n# 1000和1000既为uid和gid的值\n```\n\n## 六：挂载\n\n```bash\ncurlftpfs -o rw,allow_other,uid=1000,gid=1000 ftp://kaygb%2Fkaygb:kaygbpasswd@127.0.0.1 /www/wwwroot/ftp\n# uid和gid需要换成自己的www的uid和gid\n```\n\n## 七：取消挂载\n\n<font color=#f26522 size=4 face=宋体><strong>有三种方法，推荐方法2</strong></font>\n\n+ 方法1：`ps -ef|grep ftp`，然后使用kill来停掉挂载进程\n\n+ 方法2：`fusermount -u/www/wwwroot/ftp`\n\n+ 方法3：`umount /www/wwwroot/ftp`\n","tags":["系统","运维","ftp","挂载"],"categories":["_A3-linux","挂载"]},{"title":"绕过Cloudflare反爬虫机制的五种方法","url":"/2023/07/16/绕过Cloudflare反爬虫机制的五种方法/","content":"\n\n\n# 绕过Cloudflare反爬虫机制的五种方法\n\n<!--more-->\n\n+ 本文将介绍五种方法，帮助开发者绕过[Cloudflare反爬虫](https://www.cloudbypass.com/)机制，包括使用cloudscraper库、抓取谷歌缓存、使用undetected_chromedriver库、使用付费代理和使用穿云API。\n\n+ 在爬虫开发中，有时候会遇到浏览器正常访问网站，但是代码却无法获取数据，返回403等错误。以下是解决这个问题的五种方法：\n\n![img](https://s2.loli.net/2023/07/16/qOloz5tsmWiBQRj.jpg)\n\n## **方法一：cloudscraper**\n\n对于需要等待的网站（通常等待5秒钟），80%的情况下可以确定使用了5秒盾反爬机制。在Python中，可以使用cloudscraper库绕过等待。\n\n+ 使用方法：\n\n```bash\n# 安装：cloudscraper\npip install cloudscraper\n\n# 更新最新版本：\npip install cloudscraper -U　　\n```\n\n+ 普通使用：\n\n```python\nimport cloudscraper\n\nscraper=cloudscraper.create_scraper()  # 创建实例\nres=scraper.get(url)  # 请求URL\nprint(res.text) # 打印结果\n```\n\n+ 在Scrapy中使用：\n\n```python\nmiddlewares.py\nimport cloudscraper\nclass CloudScraperMiddleware:\n\tdefprocess_response(self,request,response,spider):\n    ifresponse.status == 403:\n      url = request.url\n      req = spider.scraper.get(url,headers={‘referer’:url})\n      return HtmlResponse(url = url,body = req.text, encoding = ”utf-8″, request = request)\n    return response\n\nspider.py\n\nimportcloudscraper\n#启用中间件\ncustom_settings={\n”DOWNLOADER_MIDDLEWARES”:{\n’testspider.middlewares.CloudScraperMiddleware’:520,\n}\n}\ndef__init__(self,**kwargs):\n#创建实例\nself.scraper=cloudscraper.create_scraper()　　\n```\n\n## **方法二：抓取谷歌缓存**\n\n当谷歌抓取网络以索引网页时，会创建一个缓存。大多数受[Cloudflare](https://so.csdn.net/so/search?q=Cloudflare&spm=1001.2101.3001.7020)保护的网站都允许谷歌抓取其网页，因此我们可以抓取这个缓存。\n\n+ 使用方法：\n\n```python\nimport requests\n\nurl = \"https://www.xxx.com/\"\nnew_url = f\"https://webcache.googleusercontent.com/search?q=cache:{url}\"\nresponse = requests.get(new_url)\nprint(response.text)\n#提取所需数据　　\n```\n\n## **方法三：undetected_chromedriver**\n\n如果您使用Selenium抓取网页时被封禁，可以尝试使用undetected_chromedriver库。该库是一个自动化工具，更简单且不容易被封禁，甚至无需下载驱动。\n\n+ 安装方法：\n\n```bash\npip3 install undetected-chromedriver\n```\n\n+ 使用方法：\n\n```python\nimport undetected_chromedriverasuc\nurl = \"https://www.baidu.com/\"\ndriver = uc.Chrome()\ndriver.get(url)\n```\n\n## **方法四：使用付费代理**\n\n目前有很多成熟的代理服务可供使用。通过使用付费代理，可以有效绕过Cloudflare的反爬机制。请选择合适的代理服务商，并根据提供的API密钥设置代理。\n\n+ 使用方法：\n\n```python\nimport requests\n\nurl = \"https://xxxx.com/\"\napi_key = \"一长串密钥\"\nproxy=f\"http://{api_key}:@proxy.zenrows.com:8001\"\nproxies={\"http\": proxy, \"https\": proxy}\nresponse=requests.get(url, proxies=proxies, verify=False)\n#处理响应数据\n```\n\n## **方法五：使用穿云API**\n\n　　穿云API是一个可以绕过Cloudflare的反机器人验证、CAPTCHA验证、WAF和CC防护的解决方案。它提供了HTTPAPI和代理功能，并可设置Referer、浏览器UA和headless状态等浏览器指纹设备特征。\n\n　　使用穿云API可以轻松[绕过Cloudflare验证](https://www.cloudbypass.com/)，即使需要发送大量请求也不必担心被识别为抓取者。\n","tags":["逆向","记录","Cloudflare"],"categories":["_A7-逆向","Cloudflare"]},{"title":"Typora、Qv2ray、Typora、Uninstaller","url":"/2023/07/11/必备工具/","content":"\n\n\n## 必备工具获取、下载\n\n<!--more-->\n\n#### 1、Typora 版本v1.0\n\n+ [`Mac Os`版下载](https://bd.bcebos.com/v1/xly-icafe/typora-0.9.9.34.1-20230711135144-mzvutn.dmg)\n+ [`windows`版下载](https://bd.bcebos.com/v1/xly-icafe/typora-setup-x64-20230711135722-voidbp.exe)\n\n<br>\n\n------\n\n<br>\n\n#### 2、Pycharm专业版+激活\n\n+ 官方渠道下载 IDE： [`点击进入`](https://www.jetbrains.com/pycharm/download/other.html)\n\n+ 亲测可用：`mac2021激活`[点击下载](https://bd.bcebos.com/v1/xly-icafe/macjihuo-20230714173437-xqdtdy.zip)\n\n+ [`linux` zip版下载](https://bd.bcebos.com/v1/xly-icafe/linux-20230711135957-rf7v0e.zip)\n\n+ [`Mac` zip版下载](https://bd.bcebos.com/v1/xly-icafe/mac-20230711140244-5mamhz.zip)\n\n+ [`windows` zip版下载](https://bd.bcebos.com/v1/xly-icafe/windows-20230711140345-2wukes.zip)\n\n+ <font color=#f26522 size=4 face=宋体><strong>**Pycharm激活教程:      [点击进入](https://www.yuque.com/lanchuan-vm6pi/buhvby/irtn6mlnmt1vuzgx?singleDoc)**</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>**二次购买：Pycharm激活教程:      [点击进入]([激活教程-mac版，支持2017-2023所有专业版 (yuque.com)](https://www.yuque.com/ningmengna-6ulrv/pfdno5/qtzl0p93s0icva9d))**</strong></font>\n\n<br>\n\n------\n\n<br>\n\n#### 3、Qv2ray 主程序 + 核心\n\n+ [Qv2ray_简易安装 程序三端](https://bd.bcebos.com/v1/xly-icafe/qv2ray_%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85%20%E7%A8%8B%E5%BA%8F%E4%B8%89%E7%AB%AF-20230711145621-gvow7b.zip)\n\n+ [Qv2ray 主程序下载](https://github.com/Qv2ray/Qv2ray/releases)\n\n+ [QV2ray_核心下载](https://github.com/v2ray/v2ray-core/releases)\n\n+ QV2ray 各类插件下载\n\n  + 插件 ：[Trojan](https://github.com/Qv2ray/QvPlugin-Trojan/releases/tag/v3.0.0-pre3)\n\n  + 插件 ：[SSR](https://github.com/Qv2ray/QvPlugin-SSR/releases/tag/v3.0.0-pre3)\n  + 插件 ：[NaiveProxy](https://github.com/Qv2ray/QvPlugin-NaiveProxy/releases/tag/v3.0.0-pre3)\n  + 插件 ：[Trojan-Go](https://github.com/Qv2ray/QvPlugin-Trojan-Go/releases/tag/v3.0.0-pre3)\n  + 插件 ：[SS](https://github.com/Qv2ray/QvPlugin-SS/releases/tag/v3.0.0-pre3)\n  + 插件 ：[Command](https://github.com/Qv2ray/QvPlugin-Command/releases/tag/v3.0.0-pre3)\n\n<br>\n\n------\n\n<br>\n\n#### 4、mysql安装下载网址\n\n+ [`mysql安装下载网址`](https://downloads.mysql.com/archives/community/)\n\n<br>\n\n------\n\n<br>\n\n#### 5、App Cleaner & Uninstaller for mac(mac应用清理和卸载软件)v8.2.1中文激活版\n\n[`App Cleaner & Uninstaller_激活版下载`](https://bd.bcebos.com/v1/xly-icafe/app%20cleaner%20%26%20uninstaller%20for%20mac%28mac%E5%BA%94%E7%94%A8%E6%B8%85%E7%90%86%E5%92%8C%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6%29v8.2.1%E4%B8%AD%E6%96%87%E6%BF%80%E6%B4%BB%E7%89%88-20230713200358-ylswgj.dmg)\n\n<br>\n\n------\n\n<br>\n\n#### 6、mysql安装下载网址\n\n+ [`mysql安装下载网址`](https://downloads.mysql.com/archives/community/)\n\n<br>\n\n------\n\n<br>\n\n#### 7、fanmugua + HttpCanary(安卓抓包工具)\n\n[`fanmugua + HttpCanary(安卓抓包工具)`](https://bd.bcebos.com/v1/xly-icafe/%E7%95%AA%E6%9C%A8%E7%93%9C%2B%E6%89%8B%E6%9C%BAapk%E6%8A%93%E5%8C%85-20230928122154-gnuj5h.zip)\n\n<br>\n\n------\n\n<br>\n","tags":["必备工具"],"categories":["_A8-工具","其他工具"]},{"title":"centos7 使用mount -t cifs 挂载windows共享目录方法与问题解决","url":"/2023/06/13/centos7-使用mount-t-cifs-挂载windows共享目录方法与问题解决/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>centos7 使用mount -t cifs 挂载windows共享目录方法与问题解决：</strong></font>\n\n<!--more-->\n\n+ <font color=#f26522 size=4 face=宋体><strong>使用 域账号 密码 访问  //10.100.xx/Android 的windows 共享</strong></font>\n\n```bash\nmount -t cifs -o domain=test.com,username=administrator,password=test123 //192.168.1.10/share /usr/local/b\n```\n\n##### 报错如下\n\n```dart\nmount -t cifs -o username=scj,password=xxxxx //10.100.xx/09.xx /usr/local/b\n# 报错如下\n[root@it519 ~]# mount -t cifs -o username=\"domain\\xx\",password=\"xx\" //10.100.xx/Android /usr/local/a\nmount: //10.100.xx/Android is write-protected, mounting read-only\nmount: cannot mount //10.100.xx/Android read-only\n```\n\n<font color=#f26522 size=4 face=宋体><strong>解决：</strong></font>\n\n```bash\n# 需要安装cifs-utils\nyum install cifs-utils.x86_64\n```\n\n安装完成后继续执行  报错如下\n\n```objectivec\n[root@it519 ~]# mount -t cifs -o username=\"domain\\xx\",password=\"xxx\" //10.100.xx/Android /usr/local/a\nmount error(13): Permission denied\nRefer to the mount.cifs(8) manual page (e.g. man mount.cifs)\n\n# 原因：命令中关于域的格式不对，正确的是:\n# 建议用这个\nmount -t cifs -o domain=test.com,username=administrator,password=test123 //192.168.1.10/share /databackup\n# 或\nmount -t cifs -o username=domain/administrator,password=test123 //192.168.1.10/share /databackup\n```\n\n\n\n```ruby\n# 再次挂载成功\n[root@it519 ~]# mount -t cifs -o domain=test.com,username=xx,password=xxx //10.100.xx /Android /usr/local/a\n# 卸载 挂载  umount\n[root@it519 ~]# umount -v /usr/local/a/\numount: /usr/local/a (//10.100.xxx/Android) unmounted\n```\n\n### 其他报错\n\n\n\n```kotlin\n[root@www ~]# mount -t cifs -o username=name,password=123 //192.168.1.10/share /databackup\n\nmount error(127): Key has expired\nRefer to the mount.cifs(8) manual page (e.g. man mount.cifs)\n\n/var/log/messages内容：\nSep 26 09:56:05 www kernel: Status code returned 0xc0000224 NT_STATUS_PASSWORD_MUST_CHANGE\nSep 26 09:56:05 www kernel: CIFS VFS: Send error in SessSetup = -127\nSep 26 09:56:05 www kernel: CIFS VFS: cifs_mount failed w/return code = -127\n\n原因：帐号的密码过期，将windows帐号的密码改为永不过期。\n\n[root@www /]# mount -t cifs -o username=testuser,password=123 //192.168.214.128/npwpw /databackup\nmount error(5): Input/output error\nRefer to the mount.cifs(8) manual page (e.g. man mount.cifs)\n\nSep 26 11:04:18 www kernel: CIFS VFS: cifs_mount failed w/return code = -5\n\n原因：/databackup已经挂载了，需要先umonut，再mount \n\n让linux 启动自动挂载在/etc/fstab中增加\n\n//192.168.1.100/test /media cifs defaults,username=manifold,password=manifolden 0 \n```\n","tags":["系统","运维","挂载","共享","centos"],"categories":["_A3-linux","挂载"]},{"title":"centos测网速脚本","url":"/2023/06/13/centos测网速脚本/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>centos7：测网速脚本</strong></font>\n\n<!--more-->\n\n+ <font color=#f26522 size=4 face=宋体><strong>一、centos使用bench.sh 脚本测试速度 【推荐】</strong></font>\n\n```bash\n[root@localhost ~]# wget -qO- 86.re/bench.sh | bash\n\nActionScript\n----------------------------------------------------------------------CPU model : Intel® tooserver.net® CPU E3-1230 V2 @ 3.30GHz\nNumber of cores : 8CPU frequency : 1600.000 MHz\nTotal amount of ram : 15164 MB\nTotal amount of swap : 7647 MB\nSystem uptime : 0days, 1:1:24Load average : 0.05, 0.04, 0.01OS : CentOS 6.5Arch : x86_64 (64 Bit)Kernel : 2.6.32-431.el6.x86_64----------------------------------------------------------------------Node Name IPv4 address Download Speed\nCacheFly 205.234.175.175 6.49MB/s\nLinode, Tokyo, JP 106.187.96.148 2.15MB/s\nLinode, Singapore, SG 139.162.23.4 1.68MB/s\nLinode, London, UK 176.58.107.39 1.51MB/s\nLinode, Frankfurt, DE 139.162.130.8 1.54MB/s\nLinode, Fremont, CA 50.116.14.9 3.18MB/s\nSoftlayer, Dallas, TX 173.192.68.18 2.71MB/s\nSoftlayer, Seattle, WA 67.228.112.250 2.89MB/s\nSoftlayer, Frankfurt, DE 159.122.69.4 1.45MB/s\nSoftlayer, Singapore, SG 119.81.28.170 3.74MB/s\nSoftlayer, HongKong, CN 119.81.130.170 3.62MB/s----------------------------------------------------------------------I/O speed(1st run) : 182 MB/s\nI/O speed(2nd run) : 184 MB/s\nI/O speed(3rd run) : 181 MB/s\nAverage I/O speed : 182.333 MB/s\n```\n\n\n\n+ <font color=#f26522 size=4 face=宋体><strong>二、使用bench.sh 脚本测试速度</strong></font>\n\n```bash\n[root@localhost ~]# wget freevps.us/downloads/bench.sh -O - -o /dev/null|bash\n\nBenchmark started on Sun Oct 9 15:21:07 HKT 2016Full benchmark log: /root/bench.log\nSystem Info-----------Processor : Intel® Xeon® CPU E3-1230 V2 @ 3.30GHz\nCPU Cores : 8Frequency : 1600.000 MHz\nMemory : 15164 MBSwap : 7647 MB\nUptime : 1:20,OS : CentOS release 6.5 (Final)Arch : x86_64 (64 Bit)Kernel : 2.6.32-431.el6.x86_64\nHostname : tooserver.net.localdomain\nSpeedtest (IPv4 only)---------------------Your public IPv4 is 103.65.181.124Location Provider Speed\nCDN Cachefly 4.42MB/s\nAtlanta, GA, US Coloat 748KB/s\nDallas, TX, US Softlayer 4.15MB/s\nSeattle, WA, US Softlayer 2.60MB/s\nSan Jose, CA, US Softlayer 3.82MB/s\nWashington, DC, US Softlayer 2.82MB/s\nTokyo, Japan Linode 1.90MB/s\nSingapore Softlayer 2.68MB/s\nRotterdam, Netherlands id3.net 614KB/s\nHaarlem, Netherlands Leaseweb 1.22MB/s\nDisk Speed----------I/O (1st run) : 182 MB/s\nI/O (2nd run) : 178 MB/sI/O (3rd run) : 180 MB/s\nAverage I/O : 180 MB/s[root@localhost ~]#\n```\n\n+ <font color=#f26522 size=4 face=宋体><strong>三、centos安装speedtest-cli 测试速度</strong></font>\n\n```bash\n[root@localhost ~]# wget --no-check-certificate https://raw.github.com/sivel/speedtest-cli/master/speedtest_cli.py\n[root@localhost ~]# chmod a+rx speedtest_cli.py\n[root@localhost ~]# ./speedtest_cli.py\n\n\nActionScript\nRetrieving speedtest.net configuration…Retrieving tooserver.net server list…Testing from KT (103.65.181.124)…Selecting best server based on latency…Hosted by China Broadband Communications (Hong Kong) [11.64 km]: 95.107 ms\nTesting download speed…Download: 6.29 Mbit/s\nTesting upload speed…Upload: 14.04 Mbit/s\n```\n\n","tags":["系统","运维","测试"],"categories":["_A8-工具","测速"]},{"title":"逆向_反爬 指纹攻破策略","url":"/2023/05/26/逆向-反爬-指纹攻破策略/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>逆向_反爬 指纹攻破策略：</strong></font>\n\n<!--more-->\n\n关于 cloudflare 出5秒盾规律：\n\n+  开始我以为是所有的网页都会出现5秒盾，但是后面我发现用浏览器打开有些网页，是不触发5秒盾的\n+ 毕竟5秒盾还是影响用户浏览的。\n+ 经过测试，在requests下会发送很多指纹，这些指纹大大的超过了，一个正常浏览器该有的指纹。\n+ cloudflare 是根据给出的指纹检测的 该请求是由浏览器发出，还是由爬虫发出的\n\n\n\n<br>\n\n---\n\n<br>\n\n<font color=red size=6 face=宋体><strong>解决办法：</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>神奇的 python 第三方库 curl_cffi</strong></font>\n+ 库说明  >>> <font color=red size=3 face=宋体><strong>curl_cffi</strong></font> 库封装支持原生模拟浏览器TLS/JA3 指纹的Python 库\n\n```python\npip3 install curl_cffi   # 安装库\n```\n\n\n\n<br>\n\n<font color=#00b2c2 size=5 face=宋体><strong>请求方式：</strong></font>\n\n```python\nfrom curl_cffi import requests  # 导入 curl_cffi 库\n\n# 请求\nr = requests.get(url, impersonate=\"chrome101\", timeout=(5, 10))\n```\n\n","tags":["逆向","记录"],"categories":["_A7-逆向","curl_cffi"]},{"title":"关于GitHub静态文件加速","url":"/2023/05/22/关于GitHub静态文件加速/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>关于GitHub静态文件加速：</strong></font>\n\n<!--more-->\n\n```\nhttps://cdn.jsdelivr.net/gh/T25kevin/static@main/static/lib/init.css\nhttps://cdn.jsdelivr.net/gh/<用户名>/<仓库名>@main<仓库下文件路径>\n```\n\n","tags":["Github加速"],"categories":["_A8-工具","GitHub"]},{"title":"猫耳FM（MissEvan）加密参数破解代码及接口汇总","url":"/2023/05/22/猫耳FM（MissEvan）加密参数破解代码及接口汇总/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>猫耳FM（MissEvan）加密参数破解代码及接口汇总</strong></font>\n\n<!--more-->\n\n这次找了个简单的app来练练手，小众app逆向起来还是简单的，猫耳的app既没有壳有没有native层，仅仅只有一个加密参数，这里就直接上代码了。\n\n\n\n# 通用headers：\n\n```javascript\nheader = {\n  'user-agent': 'MissEvanApp/5.5.0 (Android;5.1.1;Android OPPO R17 Pro shamu)',\n  'channel': 'missevan_huawei',\n  'Content-Type':'application/json; charset=UTF-8',\n  'Accept':'application/json',\n  'cookie': 'token=xxx; equip_id=xxx',// token为账号的标识（没有则去除），equip_id为deviceid\n  'authorization': '',//这个就是加密参数，生成代码看下面\n  'x-m-date': '2021-03-23T16:08:44Z',// 时间，可传空字符串\n  'x-m-nonce': '62271935-318e-4ff1-ba91-685579a9cdbc'// nonce，可传空字符串\n}\n```\n\n\n\n# authorization参数生成代码（python）：\n\n```python\n# 此方法的实参为url，请求方法（GET与POST），请求头与请求体（是GET可不传）\ndef fun(url,method,header,body):\n  data = ''\n  qs = url.split('?')[1] if len(url.split('?')) > 1 else ''\n  url = urllib.parse.quote(url.split('?')[0])\n  equip_id = re.findall(r'equip_id=(\\S+?);',header['cookie'])[0] if re.findall(r'equip_id=(\\S+?);',header['cookie']) else re.findall(r'equip_id=(\\S+?)$codeholder_1#39;,header['cookie'])[0]\n  token = re.findall(r'token=(\\S+?);',header['cookie']) if re.findall(r'token=(\\S+?);',header['cookie']) else re.findall(r'token=(\\S+?)$codeholder_1#39;,header['cookie'])\n  token = token[0] if len(token) else None\n\n  data += method + '\\n'\n  data += url + '\\n'\n  data += qs + '\\n'\n  data += 'equip_id:' + equip_id + '\\n'\n  if token != None:\n    data += 'token:' + token + '\\n'\n  data += 'x-m-date:' + header['x-m-date'] + '\\n'\n  data += 'x-m-nonce:' + header['x-m-nonce'] + '\\n'\n  if method == 'POST':\n    sha = sha256()\n    sha.update(body.encode('utf-8'))\n    body = base64.b64encode(sha.digest()).decode('utf-8')\n    data += body + '\\n'\n\n  signature = base64.b64encode(hmac.new(appsecret.encode('utf-8'), data.encode('utf-8'), digestmod=sha256).digest())\n  # 这里直接将参数传进请求头中\n  header['authorization'] = 'MissEvan '+signature.decode('utf-8')\n```\n\n\n\n# 接口：\n\n1.https://app.missevan.com/sound/sound?sound_id=xxx\n\n获取音频资源地址，sound_id参数为音频的id\n\n\n\n2.https://app.missevan.com/you-might-like/get-recommends?persona_id=xxx\n\n”猜你喜欢“列表，persona_id参数意义不明，不过不同数字返回不同列表\n\n\n\n3.https://app.missevan.com/drama/get-drama-by-sound?sound_id=xxx\n\n音频相关信息，sound_id参数为音频的id\n\n\n\n4.https://app.missevan.com/message/get-comments?order=1&type=1&e_id=xxx&page=1&page_size=20&recommend=1&recommend_page_size=10\n\n音频评论列表，e_id参数为音频的id,page与page_size参数指定列表页数与大小\n\n\n\n5.https://app.missevan.com/sound/recommend?sound_id=1226753\n\n音频相关推荐列表，sound_id参数为音频的id\n\n\n\n6.https://app.missevan.com/member/login\n\n登录，此api为post方法，请求体为如下字符串：\n\naccount=xxx&password=xxx\n\naccount为你的手机号，password为密码，会返回token以及用户信息，将token加入cookie中则可使用账号访问\n\n\n\n7.https://app.missevan.com/person/get-user-info?user_id=5922770\n\n用户信息1，user_id参数为用户id\n\n\n\n8.https://app.missevan.com/person/homepage?user_id=5922770\n\n用户信息2，user_id参数为用户id\n","tags":["逆向","记录"],"categories":["_A7-逆向","app"]},{"title":"逆向app记录","url":"/2023/05/22/逆向app记录/","content":"\n函数入口：\n\n<!--more-->\n\n![image-20230309145137516](https://s2.loli.net/2023/05/26/fsRG6vZlICrO7e8.png)\n\n![image-20230309150703294](https://s2.loli.net/2023/05/26/4HF7qlDZmwr51NM.png)\n\n![image-20230309150720478](https://s2.loli.net/2023/05/26/DW1COxUHVk9vGE8.png)\n\n![image-20230309222050257](https://s2.loli.net/2023/05/26/8ZuoQLAgrEBbOYK.png)\n\n","tags":["逆向","记录"],"categories":["_A7-逆向","app"]},{"title":"adb相关设置","url":"/2023/05/22/adb相关设置/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>adb相关设置：</strong></font>\n\n<!--more-->\n\n```\n>>> adb kill-server   # 杀掉当前adb\n>>> adb start-server   # 开启adb服务\n>>> adb devices    # 连接虚拟机\n>>> adb connect 127.0.0.1:7555   # 用7555 端口连接\n>>> adb shell   # 进入终端\n\n>>> adb -s emulator-7555 shell getprop ro.product.cpu.abi    # 获取当前手机的操作系统架构   也可以进入shell执行  getprop ro.product.cpu.abi\n```\n\n","tags":["逆向","adb"],"categories":["_A7-逆向","app"]},{"title":"安装nodejs-cnpm","url":"/2023/05/22/安装nodejs-cnpm/","content":"\n<strong><a class=\"wp-editor-md-post-content-link\" href=\"https://nodejs.org\">nodejs官方网址</a></strong>\n\n<!--more-->\n\n**Nodejs v16.13.0：**[**官方版**](https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz)、[直链下载](https://bd.bcebos.com/v1/xly-icafe/node-v16.2.0-linux-x64.tar-20240525034348-plibvg.xz)\n\n**Nodejs v20.0.0：**[**官方版**](https://nodejs.org/dist/v20.2.0/node-v20.2.0-linux-x64.tar.xz)、[直链下载](https://bd.bcebos.com/v1/xly-icafe/node-v20.2.0-linux-x64.tar-20240525034121-bpmrw1.xz)\n\n**Nodejs v22.0.0：**[**官方版**](https://nodejs.org/dist/v22.0.0/node-v22.0.0-linux-x64.tar.xz)、[直链下载](https://bd.bcebos.com/v1/xly-icafe/node-v22.0.0-linux-x64.tar-20240525034203-hmckok.xz)\n\n```python\n# 下载nodejs v22\nwget -O node-v22.0.0-linux-x64.tar.xz https://bd.bcebos.com/v1/xly-icafe/node-v22.0.0-linux-x64.tar-20240525034203-hmckok.xz\n\n# 下载完成之后 使用：tar -xf <文件>  解压 *.tar.xz文件\ntar -xf node-v16.13.0-linux-x64.tar.xz\n# 将文件移动到opt文件夹下\nmv node-v16.13.0-linux-x64 /opt\n# 创建全局变量，使node在任何地方都能使用\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/node /usr/local/bin/node\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/npm /usr/local/bin/npm\n# 到此 node和 npm 就算安装完成了\nnode -v   # 查看node版本信息\nnpm -v   # 查看npm版本信息\n# 接下来，开始安装cnpm\n# cnpm是npm的国内源，其服务器是淘宝的，所以国内比较快\n# cnpm的执行过程是先去淘宝源下找软件，当淘宝源下没有所需要的包，会自动到npm服务器下寻找包\nnpm install -g cnpm --registry=https://registry.npm.taobao.org  # 定义cnpm淘宝源码\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/cnpm /usr/local/bin/cnpm  #   创建全局变量\n```\n","tags":["工具","安装","nodejs"],"categories":["_A5-安装教程","Node"]},{"title":"宝塔面板_历史版本_脱离官方下载","url":"/2023/05/22/宝塔面板-历史版本-脱离官方下载/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>宝塔面板_历史版本_脱离官方下载：</strong></font>\n\n<!--more-->\n\n<h2>1. 历史版本宝塔下载链接（防止官方删除历史版本，自备！觉得别扭的，请绕道）</h2>\n\n<ul>\n<li><strong>宝塔_5.9.1（目前仍然很多人在用的版本）: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-5.9.1-20220110194703-1yjs8u.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.0.1: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.0.1-20220110195051-tayf6k.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.0.2: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.0.2-20220110195123-qyqem3.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.0.3: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.0.3-20220110195157-yssexv.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.1.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.1.0-20220110195229-gknrfv.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.1.1: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.1.1-20220110195255-p3429k.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.2.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.2.0-20220110195320-namkvo.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.3.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.3.0-20220110195346-wymfbj.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.0-20220110195410-3zwqjb.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.2（有pma漏洞）: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.2-20220110195440-s6mdnj.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.3: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.3-20220110195505-kzoodl.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.5（会有绑定提醒）: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.5-20220110195541-sl6r0j.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.6.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.6.0-20220110211834-kfdtd3.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.7.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.7.0-20220110211841-kjhxx3.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.8.0: <a class=\"wp-editor-md-post-content-link\" href=\"http://download.bt.cn/install/update/LinuxPanel-7.8.0.zip\">点击下载</a></strong></li>\n</ul>\n\n<h2>2. 安装方法</h2>\n\n<ul>\n<li>先使用宝塔官方命令正常安装，之后在进行升级/降级操作</li>\n<li><strong>Centos安装命令：</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">yum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n</code></pre>\n\n<ul>\n<li><strong>Ubuntu/Deepin安装命令：</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && sudo bash install.sh\n</code></pre>\n\n<ul>\n<li><strong>Debian安装命令：</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && bash install.sh\n</code></pre>\n\n<ul>\n<li><strong>Fedora安装命令:</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">wget -O install.sh http://download.bt.cn/install/install_6.0.sh && bash install.sh\n</code></pre>\n\n<ul>\n<li><strong><em>*Linux面板7.9.0升级命令：*</em></strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">curl https://download.bt.cn/install/update_panel.sh|bash\n</code></pre>\n\n<h2>3. 官方手动升级方法</h2>\n\n<pre><code class=\"language-shell line-numbers\">离线升级步骤：\n1、下载离线升级包\n2、将升级包上传到服务器中的/root目录\n3、解压文件：unzip LinuxPanel-*\n4、切换到升级包目录： cd panel\n5、执行升级脚本：bash update.sh\n6、删除升级包：cd .. && rm -f LinuxPanel-*.zip && rm -rf panel\n</code></pre>\n\n<h2>4. 为了更安全，你可以执行以下内容，避免一些问题<del></del></h2>\n\n<pre><code class=\"language-shell line-numbers\">echo '127.0.0.1 bt.cn' >>/etc/hosts\n</code></pre>\n\n<h2><strong>5. 面板管理常用命令：</strong> https://www.bt.cn/btcode.html</h2>\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n","tags":["系统","运维","宝塔"],"categories":["_A3-linux","宝塔面板"]},{"title":"利用阿里云工单客服系统做免费图床","url":"/2023/05/22/利用阿里云工单客服系统做免费图床/","content":"\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>我自己是不用这个图床的，本人有某度！那个还是很稳定的！所以没必要搞很多个，精力耗不起</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>有需要的可以自行测试，另外根据原作者的意思，key过期了</strong></font>\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>可以去这里浏览原网页：<a class=\"wp-editor-md-post-content-link\" href=\"https://bbs.itzmx.com/thread-96020-1-1.html\">点击浏览</a></strong></font>\n\nhttps://kfupload.alibaba.com/mupload\nPOST 参数        类型        说明\nfile 表单 文件的二进制数据\nname 参数        随机文件名.jpg\nscene 参数        固定为 aeMessageCenterV2ImageRule\n支持 JPG、PNG、GIF 格式\n文件大小限制为 5MB\n无需身份验证\n5MB的GIF效果图：\n<img src=\"https://ae01.alicdn.com/kf/H5fad35d66dca46108a4898efc0c79f7cT.jpg\" alt=\"5MB图片效果\" />\nURL：https://ae01.alicdn.com/kf/H5fad35d66dca46108a4898efc0c79f7cT.jpg\nURL2：https://sc01.alicdn.com/kf/H5fad35d66dca46108a4898efc0c79f7cT.jpg\ngoogle检索了下还有个店铺接口：https://cbu01.alicdn.com/img/ibank/2018/578/980/8997089875_53215101.jpg\n回源限速800KB，CDN缓存后边缘节点不限速，10Gbps可跑满\n\n请求类型：POST\n\nURL：https://kfupload.alibaba.com/mupload\n\n文件表单名称：file\n\n参数：scene，值写aeMessageCenterV2ImageRule\n\n参数：name，值写随机.jpg\n\n响应类型，文本，URL值为：$json:url$\n要导入的话可以直接复制这个剪贴板导入，记得改成自己的Token就能直接用了：\n\n<pre><code class=\"language-shell line-numbers\">{\n  \"Name\": \"kfupload.alibaba.com\",\n  \"DestinationType\": \"ImageUploader, FileUploader\",\n  \"RequestType\": \"POST\",\n  \"RequestURL\": \"https://kfupload.alibaba.com/mupload\",\n  \"FileFormName\": \"file\",\n  \"Arguments\": {\n    \"scene\": \"aeMessageCenterV2ImageRule\",\n    \"name\": \"itzmx.jpg\"\n  },\n  \"ResponseType\": \"Text\",\n  \"URL\": \"$json:url$\"\n}\n</code></pre>\n\n用来搞视频干啥都行\nhttps://jsbin.com/nofapagalo/edit?html,output\n注：没有并发数限制，但是1分钟（可能是10分钟）内上传达到第255个图片会触发ip封禁10分钟，也就是最多只能传254个文件，后面文件就会跳验证码，验证码使用了cookie记录，只需要把cookie拿下来给脚本用就行了\n服务器不接受xff，用xff伪造IP服务器不认，代码可以不用写这块没必要。\n<img src=\"https://s2.loli.net/2022/06/08/TmJEheiAIwS7RYO.png\" alt=\"\" />\n<img src=\"https://s2.loli.net/2022/06/08/w2hMIplreBzGutW.webp\" alt=\"\" />\n有cookie后可以绕过验证码出现，可以用无痕浏览器测试，每次都会跳验证码，因为不存在cookie，通过插件提交cookie后就不会跳验证了，或者脚本上写个限制1分钟最多传254个文件\n<img src=\"https://s2.loli.net/2022/06/08/CLxIqZOGJ3uW6yl.webp\" alt=\"\" />\n\n<pre><code class=\"line-numbers\">cookie: _uab_collina=159561074724936294593423; cna=ewSiFzONtW4CAXW3AF8ObdHU; x5sec=7b22736370726f78793b32223a2266636564636334376266313139313635616439373061346438356230333964344350717337506746454c3644383966596b5a474f6e41453d227d; isg=BImJ5hTjMiNB-s7XjdWWNVEsmLXj1n0It9DhIiv-2HCvcqiEcyRA2RQjtNZEKhVA; l=eBam3Oe7OP5g1GPGBO5ZPurza77taIRb8sPzaNbMiInca6Nl9eaAVNQqIXGBWdtjgt5cyetrA42DhR32Wba38-M5CY3ZqMKvK3J68e1..\n</code></pre>\n\nffmpeg 无损HLS切片参数例如，注意压制时关键帧设置1秒\nffmpeg -y -i rc-24.mkv -c:a copy -c:v copy -hls_time 1 -hls_list_size 0 -hls_key_info_file videokey.info abc.m3u8\n\n用来搞视频的话，建议crf19，峰值码率40000，缓冲区5000，关键帧1秒，这样可以传BD高清无损！\n","tags":["图床"],"categories":["_S9-折腾","白嫖"]},{"title":"浏览器强制跳转https的解决方法","url":"/2023/05/22/浏览器强制跳转https的解决方法/","content":"\n<h1>谷歌浏览器强制跳转到 https 的解决办法</h1>\n\n<!--more-->\n\n<h2>1. 在谷歌浏览器的地址栏输入：chrome://net-internals/#hsts</h2>\n\n<h2>2. 可以看到如下的页面：</h2>\n\n![](https://s2.loli.net/2022/06/08/5ucC8SWv6hEGOZJ.png)\n\n<h2>3. Delete domain 栏的输入框中输入http访问的域名，点击“delete”按钮。</h2>\n\n<h2>4. Query domain 栏中搜索刚才输入的域名，点击“query”按钮后如果提示“Not found”，完成配置。</h2>\n","tags":["浏览器","跳转"],"categories":["_A9-错误解决","浏览器强制跳转到https解决"]},{"title":"秋水版SSR教程","url":"/2023/05/22/秋水版SSR教程/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>秋水版SSR教程：</strong></font>\n\n<!--more-->\n\n<h1><a class=\"wp-editor-md-post-content-link\" href=\"https://www.v2rayssr.com/qiushuissr.html\">秋水版SSR</a></h1>\n\n<pre><code class=\"language-shell line-numbers\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n</code></pre>\n\n<h5>1.1.1.1. 如果上方的脚本无法使用，可以使用下面这一条！</h5>\n\n<pre><code class=\"language-shell line-numbers\">wget --no-check-certificate -O shadowsocks-all.sh https://gitee.com/kanoc/image_data/raw/master/sdsks-all.sh\nchmod +x sdsks-all.sh\n./sdsks-all.sh 2>&1 | tee sdsks-all.log\n</code></pre>\n\n<img src=\"https://s2.loli.net/2022/06/08/KPD8RLf3kTscO4a.png\" alt=\"\" />\n\n<font color=red size=5 face=\"宋体\">SSR命令行</font>\n\n```python\n# 启动SSR：\n/etc/init.d/shadowsocks-r start\n# 退出SSR：\n/etc/init.d/shadowsocks-r stop\n# 重启SSR：\n/etc/init.d/shadowsocks-r restart\n# SSR状态：\n/etc/init.d/shadowsocks-r status\n# 卸载SSR：\n./shadowsocks-all.sh uninstall\n```\n","tags":["梯子","代理"],"categories":["_A8-工具","梯子"]},{"title":"项目接单网站名录","url":"/2023/05/22/项目接单网站名录/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>项目接单网站名录：</strong></font>\n\n<!--more-->\n\n<h2>1. 程序员客栈</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.proginn.com\">程序员客栈官网</a>\n程序员客栈中国非常领先的自由工作平台，为中高端程序员、产品经理和设计师等等互联网相关人员提供稳定的线上工作机会，包括自由工作、远程工作和兼职工作，还支持按需雇佣，工作模式非常多，感兴趣的推荐大家尝试一下。虽然名称叫程序员客栈，但是除了程序员，像产品经理，设计师等等互联网相关人员，都能在上面找到适合自己的项目。感兴趣的可以体验一下。\n\n<h2>2. 码市</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://codemart.com\">码市官方网站</a>\n码市是 Coding 推出的互联网软件外包服务平台,意在连接需求方与广大开发者。让项目的需求方快速的找到合适的开发者,完成项目开发工作。\n\n<h2>3. 猪八戒网</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://luoyang.zbj.com\">猪八戒官网</a>\n猪八戒网创建于2006年，是服务中小微企业的人才共享平台。开创式地为人才与雇主搭建起双边市场，通过线上线下资源整合与大数据服务，实现人才与雇主精准无缝对接。找兼职的地方，主要是入门级项目，不适合专业程序员，只适合新手。\n\n<h2>4. 开源众包</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://zb.oschina.net\">开源众包官网</a>\n开源众包–专业的软件众包平台,350万+ 优质开发者为您提供网站、APP、微信/小程序、企业应用等软件开发服务,有效降低企业 IT 软件开发成本、解决技术资源不足等问题。\n开源中国的众包平台，主要是以众包为主。\n\n<h2>5. 智城外包网</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"http://www.taskcity.com\">智城外包网官方网站</a>\n智城外包网，聚合全国软件团队资源，官方认证，1小时响应，零交易佣金，托管安全保障。十年口碑运营，万家靠谱团队。免费比价，免费一站式外包项目管理工具。平台汇集软件咨询专家，软件技术专家，软件开发专家，软件开发公司，软件外包公司，软件外派公司。在线竞标模式，让IT外包项目和短期IT招聘、人力派遣需求可以获得高性价比的候选。海量资源池包括：网站设计、网站开发、手机应用开发、移动应用开发、安卓应用开发、苹果应用开发、微信应用开发、Java技术、C＃技术、Web前端开发、IT人力外包、IT人力外派、IT人力短期招聘、技术合伙人、通用软件开发，SaaS软件实施，软件运维等服务门类。\n\n<h2>6. 实现网</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://shixian.com\">实现网官网</a>\n北京实现与爱科技有限公司是一个互联网工程师兼职平台。解决创业公司招人难、成本高的问题。\n创业公司通过实现网可以快速预约知名互联网企业的工程师、设计师到自己的团队工作。上午预约工程师，最快晚上即可到班兼职。\n互联网工程师可以在实现网注册成为技术顾问，利用业余时间助力创业公司，并且获得以时薪为单位的报酬。\n目前已有9000+工程师或设计师可在线预约和支付，支付后工程师会到团队里坐班沟通，快速推进创业者的产品开发进度。\n实现网为企业提供BAT等名企背景的、靠谱的开发设计兼职人才和自由职业者，满足企业项目外包、驻场开发、远程兼职、技术咨询等短期人力需求。已服务2000多家企业，包括好未来、方正、人人贷、秒拍等知名企业。\n\n<h2>7. 猿急送</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.yuanjisong.com\">猿急送</a>\n猿急送，一个高级技术共享平台，这里汇聚知名互联网公司的技术、设计、产品大牛，通过实际坐班、远程等方式，一对一为创业公司解决问题，提高创业效率。\n猿急送为您提供兼职程序员，兼职工程师信息，猿急送是一个高级技术共享平台，是优质的程序员兼职网站，这里汇聚BAT等知名互联网公司的技术开发、产品、设计大牛，通过实际坐班等方式，一对一为创业公司解决程序员、工程师等开发、产品设计人力问题。\n\n<h2>8. 人人开发</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"http://rrkf.com\">人人开发官方网站</a>\n人人开发基于可视化快速开发平台\n捷得（Joget）捷得云（Joget Cloud）（PaaS），集众多开发者资源，为企业提供企业管理软件服务。应用市场提供应用产品、插件的在线试用和销售，服务市场以威客众包模式提供管理软件定制开发服务，各类企业级应用开发服务，例如：协同OA产品，ERP，CRM，人事管理，项目管理，资产管理，设备管理等。\n\n<h2>9. 开发邦</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.kaifabang.com\">开发邦官方网站</a>\n\n公司位于北京中关村科技园区核心区海淀园，成立于2010年，专注于为客户提供互联网软件技术开发与咨询服务，致力于利用互联网软件技术为客户提高效率、降低成本、提升效能、优化管理。\n团队核心成员均具有十年以上软件互联网技术开发经验，毕业于工科名校。至今，已成功执行近百个项目，涵盖管理软件、互联网系统、移动APP、前端互动开发等。\n先后为华为公司、商汤科技、工信部中国软件评测中心、神州数码、深鉴科技、中软集团、中国万网、中石油吐哈气举中心、华北电力大学、中科院科技政策与管理研究所、浪潮集团、ADI、世界五百强伊顿中国、北京外国语大学、51talk、勤邦生物、安龙基因等知名企业及机构提供过互联网软件技术开发与技术咨询服务。\n开发邦致力于成为企业业务互联网软件服务与咨询的定制方案提供商。\n\n<h2>10. 电鸭社区</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://eleduck.com\">电鸭社区官方网站</a>\n电鸭社区旨在帮助更多人走上「只工作，不上班」的自由工作之路，我们是一个「分布式组织」，通过分享及行动带来积极的影响，相信点滴的力量能改变潮水的方向。\n\n<h2>11. 快码</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://kuaimacode.com\">快码官方网站</a>\n深圳快码科技成立于2014年11月，是一家创新型的互联网公司，致力于通过创新的开发方式，为软件技术开发行业带来改变，提供更快速、更高性价比的软件定制服务。\n\n<h2>12. 英选</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.yingxuan.io\">英选官方网站</a>\n英选，可信赖的软件外包服务。用优秀的人，做漂亮的产品，写干净的代码。平台以定制开发外包服务为主，也是外包项目平台。\n\n<h2>13. Upwork</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.upwork.com\">官方网站</a>\nUpwork 是全球最大的、最优秀的、最规范的综合类人力外包服务平台，由著名的 Elance 和 oDesk 合并。这里聚集 900 万来自全球各地的自由工作者，你肯定可以在找到适合你的职位。\n\n<h2>14. Freelancer</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.freelance.com\">Freelancer官方网站</a>\nFreelancer 的工作类型覆盖了很多不同的领域，由程序开发到市场营销、广告、会计、法务等一系列的可以远程的工作。\n\n<h2>15. Remoteok</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://remoteok.io/\">Remoteok官方网站</a>\nRemoteok 不仅提供最初的兼职类远程工作，还有全职类，签署合同类和实习类的工作。网站创始人 Pieter Levels 本身就是一名数字游民，他同样是 Nomadlist 的创始人。\n\n<h2>16. Toptal</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.toptal.com\">Toptal官方网站</a>\nToptal 是一个高端一些的自由职业者平台，适合比较有经验和工作尽力的远程工作者。它将企业与全球的软件工程师，设计师和业务顾问联系起来。\n\n<h2>17. AngelList</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://angel.co/remote\">AngelList官方网站</a>\nAngelList 主要是服务于初创公司和天使投资人的平台，这里还有初创公司提供的远程工作的机会，如果对远程加入初创公司感兴趣的，可以尝试一下。\n\n<h2>18. Topcoder</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.topcoder.com\">Topcoder官方网站</a>\nTopcoder 通过算法比赛吸引世界顶级的程序员，他会将一下大型项目分割成很多小模块，通过竞赛的模式交给用户来做，优胜者可以拿到制定模块的奖金。\n","tags":["接单项目"],"categories":["_T1-赚钱","接单项目"]},{"title":"一个软件搞定所有音乐，无视版权","url":"/2023/05/22/一个软件搞定所有音乐，无视版权/","content":"\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>放松心情的时候，往往都想来上一首歌，但是市面上的音乐软件，版权杂乱，往往一个音乐软件是找不到自己所想要听的歌。</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=5 face=\"宋体\">现在老夫来带一款来自github的开源软件 -- </font> <font color=red size=6 face=\"宋体\"><strong>Listen 1</strong></font>\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>来拯救你那无处安放，有骚动的心！软件最大特点：解锁鹅厂、某易云、某我. . .等市面所有音乐软件因版权，而发黑的链接！达到可以直接播放的目的，也就是，以前你听歌需要N歌软件，那么现在，你只需要一个就够了！</strong></font>\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>遗憾的是：软件目前功能稍有BUG，当然，这些bug是对于懂程序的人来所，如果你就单纯的听音乐。你可能无法发现这些bug。所有你可以放心食用</strong></font>\n\n<ul>\n<li><font color=#f26522 size=5 face=\"宋体\"><strong>浏览器插件：</strong></font>\n\n<ul>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Firefox插件：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://addons.mozilla.org/zh-CN/firefox/addon/listen1/\"><font color=#ef5b9c size=4 face=\"宋体\">点击进入Firefox插件中心</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Microsoft Edge插件：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://microsoftedge.microsoft.com/addons/detail/hneiglcmpeedblkmbndhfbeahcpjojjg\"><font color=#ef5b9c size=4 face=\"宋体\">点击进入Microsoft Edge插件中心</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Chrome 插件版 V2.21.6：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/listen1/listen1_chrome_extension/archive/v2.21.6.zip\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n</ul></li>\n<li><font color=#f26522 size=5 face=\"宋体\"><strong>客户端下载：</strong></font>\n\n<ul>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>安卓：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_0.8.2.apk-20211106103255-fxfdwn.zip\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Windows 桌面版安装包：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_win-20211106103217-jkgf2r.exe\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Mac Universal 桌面版：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_mac_universal-20211106103400-rp3ith.dmg\"><font color=#ef5b9c size=4 face=\"宋体\">点击进入下载页面</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Linux 64位桌面版：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_linux_x86_64-20211106103435-yjknbv.appimage\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Windows 桌面绿色版64位：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_win_x64-20211106102449-eofmd6.7z\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Windows 桌面绿色版32位：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_win_ia32-20211106103130-offfio.7z\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong>\n界面是这样的：\n<img src=\"https://s2.loli.net/2022/06/08/1Uq6FsgeIQENkrY.png\" alt=\"d9bec25a85627a48\" /></li>\n</ul></li>\n</ul>\n\n<font color=#00b2c2 size=7 face=\"宋体\">    安装：</font>\n\n<ul>\n<li>Chrome插件版\n\n<ul>\n<li>下载Chrome插件版压缩包，并解压缩</li>\n<li>打开 Chrome 扩展页面，勾选右上角「开发者模式」</li>\n<li>选择「加载已解压的扩展程序…」，选择刚刚解压缩的文件夹</li>\n<li>开始使用</li>\n</ul></li>\n<li>Firefox插件版\n\n<ul>\n<li>下载Firefox插件版，并解压缩</li>\n<li>打开 about:config 页面，xpinstall.signatures.required 设置为 false</li>\n<li>选择「附加组件」，齿轮图标，选择从文件安装附加组件，选择下载的xpi文件</li>\n<li>开始使用</li>\n</ul></li>\n<li><p>至于<del>windos和linux 就不说了！linux安装软件不会，你还是用回windos吧！</del></p></li>\n<li><p>至于. . . windos不会的. . .老夫就爱莫能助了！</p></li>\n</ul>\n","tags":["破解","软件"],"categories":["_A8-工具","音乐播放器"]},{"title":"硬件安装版linux下，安装VMware排坑记","url":"/2023/05/22/硬件安装版linux下，安装VMware排坑记/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>硬件安装版linux下，安装VMware排坑记：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>1. 1.linux升级内核</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>查看linux源</strong></font>\n\n```python\n# 查看源码信息\ncat /etc/apt/sources.list\n# 官方源没有5.14.0内核头，所以要修改成阿里源\n# 阿里源\ndeb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\ndeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\n```\n\n<font color=#f26522 size=4 face=宋体><strong>2. 2.linux升级内核</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>更新系统以及依赖</strong></font>\n\n```python\nsudo -i\n# 输入root密码\napt update\napt upgrade\napt dist-upgrade\nreboot\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>安装内核头文件</strong></font>\n\n```shell\napt-get install Linux-headers-$(uname -r)\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>检车内核头文件是否安装</strong></font>\n\n```shell\ndpkg-query -s linux-headers-$(uname -r)\n```\n\n<font color=#f26522 size=4 face=宋体><strong>3. 安装VMware</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>下载Linux版本VMware虚拟机</strong></font>\n  [点击下载](https://customerconnect.vmware.com/downloads/details?downloadGroup=WKST-1620-LX&productId=1038&rPId=75716)\n  [百度云直下版本](https://bd.bcebos.com/v1/xly-icafe/vmware-workstation-full-16.2.0-18760230.x86_64-20220126040532-c2o1rc.bundle)\n  [百度云直下最16.2.5版本](https://bd.bcebos.com/v1/xly-icafe/vmware-workstation-full-16.2.5-20904516.x86_64-20221223172537-3gywfr.bundle)\n  [阿里云盘下载](https://www.aliyundrive.com/s/NARUSYFXZuR)\n\n```python\n# 下载完成之后赋予文件执行权限\nchmod +x VMware-Workstation-Full-16.2.0-18760230.x86_64.bundle\nsudo ./VMware-Workstation-Full-16.2.0-18760230.x86_64.bundle\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>VMware16 pro 注册码</strong></font>\n\n```python\n# 每一行，为单独的一个祖册吗\nZF3R0-FHED2-M80TY-8QYGC-NPKYF\nYF390-0HF8P-M81RQ-2DXQE-M2UT6\nZF71R-DMX85-08DQY-8YMNC-PPHV8\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>卸载 VMware</strong></font>\n\n```python\nsudo vmware-installer -u vmware-workstation\n```\n\n","tags":["破解","软件"],"categories":["_A5-安装教程","linux安装VMware"]},{"title":"那些让人惊奇的云项目","url":"/2023/05/22/那些让人惊奇的云项目/","content":"\n<h1>有云服务器时能自建的项目</h1>\n\n<!--more-->\n\n<ul>\n<li>ss：https://github.com/lrinQVQ/script https://github.com/mritd/dockerfile/tree/master/shadowsocks</li>\n<li>网盘\n\n<ul>\n<li>Seafile：国产，C，同步盘，但必须依赖Py2.7</li>\n<li>https://github.com/nextcloud/docker https://docs.nextcloud.com/server/17/user_manual/ ：owncloud的同作者，PHP。https://github.com/e-alfred/ocdownloader 离线下载插件</li>\n<li>Cloudreve：国产，GO，支持OSS</li>\n<li>zFile：国产，Java</li>\n<li>https://github.com/syncthing/syncthing GO</li>\n<li>BTSync</li>\n<li>oneindex</li>\n<li>OLAINDEX：使用OneDrive API</li>\n<li>https://github.com/zhaojun1998/zfile 评测：https://xiaoyou66.com/archives/769</li>\n<li>https://www.directorylister.com/ indexer，PHP</li>\n<li>https://github.com/prasathmani/tinyfilemanager PHP</li>\n<li>sparkleshare</li>\n<li>rclone</li>\n<li>https://freefilesync.org/</li>\n</ul></li>\n<li>文件浏览器：https://larsjung.de/h5ai/ （PHP）、https://github.com/filebrowser/filebrowser （GO）</li>\n<li>gitlab</li>\n<li>爬虫</li>\n<li>论坛：discuz（PHP，维护不快），Flarum（PHP），vanilla (PHP)</li>\n<li>监控程序/API的：https://github.com/ivbeg/awesome-status-pages 合集。https://cachethq.io/ （合集中最活跃的但是PHP）、https://github.com/hunterlong/statping （GO）、https://github.com/bazzite/statusfy （JS）。https://uptimerobot.com/ 不开源，有免费版、https://www.atlassian.com/zh/software/statuspage 有免费版、https://github.com/nicolargo/glances (Py)、https://eheh.org/ 国产、https://www.fundebug.com/</li>\n<li>监控服务器状态：https://github.com/netdata/netdata C+Python，star非常多，有中文翻译。https://github.com/grafana/grafana TS+GO，star数稍少，但commit数和贡献者数非常多。https://github.com/open-falcon/falcon-plus GO，相对而言star数少很多，但是国产的，需要mysql；https://github.com/CokeMine/ServerStatus-Hotaru</li>\n<li>各种可以装的软件的收集：https://github.com/Kickball/awesome-selfhosted 、https://www.softaculous.com/softaculous/apps 、 https://github.com/luong-komorebi/Awesome-Linux-Software 、https://statusfy.co/</li>\n<li>自己挂广告</li>\n<li>图床：https://xiaoyou66.com/archives/774 https://molunerfinn.com/PicGo/ https://github.com/wisp-x/lsky-pro https://github.com/chevereto/Chevereto-Free</li>\n<li>可视化日志：https://goaccess.io</li>\n<li>BT下载：https://github.com/jpillora/cloud-torrent</li>\n<li>创建网页版的Shell：https://github.com/instantbox/instantbox</li>\n<li>jupyter notebook: https://xiaoyou66.com/archives/1095</li>\n<li>OSS: https://github.com/minio/minio https://www.digitalocean.com/community/tutorials/how-to-set-up-an-object-storage-server-using-minio-on-ubuntu-18-04 但协议是最严格的AGPL</li>\n<li>短链接：UOURLS（PHP，需要二次开发）Polr（也是PHP，不过偏向开箱即用）https://github.com/ellisonleao/pyshorteners</li>\n<li>https://apex.sh/up/ 一键部署几种语言的Serverless应用到AWS</li>\n<li>https://github.com/chrislusf/seaweedfs 分布式文件系统，支持S3的API；https://github.com/syncthing/syncthing</li>\n<li>当我有服务器时我做了什么（别人的集合）：https://shanyue.tech/op</li>\n<li>后台控制面板：https://www.jianshu.com/p/3bc7404af887</li>\n<li>搜索引擎：https://github.com/benbusby/whoogle-search https://github.com/milvus-io/milvus</li>\n<li>控制面板：https://github.com/cockpit-project/cockpit</li>\n<li>性能测试：<code>curl -L bench.sh | bash</code></li>\n<li>CMS: https://www.storyblok.com/</li>\n<li>CI\n\n<ul>\n<li>https://www.jetbrains.com/teamcity/</li>\n<li>https://drone.io/</li>\n</ul></li>\n</ul>\n\n<h2>1. 自建Paas</h2>\n\n集合：https://paasfinder.org\n\n<ul>\n<li>https://dokku.com/</li>\n<li>openstack，开源IaaS，机器最好有10G以上的内存</li>\n<li>rancher, openshift, CloudFoundry, flynn</li>\n<li>https://www.rainbond.com/ 国产的</li>\n<li>https://letscoded.com</li>\n<li>https://www.koding.com/</li>\n<li>https://kodcloud.com/ 有使用者表示“每次访问都会采集服务端和客户端的隐私信息，里面流氓脚本一大堆”</li>\n<li>https://github.com/caprover/caprover</li>\n<li>https://convox.com/</li>\n<li>https://nanobox.io/</li>\n<li>https://caprover.com/</li>\n<li>https://rio.io/</li>\n<li>https://github.com/teamhephy/workflow</li>\n<li>https://www.kintohub.com/ 基于k8s</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"那些让人惊奇的云项目(第二弹)","url":"/2023/05/22/那些让人惊奇的云项目-第二弹/","content":"\n<h2>1. 网页</h2>\n\n<!--more-->\n\n<h3>1.1. 域名</h3>\n\n<ul>\n<li>理论上DDNS也会提供，不过不是二级的</li>\n<li>https://my.freenom.com/clientarea.php  tk、ml、ga、cf、gq顶级域名</li>\n<li>https://nic.eu.org/ 欧盟下的，个人免费注册；http会被重置</li>\n<li>https://dns.txizd.cn/ 三级</li>\n<li>https://dns.yzjia.xin/ 三级</li>\n<li>http://cc.1xie.xyz</li>\n<li>https://github.com/fransallen/thedev.id https://github.com/js-org/js.org 要开PR</li>\n<li>https://www.freedomain.pro/ co.nr</li>\n<li>http://www.com.nu/</li>\n<li>https://domainoji.com/ https://www.punycoder.com/ emoji/idn域名转换；https://emojipedia.org/ emoji搜索</li>\n<li>https://nic.ua/en/domains 乌克兰 pp.ua</li>\n<li>https://www.azote.org 法国 asso.st，fr.nf，fr.cr，ze.cx，infos.st</li>\n<li>https://www.nom.za 南非</li>\n<li>https://www.sitelutions.com 纽埃 rr.nu</li>\n<li>https://www.ipq.co 哥伦比亚共和国</li>\n<li>https://fofa.so/ 用来搜索域名的</li>\n</ul>\n\n<h3>1.2. 证书</h3>\n\n<ul>\n<li>https://freessl.cn</li>\n<li>https://freessl.org</li>\n<li>https://allinssl.com/zh/</li>\n<li>https://zerossl.com/</li>\n</ul>\n\n<h3>1.3. DNS</h3>\n\n<ul>\n<li>https://www.dns.la/</li>\n<li>https://www.bajiedns.com/</li>\n<li>https://www.dnsdun.com/</li>\n<li>https://nip.io/ 自动根据域名中的IP返回DNS查询结果。xip.io挂了</li>\n<li>https://dnsmadeeasy.com/</li>\n</ul>\n\n<h3>1.4. <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/ZE3kr/Cloudflare-CNAME-Setup/blob/master/README.zh.md\">Cloudflare CNAME/IP/NS 接入</a></h3>\n\n<ul>\n<li>https://cdn.liang.ke/</li>\n<li>https://cf.tlo.xyz/</li>\n<li>https://dns.porta1.net/</li>\n<li>https://cdn.bnxb.com/</li>\n<li>https://cdn.wzfou.com/</li>\n<li>https://cdn.moeelf.com/</li>\n</ul>\n\n<h3>1.5. CDN</h3>\n\n<ul>\n<li>https://su.baidu.com/product/cdn.html</li>\n<li>http://cdn.meierlian.net/</li>\n<li>https://www.yunaq.com/jsl/ 仅限80端口</li>\n<li>https://www.cdnfine.com/</li>\n<li>https://wangzhan.qianxin.com/ 前身是360网页卫士</li>\n<li>https://www.merlincdn.com/ 注册送$10，不清楚有没有限时，额度有个自选的</li>\n<li>https://github.com/EtherDream/freecdn 自动选择合适的CDN的程序</li>\n</ul>\n\n<h3>1.6. 短网址</h3>\n\n<ul>\n<li>https://1t.click/ 、https://sina.lt/ 新浪的</li>\n<li>https://u.nu/</li>\n<li>http://suo.im/</li>\n<li>https://tinyurl.com/ 无法直接访问</li>\n<li>https://bitly.com/ 无法直接访问</li>\n<li>https://sl.iyong.com/</li>\n<li>https://v.ht 国外的</li>\n</ul>\n\n<h2>2. 国内源/镜像</h2>\n\n<ul>\n<li>https://github.com/china-speed/china-speed.github.io apt/docker/pip/npm收集</li>\n<li>https://www.7ed.net Google Fonts/Libraries、CDNJS、Gravatar、Github RAW、Imgur、SM.MS反代；曾用cdn.staticdn.net cdn.con.sh</li>\n<li>https://cdn.geekzu.org/cached.html Google Fonts/Libraries、Gravatar反代</li>\n<li>https://sb.sb/blog/css-cdn/ loli.net域名，Google Fonts/Libraries、Gravatar反代</li>\n<li>https://npm.taobao.org/mirrors 一部分GitHub开源项目的release</li>\n</ul>\n\n<h3>2.1. GitHub</h3>\n\n<ul>\n<li>jsdelivr、statically：相当于只支持raw</li>\n<li>https://doc.fastgit.org/zh-cn/node.html 主站网页、assets、<del>raw、release</del></li>\n<li>https://gitclone.com/ 支持http clone</li>\n<li>https://github.zhlh6.cn/ 支持ssh</li>\n<li>https://pd.zwc365.com/</li>\n<li>https://github.com/XIU2/UserScript/blob/master/GithubEnhanced-High-Speed-Download.user.js</li>\n<li>http://www.toolzl.com/tools/githubjiasu.html 支持release</li>\n<li>https://github.com/zwc456baby/file-proxy https://pd.zwc365.com/</li>\n<li>https://github.wuyanzheshui.workers.dev/ https://github.rc1844.workers.dev/ 网页版</li>\n<li>https://github.com/nulastudio/mclone 安装后用git mclone即可自动用mirror</li>\n<li>https://shrill-pond-3e81.hunsh.workers.dev/ https://gh.api.99988866.xyz/ https://g.ioiox.com/ (https://github.com/hunshcn/gh-proxy)</li>\n<li>https://github.bajins.com/ 网页版</li>\n<li>https://gh.haval.gq 没处理css和js的网页版</li>\n<li>https://ghproxy.com/</li>\n<li><del>github.com.cnpmjs.org</del> 网页版，触发了滥用检测</li>\n<li><del>https://d.serctl.com/</del> 活着但是日本Linode，IP干扰大，几乎不可访问</li>\n<li><del>zll.us</del></li>\n<li><del>https://githubd.com</del></li>\n<li><del>widora：http://gg.widyun.com http://g.widyun.com/ http://g.widora.cn/ 支持release</del></li>\n<li><del>https://git.best/</del></li>\n<li><del>http://gitd.cc/</del></li>\n<li><del>https://www.toolwa.com/github/</del> 网站本身活着，但线路一是用不了的jsproxy，线路二是fastgit</li>\n</ul>\n\n<h3>2.2. 前端库</h3>\n\n<ul>\n<li>国内的，基本都是同步的cdnjs，否则要么不全要么老；链接格式只有bootcdn.cn的与cdnjs完全相同，其余的都没有ajax/libs/部分，字节的还多一部分\n\n<ul>\n<li>https://www.bootcdn.cn/ 由bootcss网站支持；https://cdn.bootcss.com/ 没公开但能用</li>\n<li>https://www.staticfile.org/ 七牛云。版本默认选的最老的，不知道怎么想的</li>\n<li>https://cdn.baomitu.com/ 360</li>\n<li>https://cdn.bytedance.com/ 字节跳动，直接把所有库按首字母列出来</li>\n<li>https://jshub.com 有点旧，感觉是模仿bootcdn的</li>\n<li>https://cdnjs.net/ 有可能2019年后就没更新了</li>\n<li>https://lib.sinaapp.com/ 新浪，少且旧，jq最新3.1</li>\n<li>http://jscdn.upai.com/ 又拍云，极少且极旧，无https</li>\n<li>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js 非公开，不更新</li>\n</ul></li>\n<li>国外的\n\n<ul>\n<li>https://www.jsdelivr.com/ 有国内CDN。支持GitHub。https://esm.run 支持ESM</li>\n<li>https://cdnjs.com/ CF自己的，访问慢</li>\n<li>https://unpkg.com/ 用的CF的CDN，实验性支持ESM</li>\n<li>https://statically.io/ 用的Fastly的CDN。只支持GitHub，加min后缀自动压缩，还有图片压缩服务和网页快照截图功能</li>\n<li>https://jspm.org/ 仅ESM</li>\n<li>https://www.skypack.dev/ snowpack团队的，ESM，高度为浏览器优化</li>\n<li>https://esm.sh/ 仅ESM，自动转换的</li>\n<li>https://ajax.aspnetcdn.com 微软的，只有jq相关的很少几个，但路径格式与jq官网相同方便替换</li>\n</ul></li>\n<li>Font Awesome\n\n<ul>\n<li>前面那些前端库仍可用</li>\n<li>https://use.fontawesome.com/releases/v5.15.0/css/all.css 官方的，但注意它其实对应的是min.css</li>\n<li>http://apps.bdimg.com/libs/fontawesome/4.4.0/css/font-awesome.min.css 非公开，不更新</li>\n</ul></li>\n</ul>\n\n<h2>3. 储存</h2>\n\n<h3>3.1. OSS</h3>\n\n<ul>\n<li>https://www.zhihu.com/question/51309695 有哪些优秀且免费的云存储服务？</li>\n<li>https://www.zhihu.com/question/34445630/answer/449868590 网易云，免费50G空间，20G流量</li>\n<li>https://developer.qiniu.com/af/kb/1574/free-credit-information https://www.qiniu.com/events/free 七牛云</li>\n<li>https://www.upyun.com/league 又拍云，10G储存15G流量</li>\n<li>https://www.ucloud.cn/site/product/ufile.html 实名认证用户20GB免费云存储空间和20GB/月免费下载流量</li>\n<li>http://www.cuplayer.com/price/ 酷播云，视频储存</li>\n<li>https://u-file.cn/ 好像需要申请</li>\n<li>https://get.robin.io/ 5GB</li>\n</ul>\n\n<h3>3.2. 网盘</h3>\n\n<ul>\n<li>https://www.quqi.com/ 曲奇云盘，但好像没有电脑端</li>\n<li><del>http://ddl.escience.cn/ 科研在线</del></li>\n<li>https://own-cloud.cn/ 小麦云盘</li>\n<li>https://cowtransfer.com/ 奶牛快传，<del>现在也提供网盘功能</del></li>\n<li>https://www.wenshushu.cn/</li>\n<li>https://www.liupan.net/</li>\n<li>https://teracloud.jp 10G空间，支持 WebDAV；推荐码NDMSQ</li>\n<li>https://www.furk.net/ 很慢，1G/D且5G/W</li>\n<li>https://www.lanzou.com/ 蓝奏云，单个文件限100M</li>\n<li>亿方云</li>\n<li>天翼云盘、沃家云盘、和彩云</li>\n<li>https://www.zoho.com.cn/workdrive/</li>\n<li>超星云盘</li>\n<li>腾讯微云</li>\n<li>https://www.asuswebstorage.com</li>\n<li>https://pan.bitqiu.com/ 比特球云盘</li>\n<li>https://www.90pan.com/ 速度有4M</li>\n<li>https://github.com/xausky/DockerRegisterCloud 把docker registry变成网盘</li>\n<li>https://6pan.cn/ https://2dland.cn/</li>\n<li>https://www.mediafire.com/</li>\n<li>https://github.com/apachecn/CDNDrive</li>\n</ul>\n\n<h3>3.3. Onedrive</h3>\n\n<ul>\n<li>https://products.office.com/en-us/student?tab=students</li>\n<li>https://t.odmail.cn/</li>\n<li>http://od.obagg.com</li>\n<li>http://onedrive.readmail.net/</li>\n<li>http://xkx.me/</li>\n<li>https://xlu.me/</li>\n<li>http://xix.men:3000/</li>\n<li>https://xyxywan.gitee.io/web/ 有桌面office但需审批</li>\n<li>https://get.porta1.net/</li>\n<li>https://zhuanlan.zhihu.com/p/105438817 免费申请office E5开发者订阅，附无限续期+私人网盘教程</li>\n<li>Index：https://github.com/spencerwooo/onedrive-vercel-index https://github.com/vcheckzen/FODI https://github.com/qkqpttgf/OneManager-php</li>\n</ul>\n\n<h3>3.4. 文件分享</h3>\n\n<ul>\n<li>https://catbox.moe/ 上传速度不稳定，快的时候有600K，单次上限200MB</li>\n<li>https://www.zippyshare.com/ 上传速度为0</li>\n<li><del>https://send.firefox.com/ 上传速度能到2M，但有时传到一半会断掉；VPS的下载速度能到21MB/s</del></li>\n<li>https://www.up-4ever.org/ 上传速度不到1M，需要关闭广告过滤扩展才能用，有的后缀不让传，下载等30秒人机验证后倒是能创建出直链，单次上限200MB</li>\n<li>https://transfer.sh/</li>\n<li>https://uguu.se/ 单次上限100MB</li>\n<li>https://anonfiles.com/</li>\n<li>https://letsupload.co/</li>\n<li>https://secufiles.com/</li>\n<li>https://wetransfer.com/</li>\n<li>https://wormhole.app/</li>\n</ul>\n\n<h3>3.5. 离线下载</h3>\n\n<ul>\n<li>https://www.loadbt.com 免费用户2G；曾经有中文且crowdin上翻译完成但现在不提供选项了</li>\n<li>https://zhuanlan.zhihu.com/p/37785481 19款离线下载服务对比</li>\n</ul>\n\n<h3>3.6. 图床</h3>\n\n<ul>\n<li>http://www.zmonster.me/2013/12/06/image-host-service.html 国内外图床及其对比</li>\n<li>https://www.zhihu.com/question/21667151</li>\n<li>https://sm.ms/</li>\n<li>https://moxtu.cc</li>\n<li>https://postimages.org/</li>\n<li>https://imgbox.com/</li>\n<li>https://imgbb.com/</li>\n<li>https://www.freeimagehosting.net/</li>\n<li>https://imgchr.com/</li>\n<li>https://pic.xiaojianjian.net/</li>\n<li>https://imgurl.org/</li>\n<li>https://postimages.org/</li>\n<li>https://img.kuibu.net/</li>\n<li>https://www.superbed.cn/ pic.imgdb.cn</li>\n<li>https://imgs.thankjava.com/</li>\n<li>https://www.moepicx.cc</li>\n<li>https://www.hualigs.cn/</li>\n<li>https://jpg.dog/</li>\n<li>https://www.z4a.net/</li>\n<li>https://moetu.org/</li>\n<li>https://imgbb.com/</li>\n<li>https://www.picgd.com/</li>\n<li>https://tuchuang.richuyun.com/</li>\n<li>http://pan.duiai.cc/</li>\n<li>https://osrpay.com/</li>\n<li>https://233.pictures</li>\n<li>https://images.weserv.nl/ image cache & resize service 相当于图片的CDN</li>\n<li>https://imgtu.com/</li>\n<li>https://img.blueskyxn.com/</li>\n</ul>\n\n<h3>3.7. 下载百度网盘的</h3>\n\n<ul>\n<li>https://xdown.org/baiduyun/</li>\n<li><del>https://www.baiduwp.com/</del> 挂了</li>\n<li>https://github.com/TkzcM/baiduwp</li>\n</ul>\n\n<h3>3.8. BT Trackers</h3>\n\n<ul>\n<li>https://github.com/ngosang/trackerslist</li>\n<li>https://github.com/XIU2/TrackersListCollection</li>\n<li>https://github.com/DeSireFire/animeTrackerList</li>\n</ul>\n\n<h2>4. (盗版)资源</h2>\n\n<ul>\n<li>https://discx.yuntu.io/ 光盘</li>\n</ul>\n\n<h3>4.1. 软件</h3>\n\n<ul>\n<li>https://masuit.com/</li>\n<li>https://www.lanzous.com/u/roustar31cn</li>\n</ul>\n\n<h3>4.2. 书</h3>\n\n<ul>\n<li>https://t.me/ebookdl 亲测确实能搜到</li>\n<li>https://github.com/hoodiearon/w3-goto-world/tree/master/集成实用夹/书籍与文档</li>\n<li>https://smtebooks.com/</li>\n<li>https://foxgreat.com/ 搜不到C#的书</li>\n<li>https://dokumen.pub 网站不是英文的</li>\n<li>https://www.wowebook.org 下载页面为turbobit.net，很慢，而且有的要开会员</li>\n<li>https://www.zhihu.com/question/21202757 有哪些好的电子书下载网站推荐？</li>\n<li>https://zhuanlan.zhihu.com/p/53064677 有了这十几个网站，没有你找不到的电子书！</li>\n<li>https://www.jiumodiary.com/ 鸠摩搜书，也能搜到百度网盘的内容</li>\n<li>https://gist.github.com/baiwfg2/af827b8b75eebf8ab29f5531a0d265ce</li>\n<li><del>https://www.allitebooks.com/</del> 超好但是挂了，不清楚现在的几个是否有关：https://www.allitebooks.in/ https://allitebook.xyz/ https://allitbooks.net/</li>\n<li>https://www.jb51.net/books/ 下载需要关注公众号获取提取码</li>\n<li>https://zh.4lib.org/</li>\n<li>http://sd.blackball.lv/books/</li>\n<li>https://sobooks.cc/ 不是专门计算机的</li>\n<li>http://www.kgbook.com/ 不是专门计算机的</li>\n<li>https://z-lib.org/ 无法直接访问</li>\n<li>https://www.zhihu.com/question/19709630 有哪些网站可以获取免费的国外的原版书籍（电子版）</li>\n<li>https://github.com/EbookFoundation/free-programming-books 免费的</li>\n</ul>\n\n<h3>4.3. 音乐</h3>\n\n<ul>\n<li>https://myfreemp3cc.com/ 好像可以用</li>\n<li>http://tool.liumingye.cn/music/ 新版：https://music.liumingye.cn/ 电影：http://lab.liumingye.cn</li>\n<li>http://tool.yijingying.com/musictools/ 一部分用不了</li>\n<li>https://www.boxpaper.club/musicdownloader/ 未测试</li>\n<li>http://music.moresound.tk/ 暂时所有的都用不了，但是网站还在，不知是否有特殊的方法</li>\n<li>https://www.52pojie.cn/thread-929831-1-1.html 集合</li>\n<li>https://listen1.github.io/listen1/ 只是整合可以直接听的</li>\n<li>https://github.com/lyswhut/lx-music-desktop</li>\n<li>http://www.guqiankun.com/tools/music/</li>\n<li>挂了的：https://music.2333.me/ https://github.com/maicong/music</li>\n</ul>\n\n<h3>4.4. GeoIP2数据库</h3>\n\n<ul>\n<li>https://geolite.clash.dev/</li>\n<li>https://github.com/Dreamacro/maxmind-geoip/releases</li>\n<li>https://static.clash.to/GeoIP2/GeoIP2-Country.tar.gz （RixCloud 公共库）</li>\n<li>https://quantumult.crossutility.com/download/geoip/database/GeoLite2-Country.mmdb</li>\n</ul>\n\n<h3>4.5. 字体</h3>\n\n<ul>\n<li>https://zenozeng.github.io/Free-Chinese-Fonts/</li>\n<li>https://www.webfont.com/onlinefont/index</li>\n<li>https://www.marksimonson.com/fonts</li>\n</ul>\n\n<h2>5. 安全</h2>\n\n<ul>\n<li>https://github.com/euphrat1ca/security_w1k1</li>\n<li>https://github.com/No-Github/1earn</li>\n</ul>\n\n<h3>5.1. 恶意软件分析沙箱</h3>\n\n<ul>\n<li>https://habo.qq.com/ 腾讯哈勃。现在只能分析很少的一部分，详细报告需要高级会员，而申请通道已经关闭了</li>\n<li>https://www.maldun.com/ 魔盾安全。有效，但是貌似速度很慢，我是直接第二天再去看的</li>\n<li>https://s.threatbook.cn/ 微步。貌似出来不久</li>\n<li>https://www.hybrid-analysis.com 国外的</li>\n<li>https://app.sndbox.com</li>\n<li>https://scan.anxinsec.com/</li>\n</ul>\n\n<h3>5.2. 服务器安全软件</h3>\n\n<ul>\n<li>https://www.yunsuo.com.cn/download.html</li>\n<li>https://scanner.baidu.com webshell检测引擎</li>\n</ul>\n\n<h2>6. Git平台</h2>\n\n<ul>\n<li>https://code.aliyun.com</li>\n<li>https://xiaolvyun.baidu.com</li>\n<li>https://opendev.org Ubuntu, Gitea</li>\n<li>https://salsa.debian.org/ GitLab</li>\n</ul>\n\n<h2>7. Paste Bin</h2>\n\n<ul>\n<li>https://pastebin.com/</li>\n<li>https://ghostbin.com/</li>\n<li>https://rentry.co/</li>\n<li>https://hastebin.com/</li>\n<li>https://pastebin.ubuntu.com/</li>\n<li>https://www.cacher.io/ 功能很多</li>\n<li>https://write.as/ 其实是博客</li>\n<li>https://del.dog/</li>\n<li>https://psty.io</li>\n<li>https://telegra.ph RST了</li>\n</ul>\n\n<h2>8. 搜索引擎</h2>\n\n<ul>\n<li>https://goobe.io/ 程序员搜索</li>\n<li>https://fofa.so/ 类似于钟馗之眼的搜索引擎</li>\n<li>http://www.sousuoyinqingtijiao.com 搜索引擎提交入口（但没有Google）</li>\n<li>https://2tool.top/ 聚合搜索引擎网页快照</li>\n<li>https://www.cn-ki.net/ 学术搜索；http://cnki.cn-ki.net/ 知网</li>\n</ul>\n\n<h2>9. Docker平台（非免费）</h2>\n\n<ul>\n<li>https://www.tenxcloud.com/ 时速云</li>\n<li>https://www.daocloud.io/ 有一点点免费测试环境 http://docs.daocloud.io/app-deploy-mgmt/cloud-limited-resources</li>\n<li>https://www.mopaas.com/ 魔泊云</li>\n<li>https://www.alauda.cn/ 灵雀云</li>\n<li>https://canister.io/solo</li>\n<li>https://hostpresto.com/docker-hosting 免费六个月</li>\n</ul>\n\n<h2>10. CI</h2>\n\n<ul>\n<li>https://www.shippable.com/pricing.html</li>\n<li>https://codefresh.io/</li>\n</ul>\n\n<h2>11. 图标</h2>\n\n<ul>\n<li>https://octicons.github.com/</li>\n</ul>\n\n<h2>12. 云办公相关</h2>\n\n<ul>\n<li>https://uzer.me/ 有office，ps，ai，cad，matlab，visio，ff。论坛挂了</li>\n<li>http://www.gleasy.com/ 格子云，到哪都能办公</li>\n<li>http://www.everydo.com/ 文档管理系统</li>\n</ul>\n\n<h2>13. PDF</h2>\n\n<ul>\n<li>https://www.hipdf.com/</li>\n<li>https://smallpdf.com/cn</li>\n</ul>\n\n<h2>14. 爬虫</h2>\n\n<ul>\n<li>https://www.bazhuayu.com/ 八爪鱼；国外版 https://www.octoparse.com/</li>\n<li>http://www.houyicaiji.com/</li>\n<li>http://www.gooseeker.com/</li>\n<li>以下是国外的</li>\n<li>https://www.zyte.com</li>\n<li>https://apify.com/</li>\n<li>https://www.diffbot.com/</li>\n<li>https://www.import.io/</li>\n</ul>\n\n<h2>15. 微信消息推送</h2>\n\n<ul>\n<li>https://sct.ftqq.com/ Server酱</li>\n<li>http://www.xtuis.cn/ 虾推啥</li>\n<li>https://pushplus.hxtrip.com/ push+</li>\n<li>https://qmsg.zendee.cn/ Qmsg酱</li>\n<li>https://wxpusher.zjiecode.com 开源</li>\n<li>https://letserver.run/ Server饭，开源</li>\n<li>https://github.com/songquanpeng/message-pusher 开源</li>\n</ul>\n\n<h2>16. CI</h2>\n\n<ul>\n<li>Circle CI 老牌</li>\n<li>AppVeyor 以Win出名</li>\n<li>https://cloud.drone.io 有人说文档烂</li>\n<li>https://semaphoreci.com/</li>\n<li>https://buildkite.com/</li>\n</ul>\n\n<h2>17. 其它中的其它</h2>\n\n<ul>\n<li>https://img.xjh.me/ 随机图片 https://api.lolicon.app/#/setu 随机色图</li>\n<li>http://shaofan.org/jetbrains-active/ Jetbrains在线激活工具</li>\n<li>https://apiary.io/ API Design Stack，与Oracle合作</li>\n<li>https://www.sap.cn/products/cloud-platform/pricing.html ERP系统；注册Beta版是免费的，但要填姓名公司电话</li>\n<li>https://developer.okta.com/ adds authentication, authorization, and user management to your web or mobile app within minutes.</li>\n<li>https://www.chanzhi.org/dynamic.html https://www.chanzhi.org/book/chanzhieps/5.html https://www.zentao.net/ 蝉知和禅道，前者是CMS，后者是项目管理系统。不过是PHP</li>\n<li>https://www.kancloud.cn/ https://www.yuque.com/ https://www.baklib.com/ MD平台</li>\n<li>http://www.ypppt.com/ ppt</li>\n<li>https://enterprise.glyptodon.com/ 网页版Windows远程桌面</li>\n<li>https://squoosh.app/ 图片压缩，谷歌出的工具</li>\n<li>http://www.freeyun.net/ 软件授权管理一站式解决方案</li>\n<li>https://prerender.io/ 预渲染动态网页</li>\n<li>https://termible.io 还在内测的在线终端，基于Docker</li>\n<li>https://heyterm.com/zh-cn/ WebSSH</li>\n<li>https://www.freepik.com/ 免费psd图像资源</li>\n<li>https://pyup.io/ 监测Python依赖</li>\n<li>https://waifulabs.com/ AI生成二次元头像</li>\n<li>https://appcenter.ms/ 存放release</li>\n<li>https://bell-sw.com/ OpenJDK</li>\n<li>https://dev.to/doobled/listing-the-best-services-for-free-domain-email-addresses-in-2020-3hkb 几个邮箱测评</li>\n<li>https://newrelic.com 遥测？</li>\n<li>https://mailchimp.com/ 群发邮件</li>\n<li>性能测试：<code>wget -qO- 86.re/bench.sh | bash</code></li>\n<li>https://github.com/fangzesheng/free-api 免费的接口</li>\n<li>https://github.com/zhaojh329/rtty web tty</li>\n<li>https://www.plasticscm.com/ 不同于git的版本控制系统，可以玩玩</li>\n<li>https://trinket.io/ Py的Turtles运行环境，谷歌的Blocks，适合小孩子学</li>\n<li>手机原生应用推送：https://www.getui.com/push https://www.jiguang.cn/push</li>\n<li>服务器监控：https://www.oneapm.com https://www.tingyun.com/ https://www.jiankongbao.com/</li>\n<li>https://www.authing.cn/pricing 统一身份验证</li>\n</ul>\n\n<h2>18. 别人的收集</h2>\n\n<ul>\n<li>https://www.freehao123.com/</li>\n<li>https://51.ruyo.net/</li>\n<li>https://github.com/Sicmatr1x/Free-Resource</li>\n<li>https://www.producthunt.com/</li>\n</ul>\n\n<h2>19. 挂了的</h2>\n\n<ul>\n<li>Ohosti “骗人的，去年申请的现在还在Pending中”</li>\n<li>https://vitu.ai</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"那些让人惊奇的云项目(第三弹_网络和ddns)","url":"/2023/05/22/那些让人惊奇的云项目-第三弹-网络和ddns/","content":"\n<hr />\n\nDDNS需要公网IP，基本上就是隔一段时间访问一下接口，连接和传输数据是不会消耗服务商的流量的。\n\n<!--more-->\n\n内网穿透需要消耗服务器的流量。\n还有点对点/内网打洞的技术，但是需要两边都安装软件：xtcp，n2n，moon，zerotier one\n\n<h2>1. frp</h2>\n\n<ul>\n<li>https://www.natfrp.org/ Sakura Frp</li>\n<li>https://bob.kim/frp 博主自己搭的</li>\n<li>https://www.lu8.win/ ngrok、frp、n2n、nps、免费域名</li>\n<li>https://napyy.com/</li>\n<li>https://qydev.com 限速1M</li>\n</ul>\n\n<h2>2. ngrok</h2>\n\n1.x开源但现在已经停止维护了；2.x不开源。\n\n<ul>\n<li>https://ngrok.com/ 官网，服务器在国外</li>\n<li>https://natapp.cn/ 免费的需实名认证</li>\n<li>https://www.ngrok.cc/ Sunny Ngrok，不过官网说也支持frp</li>\n<li>https://www.tunnelnat.com/ 虽然也写了frp，但好像只有ngrok有免费通道</li>\n</ul>\n\n<h2>3. 其它开源的</h2>\n\n<ul>\n<li>https://github.com/ffay/lanproxy Java</li>\n<li>http://wdom.net/ 免费20分钟</li>\n<li>https://github.com/inlets/inlets</li>\n</ul>\n\n<h2>4. 其它不开源的</h2>\n\n<ul>\n<li>https://hsk.oray.com/ 花生壳，注册需要手机号；DDNS和内网穿透都支持？后者免费速度1M。</li>\n<li>https://www.kingdriod.cn/ 神卓，免费速度1M；需要实名认证上传身份证</li>\n<li>http://www.luyouxia.com/ 路由侠</li>\n<li>https://www.notr.tech/ 免费3小时</li>\n<li>https://www.nsloop.com/ 量子互联，写的不限流量</li>\n<li>http://www.mofasuidao.cn/ 魔法隧道，写的是“免费创建账户”</li>\n<li>http://www.youtusoft.com/ 网络通</li>\n<li>https://xiaomy.net/ 网云穿</li>\n<li>https://localhost.run/ 无需注册？</li>\n</ul>\n\n<h2>5. 免费DDNS</h2>\n\n<ul>\n<li>https://dyndnss.net/eng/</li>\n<li>https://freedns.afraid.org/</li>\n<li>https://www.duckdns.org/</li>\n<li>https://www.noip.com/</li>\n<li>https://www.spdyn.de/ 只有德语？</li>\n<li>https://dynv6.com/</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"那些让人惊奇的云项目(第四弹_云)","url":"/2023/05/22/那些让人惊奇的云项目-第四弹-云/","content":"\n<h1>云</h1>\n\n<!--more-->\n\nIaaS指提供系统（可以自己选）或者储存空间之类的硬件，软件要自己手动装；PaaS提供语言环境和框架（可以自己选）；SaaS只能使用开发好的软件（卖软件本身）；BaaS一般类似于非关系数据库，但各家不通用，有时还有一些其它东西。\n\n<h2>1. 其他人的集合</h2>\n\n<ul>\n<li>https://education.github.com/pack GitHub学生包，需用教育邮箱验证。各种福利，可从DigitalOcean上手</li>\n<li>https://github.com/ripienaar/free-for-dev</li>\n<li>https://github.com/AchoArnold/discount-for-student-dev</li>\n<li>https://github.com/ivmm/Student-resources</li>\n<li>https://www.freeforstudents.org/</li>\n<li>https://github.com/255kb/stack-on-a-budget</li>\n<li>https://github.com/Ibexoft/awesome-startup-tools-list</li>\n<li>https://www.cokemine.com/</li>\n</ul>\n\n<h2>2. Paas</h2>\n\n<ul>\n<li>https://www.heroku.com/ java go py docker。国内访问不佳</li>\n<li>https://fly.io/docs/pricing/ py node go 静态，感觉很完美</li>\n<li>https://www.deta.sh/ py3.7 node12 内存128MB，依赖250MB，大概率不支持DBMS，支持定时任务。有类dict数据库和10GB存储且可独立使用</li>\n<li>https://www.pythonanywhere.com/ 限制非常多，几乎就和虚拟主机差不多了，免费账户不允许访问白名单之外的网站。但好歹能提供一个自动https的web app</li>\n<li>https://www.divio.com/ docker</li>\n<li>https://www.clever-cloud.com/en/pricing 看介绍送20€，但应该只会送一次，可以用4个月</li>\n<li>https://cloud.google.com/appengine/docs/ 标准环境有一点储存空间和流量，要求启用API即要求绑卡，柔性环境(.NET)必须启用结算。国内无法访问</li>\n<li>https://clustered.com/pricing 现在只免费14天，永久免费的plan还没出，但至少从2020年11月就是这样了</li>\n<li>https://www.koyeb.com docker node py go，首页被RST</li>\n<li>https://railway.app/ node py go java，用了类似于heroku的buildpacks，RST</li>\n</ul>\n\n<h3>2.1. .net</h3>\n\n<ul>\n<li>https://appharbor.com 看起来比较好，支持3.1。好像不支持5：https://support.appharbor.com/discussions/problems/117063-net-5-support</li>\n<li>https://freeasphosting.net/ 网站说了一大堆学习的东西，不过说支持.NET5</li>\n<li>https://www.gearhost.com/ 看起来比较好，支持3.1。还支持PHP7和node。现在开了CF屏蔽大陆IP</li>\n<li>https://order.aspify.com/en/freehosting/ 100MB硬盘100MB数据库，支持5。但之前不让注册说服务在中国不可用</li>\n<li>https://somee.com/ 被墙了，且IP被封了</li>\n<li>https://www.myasp.net/hosting_plans 免费两个月但好像能免费续期</li>\n</ul>\n\n<h2>3. 云端空间/IDE</h2>\n\n<ul>\n<li>https://cloudstudio.net VSC，服务器在上海，每日限时四小时</li>\n<li>https://www.gitpod.io/ VSC，免费版每月50小时，支持在本地打开；专业版在学生包里免费6个月但要求Primary Email是学校的账户</li>\n<li>GitHub Workspaces：可能收费</li>\n<li>https://workspaces.openshift.com/ 魔改VSC，不支持扩展，国内访问慢；之前是codenvy和che.openshift.io</li>\n<li>https://repl.it/ 有免费版；专业版在学生包里免费3个月</li>\n<li>https://paiza.cloud/en/ 日产，好像还支持SSH连上去</li>\n<li>https://codetasty.com/</li>\n<li>https://www.suishencode.com/ 国内的，code-server，不知道为什么全网都搜不到信息</li>\n<li>https://next.tech/ 学生包中有</li>\n<li>https://ide.goorm.io/pricing 可以建立五个工作区，可以用SSH连上去。好像是自制的，界面完成度蛮高的，有终端，但没有intellisense，只能玩玩</li>\n<li>https://www.tutorialspoint.com/codingground.htm http://codepad.org/ https://ideone.com/ https://coliru.stacked-crooked.com/ https://wandbox.org/ https://tio.run https://code.xueersi.com/ide/code/1 https://jsrun.net/ 无需登录，能执行许多语言，但只能说能运行代码，称不上IDE</li>\n</ul>\n\n<h3>3.1. 前端在线IDE</h3>\n\n<ul>\n<li>https://jsbin.com 简洁，无需注册</li>\n<li>https://codepen.io/ 可不注册</li>\n<li>https://stackblitz.com/</li>\n<li>https://codesandbox.io/</li>\n<li>https://bit.dev/</li>\n<li>https://runkit.com 类似于jupyter notebook，也能创建api，以及把js的codeblock变得可运行</li>\n<li>https://www.codeply.com/</li>\n<li>https://plnkr.co/ 比较简陋</li>\n<li>https://jsfiddle.net/ 我这里打不开，且感觉是他们封的我们</li>\n</ul>\n\n<h3>3.2. Jupyter Notebook/Lab</h3>\n\n<ul>\n<li>https://colab.research.google.com/ 有免费gpu额度，国内无法直接打开。免费版无终端</li>\n<li>https://tianchi.aliyun.com/notebook-ai/home 免费gpu 60小时/年。登录要用阿里云账号，不想记住密码，每次都要用手机扫很麻烦，有时还要短信二次验证</li>\n<li>https://aistudio.baidu.com/aistudio/projectoverview/private 内存8G，磁盘100G，work目录永久保存，实名认证有一些GPU资源；长时间不用无法自动重连</li>\n<li>https://www.kaggle.com 验证电话后有免费gpu和外网，能连续运行9小时，有机器学习的教程</li>\n<li>https://www.heywhale.com/home/project 国产</li>\n<li>https://datalore.jetbrains.com/</li>\n<li>https://cocalc.com/doc/jupyter-notebook.html</li>\n<li>https://jupyter.org/try 官方，资源非常少，有C++；mybinder可以从GitHub仓库建立临时NB</li>\n<li>https://kogence.com/app/landing/pricing</li>\n<li>https://deepnote.com 免费额度750小时，5G空间</li>\n<li>https://www.dclab.run/project_list.html 国产</li>\n<li>https://software.intel.com/content/www/cn/zh/develop/tools/devcloud.html</li>\n</ul>\n\n<h2>4. 数据库</h2>\n\n<ul>\n<li>https://db4free.net/ mysql 200M</li>\n<li>https://www.freemysqlhosting.net/ mysql 5.5，5MB，每周会收到要手动操作来延期的邮件</li>\n<li>https://mlab.com/ https://www.mongodb.com/pricing 500MB；后者学生包中有</li>\n<li>https://app.redislabs.com/ redis，30M</li>\n<li>https://www.elephantsql.com/plans.html pg</li>\n<li>https://remotemysql.com/ mysql 100M</li>\n<li>https://www.elephantsql.com/ pg 20M</li>\n<li>https://www.freesqldatabase.com/ mysql 5MB</li>\n</ul>\n\n<h2>5. BaaS</h2>\n\n<ul>\n<li>https://bmob.cn/</li>\n<li>https://leancloud.cn/pricing/</li>\n<li>https://firebase.google.cn/pricing 用处：https://zhuanlan.zhihu.com/p/95334890</li>\n<li>https://www.zhihu.com/question/34124789/answer/72495188</li>\n<li>https://maxleap.cn/s/web/zh_cn/devcenter-pricing.html</li>\n<li>https://www.8base.com GraphQL</li>\n<li>JSON\n\n<ul>\n<li>https://jsonstores.com/ 100个JSON对象，每个最大2MB</li>\n<li>https://jsonbin.io/</li>\n<li>https://extendsclass.com/json-storage.html</li>\n<li>https://json.psty.io/</li>\n<li>https://www.jsonstorage.net/ 有无需注册的</li>\n<li>https://db.neelr.dev/ 无需注册，打开网页时自动生成一个TOKEN。但国内打不开</li>\n</ul></li>\n</ul>\n\n<h2>6. Managed K8S</h2>\n\n<ul>\n<li>https://www.openshift.com/products/online/ 每60天清除</li>\n<li>https://okteto.com/pricing 免费版2CPU，4G内存，10G储存。刚注册送一个月pro，不付款自动降到免费版。免费版24小时不活动就sleep。原意是为开发者日常开发使用的</li>\n<li>https://usekrucible.com 一个月能用25小时，自己分配</li>\n<li>https://kubernauts.sh/ 宣传免费版有1CPU，1G内存；申请注册后没收到任何邮件，无法登录</li>\n<li>https://labs.play-with-k8s.com/ 好像每天只有四小时；https://labs.play-with-docker.com/</li>\n<li>zarvis.ai staroid.com 网页都用的是Google的服务器，无法直接访问</li>\n<li>https://kubesail.com/ 停止免费版了，不过还是能作为管理平台</li>\n<li>https://loft.sh/ 好像只是客户端或者管理平台</li>\n<li>挂了的：k8spin.cloud tryk8s.com</li>\n</ul>\n\n<h2>7. Serverless/Node Paas（无状态的api）</h2>\n\n<ul>\n<li>https://glitch.com/</li>\n<li>https://workers.cloudflare.com/ ；https://github.com/booster-labs/rocket-booster</li>\n<li>https://vercel.com/ node go py</li>\n<li>https://deno.com/deploy</li>\n<li>https://pipedream.com/</li>\n<li>https://keen.io/</li>\n<li>https://www.openode.io/pricing</li>\n<li>https://www.cloud66.com/node/ 免费一个月</li>\n<li>https://www.jexia.com/</li>\n<li>https://www.openode.io/</li>\n<li>https://encore.dev/ RST</li>\n<li>谷歌的functions有一些免费额度，但一定会产生部署费用，最少$0.03/mo</li>\n<li>国内的云服务厂商一般都有FaaS服务，也有一定的免费额度，但问题是公网流出流量是没有免费额度的</li>\n<li>https://www.slappforge.com/sigma 仅开发平台</li>\n<li>https://catalyst.zoho.com/ 有免费的</li>\n</ul>\n\n<h2>8. 静态网页托管（必须要能自动更新）</h2>\n\n<ul>\n<li>https://surge.sh/</li>\n<li>https://www.netlify.com/</li>\n<li>https://render.com/ 收费版有PaaS，但免费版只能Static</li>\n<li>https://cloudcannon.com</li>\n<li>https://tiiny.host 只能存活7天？</li>\n<li>https://pages.cloudflare.com/</li>\n</ul>\n\n<h2>9. 也许可用的IaaS</h2>\n\n<ul>\n<li>euserv，德国的，只有IPV6，亲测确实可以，但硬盘很慢 https://github.com/YG-tsj/EUserv-warp</li>\n<li>https://open.iot.10086.cn/cloud/introduction/cloud-server OneNET移动的，MQ、对象储存、可视化、CI都有一定的免费额度</li>\n<li>https://activity.xinruiyun.cn/free/ 新睿云，发个广告可以免费用一个月的ECS</li>\n<li>https://www.oracle.com/cn/cloud/free/ 体验文章：https://51.ruyo.net/14138.html 不支持prepaid card；https://www.blueskyxn.com/202109/5232.html</li>\n<li>https://51.ruyo.net/14583.html Azure</li>\n<li>https://www.atlantic.net/ <del>免费12个月</del>现在好像变成免费一个月了，需要信用卡</li>\n<li>谷歌云、Amazon、Azure、Yandex Cloud：注册后都会送一些额度</li>\n</ul>\n\n<h3>9.1. <a class=\"wp-editor-md-post-content-link\" href=\"https://www.ibm.com/cn-zh/cloud/free\">IBM Cloud</a></h3>\n\n<ul>\n<li>Lite(轻量)版无需信用卡，没有到期时间，完全不会变到付费套餐上，额度到了就无法使用，30天不活动自动删除，一共44项服务</li>\n<li>Cloud Foundry：PaaS 256M内存，支持Java Node .NET GO PHP Py。10天不活动就休眠。apic.mybluemix.net和mybluemix.net都被墙了。要用ibmcloud命令行</li>\n<li>对象储存：25GB储存，5GB出站；Cloudant JSON文档数据库：1GB；DB2数据库：200MB，每90天要邮件延期</li>\n<li>机器翻译：但无ja-zh模型，只能和en互转，每月100万字符</li>\n<li>API Gateway：转发一次到另一个endpoint上，能用于静态文件的反代，能设定密钥验证和限制速率，显示调用频率。免费调用100万次但是没写每月，之后限速</li>\n<li>Cloud for Education：持续时间一小时的ECS，能用RDP连上但卡到完全无法使用，好像无外部互联网连接</li>\n<li>机器学习</li>\n<li>Docker Registry：储存0.5GB，流量5GB</li>\n<li>Event Streams：Kafka</li>\n<li>那些“软件”虽然有非常多免费的，但必须部署到k8s上；k8s也有免费套餐，但lite无法创建，因为流量和IP可能要收费</li>\n<li>函数计算：虽然有一点免费额度，但是无lite版</li>\n</ul>\n\n<h3>9.2. <a class=\"wp-editor-md-post-content-link\" href=\"https://cloud.tencent.com/act/free\">腾讯云</a></h3>\n\n<ul>\n<li>对象储存：免费半年</li>\n<li>CDN：免费半年</li>\n<li>Serverless：免费一年</li>\n<li>文件储存：免费10G</li>\n<li>机器翻译：免费500万字符/月，开通免费版必不会收任何费用</li>\n<li>云托管 CloudBase Run：不知道干什么用的</li>\n</ul>\n\n<h3>9.3. <a class=\"wp-editor-md-post-content-link\" href=\"https://free.aliyun.com\">阿里云</a></h3>\n\n<ul>\n<li>ECS：https://www.aliyun.com/daily-act/ecs/free 需要实名认证且未购买过任何产品，有个t6的ECS可以免费试用一年</li>\n<li>MaxCompute大数据计算服务开发者版https://www.aliyun.com/product/odps</li>\n<li>云效DevOps有一些免费额度，包括5GB Maven仓库</li>\n<li>机器翻译通用版：每月100万字符免费额度</li>\n</ul>\n\n<h2>10. 低代码平台/aPaaS</h2>\n\n<ul>\n<li>指不用写很多代码就能设计出软件，有可视化工具</li>\n<li>大部分都是BPM平台，即 表单+工作流审批，适合企业建立业务逻辑在线办公</li>\n<li>往往与平台本身严重绑定，难以复用和维护，切换平台代价大，开发者自身难以提升</li>\n</ul>\n\n<h3>10.1. 国内的</h3>\n\n<ul>\n<li>https://github.com/taowen/awesome-lowcode 收集</li>\n<li>https://www.aliwork.com/ 宜搭，阿里+钉钉</li>\n<li>https://www.apicloud.com/ 云端开发管理类</li>\n<li>https://www.mingdao.com/ 明道云</li>\n<li>https://www.jiandaoyun.com/ 简道云</li>\n<li>https://www.huoban.com/ 伙伴云</li>\n<li>https://qingflow.com/ 轻流</li>\n<li>https://www.steedos.com/pricing/platform/ 华炎魔方，开源，私有部署免费</li>\n<li>https://baidu.gitee.io/amis/docs/index 开源，偏程序员</li>\n<li>https://modao.cc/ 墨刀，原型设计工具</li>\n<li>https://www.imgcook.com/ 淘宝，由设计稿生成界面</li>\n<li>https://www.huaweicloud.com/product/appcube.html 华为云应用魔方，太新</li>\n<li>https://www.informat.cn/ 织信</li>\n<li>https://seatable.cn/ 在线协同表格和信息管理工具，类似于excel，本体不开源但开源了一些组件</li>\n<li>https://www.baishuyun.com/ 百数云</li>\n<li>网页感觉不太好的\n\n<ul>\n<li>https://www.iyunbiao.com/ 云表</li>\n<li>https://www.grapecity.com.cn/solutions/huozige 活字格</li>\n<li>https://www.learun.cn/ 力软敏捷框架</li>\n<li>https://www.ivx.cn 号称零代码开发Web App和小程序，前身是ih5.cn，不是BPM</li>\n<li>https://wuyuan.io/ https://enhancer.io/ 无远开发平台，个人使用免费，商业收费</li>\n<li>https://www.wudaima.com/ 宜创无代码，官网的footer的链接都是废的，一点也不透明</li>\n<li>https://www.bn100.com/ 柏思科技/Workfine</li>\n</ul></li>\n<li>收费的\n\n<ul>\n<li>https://h3yun.com/ 氚云，只免费15天，集成钉钉 https://www.cloudpivot.cn/ 云枢 https://www.h3bpm.com/ 都是“奥哲”公司的</li>\n<li>https://www.newdao.net/ 牛刀，免费两周</li>\n<li>https://www.clickpaas.com/ 不支持个人</li>\n<li>https://www.dadayun.cn/ 搭搭云 没有注册的地方</li>\n</ul></li>\n<li>没有https的： http://www.joget.cn/ 捷得 、http://www.putdb.com/ WebBuilder 、http://www.mf999.com/ 魔方网表(纯表单类)、http://www.delit.cn/ 度量快速开发平台、http://www.jinyunweb.com 进云、http://dev.easydo.cn 易开发、http://www.jepaas.com/ 、</li>\n</ul>\n\n<h3>10.2. 国外的</h3>\n\n<ul>\n<li>https://anvil.works/ py全栈，前端Drag and Drop UI，后端和数据储存用的是该网站的库</li>\n<li>https://www.outsystems.com/pricing-and-editions/ 开发移动应用，是该行的老大；前端组件比较多，后台相对弱一点儿；注册需要姓名，邮箱</li>\n<li>https://www.mendix.com/ 开发移动应用，后台能力比较强（有微流系统）</li>\n<li>https://free.caspio.com/ Database-Powered Apps</li>\n<li>https://thunkable.com 开发移动应用</li>\n<li>https://www.appsheet.com/ 无法直接打开</li>\n<li>https://www.zoho.com/creator/ 网页在我这里打开巨慢。可以一直用免费版只要不使用高级特性</li>\n<li>https://airtable.com/</li>\n<li>https://zenkit.com/ 无法直接打开</li>\n<li>Google的App Maker（G Suite收费）、微软的PowerApps（收费10$/mo）</li>\n<li>https://www.dronahq.com/</li>\n<li>https://zhuanlan.zhihu.com/p/375252561</li>\n<li>https://www.odoo.com/zh_CN/ 开源</li>\n<li>https://bubble.io/ 新出的</li>\n</ul>\n\n<h2>11. 未分类</h2>\n\n<ul>\n<li>https://www.litespeedtech.com/experience-litespeed-for-free 一个月有效？需要姓名，电话，邮箱，地址。好像只有wordpress，还是只有软件？</li>\n<li>https://github-students.educationhost.co.uk/ 免费一年</li>\n<li>有可能与Jupyter有关：\n\n<ul>\n<li>https://www.dataquest.io/plans-pricing/</li>\n<li>https://mode.com/compare-plans/</li>\n<li>https://kyso.io/pricing</li>\n</ul></li>\n<li>https://studio.azureml.net/ 可视化机器学习实验工具，可不登陆使用</li>\n<li>https://quic.cloud/ Wordpress cache cdn</li>\n<li>https://apis.baidu.com/</li>\n<li>https://platform.sh/pricing/ 好像只免费30天</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"BBR puls脚本","url":"/2023/05/22/BBR-puls脚本/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>BBR puls脚本</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>-- 就是爱生活 | 94ish.me --</strong></font>\n\n```\nwget -N --no-check-certificate \"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n```\n\n<img src=\"https://s2.loli.net/2022/06/08/5ylZN1kzbxA4Sgh.png\" alt=\"\" />\n\n<font color=#b0171f size=3 face=宋体><strong>重启之后不用在下载脚本，直接使用</strong></font>\n\n```shell\n# 启动脚本\n./tcp.sh\n\n# 在[4 - 8]中选你要开的加速。\n# 1、安装 BBR/BBR魔改版内核对应4，5，6（原版，魔改，暴力魔改）\n# 2、安装BBRplus版内核，对应7（plus）\n# 3、安装Lotserver（锐速）内核，对应8（锐速）\n# 4、开启后在使用  “./tcp.sh”，显示开启成功，则启动成功！\n```\n\n","tags":["BBR加速"],"categories":["_A8-工具","BBR"]},{"title":"centos7 防火墙相关配置","url":"/2023/05/22/centos7-防火墙相关配置/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>centos  之所以叫centos 最主要是因为centos的稳定+对企业的友好</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=2 face=宋体><strong>而防火墙确实centos的一大特色，当然不是说其他的linux版本，或者其他系统没有防火墙，是因为centos的防火墙更有特点而已</strong></font>\n\n<font color=#f26522 size=2 face=宋体><strong>而写这篇博客是因为，自己写了个python项目，在centos7下很顺畅的运行，但是本机能访问，局域网都不能访问，最终确定了是防火墙的问题！</strong></font>\n\n+ <font color=red size=3 face=宋体><strong>防火墙相关命令</strong></font>\n\n```python\nsystemctl start firewalld.service    # 启动防火墙\nsystemctl stop firewalld.service    # 停止防火墙\nfirewall-cmd --state  # 查看防火墙状态\nnetstat -lnpt   # 查看监听的端口\nnetstat -lnpt |grep 5672  # 检查 5672端口 被哪个进程占用\nps 6832  # 查看 6832 进程的详细信息\nkill -9 6832   # 强制终止6832进程\n\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp     # 开放8080/tcp 端口\nfirewall-cmd --permanent --zone=public --remove-port=8080/tcp  # 删除8080/tcp 端口\n\nfirewall-cmd --permanent --zone=public --add-port=8080/udp     # 开放8080/udp 端口\nfirewall-cmd --permanent --zone=public --remove-port=8080/udp  # 删除8080/udp 端口\n\nfirewall-cmd --reload   # 配置了立即生效\n\nfirewall-cmd --zone=public --list-ports    # 查看防火墙所有开放的端口\n```\n\n","tags":["系统","运维","防火墙"],"categories":["_A3-linux","防火墙"]},{"title":"centos7下安装python3.8","url":"/2023/05/22/centos7下安装python3-8/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>centos7下安装python3.8</strong></font>\n\n<!--more-->\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>1. 查看当前python版本：</strong></font>\n\n```shell\n[root@iZwz99sau950q2nhb3pn0aZ ~]# python\nPython 2.7.5 (default, Aug  7 2019, 00:51:29)\n\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>2. 安装依赖包</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>编译python源码时，需要一些依赖包，一次安装完毕</strong></font>\n\n```shell\nsudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gdbm-devel db4-devel libpcap-devel xz-devel make\nsudo yum install -y zlib zlib-dev openssl-devel sqlite-devel bzip2-devel libffi libffi-devel gcc gcc-c++\n\n# ubuntu 配置环境\nsudo apt-get install -y gcc make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>3. 安装wget</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>这个包是为了下载python源码用的</strong></font>\n\n```\nyum install wget\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>4. 下载源码包</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>我是下载的最新的python3.8，如果想安装其他版本，去python官网下载页面下载对应的版本即可。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>但是这个下载链接比较慢，我是用迅雷下载到本地之后，再scp到服务器的。</strong></font>\n\n```python\nwget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz\n# 国内用这个\nwget https://repo.huaweicloud.com/python/3.8.1/Python-3.8.1.tgz\nwget https://www.python.org/ftp/python/3.10.5/Python-3.10.5.tgz\n```\n\n<font color=#f26522 size=4 face=宋体><strong><br>\n\n---\n\n<br>5. 解压安装</strong></font>\n\n```\n# 解压压缩包\ntar -zxvf Python-3.8.1.tgz  \n\n# 进入文件夹\ncd Python-3.8.1\n\n# 配置安装位置\n# ./configure prefix=/usr/local/python3 注意不要加 --enable-optimizations\n./configure prefix=/usr/local/python3\n\n# 如果编译过，就需要清空缓存\nmake clean  # 清空缓存 （重要）\n\n# 安装\nmake && make install\n```\n\n<font color=#f26522 size=4 face=宋体><strong><br>\n\n---\n\n<br>6. 如果最后没提示出错，就代表正确安装了，在/usr/local/目录下就会有python3目录</strong></font>\n\n```\n[root@iZwz99sau950q2nhb3pn0aZ local]# cd /usr/local/\n[root@iZwz99sau950q2nhb3pn0aZ local]# ls\naegis  bin  etc  games  include  lib  lib64  libexec  python3  sbin  share  src\n```\n\n<font color=#f26522 size=4 face=宋体><strong><br>\n\n---\n\n<br>7. 添加软连接</strong></font>\n\n```\n#添加python3的软链接 \nln -s /usr/local/python3/bin/python3.8 /usr/bin/python3 \n\n#添加 pip3 的软链接 \nln -s /usr/local/python3/bin/pip3.8 /usr/bin/pip3\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>8. 好了，我们来测试一下python3</strong></font>\n\n```\n[root@iZwz99sau950q2nhb3pn0aZ local]# python3\nPython 3.8.1 (default, Feb  4 2020, 11:28:31) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n<font color=#b0171f size=2 face=宋体><strong>这里我没有链接到python上，是因为yum要用到python2才能执行，所以现在输入python的话还是会进入python2.7，输入python3才会进入python3.8\n如果执意想要链接到python的话，就得修改一下yum的配置：</strong></font>\n\n```\nvi /usr/bin/yum \n#! /usr/bin/python 修改为 #! /usr/bin/python2\nvi /usr/libexec/urlgrabber-ext-down \n#! /usr/bin/python 修改为 #! /usr/bin/python2\n```\n\n","tags":["linux","python","安装"],"categories":["_A5-安装教程","Python"]},{"title":"centos、kali镜像下载","url":"/2023/05/22/centos、kali镜像下载/","content":"\n<font color=#00b2c2 size=6 face=\"宋体\"><strong>centos_7</strong></font>\n\n<!--more-->\n\n   + 版本号：7（发布时间：2009）\n       + x86_64-DVD\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2009.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>完整版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-Everything-2009.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>最小安装版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>联网版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-NetInstall-2009.iso\">点击下载</a>\n\n<font color=#00b2c2 size=6 face=\"宋体\"><strong>centos_8</strong></font>\n   + 版本号：8（发布时间：不详）\n       + aarch64-DVD\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/centos/8/isos/aarch64/CentOS-8.4.2105-aarch64-dvd1.iso\">点击下载</a>\n       + x86_64-DVD\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/centos/8/isos/x86_64/CentOS-8.4.2105-x86_64-dvd1.iso\">点击下载</a>\n\n<font color=#00b2c2 size=6 face=\"宋体\"><strong>kali</strong></font>\n   + 版本号：镜像安装版kali-2020.4（发布时间：2020.4）\n       + amd64_iso(就是x86_64位)\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2020.4/kali-linux-2020.4-installer-amd64.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>联网版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2020.4/kali-linux-2020.4-installer-netinst-amd64.iso\">点击下载</a>\n       + i386_iso(就是x86_32位)\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2020.4/kali-linux-2020.4-installer-i386.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>联网版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2020.4/kali-linux-2020.4-installer-netinst-i386.iso\">点击下载</a>\n   + 版本号：镜像安装版kali-2021.3（发布时间：2021.3）\n       + amd64_iso(就是x86_64位)\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-installer-amd64.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>live版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-live-amd64.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>联网版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-installer-netinst-amd64.iso\">点击下载</a>\n       + i386_iso(就是x86_32位)\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-installer-i386.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>live版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-live-i386.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>联网版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-installer-netinst-i386.iso\">点击下载</a>\n       + arm64_iso(就是x86_32位)\n           + <font color=#000080 size=2 face=\"宋体\"><strong>标准版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-installer-arm64.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>live版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-live-arm64.iso\">点击下载</a>\n           + <font color=#000080 size=2 face=\"宋体\"><strong>联网版 下载链接：</strong></font><a class=\"wp-editor-md-post-content-link\" href=\"https://mirrors.ustc.edu.cn/kali-images/kali-2021.3/kali-linux-2021.3-installer-netinst-arm64.iso\">点击下载</a>\n","tags":["centos","kali","镜像"],"categories":["_S9-折腾","镜像"]},{"title":"css基本代码、语法","url":"/2023/05/22/css基本代码、语法/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>css基本代码、语法：</strong></font>\n\n<!--more-->\n\n```python\nbackground-color: red; # 背景颜色红色\nbackground-image: url(images/1.jpg) # 背景图片\nbackground-size: (像素值、百分比值、contain（自适应拉伸）、cover（自适应裁剪）) # 背景尺寸\nbackground-position: (left”、“right”、“top”、“bottom”和“center”、 “left top”（默认）)背景定位\n```\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n","tags":["html","css"],"categories":["_A2-前端","html"]},{"title":"前端 html css属性","url":"/2023/05/18/前端-html-css属性/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>前端 html css属性</strong></font>\n\n<!--more-->\n\n<br>\n\n<br>\n\n------\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>css之文本属性</strong></font>\n\n```python\nfont-size   # 字体大小    单位是px 浏览器默认是16px   设计图常用字号是12px\n\nfont-family    # 字体    当字体是中文字体、英文字体中有空格时，需要加引号；多个字体中间用逗号链接，先解析第1个字体，如果没有，则解析第2个字体，以此类推\n\ncolor    # 颜色      color：red；   color:#ff0;   color:rgb(255,0,0); 0-255\n\nfont-weight     # 加粗 font-weight:bolder(更粗的)、bold(加粗)、normal(常规)、font-weight:100-900;       100-500不加粗   600-900加粗\n\nfont-style   # 倾斜   font-style:italic(倾斜字体)、oblique(倾斜的文字)、normal(常规显示)\n\ntext-align   # 文字水平对齐     text-align:left;    水平靠左      text-align:right;   水平靠右        text-align:center;   水平居中          text-align:justify;  水平两端对齐  但是只对多行起作用\nline-height       # 行高            line-height的数据=height的数据，可以实现单行文本垂直居中\ntext-indent        #  首行缩进      text-indent 可以取负值，    text-indent属性只对第一行起作用   2em  不管字体大小，都是空出两个字体\nletter-spacing       # 字间距   控制文字和文字之间的间距\ntext-decoration       #  文本修饰      none（没有）、 underline（下划线）、overline（上划线）、line-through（删除线）\nfont               # 文字简写         fout-style   font-weight    font-size   line-height  fout-family         fout:italic    顺序不能变，必须同时指定fontsize和font-family属性时才起作用\n```\n\n<br>\n\n<br>\n\n------\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>背景图片</strong></font>\n\n```python\nbackground-size:  图片大小    例如 background-size: 20px 20px     可以是百分比   cover 完全覆盖、contain  宽高放大至当前盒子最大\nbackground-color: 背景颜色;\nbackground-image: 背景图片;    例如 background-image: url();\nbackground-repeat: 背景图片的平铺;     background-repeat: no-repeat(不平铺)、repeat(默认平铺)、repeat-x(x轴平铺)、repeat-y(y轴平铺)\nbackground-position: 背景图片定位;     background-position: 水平位置   锤子位置  可以给负值\nbackground-attachment: 背景图片的固定;   background-attachment: scroll(滚动)、fixed(固定,固定在浏览器的窗口里面)\n```\n\n\n\n![图片属性](https://s2.loli.net/2022/06/08/Mb2xYeqFTdaBuHX.png)\n\n<br>\n\n<br>\n\n------\n\n<br><font color=#f26522 size=4 face=宋体><strong>浮动</strong></font>\n\n```python\n浮动\nfloat:right;    右浮动。\nfloat: left;    左浮动\nfloat: none;    不浮动\n\n第一种 清浮动\n直接写死，让前元素的宽高等于现元素，不常用\n\n第二种 在现元素中使用\nclear: left;   清除左浮动\nclear: right;  清除右浮动\nclear: none;   不清除浮动\nclear: both;   清除前面所有浮动\n\n第三种 在已经使用浮动的父元素中使用空盒子，然后  style=\"clear:both\"\n第四中 在父元素中使用 overflow: hidden style=\"overflow: hidden;\"\n```\n\n<br>\n\n<br>\n\n------\n\n<br><font color=#f26522 size=4 face=宋体><strong>盒子模型——padding属性</strong></font>\n\n```css\npadding: 10px;       一个值   四个方向都是10px\npadding: 10px 20px       两个值    上下10px    左右20px\npadding: 10px   20px  30px         三个值   上10px    左右20px     下30px\npadding:  10px 20px 30px 40px      四个值   逆时针    上  右  下 左 \n```\n\n<br>\n\n<br>\n\n------\n\n<br><font color=#f26522 size=4 face=宋体><strong>盒子模型——边框属性（border）</strong></font>\n\n```css\nborder: 1px  solid red        边框大小为1px       solid(实线)        红色\n\nborder:支持属性    样式>>>   solid(实线)     double(双实线)      dashed(虚线)    dotted(点状线)\n\n可拆分成\nborder-width:    可设置4个值     逆时针    上  右  下 左\nborder-color:     可设置4个值     逆时针    上  右  下 左\nborder-style:     可设置4个值     逆时针    上  右  下 左\n\n\n盒子特性\n上下盒子外边距会取最大的一个值\n左右盒子会相互叠加\n\n\n外边距会作用在父盒子身上\n    解决办法：\n        1、子盒子margin-top ==> 父盒子的padding-top    ,将子盒子的外边距转换成父盒子的内边距，注意高度计算\n        2、给父盒子设置边框  border\n        3、添加浮动效果，子盒子或者父盒子都可以\n        4、overflow: hidden.    BFC构建\n```\n\n<br>\n\n<br>\n\n<br>\n\n------\n\n","tags":["html","css","前端"],"categories":["_A2-前端","html"]},{"title":"centos7 安装 MongoDB","url":"/2023/03/20/centos7-安装-MongoDB/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>centos7 安装 MongoDB：</strong></font>\n\n<!--more-->\n\n------\n\n- <font color=#f26522 size=4 face=宋体><strong>Linux(centos_7) 下安装</strong></font>\n- [`官网自主选择下载`](https://www.mongodb.com/try/download/community)\n- [`MongoDB下载地址`](https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.3.tgz)\n- [`MongoDB_shell地址`](https://fastdl.mongodb.org/linux/mongodb-shell-linux-x86_64-rhel70-5.0.3.tgz)\n- <font color=#f26522 size=4 face=宋体><strong>Linux 可直接用命令下载</strong></font>\n\n```python\n # 先获取root权限\nsudo -i # 然后输入密码\n# 下载mongoDB\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.3.tgz\n# 解压到当前文件夹（最好用wget的方式下载，我用浏览器的方式下载后，发现解压出错）\ntar -xzvf mongodb-linux-x86_64-rhel70-5.0.3.tgz\n# 移动文件到/usr/local/ 目录下，一般放在这个目录下，不用配置环境。\nmv mongodb-linux-x86_64-rhel70-5.0.3 mongodb\nmv mongodb /usr/local/\n```\n\n- <font color=red size=4 face=宋体><strong>mongodb配置</strong></font>\n\n```python\n# 创建数据库存放目录和日志存放目录\nmkdir -p /usr/local/mongodb/data /usr/local/mongodb/logs\n# 启动mongodb服务\n/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs/mongodb.log --logappend -port=27017 --fork\n# 后期可直接用命令开启\n/usr/local/mongodb/bin/mongo\n```\n\n\n\n# <font color=#00b2c2 size=5 face=宋体><strong>使用官方命令安装最新版本：</strong></font>\n\n[`教程地址`](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/)\n\n+ <font color=#f26522 size=4 face=宋体><strong>安装yum源文件(一)</strong></font>\n\n```python\nvim /etc/yum.repos.d/mongodb-org-5.0.repo\n#\n#\n[mongodb-org-5.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc\n```\n\n\n\n\n\n- <font color=#f26522 size=4 face=宋体><strong>安装yum源文件(二)</strong></font>\n\n```python\n# 1、安装mongodb\nsudo yum install -y mongodb-org\n#\n#\n# 2、或者，要安装特定版本的 MongoDB，请单独指定每个组件包并将版本号附加到包名称，如下例所示（安装其中一个）：\nsudo yum install -y mongodb-org-5.0.2 mongodb-org-database-5.0.2 mongodb-org-server-5.0.2 mongodb-org-shell-5.0.2 mongodb-org-mongos-5.0.2 mongodb-org-tools-5.0.2\n# 3、您可以指定任何可用的 MongoDB 版本。但是yum ，当新版本可用时升级包。为防止意外升级，请固定封装。要固定包，请将以下exclude指令添加到您的/etc/yum.conf文件中\nexclude=mongodb-org,mongodb-org-database,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,mongodb-org-tools\n```\n\n\n\n\n\n# <font color=#00b2c2 size=5 face=宋体><strong>安装完成——命令篇：</strong></font>\n\n```python\n# 创建mongo日志文件夹 这两个文件夹如果不存在  官方版安装会无法启动，并且需要赋予权限\nmkdir /var/lib/mongo /var/log/mongodb\nsudo chown -R mongod:mongod /var/lib/mongo\nsudo chown -R mongod:mongod /var/log/mongodb\n\n# 启动 MongoDB\nsudo systemctl start mongod\nsudo systemctl daemon-reload\n\n# 验证 MongoDB 是否已成功启动\nsudo systemctl status mongod\nsudo systemctl enable mongod\n\n# 停止 MongoDB\nsudo systemctl stop mongod\n\n# 重启MongoDB\nsudo systemctl restart mongod\n\n# 开始使用 MongoDB\nmongosh\n\n# 停止 MongoDB\nsudo service mongod stop\n\n# 删除包\nsudo yum erase $(rpm -qa | grep mongodb-org)\n\n# 删除数据目录\nsudo rm -r /var/log/mongodb\nsudo rm -r /var/lib/mongo\n```\n","tags":["linux","mongodb","数据库"],"categories":["_A5-安装教程","数据库"]},{"title":"关于Jet Brains历史版本获取","url":"/2023/03/20/关于Jet-Brains历史版本获取/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**关于Jet Brains历史版本获取：**</strong></font>\n\n<!--more-->\n\n<font color=#b0171f size=4 face=宋体><strong>**官网给出的下载链接永远是最新的，但是最新的往往是需要收费的，所以以下链接可以直接定位到官网的历史版本下载地址，然后就可以尽情的去嗨皮了：**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**pycharm历史版本下载地址:      [点击下载](https://www.jetbrains.com/zh-cn/pycharm/download/other.html)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**idea历史版本下载地址:     [点击下载]( https://www.jetbrains.com/zh-cn/idea/download/other.html)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**WebStorm历史版本下载地址:      [点击下载](https://www.jetbrains.com/zh-cn/webstorm/download/other.html)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**Pycharm激活教程:      [点击进入](https://www.yuque.com/lanchuan-vm6pi/buhvby/irtn6mlnmt1vuzgx?singleDoc)**</strong></font>\n","tags":["破解","IDEA"],"categories":["_A5-安装教程","Jet Brains历史版本"]},{"title":"来自程序员的情人节礼物！","url":"/2023/03/20/来自程序员的情人节礼物！/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**来自程序员的情人节礼物！**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**Linux复制:**</strong></font>\n\n```python\npython3 # 点击copy  打开终端 粘贴剪贴板 即可！8秒之后自动关闭\nimport time\nimport os\nprint('\\n'.join([''.join([('love'[(x-y) % len('love')] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ')for x in range(-120, 30)])for y in range(30, -30, -1)]))\ntime.sleep(8)\nexit()\nexit\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**Windos下cmd复制:**</strong></font>\n\n```python\npython &::点击copy  打开终端 粘贴剪贴板 即可！8秒之后自动关闭\nimport time\nimport os\nprint('\\n'.join([''.join([('love'[(x-y) % len('love')] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ')for x in range(-120, 30)])for y in range(30, -30, -1)]))\ntime.sleep(8)\nexit()\nexit\n```\n\n","tags":["礼物"],"categories":["_S9-折腾","代码运行礼物"]},{"title":"正则表达式(基础语法)","url":"/2023/03/20/正则表达式-基础语法/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**正则表达式(基础语法)**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**Regular Expression,正则表达式，一种使用表达式的方式对字符串进行匹配的语法规则**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**我们抓取到页面源代码本质上就是一个超长的字符串，想从里面提取内容，用正则再合适不过了。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**正则的有点：速度快、效率高、准确性高。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**正则的缺点：新手上手难度高**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**不过只要掌握了正则编写的逻辑关系，写出一个提取页面内容的正则其实并不复杂**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**正则的语法：使用元字符进行排列组合用来匹配字符串 在线测试正则表达式：[https://tool,oschina.net/regex/](https://tool%2Coschina.net/regex/)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**元字符：具体固定意义的特殊字符**</strong></font>\n\n<font color=#00b2c2 size=5 face=宋体><strong>**常用元字符：**</strong></font>\n\n```\n.       匹配除 换行符 以外的 任意字符\n\\w     匹配 字母 或 数字 或 下划线\n\\s      匹配任意的空白符\n\\d     匹配数字\n\\n      匹配一个换行符\n\\t     匹配一个制表符\n\n^       匹配字符串的开始\n$      匹配字符串的结尾\n\n\\W      匹配 非字母 或 数字 或 下划线\n\\D     匹配非数字\n\\S      匹配非空白字符\na|b    匹配 字符a 或 字符b  # 优先前面的\n()      匹配括号内的表达式，也表示一个组\n[...]  匹配字符组中的字符    #例如   [a-zA-Z0-9]\n[^...]  匹配除了字符组中的所有字符\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>**量词：控制前面的元字符出现的次数**</strong></font>\n\n```\n*  重复0次 或 多次\n+  至少重复一次 或 多次\n?  重复0次  或 多次\n{n}  重复 n 次\n{n,}  重复n次 或更多次\n{n,m}   重复n到m次\n```\n","tags":["python","正则"],"categories":["Python","爬虫","同步"]},{"title":"在CentOS7下安装部署ffmpeg","url":"/2023/03/20/在CentOS7下安装部署ffmpeg/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**在CentOS7下安装部署ffmpeg：**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**[FFmpeg](https://so.csdn.net/so/search?q=FFmpeg&spm=1001.2101.3001.7020)是一个开源免费的多媒记录、转换数字音频、视频，并能将flv、mov等。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**我们的开发人员在分析视频流数据时，也会经常用到这款工具。比如：**</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>**录制：采集–>编码–>封装—>生成文件**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**段落引用视频裁剪：输入音视频文件—>解复用得到视频流—>视频流解码–>视频帧画面–>图像帧裁剪–>编码—>封装–>生成文件**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**段落引用分辨率修改：输入音视频文件—>解复用得到视频流—>视频流解码–>视频帧画面–>图像帧修改分辨率–>编码—>封装–>生成文件**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**段落引用文件格式转码：输入MP4文件–>解复用封装得到解码数据包–>复用封装格式成FLV—>输出文件**</strong></font>\n![img](https://s2.loli.net/2022/07/27/CuVJHTw6dLsmUfv.jpg)\n\n<font color=#00b2c2 size=5 face=宋体><strong>**今天和大家分享一下如何在CentOS7下安装部署ffmpeg。**</strong></font>\n\n```python\n# 安装epel-release，因为安装需要使用其他的repo源，所以需要epel支持：\nyum install -y epel-release rpm\n\n# 安装Nux-Dextop源：\nrpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\nyum repolist\n\n# 开始安装\nyum install -y ffmpeg\n```\n\n<font color=red size=5 face=宋体><strong>**这样ffmpeg就正常安装完成了。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**FFmpeg具有非常强大的功能，包括视频采集、视频格式转换、视频抓图、给视频加水印等，同时还能兼容行转换，并使用高质量的多相滤波器动态调整视频大小。**</strong></font>\n","tags":["centos7","ffmpeg"],"categories":["_A5-安装教程","FFmpeg"]},{"title":"天虹小主机 z3735f原装windos8.1 修改装ubuntu","url":"/2023/03/20/天虹小主机-z3735f原装windos8-1-修改装ubuntu/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**天虹小主机 z3735f原装windos8.1 修改装ubuntu**</strong></font>\n\n<!--more-->\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**但如此低的配置，实在是…. 一言难尽！**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**配置如下：**</strong></font>\n\n```\n- 2G 内存 、32G硬盘\n- 因特尔四核 Z3735\n- 这种配置.....它装个linux 系统   它不香么？  为什么非要上windos？\n- 于是. . . . 有了下面一出！\n```\n\n------\n\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>**折腾开始!**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**盒子到手，开机，未激活的Win8.1，瞄了一眼容量，试了试浏览器开个网页，感觉比树莓派强好多。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**于是找出了硬盘里积压多年的ubuntu16.04 server x64，开始了装机。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**半分钟后，它愉快的滚进了Win8.1。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**没事看来是bios没换，于是进Bios，选MASS Stronger 闪退。**</strong></font>\n\n------\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>**然后. . . .进入正题：**</strong></font>\n\n- 首先准备一个已经制作完成的ubuntu U盘，其他发行版的也行（但Linux的内核版本最好4.00以上）。\n- 拷贝[jfwells/linux-asus-t100ta](https://github.com/jfwells/linux-asus-t100ta/blob/master/boot/bootia32.efi) => **[点击下载](https://github.com/jfwells/linux-asus-t100ta/raw/master/boot/bootia32.efi)** 这个文件到U盘EFI/BOOT目录\n  - 这里有个问题，因为ubuntu写入u盘的时候，是没有办法更改空间大小的，所以我把主意打到了iso镜像文件上。\n  - 首先用UltraISO的读取然后把efi文件拖入 EFI/BOOT 用 UltraISO 保存 然后在写入u盘 然后，就可以直接使用小主机安装ubuntu系统了\n- <font color=#b0171f size=3 face=宋体><strong>接下来插入，就能引导进入grub引导页，完成正常安装步骤</strong></font>\n- <font color=#b0171f size=3 face=宋体><strong>安装完后不要拔掉U盘，第二次继续引导U盘，对第一项按一下C键</strong></font>\n- <font color=#b0171f size=3 face=宋体><strong>将里面的内容修改为（以你自己分区为准，善用TAB键自动补全），下面是我的结果</strong></font>\n\n```\nlinux (hd1,gpt2)/boot/vmlinuz-4.15.0-45-generic root=/dev/mmcblk1p2\ninitrd (hd1,gpt2)/boot/initrd.img-4.15.0-45-generic\n```\n\n- <font color=red size=3 face=宋体><strong>这时就可以进入刚刚安装好的系统，直接sudo su进超级用户</strong></font>\n- 执行下列命令\n\n```shell\napt update\napt-get install grub-efi-ia32-bin\ngrub-install --target=i386-efi --efi-directory=/boot/efi\nupdate-grub\n```\n\n- <font color=#00b2c2 size=3 face=宋体><strong>最后重启，就可以愉快的使用了</strong></font>\n","tags":["ubuntu","系统","DIY"],"categories":["_S9-折腾","DIY"]},{"title":"安装chrome_ 使用selenium","url":"/2023/03/20/安装chrome-使用selenium/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**安装chrome_ 使用selenium**</strong></font>\n\n<!--more-->\n\n# <font color=#f26522 size=4 face=宋体><strong>**1、查看 chrome 版本**</strong></font>\n\n+ chrome_历史版本下载 => [适用于 Linux 的最新版本 (cypress.io)](https://chromium.cypress.io/linux/)\n+ [CentOS7安装chrome和chromedriver_centos chromedriver-CSDN博客](https://blog.csdn.net/China_hdy/article/details/126739461)\n\n```shell\ngoogle-chrome --version\n\n# centos7  selenium 版本更新\n# 执行 wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm下载最新Linux的chrome\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\n\n# 下载之后执行sudo yum localinstall google-chrome-stable_current_x86_64.rpm安装本地的rpm包则会替换之前版本的chrome\nsudo yum localinstall google-chrome-stable_current_x86_64.rpm\n```\n\n------\n\n<font color=#f26522 size=4 face=宋体><strong>**2、更新 || 禁止自动更新chrome**</strong></font>\n\n```shell\n# 禁止自动更新\necho 'exclude=google-chrome-stable' >> /etc/yum.conf\n\n# 更新 chrome\nsudo yum update google-chrome-stable\n```\n\n\n\n---\n\n<font color=#f26522 size=4 face=宋体><strong>**3、安装chrome**</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>首先安装google的epel源</strong></font>\n\n```python\nvi /etc/yum.repos.d/google.repo\n\n[google]\nname=Google-x86_64\nbaseurl=http://dl.google.com/linux/rpm/stable/x86_64\nenabled=1\ngpgcheck=0\ngpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub \n\n\nyum update  # 更新\nyum install google-chrome-stable  # 安装\n```\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**4、chromedriver下载**</strong></font>\n\n[淘宝源 下载](https://npm.taobao.org/mirrors/chromedriver/)\n[官方源 下载](http://chromedriver.storage.googleapis.com/index.html)\n\n[chromedriver新版本(116+)](https://googlechromelabs.github.io/chrome-for-testing/)\n\n找到chrome对应的chromedriver 版本，并下载\n\n```shell\nwget https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip\n```\n\n将下载的chromedriver 放到脚本同级目录调用\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**5 、为chromedriver授权**</strong></font>\n\n```shell\nchmod 755 chromedriver\n```\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**6、测试代码 ts.py**</strong></font>\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument('--disable-gpu')\nchrome_options.add_argument('--no-sandbox')    # 禁止沙箱模式，否则肯能会报错遇到chrome异常\nurl=\"https://www.west.cn/login.asp\"\nbrower=webdriver.Chrome(executable_path=\"./chromedriver\", chrome_options=chrome_options)\nbrower.get(url)\nprint(brower.current_url)\nbrower.get(\"https://www.west.cn/Manager/\")\nprint(brower.current_url)\nbrower.quit()\n```\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**7、测试结果**</strong></font>\n\n![img](https://s2.loli.net/2022/10/23/gGApHus5ODlxSTi.png)\n","tags":["反爬"],"categories":["_A7-逆向","selenium"]},{"title":"Centos7系统更换yum源镜像为阿里云镜像（使用wget）","url":"/2023/03/20/Centos7系统更换yum源镜像为阿里云镜像（使用wget）/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**Centos7系统更换yum源镜像为阿里云镜像（使用wget）**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**1、安装wget**</strong></font>\n\n```\nyum install -y wget\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**2、备份服务器原有的yum源文件**</strong></font>\n\n```\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**3、下载阿里云镜像文件**</strong></font>\n\n```\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**4、清理缓存**</strong></font>\n\n```\nyum clean all\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**5、生成缓存**</strong></font>\n\n```\nyum makecache\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**6、更新最新源设置**</strong></font>\n\n```\nyum update -y\n```\n","tags":["系统","运维"],"categories":["_A3-linux","源"]},{"title":"非常不错的 404 Error 源码","url":"/2023/03/20/非常不错的-404-Error-源码/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**非常不错的 404 Error 源码**</strong></font>\n\n<!--more-->\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>404-对不起！您访问的页面不存在</title>\n<style type=\"text/css\">\n.head404{ width:580px; height:234px; margin:50px auto 0 auto; background:url(https://www.daixiaorui.com/Public/images/head404.png) no-repeat; }\n.txtbg404{ width:499px; height:169px; margin:10px auto 0 auto; background:url(https://www.daixiaorui.com/Public/images/txtbg404.png) no-repeat;}\n.txtbg404 .txtbox{ width:390px; position:relative; top:30px; left:60px;color:#eee; font-size:13px;}\n.txtbg404 .txtbox p {margin:5px 0; line-height:18px;}\n.txtbg404 .txtbox .paddingbox { padding-top:15px;}\n.txtbg404 .txtbox p a { color:#eee; text-decoration:none;}\n.txtbg404 .txtbox p a:hover { color:#FC9D1D; text-decoration:underline;}\n</style>\n</head>\n\n<body bgcolor=\"#494949\">\n    <div class=\"head404\"></div>\n    <div class=\"txtbg404\">\n  <div class=\"txtbox\">\n      <p>对不起，您请求的页面不存在、或已被删除、或暂时不可用</p>\n      <p class=\"paddingbox\">请点击以下链接继续浏览网页</p>\n      <p>》<a style=\"cursor:pointer\" onclick=\"history.back()\">返回上一页面</a></p>\n      <p>》<a href=\"https://www.daixiaorui.com\">返回网站首页</a></p>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n![image-20230215210409562](https://s2.loli.net/2023/02/15/fYTaDKZgrhQsvjz.png)\n","tags":["html","源码"],"categories":["_A2-前端","html"]},{"title":"安装opencv-python报错或者卡住解决","url":"/2023/03/20/安装opencv-python报错或者卡住解决/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>安装opencv-python报错或者卡住解决：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>错误提示:</strong></font>\n\n```shell\nPackage | 解决 Could not build wheels for opencv-python which use PEP 517 and cannot be installed\n```\n\n\n\n#### <font color=#f26522 size=4 face=宋体><strong>背景：</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>在nvidia ngc平台下载docker image，根据实验要求在环境里安装opencv。因为当前实验tensorflow要求版本较低，我下载了比较久远的版本镜</strong></font>\n\n#### <font color=#00b2c2 size=5 face=宋体><strong>问题：</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>通过pip安装opencv，指令如下：</strong></font>\n\n```\npip install opencv-python\n```\n\n<font color=#f26522 size=4 face=宋体><strong>安装过程的输出：</strong></font>\n\n```\nCollecting opencv-python\n  Downloading https://files.pythonhosted.org/packages/77/f5/49f034f8d109efcf9b7e98fbc051878b83b2f02a1c73f92bbd37f317288e/opencv-python-4.4.0.42.tar.gz (88.9MB)\n    100% |████████████████████████████████| 88.9MB 919kB/s\n  Installing build dependencies ... done\n  Getting requirements to build wheel ... done\n    Preparing wheel metadata ... done\nRequirement already satisfied: numpy>=1.13.1 in /usr/local/lib/python3.5/dist-packages (from opencv-python) (1.14.5)\nBuilding wheels for collected packages: opencv-python\n  Building wheel for opencv-python (PEP 517) ...\n```\n\n<font color=red size=4 face=宋体><strong>PEP 517信息出现后，过了很长时间，出现报错信息：</strong></font>\n\n```\nConfiguring Project\n    Working directory:\n      /tmp/pip-install-zujf20md/opencv-python/_skbuild/linux-x86_64-3.6/cmake-build\n    Command:\n      cmake /tmp/pip-install-zujf20md/opencv-python/opencv -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX:PATH=/tmp/pip-install-zujf20md/opencv-python/_skbuild/linux-x86_64-3.6/cmake-install -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python -DPYTHON_VERSION_STRING:STRING=3.6.8 -DPYTHON_INCLUDE_DIR:PATH=/usr/include/python3.6m -DPYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython3.6m.so -DSKBUILD:INTERNAL=TRUE -DCMAKE_MODULE_PATH:PATH=/tmp/pip-build-env-tr73ewqw/overlay/lib/python3.6/site-packages/skbuild/resources/cmake -DPYTHON3_EXECUTABLE=/usr/bin/python -DPYTHON3_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so -DBUILD_opencv_python3=ON -DBUILD_opencv_python2=OFF -DBUILD_opencv_java=OFF -DOPENCV_PYTHON3_INSTALL_PATH=python -DINSTALL_CREATE_DISTRIB=ON -DBUILD_opencv_apps=OFF -DBUILD_opencv_freetype=OFF -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF -DCMAKE_BUILD_TYPE:STRING=Release\n\n  Copying files from CMake output\n  Traceback (most recent call last):\n    File \"/usr/local/lib/python3.6/dist-packages/pip/_vendor/pep517/_in_process.py\", line 207, in <module>\n      main()\n    File \"/usr/local/lib/python3.6/dist-packages/pip/_vendor/pep517/_in_process.py\", line 197, in main\n      json_out['return_val'] = hook(**hook_input['kwargs'])\n    File \"/usr/local/lib/python3.6/dist-packages/pip/_vendor/pep517/_in_process.py\", line 141, in build_wheel\n      metadata_directory)\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 209, in build_wheel\n      wheel_directory, config_settings)\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 194, in _build_with_temp_dir\n      self.run_setup()\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 237, in run_setup\n      self).run_setup(setup_script=setup_script)\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 142, in run_setup\n      exec(compile(code, __file__, 'exec'), locals())\n    File \"setup.py\", line 496, in <module>\n      main()\n    File \"setup.py\", line 289, in main\n      cmake_source_dir=cmake_source_dir,\n    File \"/tmp/pip-build-env-tr73ewqw/overlay/lib/python3.6/site-packages/skbuild/setuptools_wrap.py\", line 629, in setup\n      cmake_source_dir, skbuild_kw['cmake_install_dir'])\n    File \"setup.py\", line 381, in _classify_installed_files_override\n      with open('scripts/__init__.py', 'r') as custom_init:\n  FileNotFoundError: [Errno 2] No such file or directory: 'scripts/__init__.py'\n  ----------------------------------------\n  ERROR: Failed building wheel for opencv-python\n  Running setup.py clean for opencv-python\nFailed to build opencv-python\nERROR: Could not build wheels for opencv-python which use PEP 517 and cannot be installed directly\n```\n\n# <font color=#00b2c2 size=5 face=宋体><strong>解决方案：</strong></font>\n\n```shell\npip install --upgrade pip setuptools wheel\n```\n\n<font color=#f26522 size=4 face=宋体><strong>重试安装：</strong></font>\n\n```shell\npip install opencv-python\n```\n","tags":["库","错误"],"categories":["_A9-错误解决","python","pip install 错误"]}]