[{"title":"Ubuntu-apt安装ffmpeg最新版-ffmpeg6-or-ffmpeg7","url":"/2025/06/04/Ubuntu-apt安装ffmpeg最新版-ffmpeg6-or-ffmpeg7/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Ubuntu使用`apt`安装最新版本`FFmpeg`</strong></font>\n\n<!--more-->\n\n### 第一步：添加`ppa`源\n\n```bash\n# 二选一，重复使用会出现覆盖\nsudo add-apt-repository ppa:ubuntuhandbook1/ffmpeg7   # ffmpeg7版本源\n# sudo add-apt-repository ppa:ubuntuhandbook1/ffmpeg6   # ffmpeg6版本源\n```\n\n### 第二步：更新`apt`缓存\n\n```\nsudo apt update\n```\n\n### 第三步：安装`ffmpeg`\n\n```bash\nsudo apt install ffmpeg\n\n# # 如果之前安装过 ：更新ffmpeg\n# sudo apt upgrade ffmpeg    # 更新命令\n```\n\n![img](https://s2.loli.net/2025/06/04/kLrnaDMZRFsJQ75.jpg)","tags":["docker"],"categories":["_A5-安装教程","ubuntu"]},{"title":"Ubuntu配置安装GPU转码","url":"/2025/05/26/Ubuntu配置安装GPU转码/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Ubuntu配置安装GPU转码</strong></font>\n\n<!--more-->\n\n\n\n## ubuntu 测试使用 GPU-ffmpeg 转码视频\n\n### 额外命令：\n\n```bash\nlsb_release -a   # 查看发行版本及代号\nlspci | grep -i vga   # 查看是否存在gpu\n```\n\n### 第一步：安装ffmpeg\n\n```\napt install ffmpeg\n```\n\n### 第二步：**1. 安装 NVIDIA 驱动**\n\n#### (1) 添加官方驱动仓库并更新\n\n```bash\nsudo add-apt-repository ppa:graphics-drivers/ppa\nsudo apt update\n```\n\n#### (2) 查看推荐驱动版本\n\n```bash\nubuntu-drivers devices\n```\n\n输出示例：\n\n```bash\n== /sys/devices/pci0000:00/0000:00:02.0/0000:03:00.0 ==\nmodalias : pci:v000010DEd00001C82sv000010DEsd00001C82bc03sc00i00\nvendor   : NVIDIA Corporation\nmodel    : GP107 [GeForce GTX 1050 Ti]\ndriver   : nvidia-driver-570-server - distro non-free\ndriver   : nvidia-driver-550 - distro non-free\ndriver   : nvidia-driver-418-server - distro non-free\ndriver   : nvidia-driver-570 - distro non-free recommended\ndriver   : nvidia-driver-545 - distro non-free\ndriver   : nvidia-driver-535-server - distro non-free\ndriver   : nvidia-driver-535 - distro non-free\ndriver   : nvidia-driver-450-server - distro non-free\ndriver   : nvidia-driver-390 - distro non-free\ndriver   : nvidia-driver-470 - distro non-free\ndriver   : nvidia-driver-470-server - distro non-free\ndriver   : xserver-xorg-video-nouveau - distro free builtin\n\n```\n\n#### (3) 安装推荐的驱动（如 570 版本）\n\n```bash\nsudo apt install nvidia-driver-570\n```\n\n#### (4) 重启系统\n\n```bash\nsudo reboot\n```\n\n#### (5) 验证驱动\n\n```bash\nnvidia-smi\n```\n\n正常输出应显示 GPU 状态：\n\n```\n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 535.161.07   Driver Version: 535.161.07   CUDA Version: 12.2     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n|=========================================+======================+======================|\n|   0  NVIDIA GeForce GTX 1050 Ti    Off  | 00000000:03:00.0 Off |                  N/A |\n| 30%   35C    P8              N/A /  75W |      0MiB /  4096MiB |      0%      Default |\n+-----------------------------------------+----------------------+----------------------+\n```\n\n------\n\n### **第三步： 安装 CUDA 工具包（可选）**\n\n如果需开发 GPU 计算应用（如 AI、深度学习），安装 CUDA：\n\n#### (1) 访问 [CUDA Toolkit Archive](https://developer.nvidia.com/cuda-toolkit-archive) 选择版本（推荐 CUDA 11.8 或 12.x）\n\n#### (2) 通过命令行安装（以 CUDA 12.2 为例）\n\n+ 该命令需要去英伟达官网实时生成：[CUDA Toolkit 12.9 Downloads | NVIDIA Developer](https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_local)\n\n```\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin\nsudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget https://developer.download.nvidia.com/compute/cuda/12.9.0/local_installers/cuda-repo-ubuntu2204-12-9-local_12.9.0-575.51.03-1_amd64.deb\nsudo dpkg -i cuda-repo-ubuntu2204-12-9-local_12.9.0-575.51.03-1_amd64.deb\nsudo cp /var/cuda-repo-ubuntu2204-12-9-local/cuda-*-keyring.gpg /usr/share/keyrings/\nsudo apt-get update\nsudo apt-get -y install cuda-toolkit-12-9\n```\n\n#### (3) 添加变量\n\n虽然系统显示 `cuda-toolkit-12-9` 已安装，但 `nvcc` 的路径未添加到系统环境变量中。此时需要手动将 CUDA 的二进制目录加入 `PATH`：\n\n```bash\nexport PATH=/usr/local/cuda/bin:$PATH\nsource ~/.bashrc\n```\n\n#### (4) 验证 CUDA\n\n```bash\nnvcc --version\n```\n\n正常输出应显示 CUDA 版本。\n\n### **第四步： 验证 GPU 加速是否生效**\n\n#### 1、检查编码器\n\n```bash\nffmpeg -encoders | grep nvenc\n# 应输出包含 h264_nvenc 的行\n```\n\n正常输出：\n\n```bash\nroot@R7-13:~# ffmpeg -encoders | grep nvenc\nffmpeg version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2000-2021 the FFmpeg developers\n  built with gcc 11 (Ubuntu 11.2.0-19ubuntu1)\n  configuration: --prefix=/usr --extra-version=0ubuntu0.22.04.1 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared\n  libavutil      56. 70.100 / 56. 70.100\n  libavcodec     58.134.100 / 58.134.100\n  libavformat    58. 76.100 / 58. 76.100\n  libavdevice    58. 13.100 / 58. 13.100\n  libavfilter     7.110.100 /  7.110.100\n  libswscale      5.  9.100 /  5.  9.100\n  libswresample   3.  9.100 /  3.  9.100\n  libpostproc    55.  9.100 / 55.  9.100\n V....D h264_nvenc           NVIDIA NVENC H.264 encoder (codec h264)\n V..... nvenc                NVIDIA NVENC H.264 encoder (codec h264)\n V..... nvenc_h264           NVIDIA NVENC H.264 encoder (codec h264)\n V..... nvenc_hevc           NVIDIA NVENC hevc encoder (codec hevc)\n V....D hevc_nvenc           NVIDIA NVENC hevc encoder (codec hevc)\n```\n\n#### 2、监控 GPU 使用情况\n\n##### 2.1、`nvidia-smi` + `watch` 组合命令*\n\n```bash\n# 每秒刷新一次 GPU 状态，适合快速查看核心利用率、显存占用和温度\nwatch -n 1 nvidia-smi  # Linux/macOS\n```\n\nwindows 方案：\n\n```bash\nwhile ($true) { nvidia-smi; Start-Sleep -Milliseconds 500 }\n```\n\n##### 2.2、**`nvtop`（类 htop 工具）**\n\n```bash\n# 支持交互式操作和动态排序，适合多 GPU 服务器\nsudo apt install nvtop  # Ubuntu/Debian\nnvtop\n```\n\n## 第四步：使用GPU转码\n\n```bash\n# 本地文件转码\nffmpeg -nostats -loglevel warning -hwaccel cuda -i ace.mp4 -vf \"scale=720:1270,setsar=1/1\" -c:v h264_nvenc -preset p3 -rc vbr -b:v 0 -cq 23 -multipass fullres -tune hq -c:a aac -r 30 -y 3.mp4\n\n# 带请求头\nffmpeg -nostats -loglevel warning -hwaccel cuda -headers \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\\r\\nReferer: https://exx.tv/\\r\\n\" -i \"https://xxx.m3u8\" -vf \"scale=720:1270,setsar=1/1\" -c:v h264_nvenc -preset p3 -rc vbr -b:v 0 -cq 23 -multipass fullres -tune hq -c:a aac -r 30 -y 3.mp4\n```\n\n#### 命令详解：\n\n##### **基础参数**\n\n1. **`-nostats`**\n   - **功能**：禁用编码统计信息的输出。\n   - **说明**：默认情况下，FFmpeg 会实时显示比特率、帧数等统计信息，此参数可减少输出干扰。\n2. **`-loglevel warning`**\n   - **功能**：设置日志级别为 `warning`。\n   - **说明**：仅显示警告和错误信息，抑制冗余日志，使输出更简洁。\n3. **`-hwaccel cuda`**\n   - **功能**：启用 NVIDIA CUDA 硬件加速解码。\n   - **说明**：利用 GPU 加速视频解码流程，提升处理速度。\n4. **`-i ace.mp4`**\n   - **功能**：指定输入文件为 `ace.mp4`。\n\n------\n\n##### **视频处理参数**\n\n1. **`-vf \"scale=720:1270,setsar=1/1\"`**\n   - **功能**：应用视频滤镜链。\n     - **`scale=720:1270`**：将视频缩放至 `720x1270` 分辨率（注意宽高比可能被改变）。\n     - **`setsar=1/1`**：设置像素宽高比（Sample Aspect Ratio）为 1:1，确保方形像素显示。\n   - **说明**：调整分辨率后需修正宽高比，避免播放时变形。\n\n------\n\n##### **视频编码参数**\n\n1. **`-c:v h264_nvenc`**\n   - **功能**：使用 NVIDIA NVENC 硬件编码器生成 H.264 视频流。\n   - **说明**：相比 CPU 编码（如 `libx264`），硬件编码速度更快，但压缩效率略低。\n2. **`-preset p3`**\n   - **功能**：设置编码器预设为 `p3`。\n   - **说明**：NVENC 预设范围 `p1`（最快）到 `p7`（最慢但质量更好），`p3` 平衡速度与质量。\n3. **`-rc vbr`**\n   - **功能**：使用可变比特率（Variable Bitrate）控制模式。\n   - **说明**：VBR 根据内容复杂度动态分配码率，相比 CBR（恒定码率）更节省存储。\n4. **`-b:v 0`**\n   - **功能**：将视频目标比特率设为 `0`。\n   - **说明**：在 `-rc vbr` + `-cq` 模式下，此参数表示由质量参数（`-cq`）主导码率分配。\n5. **`-cq 23`**\n   - **功能**：设置恒定质量模式的质量值为 `23`。\n   - **说明**：NVENC 的 `cq` 范围通常为 `0`（无损）到 `51`（最差），`23` 是常见高质量选择。\n6. **`-multipass fullres`**\n   - **功能**：启用两趟编码（Two-Pass Encoding），使用全分辨率分析。\n   - **说明**：首趟分析视频内容，次趟优化码率分配，提升压缩效率（需更高计算资源）。\n7. **`-tune hq`**\n   - **功能**：优化编码参数以追求高质量。\n   - **说明**：适用于对画质要求较高的场景，可能牺牲部分编码速度。\n\n------\n\n##### **音频与帧率参数**\n\n1. **`-c:a aac`**\n   - **功能**：使用 AAC 编码器压缩音频流。\n   - **说明**：AAC 是通用音频格式，平衡音质与文件大小。\n2. **`-r 30`**\n   - **功能**：强制输出视频帧率为 `30 FPS`。\n   - **说明**：若输入帧率不一致，FFmpeg 会通过丢帧或插帧适配。\n\n------\n\n##### **其他参数**\n\n1. **`-y`**\n   - **功能**：自动覆盖输出文件（`3.mp4`），无需用户确认。\n","tags":["转码","gpu","NVIDIA"],"categories":["_A5-安装教程","ubuntu"]},{"title":"Django配置-channels-WS的ASGI服务器","url":"/2025/05/22/Django配置-channels-WS的ASGI服务器/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Django配置-channels-WS的ASGI服务器</strong></font>\n\n<!--more-->\n\n# 环境说明：\n\n该环境几乎算是目前最新的版本的asgi服务器了\n\n+ 系统环境：MacOS（M系列）\n\n+ Python版本：`3.12`\n+ Django版本：`5.1.7`\n+ daphne版本：`4.2.0`\n+ channels版本：`4.2.2`\n+ asgiref版本：`3.8.1`\n\n![image-20250522090858536](https://s2.loli.net/2025/05/22/IktHlRLTXoCMpZq.png)\n\n## 项目结构：\n\n```bash\n├── MyPorject\n│   ├── asgi.py\n│   ├── routing.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n├── apps\n│   ├── __pycache__\n│   │   └── consumers.cpython-312.pyc\n│   ├── consumers.py（位于主app下）\n│   └── **其他app**\n├── manage.py\n```\n\n## 特别说明：\n\n<font color=red size=4 face=宋体><strong>`channels` 大于 3.0.5 必须配置`daphne`或者`uvicorn`使用</strong></font>\n\n### 第一步：安装带`达芙妮`的 `channels`版本，以及其他环境\n\n```bash\npip install channels[daphne]\n# daphne==4.2.0  channels==4.2.2\n\n# 安装Django\npip install Django==5.1.7\n\n## 安装 asgiref\npip install asgiref==3.8.1\n```\n\n### 第二步：配置 `MyPorject__settings.py`\n\n```python\nINSTALLED_APPS = [\n    \"daphne\",\n    \"其他app\"\n]\n\n## 开启 ASGI访问\nWSGI_APPLICATION = 'MyPorject.wsgi.application'\n# 添加 Channels 配置\nASGI_APPLICATION = 'MyPorject.asgi.application'\n```\n\n### 第三步：配置 `MyPorject__asgi.py`\n\n```python\nimport os\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom django.core.asgi import get_asgi_application\nfrom . import routing\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'MyPorject.settings')\ndjango_asgi_app = get_asgi_application()\n\napplication = ProtocolTypeRouter({\n    \"http\": django_asgi_app,\n    \"websocket\": URLRouter(routing.websocket_urlpatterns)\n})\n```\n\n### 第四步：新建 `MyPorject__routing.py`\n\n```python\n# yourapp/routing.py\nfrom django.urls import path, re_path\nfrom apps import consumers\n\nwebsocket_urlpatterns = [\n    # xxxx/ws/x1\n    path('ws', consumers.ChatConsumer.as_asgi()),\n]\n```\n\n### 第五步：新建 `MyPorject__apps__consumers.py`\n\n```python\nfrom channels.generic.websocket import AsyncWebsocketConsumer\nfrom channels.exceptions import StopConsumer\nimport json\n\n\nclass ChatConsumer(AsyncWebsocketConsumer):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.clientData = None\n        self.SendDataJsonKeys = None\n        \n    async def connect(self):\n        await self.accept()\n    async def disconnect(self, close_code=None):\n        raise StopConsumer()\n    async def receive(self, text_data=None, bytes_data=None):\n        try:\n            # 传递回来的参数的转换\n            self.clientData = json.loads(text_data)\n            print(\"传递过来参数了\", self.clientData)\n            self.SendDataJsonKeys = self.clientData.keys()   # 获取传递上来的参数\n        except Exception as e:\n            if text_data == \"断开\":\n                await self.send(f\"{e}\")\n                await self.send(\"网络连接断开！\")\n                await self.close()\n                return\n\n\n```\n\n","tags":["django","python","ASGI服务器","异步WEB"],"categories":["Python","Django_channels"]},{"title":"ubuntu22安装uv管理python","url":"/2025/05/21/ubuntu22安装uv管理python/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>ubuntu22安装uv管理器</strong></font>\n\n<!--more-->\n\n本文参考自：1、[【Python】使用uv管理python虚拟环境_uv环境python-CSDN博客](https://blog.csdn.net/muxuen/article/details/147544307)\n\n本文参考自：2、[uv 简易安装与更换国内镜像源_uv 国内源-CSDN博客](https://blog.csdn.net/qq_41472205/article/details/145686414)\n\n### 1、安装uv管理器\n\n+ Mac || Linux安装：\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n+ Windows安装：\n\n```powershell\n# 方式1: 在 Windows 上：使用 Astral.sh 提供的安装脚本\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# 方式2: 在 Windows 上：使用 scoop 安装 uv\nscoop install uv\n```\n\n+ pip安装方式：\n\n```bash\npip install uv\n```\n\n+ 验证是否安装成功：\n\n```bash\n# 验证安装是否成功\nuv --help\n\n# 查看uv版本\nuv --version\n```\n\n![img](https://s2.loli.net/2025/05/21/iSowqNnKdsv9CbB.jpg)\n\n\n\n### 2、卸载uv：\n\n```bash\nuv cache clean\nrm -r \"$(uv python dir)\"\nrm -r \"$(uv tool dir)\"\n\n# mac/linux\nrm ~/.local/bin/uv ~/.local/bin/uvx\n# windows\nrm $HOME.local\\bin\\uv.exe\nrm $HOME.local\\bin\\uvx.exe\n```\n\n\n\n### 3、python管理：\n\n+ 查看python可用版本\n\n```bash\nuv python list\n```\n\n+ 安装python3.13\n\n```bash\n# 标准安装方式\nuv python install 3.13\n\n# 其他安装Python的方式实现，比如PyPy实现的python\nuv python install pypy@3.13\n```\n\n+ 查找某个python版本的路径\n\n```bash\nuv python find 3.10\n# 输出：\n# /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10\n```\n\n+ 选用python版本（在具体的某个项目中，进入项目目录，使用如下命令指定选用的python版本）\n\n```bash\nuv python pin 版本号\n\n# 这个命令会在指定目录下创建一个 `.python-version` 文件，内容如下\n\nuv python pin 3.10\n# 输出：\n# Pinned `.python-version` to `3.10`\n\ncat .python-version\n# 输出：\n# 3.10\n```\n\n### 4、创建虚拟环境（项目）\n\n+ 方式1：创建项目有两种方式，第一种方式，先创建好项目目录，然后设置python版本并初始化uv虚拟环境\n\n```bash\nuv python pin 3.10\nuv init # 初始化\n```\n\n+ 执行了uv init之后，会在当前目录下创建几个文件，同时也会在当前目录下执行git init创建出一个新的git仓库来\n\n```bash\n~/data/code/python/test_code                                                                                                      \n❯ uv python pin 3.13\nPinned `.python-version` to `3.13`\n\n~/data/code/python/test_code                                                                                                      \n❯ uv init           \nInitialized project `test-code`\n\n~/data/code/python/test_code main ?6                                                                                              \n❯ ls\nREADME.md      main.py        pyproject.toml\n```\n\n+ 方式2：另外一个方式是在init之后添加一个项目名，会自动创建项目文件夹\n\n```\nuv init 项目名\n```\n\n### 5、添加依赖\n\n```bash\nuv add 依赖项\n\n# 比如添加requests库\nuv add requests\n\n# 还可以指定具体版本\nuv add requests==版本号\n```\n\n执行了这个命令后，会在当前目录下创建.venv虚拟环境目录（在vscode里面可以选择这个目录作为虚拟环境，否则代码解析会有问题），并添加我们要的依赖项，同时会新增一个uv.lock文件，用于存放依赖项版本相关的信息。pyproject.toml文件中的dependencies字段也会包含需要的依赖项。\n\n```bash\n~/data/code/python/test_code main ?6                                                                                              \n❯ uv add requests\nUsing CPython 3.13.1 interpreter at: /opt/homebrew/opt/python@3.13/bin/python3.13\nCreating virtual environment at: .venv\nResolved 6 packages in 13.85s\nPrepared 5 packages in 5.55s\nInstalled 5 packages in 13ms\n + certifi==2025.1.31\n + charset-normalizer==3.4.1\n + idna==3.10\n + requests==2.32.3\n + urllib3==2.4.0\n\n```\n\n而且，从这个输出中也能看到，它自动使用了`.python-version`指定的3.13版本的python，和当前我们全局目录下的python3指向什么版本没有关系（我的全局python3指向的是3.10版本）\n\n###  6、运行程序\n\n依赖添加好后，就可以使用uv来运行python程序了\n\n```bash\nuv run 程序文件名 [命令行参数]\n```\n\nuv会自动按照我们的配置来运行程序，无序我们手动维护依赖项，也不需要手动去source各式各样的虚拟环境了。\n\n### 7、uvx命令\n\n随着uv下载的还有一个uvx命令，uvx命令本质上是uv tool run命令的别名\n\n```bash\nuvx python main.py\n# 等价于\nuv run main.py\n# 等价于\nuv tool run main.py\n```\n\n实际例子，如下这两个命令是等价的\n\n```bash\n❯ uvx --directory ~/data/code/python/test_code python main.py\nHello from test-code!\n    \n❯ uv tool run --directory ~/data/code/python/test_code python main.py\nHello from test-code!\n\n```\n\n### 8、设置下载包的镜像源\n\nuv下载第三方库本质上也是通过pypi源下载的，所以在国内网络环境中默认链接速度会很慢，可以在项目目录的`pyproject.toml`中添加如下内容来使用清华源\n\n```bash\n[[tool.uv.index]]\nurl = \"https://pypi.tuna.tsinghua.edu.cn/simple\"\ndefault = true\n```\n\n运行uv add命令的时候也可以指定镜像源\n\n```bash\nuv add --default-index https://pypi.tuna.tsinghua.edu.cn/simple requests\n```\n\nuv也提供了全局的配置项，可以通过环境变量`UV_DEFAULT_INDEX`配置镜像源\n\n```bash\nexport UV_DEFAULT_INDEX=https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n全局的配置项优先级低于`pyproject.toml`中配置的镜像源。如果`pyproject.toml`里面配置了镜像源，则会使用`pyproject.toml`的配置。","tags":["pyenv"],"categories":["_A5-安装教程","ubuntu"]},{"title":"windows安装配置pyenv","url":"/2025/05/03/windows安装配置pyenv/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>windows安装配置pyenv</strong></font>\n\n<!--more-->\n\n根据官方文档的命令：\n\n```\nInvoke-WebRequest -UseBasicParsing -Uri \"https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1\" -OutFile \"./install-pyenv-win.ps1\"; &\"./install-pyenv-win.ps1\"\n```\n\n直接执行该命令可能会出现错误。我们可以使用下面的方法：\n\n- 进入[pyenv-win配置文件](https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1)的下载地址 ，将该名为`install-pyenv-win.ps1`的配置文件下载至电脑某目录(如`D:\\pyenv`)\n- 将脚本文件下载完成后，在终端(`PowerShell`) 中，使用cd命令切换到保存该脚本文件的目录，然后运行以下命令来执行脚本\n\n```bash\n./install-pyenv-win.ps1\n```\n\n- 执行完成后，运行下面的命令确认是否安装成功：\n\n```bash\npyenv --version\n```\n\n显示以下画面，说明安装成功：\n\n![img](https://s2.loli.net/2025/05/03/kTM8bmwgpzqLl9Q.webp)\n\n","tags":["docker"],"categories":["_A5-安装教程","windows"]},{"title":"ubuntu-部署Pyenv-并使用不同环境","url":"/2025/04/28/ubuntu-部署Pyenv-并使用不同环境/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>ubuntu 部署Pyenv 并使用不同环境</strong></font>\n\n<!--more-->\n\n# Pyenv版本优先级：Shell > Local > Global\n\n### Step 1: Update Your System\n\n首先，你需要确保你的 Ubuntu 系统是最新的。\n\n```bash\nsudo apt update\nsudo apt upgrade\n```\n\n### Step 2: Install Prerequisites\n\nPyENV 需要一些依赖项才能正常工作，运行以下命令安装它们。\n\n```shell\nsudo apt-get install build-essential libbz2-dev libncurses5-dev libncursesw5-dev libffi-dev libreadline-dev libssl-dev libsqlite3-dev liblzma-dev zlib1g-dev wget curl llvm libncurses-dev xz-utils git\n\n```\n\n### Step 3: Install PyENV\n\n执行以下命令，安装 PyENV\n\n```shell\ncurl https://pyenv.run | bash\n```\n\n![Installing PyENV on Ubuntu](https://s2.loli.net/2025/04/28/A6ftuGO3xJBviVI.png)\n\n### Step 4: Update Your Shell Configuration\n\n安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 **~/.bashrc** 文件，添加以下行，以便每次打开终端时它都会加载。\n\n```bash\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n\n使用 source 命令，使更改生效。\n\n```bash\nsource ~/.bashrc\n```\n\n### Step 4: Update Your Shell Configuration(root用户安装方式)\n\n安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 **~/.bashrc** 文件，添加以下行，以便每次打开终端时它都会加载。\n\n```bash\n# 编辑全局环境变量文件（影响所有用户）\necho 'export PYENV_ROOT=\"/root/.pyenv\"' >> /etc/profile.d/pyenv.sh\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> /etc/profile.d/pyenv.sh\necho -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> /etc/profile.d/pyenv.sh\n```\n\n使用 source 命令，使更改生效。\n\n```bash\n# 使配置立即生效\nsource /etc/profile.d/pyenv.sh\n```\n\n\n\n### Step 5: Install Python Versions\n\n现在您可以安装所需的任何版本的 Python。例如，要安装 Python 3.12\n\n```shell\npyenv install 3.12\n```\n\n或者您可能需要安装 Python 2.7 等旧版本\n\n```shell\npyenv install 2.7\n```\n\n列出系统上安装的所有 Python 版本\n\n```shell\npyenv install --list\n```\n\n### Step 6: Set a Global Python Version\n\n您可以设置默认使用的全局 Python 版本，比如将 Python 3.12 设置为全局版本。\n\n```shell\npyenv global 3.12\n```\n\n查看当前全局 Python 版本\n\n```shell\npyenv version\n```\n\n![PyENV Set Default Python Version](https://s2.loli.net/2025/04/28/aWyE9BJAwHVMdmT.png)\n\n### Step 7: 设置其他版本\n\n```shell\n# 进入你的项目目录\ncd ~/projects/legacy-project\n\n# 设置该目录的 Python 版本为 3.8\npyenv local 3.8.12   # 假设已安装 3.8.12\n\n# 这会生成一个隐藏文件 `.python-version`，记录版本号\n\n## 验证\npyenv shell 3.8.12   # 临时设置\npython --version      # 应显示 3.8.12\n\n# 退出临时模式（恢复全局或本地设置）\npyenv shell --unset\n\n# 恢复全局版本\ncd ~/projects/legacy-project\nrm .python-version   # 删除版本标记文件\n```\n\n### Step 8: 使用虚拟环境隔离项目（推荐）\n\n```shell\n# 创建虚拟环境（基于 Python 3.8）\npyenv virtualenv 3.8.12 my-legacy-env\n\n# 进入项目目录并激活虚拟环境\ncd ~/projects/legacy-project\npyenv local my-legacy-env  # 自动激活\n\n# 验证\npython --version  # 显示 3.8.12，且环境独立\npip list          # 显示该环境独立的包\n\n# 退出虚拟环境\npyenv deactivate\n```\n\n### Step 9: 验证版本切换\n\n```shell\ncd ~  # 退出项目目录\npython --version  # 应显示全局版本 3.13.0\n\ncd ~/projects/legacy-project\npython --version  # 应显示本地版本 3.8.12 或虚拟环境\n```\n\n","tags":["pyenv"],"categories":["_A5-安装教程","ubuntu"]},{"title":"破解cloudflare拦截神器_puppeteer","url":"/2025/02/25/破解cloudflare拦截神器-puppeteer/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>破解cloudflare拦截神器_puppeteer</strong></font>\n\n<!--more-->\n\n### 安装番外：安装node.js环境\n\n#### 安装`nvm`管理器\n\n+ 第1步：mac 安装：\n\n```bash\nbrew install nvm\n```\n\n+ 第2_1步：命令安装：\n\n```bash\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n或\n$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n+ 第2_2步：国内安装\n\n```bash\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n或\n$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\n+ 第3步：添加环境\n\n```bash\n# 1、这是本地不存在配置文件的时候提示需要添加的配置\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n\n# 2、这是本地存在配置文件的时候提示需要添加的配置（推荐）\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\n+ 第4步：加载环境：\n\n```bash\nsource ~/.zshrc\n```\n\n+ 第5步：测试安装是否成功\n\n```bash\n$ nvm -v\n或\n$ nvm use system\n```\n\n+ 第6步：`nvm`相关命令\n\n```bash\nnvm install stable\nnvm install <version>     # 安装指定版本 node\nnvm uninstall <version>   # 删除指定版本 node\n\nnvm use <version>         # 切换使用指定的版本 node\nnvm alias default <version>   # 永久版本 - 所有窗口生效指定版本\n\nnvm ls    # 列出所有安装的版本\nnvm ls-remote   # 列出所有远程服务器的版本（官方 node version list）\nnvm current   # 显示当前的版本\nnvm alias <name> <version>   # 给不同的版本号添加别名\nnvm unalias <name>   # 删除已定义的别名\n\nnvm reinstall-packages <version>     # 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包\n```\n\n\n\n### 第一步：安装puppeteer\n\n```bash\nnpm i puppeteer\n```\n\n### 第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth\n\n```bash\nnpm install puppeteer-extra puppeteer-extra-plugin-stealth express\n```\n\n### 第三步：使用nodejs获取数据：\n\n```js\nconst puppeteer = require('puppeteer-extra')\nconst StealthPlugin = require('puppeteer-extra-plugin-stealth')\npuppeteer.use(StealthPlugin())\nconst {executablePath} = require('puppeteer')\n\npuppeteer.launch({ headless: false, executablePath: executablePath() }).then(async browser => {\n    const page = await browser.newPage()\n    await page.goto('https://xxx.com')\n\n    // 使用 Promise 来等待\n    await new Promise(resolve => setTimeout(resolve, 2000))  // 等待 2 秒\n    // 获取页面的文本内容\n    const pageContent = await page.evaluate(() => {\n        return document.body.innerText;  // 获取页面的所有文本\n    });\n\n    // 打印页面文本内容\n    console.log(pageContent);\n    await page.screenshot({ path: 'cointracker_home.png', fullPage: true })\n    await browser.close()\n})\n```\n\n### 第四步：当然你也可以把他写成接口\n\n```\n.....\n```\n\n","tags":["逆向","nodejs","puppeteer","后端"],"categories":["_A7-逆向","puppeteer"]},{"title":"ubuntu-设置swap交换空间","url":"/2025/02/17/ubuntu-设置swap交换空间/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>`ubuntu` 设置`swap`交换空间</strong></font>\n\n<!--more-->\n\n在 `Ubuntu` 上设置交换空间（`Swap Space`）可以帮助系统在物理内存不足时使用硬盘空间来存储临时数据。以下是设置交换空间的步骤：\n\n### 步骤 1: 检查当前交换空间\n\n首先，检查当前的交换空间是否已启用：\n\n```\nsudo swapon --show\n```\n\n如果没有输出，表示当前没有启用的交换空间。\n\n### 步骤 2: 创建交换文件\n\n1. 选择交换文件的大小：决定你想要创建的交换文件的大小。例如，假设你想创建一个 `2GB` 的交换文件。\n2. 创建交换文件：使用 `fallocate` 命令创建交换文件：\n\n```\nsudo fallocate -l 2G /swapfile\n```\n\n如果 fallocate 不可用，可以使用 `dd` 命令：\n\n```\nsudo dd if=/dev/zero of=/swapfile bs=1G count=2  \n```\n\n### 步骤 3: 设置交换文件权限\n\n为了安全起见，设置交换文件的权限，使其只能由 `root` 用户访问：\n\n```\nsudo chmod 600 /swapfile\n```\n\n### 步骤 4: 将文件设置为交换空间\n\n使用以下命令将文件设置为交换空间：\n\n```\nsudo mkswap /swapfile\n```\n\n### 步骤 5: 启用交换空间\n\n启用交换空间：\n\n```\nsudo swapon /swapfile\n```\n\n### 步骤 6: 验证交换空间\n\n再次检查交换空间是否已启用：\n\n```\nsudo swapon --show\n```\n\n你应该能看到 `/swapfile` 列在输出中。\n\n### 步骤 7: 设置开机自动挂载\n\n为了在系统重启后自动启用交换空间，需要将其添加到 `/etc/fstab` 文件中：\n\n1. 打开 `/etc/fstab` 文件：\n\n```\nsudo nano /etc/fstab\n```\n\n2. 在文件末尾添加以下行：\n\n```\n/swapfile none swap sw 0 0\n```\n\n保存并退出编辑器（在 `nano` 中，按 `CTRL + X`，然后按 `Y` 确认保存）。\n\n### 步骤 8: 调整交换空间使用策略（可选）\n\n你可以调整系统使用交换空间的策略。默认情况下，`Linux` 系统会在物理内存使用到一定程度后才会使用交换空间。你可以通过调整` vm.swappiness` 参数来改变这一行为：\n\n查看当前的 `swappiness` 值：\n\n```\ncat /proc/sys/vm/swappiness\n```\n\n临时设置 `swappiness` 值（范围 `0-100`，值越低，越不倾向于使用交换空间）：\n\n```\nsudo sysctl vm.swappiness=10\n```\n\n要永久更改 `swappiness` 值，可以编辑 `/etc/sysctl.conf` 文件：\n\n```\nsudo nano /etc/sysctl.conf\n```\n\n在文件中添加或修改以下行：\n\n```\nvm.swappiness=10\n```\n\n保存并退出编辑器。\n\n### 总结\n\n通过以上步骤，你可以在 `Ubuntu` 上成功设置和启用交换空间。这将有助于在物理内存不足时提高系统的稳定性和性能。","tags":["ubuntu","swap","交换空间"],"categories":["_A5-安装教程","ubuntu"]},{"title":"手把手教你搭建Docker私有仓库Harbor","url":"/2025/02/16/手把手教你搭建Docker私有仓库Harbor/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>手把手教你搭建Docker私有仓库Harbor</strong></font>\n\n本文搬运自：[手把手教你搭建Docker私有仓库Harbor - sowler - 博客园](https://www.cnblogs.com/sowler/p/18242819)\n\n<!--more-->\n\n#### 1、什么是Docker私有仓库\n\nDocker私有仓库是用于存储和管理Docker镜像的私有存储库。Docker默认会有一个公共的仓库Docker Hub，而与Docker Hub不同，私有仓库是受限访问的，只有授权用户才能够上传、下载和管理其中的镜像。这种私有仓库可以部署在本地云环境中，用于组织内部开发、测试和生产环境中的容器镜像管理。保证数据安全性。\n\n#### 2、Docker有哪些私有仓库\n\n**以下是一些常见的Docker私有仓库：**\n\n- **Harbor**：作为一个企业级的Docker Registry服务，Harbor提供了安全、可信赖的镜像存储和管理功能。它支持RBAC权限控制、镜像复制、镜像签名、漏洞扫描等功能。\n- **Docker Trusted Registry (DTR)**：由Docker官方推出的企业级Docker私有仓库服务，与Docker Engine紧密集成，支持高度的安全性和可靠性。\n- **Portus**：一个开源的Docker镜像管理和认证服务，提供用户管理、团队管理、镜像审核等功能，与Docker Registry兼容。\n- **Nexus Repository Manager**：虽然主要是用于构建和管理Java组件，但也可以用作Docker私有仓库。它具有强大的存储管理和权限控制功能。\n- **GitLab Container Registry**：GitLab集成了容器注册表功能，允许您存储、管理和分发Docker镜像。这是GitLab自带的功能，无需额外部署。\n- **AWS Elastic Container Registry (ECR)**：如果使用AWS云服务，可以考虑使用AWS ECR作为私有仓库。它与AWS的其他服务集成紧密，对AWS用户来说是一个方便的选择。\n\n本篇使用Harbor搭建Docker私有仓库。\n\n#### 3、Harbor简介\n\nHarbor是一个开源的企业级Docker Registry服务，它提供了一个安全、可信赖的仓库来存储和管理Docker镜像。Harbor翻译为中文名称为\"庇护；居住;\"。可以理解为是Docker镜像的\"居住环境\"或者是镜像的\"庇护所\"。Harbor最初由VMware公司开发，旨在解决企业级Docker镜像管理的安全和可信任性问题。VMware于2016年发布，在2017年，VMware将Harbor开源，这使得更广泛的社区和组织可以自由地使用和贡献代码。Harbor是一个成熟、功能丰富且安全可靠的企业级Docker Registry服务，为企业容器化应用的部署和管理提供了强大的支持。\n\nHarbor官网地址：[Harbor (goharbor.io)](https://goharbor.io/)\n\nGithub开源地址：https://github.com/goharbor/harbor\n\n#### 4、Harbor下载\n\n##### 4.1、通过Linux命令下载\n\n```sh\nwget https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz\n```\n\n##### 4.2、GitHub下载\n\n下载地址：https://github.com/goharbor/harbor/releases 下载离线版本\n\n![img](https://s2.loli.net/2025/02/16/meHfNQrXgctVMnx.png)\n\n下载成功后，把包通过 `xftp` 上传到服务器。\n\n##### 4.3、解压\n\n解压文件\n\n```sh\ntar -zxvf harbor-offline-installer-v2.10.0.tgz \n```\n\n#### 5、启动Harbor\n\n##### 5.1、修改配置文件\n\n复制`harbor.yml.tmpl` 文件并重命名为`harbor.yml`修改此配置文件，需要设置hostname、端口、数据库密码等。\n\n```sh\ncp harbor.yml.tmpl harbor.yml #拷贝\n\nvim harbor.yml\n```\n\n修改配置文件：\n\n```yaml\n#修改hostname的值，如果没有域名就使用本机IP地址\nhostname: 192.168.42.133\n\n#配置启动端口号\n# http related config \nhttp:\n  # port for http, default is 80. If https enabled, this port will redirect to https port\n  port: 5000\n\n# 如果没有申请证书，需要隐藏https\n#https:\n  # https port for harbor, default is 443\n#  port: 443\n  # The path of cert and key files for nginx\n#  certificate: /your/certificate/path\n#  private_key: /your/private/key/path\n\n#启动成功后，admin用户登录密码\n# Remember Change the admin password from UI after launching Harbor.\nharbor_admin_password: AdminHarbor12345\n```\n\n![img](https://s2.loli.net/2025/02/16/uflyIABjz3amckh.png)\n\n##### 5.2、启动\n\n配置文件修改成功后，执行 `install.sh` 脚本进行安装harbor\n\n```sh\n./install.sh \n```\n\n启动报错：\n\n```ABAP\n[Step 0]: checking if docker is installed ...\n\nNote: docker version: 26.1.3\n\n[Step 1]: checking docker-compose is installed ...\n/opt/harbor/common.sh: line 119: docker-compose: command not found\n✖ Failed to parse docker-compose version.\n```\n\n可以看到，该服务器安装的 `docker` 没有安装 `docker-compose` 插件\n\n##### 5.3、安装docker-compose\n\n进入`docker-compose` 官网下载执行文件，地址： https://github.com/docker/compose 下载成功后，把可执行文件加入`Linux` 系统命令目录\n\n```sh\ncp docker-compose-linux-x86_64 /usr/local/bin/\n```\n\n重命名：\n\n```sh\nmv docker-compose-linux-x86_64 docker-compose\n```\n\n授权：\n\n```sh\nchmod +x /usr/local/bin/docker-compose\n```\n\n执行命令查看是否安装成功：\n\n```sh\ndocker-compose --version\n```\n\n如果需要卸载，直接删除即可：\n\n```sh\nrm -f /usr/bin/docker-compose\n```\n\n##### 5.4、再次启动\n\n再次执行 `./install.sh`\n\n![img](https://s2.loli.net/2025/02/16/ilOpYecKCy7wGTZ.png)\n\n提示安装成功。接下来就可以访问Harbor了。访问IP+端口：[http://192.168.42.133:5000](http://192.168.42.133:5000/)\n![img](https://s2.loli.net/2025/02/16/FrRKhnkacDUV8lG.png)\n\n访问成功，由于Harbor是通过docker管理的，所以启动非常方便。如果首页访问成功说明Docker私有仓库已经部署成功了。\n\n#### 6、Harbor Web页面操作说明\n\n默认用户名是admin，密码是启动时设置的密码：`AdminHarbor12345`\n\n![img](https://s2.loli.net/2025/02/16/9SnuUoJsKBzCFpA.png)\n\n登录成功进入主页面了。从系统首页可以看到系统分为三个菜单：项目、日志、系统管理。\n\n##### 6.1、项目\n\n项目管理顾名思义就是用来管理项目的。可以为每一个开发项目创建一个私有项目库，然后把Docker镜像存储到指定的项目中，为每个项目实现项目镜像隔离。创建项目的时候，Harbor提供了公开库（public repository）和私有库（private repository）两种类型的镜像存储空间。\n\n![img](https://s2.loli.net/2025/02/16/F34W9pclPBSkQHa.png)\n\n通过详情信息可以看到：**公开库中的镜像是对所有用户可见和可访问的，任何人都可以查看和拉取其中的镜像。而私有库中的镜像则需要登录才能访问控制，只有被授权的用户或团队才能够查看、拉取和推送镜像。** 可以根据需要创建相关的项目。\n\n![img](https://s2.loli.net/2025/02/16/l1pfKPiZngO9sXW.png)\n\n项目创建成功后，可以点击进入项目。在里面可以为每个项目单独设置不同的配置信息。可以为每一个项目添加成员信息。\n\n![img](https://s2.loli.net/2025/02/16/yBMfu4NG6PHYxdX.png)\n\n角色权限说明：\n\n- **项目管理员（Project Administrator）：**拥有项目的最高权限，可以对项目进行全面管理，包括创建和删除项目、管理项目成员和权限、配置项目属性、查看项目日志等。\n- **维护人员（Maintainer）：**类似于项目管理员，但权限稍低，通常用于协助管理项目，可以进行项目的部分管理操作，如添加和删除镜像、配置镜像的复制和同步规则等。\n- **开发者（Developer）：**具有对项目中镜像仓库的读写权限，可以拉取、推送和删除镜像，以及管理部分项目配置，但不能进行项目管理操作。\n- **访客（Guest）：**只具有对项目中镜像仓库的只读权限，可以查看镜像和元数据，但无法对镜像进行修改或删除操作。通常用于分享项目或镜像给外部团队或用户。\n- **受限访客（Restricted Guest）：**是一种更加受限的访客角色，通常用于提供给外部用户或系统，具有对项目中镜像仓库的只读权限，但可能会限制访问的部分内容或功能。\n\n在右上角显示推送命令，可以通过提示命令进行docker镜像推送。\n\n![img](https://s2.loli.net/2025/02/16/RFEucUsbXL2jYyG.png)\n\n##### 6.2、日志\n\n日志菜单就是记录用户操作日志信息的。\n\n![img](https://s2.loli.net/2025/02/16/B7HKfokDjcG4yNE.png)\n\n##### 6.3、系统管理\n\n系统管理主要用来管理Harbor用户人员信息、镜像仓库的各种配置、权限和系统设置。\n\n![img](https://s2.loli.net/2025/02/16/KfL2ViA7z8JyWvT.png)\n\n#### 7、Docker命令使用私有仓库\n\n##### 7.1、登录\n\n首先登录私有仓库地址：\n\n```sh\ndocker login  -u admin -p AdminHarbor12345 http://192.168.42.133:5000\n```\n\n会报错：\n\n```sh\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nError response from daemon: Get \"https://192.168.42.133:5000/v2/\": proxyconnect tcp: dial tcp 192.168.65.7:3128: connect: connection refused\n```\n\ndocker认为这个地址是不安全的，所以需要在docker守护进程配置文件中把该地址加入安全范围。\n\n```sh\n{\n  \"registry-mirrors\": [\"https://ejes884z.mirror.aliyuncs.com\"],\n  \"log-driver\":\"json-file\",\n  \"log-opts\": {\"max-size\":\"1g\", \"max-file\":\"3\"},\n  \"live-restore\": true,\n  \"insecure-registries\": [\"192.168.42.133:5000\"]\n}\n\n# insecure-registries 不安全的注册表配置一些不安全的地址信息，让Docker认为是安全的。多个地址使用 \",\" 分割\n```\n\n加入配置成功后，再次登录。\n\n```sh\nWARNING! Using --password via the CLI is insecure. Use --password-stdin.\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n```\n\n通过输出发现登录成功。认证信息存储在 `~/.docker/config.json` 文件中，只要登录信息存在，登录会一直生效不需要每次推送拉取之前都登录。\n\n##### 7.2、推送\n\n重新命名镜像名称\n\n```sh\ndocker tag 94543a6c1aef 192.168.42.133:5000/blog_project/nginx:1.26.0\n```\n\n推送\n\n```sh\ndocker push 192.168.42.133:5000/blog_project/nginx:1.26.0\n```\n\n查看Harbor仓库，推送成功。\n\n![img](https://s2.loli.net/2025/02/16/rejyKzPso7aNGOw.png)\n\n##### 7.3、拉取\n\n通过另一台服务器，使用 `docker pull`拉取镜像从私有仓库拉取镜像：\n\n```sh\ndocker pull 192.168.42.133:5000/blog_project/nginx:1.26.0\n```\n\n拉取成功\n\n![img](https://s2.loli.net/2025/02/16/VQRZWvfTwSmdIbj.png)\n\n查看下载数，发现已经更新了。\n\n![img](https://s2.loli.net/2025/02/16/kmbMnuydhpYTw5a.png)\n\n#### 8、总结\n\n关于使用Harbor搭建Docker私有仓库就介绍完毕了，如果大家有兴趣可以查看一下其他搭建方式，然后在它们之间进行对比一下看看那种方式更适合。本篇为入门级Harbor的基础使用，其他功能可以自行研究。","tags":["docker","Harbor"],"categories":["_A5-安装教程","Docker"]},{"title":"ubuntu-强制修改密码为简单密码","url":"/2025/02/15/ubuntu-强制修改密码为简单密码/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>ubuntu 强制修改密码为简单密码</strong></font>\n\n<!--more-->\n\n在 `Ubuntu` 中，出于安全考虑，系统通常会强制要求密码满足一定的复杂性和长度要求。默认情况下，root 密码必须至少包含 8 个字符。但是我们本地测试环境，不需要那么复杂的密码。越简单的密码越容易使用。\n\n这个时候我们可以 使用 临时禁用密码复杂性检查来修改\n\n### 1. 修改 PAM 配置\n\n1. 打开终端。\n2. 编辑 PAM 密码策略配置：\n\n使用以下命令打开 common-password 文件：\n\n```bash\nsudo vim /etc/pam.d/common-password\n```\n\n```bash\n# password\trequisite\t\t\tpam_pwquality.so retry=3  此为修改前的内容\npassword requisite pam_unix.so nullok obscure min=0 max=8  # 此为修改后的内容\npassword\t[success=2 default=ignore]\tpam_unix.so obscure use_authtok try_first_pass yescrypt\npassword\tsufficient\t\t\tpam_sss.so use_authtok\npassword\trequisite\t\t\tpam_deny.so\npassword\trequired\t\t\tpam_permit.so\npassword\toptional\tpam_gnome_keyring.so \n```\n\n","tags":["root","密码"],"categories":["_A5-安装教程","ubuntu"]},{"title":"ubuntu安装配置docker","url":"/2025/02/15/ubuntu安装配置docker/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>ubuntu安装配置docker</strong></font>\n\n<!--more-->\n\n### 1. 更新系统\n\n在 Ubuntu 中打开终端，更新系统：\n\n```bash\nsudo apt update\nsudo apt upgrade\n```\n\n\n\n### 2.  安装 Snap\n\n如果你的系统尚未安装 Snap，可以使用以下命令安装：\n\n```\nsudo apt install snapd\n```\n\n\n\n### 3. 使用 Snap 安装 Docker\n\n使用以下命令通过 Snap 安装 Docker：\n\n```bash\nsudo snap install docker\n```\n\n### 4. 启动 Docker 服务\n\n安装完成后，Docker 服务应该会自动启动。你可以使用以下命令检查 Docker 服务的状态：\n\n```\nsudo systemctl status snap.docker.dockerd\n```\n\n如果服务没有运行，可以使用以下命令启动它：\n\n```\nsudo systemctl start snap.docker.dockerd\n```\n\n\n\n### 4. 配置国内镜像加速器(国外服务器忽略)\n\n+ `vim /etc/docker/daemon.json`\n\n```bash\n{\n\t\"registry-mirrors\": [\n\t\t\"https://docker.mirrors.ustc.edu.cn\",\n\t\t\"https://docker.mirrors.tuna.tsinghua.edu.cn\",\n\t\t\"https://www.daocloud.io/mirror\",\n\t\t\"https://mirror.ccs.tencentyun.com\",\n\t\t\"https://hub-mirror.c.163.com\"\n\t]\n}\n```\n\n### 5. 重启 docker服务\n\n```\nsudo systemctl restart docker\n```\n\n\n\n### 6. 验证 Docker 安装\n\n运行以下命令以验证 Docker 是否安装成功：\n\n```bash\nsudo docker --version\n```\n\n### 7. 运行 Docker Hello World 示例\n\n为了确保 Docker 正常工作，可以运行一个简单的 Hello World 容器：\n\n```bash\nsudo docker run hello-world\n```\n\n如果一切正常，你将看到一条消息，表明 Docker 已成功安装并运行。\n\n### 8. （可选）将用户添加到 Docker 组\n\n如果你希望在不使用 sudo 的情况下运行 Docker 命令，可以将你的用户添加到 Docker 组：\n\n```bash\nsudo usermod -aG docker $USER\n```\n\n添加后，注销并重新登录，或者重启系统以使更改生效。\n\n### 总结\n\n通过 Snap 安装 Docker 是一种简单的方法，适合在 Ubuntu 上快速部署 Docker。","tags":["docker","安装"],"categories":["_A5-安装教程","ubuntu"]},{"title":"ubuntu-共享文件夹_samba","url":"/2025/02/15/ubuntu-共享文件夹-samba/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>ubuntu 共享文件夹 For samba</strong></font>\n\n<!--more-->\n\n在 Ubuntu 中共享文件夹可以通过多种方式实现，最常见的方法是使用 Samba（适用于 Windows 和 Linux 之间的共享）或 NFS（适用于 Linux 之间的共享）。以下是这两种方法的详细步骤。\n\n### 方法 1：使用 Samba 共享文件夹\n\n#### 1. 安装 Samba\n\n首先，确保你的系统已安装 Samba。打开终端并运行以下命令：\n\n```bash\nsudo apt update\nsudo apt install samba\n```\n\n#### 2. 创建共享文件夹\n\n选择一个目录作为共享文件夹，或者创建一个新的文件夹。例如，创建一个名为 shared 的文件夹：\n\n```bash\nmkdir ~/shared\n```\n\n#### 3. 配置 Samba\n\n编辑 Samba 配置文件：\n\n```bash\nsudo nano /etc/samba/smb.conf\n```\n\n在文件的末尾添加以下内容：\n\n```bash\n# 在 [global] 部分中，添加或修改以下设置：  开启全速\n [global]\n   max connections = 100  # 增加并发性能\n   max open files = 10000  # 增加并发性能\n   # 性能优化设置\n   socket options = TCP_NODELAY SO_RCVBUF=8192 SO_SNDBUF=8192\n   max protocol = SMB3\n   min protocol = SMB2\n   \n[MyFiles]\n   path = /home/kate/SambaFiles\n   available = yes\n   valid users = root\n   read only = no\n   browsable = yes\n   public = yes\n   writable = yes\n   create mask = 0755\n   directory mask = 0755\n```\n\n请将 your_username 替换为你的实际用户名。\n\n#### 4. 设置 Samba 用户\n\n为 Samba 设置用户密码：\n\n```bash\nsudo smbpasswd -a your_username\n```\n\n#### 5. 重启 Samba 服务\n\n重启 Samba 服务以使更改生效：\n\n```bash\nsudo systemctl restart smbd\n```\n\n#### 6. 访问共享文件夹\n\n在 Windows 系统中，你可以通过以下方式访问共享文件夹：\n\n1. 打开文件资源管理器。\n\n在地址栏中输入 \\\\your_ubuntu_ip\\SharedFolder，将 your_ubuntu_ip 替换为 Ubuntu 机器的 IP 地址。\n\n输入 Samba 用户名和密码进行访问。\n\n### 方法 2：使用 NFS 共享文件夹\n\nNFS（网络文件系统）适用于 Linux 之间的共享。\n\n#### 1. 安装 NFS\n\n首先，确保你的系统已安装 NFS：\n\n```bash\nsudo apt update\nsudo apt install nfs-kernel-server\n```\n\n#### 2. 创建共享文件夹\n\n选择一个目录作为共享文件夹，或者创建一个新的文件夹。例如，创建一个名为 shared 的文件夹：\n\n```bash\nmkdir ~/shared\n```\n\n#### 3. 配置 NFS\n\n编辑 NFS 配置文件：\n\n```bash\nsudo nano /etc/exports\n```\n\n在文件中添加以下行：\n\n```bash\n/home/your_username/shared *(rw,sync,no_subtree_check)\n```\n\n请将 your_username 替换为你的实际用户名。\n\n#### 4. 重启 NFS 服务\n\n重启 NFS 服务以使更改生效：\n\n```bash\nsudo exportfs -a\nsudo systemctl restart nfs-kernel-server\n```\n\n#### 5. 访问共享文件夹\n\n在另一台 Linux 机器上，你可以通过以下命令挂载 NFS 共享：\n\n```bash\nsudo mount your_ubuntu_ip:/home/your_username/shared /mnt\n```\n\n将 your_ubuntu_ip 替换为 Ubuntu 机器的 IP 地址，/mnt 是你希望挂载的本地目录。\n\n### 总结\n\n通过以上步骤，你可以在 Ubuntu 中共享文件夹。选择 Samba 或 NFS 取决于你的需求和网络环境。如果在配置或使用过程中遇到任何问题，请提供具体的错误信息，以便进一步排查。","tags":["docker","文件夹共享","挂载"],"categories":["_A5-安装教程","ubuntu"]},{"title":"django配置ASGI服务器教程","url":"/2024/12/09/django配置ASGI服务器教程/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>django配置ASGI服务器教程</strong></font>\n\n<!--more-->\n\n# 环境说明：\n\n+ 系统环境：Alibaba3\n\n+ Python版本：`3.13`\n+ Django版本：`5.1.4`\n+ uvicorn版本：`0.32.1`\n\n## 1、安装 **uvicorn** 服务器\n\n```python\npip install django uvicorn\n```\n\n### 2、创建ASGI应用程序\n\n在Django 3.0及更高版本中，Django默认提供了一个`asgi.py`文件，该文件位于与`wsgi.py`相同的位置（通常是项目的主目录下）。这个文件包含了一个ASGI应用程序的实例，你可以直接使用它。\n\n```python\nimport os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', '<your_project_name>.settings')  # <your_project_name> 替换成你的项目\napplication = get_asgi_application()\n```\n\n## 3、设置settings.py\n\n```python\n# WSGI_APPLICATION = '<your_project_name>.wsgi.application'   # 同步请求 直接注销掉 我们不需要\nASGI_APPLICATION = '<your_project_name>.asgi.application'   # 异步项目  将 <your_project_name> 替换成你的项目\n```\n\n### 4、 安装并运行ASGI服务器\n\n要运行ASGI应用，你需要安装一个`ASGI`服务器，如`Uvicorn`、`Daphne`或`Hypercorn`。然后，你可以使用这些服务器来启动你的`Django`应用。例如，使用`Uvicorn`启动`Django`应用的命令可能看起来像这样\n\n```python\n# uvicorn your_project_name.asgi:application   # 默认启动  访问地址为  http://127.0.0.1:8000\n\n# 可以自己指定端口\nuvicorn your_project_name.asgi:application --host 0.0.0.0 --port 8035    # 指定所有ip可访问 项目运行端口为 8035\n```\n\n","tags":["django","python","ASGI服务器","异步WEB"],"categories":["Python","Django"]},{"title":"远程修改-ESXI-8.0-管理ip地址","url":"/2024/08/18/远程修改-ESXI-8-0-管理ip地址/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**远程修改 ESXI 8.0 管理ip地址**</strong></font>\n\n<!--more-->\n\n###  **场景：**\n\n适用于不方便在设备边操作而又需要修改管理地址的场景。\n\n适用于不方便外接显示器的场景。\n\n### **注意：**\n\n生产环境一定确定好网络配置信息否则可能会因为网络配置不正确导致无法正常访问。\n\n### **步骤：**\n\n#### 1.开启SSH远程访问\n\n启用安全 `Shell`（也就是 `EXSi` 可以被 `SSH` 访问的功能）\n\n![img](https://s2.loli.net/2024/08/18/jXvEum9nVrO1aq8.png)\n\n#### 2.\n\n+ 使用 `SecureCRT SSH2` 连接 `ESXi` 主机，现在使用 `dcui` 并没有任何反应，在 `Session` 标签栏右键点击 `Disconnect` 。\n+ 这里我测试用 `Finalshell` 也是完全没问题的\n\n```bash\nThe time and date of this login have been sent to the system logs.\n\nWARNING:\n   All commands run on the ESXi shell are logged and may be included in\n   support bundles. Do not provide passwords directly on the command line.\n   Most tools can prompt for secrets or accept them from standard input.\n\nVMware offers supported, powerful system administration tools.  Please\nsee www.vmware.com/go/sysadmintools for details.\n\nThe ESXi Shell can be disabled by an administrative user. See the\nvSphere Security documentation for more information.\n[root@localhost:~] \n[root@localhost:~] dcui \n```\n\n#### 3.连接到SSH\n\n+ 如果是使用 `Finalshell` 则可省略此步骤\n+ 在 `Session` 标签栏右键点击 `Session Option` 修改 `Terminal` 类型为 `Xterm` 后重新 `SSH2` 连接\n\n![img](https://s2.loli.net/2024/08/18/e7AEdlkaJ4ghpPt.png)\n\n#### **4.使用 `dcui` 工具**\n\n+ 再次使用 `dcui` 工具，这时已经可以进入 `EXSi` 的系统管理界面。\n\n![img](https://s2.loli.net/2024/08/18/MvdVH8r7BLy1Kfs.png)\n\n#### 5.登录到控制中心\n\n+ 点击 `F2` 进行 `Customize System` 输入用户名、密码进入\n\n![img](https://s2.loli.net/2024/08/18/zO1Ehr7yvmHFgcC.png)\n\n#### 6.修改管理IP地址\n\n+ 选择 `Configure Management Network`\n\n![img](https://s2.loli.net/2024/08/18/eyDBxsMbLrXRgHI.png)\n\n#### 7.选择 `IPv4 Configuration`\n\n![img](https://s2.loli.net/2024/08/18/Z45nGUCewczAKby.png)\n\n#### 8.配置静态IP地址，然后点击回车\n\n![img](https://s2.loli.net/2024/08/18/2m6uOn3w5T8WjUh.png)\n\n#### 9.点击 `Esc` 选择 `Yes` 应用配置并且重启管理网络\n\n![img](https://s2.loli.net/2024/08/18/8M4Ichq1xCzebUs.png)\n\n#### 10.此时已近可以用修改后的IP地址登录管理ESXi主机\n\n![img](https://s2.loli.net/2024/08/18/OrPAf7l54TLonhd.png)","tags":["esxi"],"categories":["_A8-工具","esxi"]},{"title":"VMware-ESXI-8.0.2-部署教程","url":"/2024/08/18/VMware-ESXI-8-0-2-部署教程/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>ESXi 8.0虚拟机必备知识与保姆级安装过程</strong></font>\n\n<!--more-->\n\n今天我们开始进入软路由的安装，本篇先介绍如何安装ESXi 8.0虚拟机。iKuai 和 openWrt 的内容放在下一篇。参考了不少大佬的经验，综合下来，打造软路由的话 ESXi 和 PVE 用的比较多，ESXi 稳定性更好，PVE 硬件兼容性好些。\n\n> - 虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。在实体计算机中能够完成的工作在虚拟机中都能够实现。通过将多台虚拟机放置在一台计算机上，可以仅在一台物理`服务器`或 “主机” 上运行多个操作系统和应用。\n> - ESXi，是 VMWare vSphere Hypervisor 套件之下重要组件。是一款一款优秀的 `服务器` 级别的虚拟机。前身是 ESX，依赖 Linux 源码，后来抛弃 Linux 源码做成了 ESXi。整个产品商用气息浓重，界面清晰易用，但硬件兼容性较差（主要面向服务器），没什么扩展性，ESXi 不依赖于任何操作系统，直接安装在裸机上，它本身就可以看作一个操作系统，然后可以在它上面安装其他系统。\n> - PVE，全称 Proxmox Virtual Environment，是基于 Debian 的 Linux 系统，虚拟机内核为 KVM。硬件兼容性优秀。界面功能不强，很多操作要靠命令行，但扩展能力几乎是无限的。\n\n楼主决定在工控主机内安装ESXi 8.0虚拟机，然后再虚拟机内安装iKuai作为主路由，OpenWrt 作为旁路由，说实话，楼主没有多拨和流控的需求，这样做主要是为了将网络隔离开，iKuai只负责PPOE拨号DHCP功能，其他的都交给openWrt。大家都知道openWrt插件丰富，平时折腾的比较多，经常会出现断网的情况，这样就可以放心折腾了。\n\n### 1.网络拓扑\n\n首先先大致规划一下家里的网络拓扑，因为家里原来用的是华硕的AC88U，像NAS、打印机这些静态IP地址的配置都是192.168.50.XX，这次折腾就懒得改了，索性直接以这个IP段，后面就不用再去重新配置了。大家也可以将50换成其他自己常用的。\n\n> - iKuai ：192.168.50.1账号:admin\n> - OpenWrt：192.168.50.2 账号:root\n> - ESXi：192.168.50.3 账号:root\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/ezEgCaiTGR9MF7O.jpg)\n\n## 一、制作ventoy镜像安装工具\n\n### 1.下载[Ventoy](https://www.ventoy.net/cn/download.html)启动盘制作工具\n\n首先准备一个空闲的U盘，用Ventoy 一键制作USB启动盘。打开[ventoy](https://www.ventoy.net/cn/download.html)下载安装， Ventoy 是开源软件，下载使用都是免费的，直接去官网或者 GitHub 页面下载即可。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/SDo6ZdRtqrGhsLK.png)\n\n在PC上安装，并运行Ventoy 软件，程序会自动检测当前 USB 设备。如果插入了多个U盘注意识别，别搞错了，造成数据丢失。点击安装开始制作：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/9ZzPNC3DuoXp1nd.png)\n\n可以看到 U 盘已经被重命名为 Ventoy。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/S43jzeL1iwXh2kU.png)\n\n打开磁盘管理，可以看到 U 盘被细分为 2 个大分区，Ventoy 分区为活动分区，exFAT 文件系统，用于存放 ISO 文件，exFAT 文件系统也能更好的跨平台使用。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/rKlfvE2Dz5j8Mkn.png)\n\nVentoy 的系统分区里其实还有一个只有 1MB 的空间，存有 Legacy BIOS 模式下的启动文件，可见对于老旧设备来说，Ventoy 一样兼容。\n\n<img src=\"https://s2.loli.net/2024/08/18/a3bKdMACDoVXlwI.png\" alt=\"ESXi 8.0虚拟机必备知识与保姆级安装过程\" style=\"zoom:50%;\" />\n\n格式化未NTFS，用于存放 ISO 文件的分区 ，支持 exFAT、FAT32、NTFS、UDF、XFS、Ext2、Ext3、Ext4。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/VmsEYBK7Or9nqL2.png)\n\n直接下载需要安装的系统镜像放到 U 盘里就可以了。如果U盘够大的话，一些常用的镜像和工具都可以放到里面，以后各个系统装机都可以使用。不管是各版本的 Windows 系统还是 PE 系统甚至是 ubuntu 系统，只要想加载就直接将镜像文件拖入到Ventoy文件夹内即可。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/QwWfCriepYRgDhB.png)\n\n## 二、下载 ESXi 8.0\n\n### 1. 直链下载镜像\n\n`VMWare` 被博通收购后，私人已经无法像原来一样轻松的下载了，这里是我传到网盘的镜像，如果觉得不安全，可以自己去找其他的镜像。\n\n`ESXi 8.0`下载传送门：[点击下载](https://bd.bcebos.com/v1/xly-icafe/vmware-vmvisor-installer-8.0u3-24022510.x86_64-20240818021845-hszvto.iso)  <font color=red size=3 face=宋体><strong>不支持螃蟹网卡</strong></font>\n\n`ESXi 6.7`下载传送门：[点击下载](https://bd.bcebos.com/v1/xly-icafe/vmware-esxi-6.7.0-20191204001-rtl8111-20240824033216-q1ikk9.iso)  <font color=red size=3 face=宋体><strong>已经封装螃蟹网卡`RTL8111`系列</strong></font>\n\n### 2.下载镜像\n\n去[官网下载](https://customerconnect.vmware.com/evalcenter?p=vsphere-eval-8)，下载前，先注册一个 VMWare 的 customer connect 账号，注册登录完毕后，就可以下载 60 天试用版的 ESXI8.0 了，后面使用密钥激活一下即可，网上神秘代码很多，一搜一堆，这个就不多说了。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/d83LvRzqSxi7FCM.png)\n\n下载镜像文件，目前最新的版本是8.0-20513097\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/MUbAl4dumzVXH6B.png)\n\n## 2.查询网卡驱动\n\n趁着下载的功夫，我们现在[vmware硬件支持（VMware Compatibility Guide)](https://www.vmware.com/resources/compatibility/search.php?deviceCategory=io&details=1&partner=46&releases=589&keyword=226&deviceTypes=6&page=1&display_interval=10&sortColumn=Partner&sortOrder=Asc)，查询一下网卡的驱动情况，Intel Corporation i226/ i225网卡都是支持免驱的。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/XmJeNf46poAwjbE.png)\n\n如果网卡不支持，可以去[【ESXi 的社区网络驱动程序】](https://flings.vmware.com/community-networking-driver-for-esxi#requirements)下载网卡驱动。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/8ks5QmDqduPrSEK.png)\n\n将下载好的镜像拷入Ventoy，ventoy镜像安装工具制作完成。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/OKziTC38BWLjr2P.png)\n\n## 三、安装ESXi8.0\n\n将工控机连接好`显示器`、键盘、鼠标。鼠标和键盘最好是有线的，插上 U 盘，准备开机。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/37IldGvqAFh1VSr.jpg)\n\n### 1.主板设置\n\n开机按 del/esc 进入BIOS设置，进入 BIOS 后，首先打开处理器的虚拟化（即 VT-x）。\n\nVT-x是 intel 运用 Virtualization 虚拟化技术中的一个指令集。提供 X86 平台的硬件辅助虚拟化解决方案。能够将单台电脑软件环境分割为多个独立分区，每个分区均可以按照需要模拟电脑的一项技术。将多种系统整合到一台服务器或电脑中，使同一个物理平台能够同时运行多个同类或不同类的操作系统，以分别作为不同业务和应用的支撑平台。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/j94TUgxhfQMA5mD.jpg)\n\n#### ①打开VT-d：\n\n英特尔定向 I/O 虚拟化技术 (VT-d) 是英特尔虚拟化技术 (VT) 的扩展，它向硬件提供虚拟化解决方案协助。英特尔 VT-d 能帮助用户提高系统的安全性和可靠性，并改善 I/O 设备在虚拟化环境中的性能。这些都从本质上帮助 IT 管理人员通过减少潜在的停机时间而降低总拥有成本；并通过更充分地利用数据中心资源而增大生产性吞吐量。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/rEDcuVwaGo7gLNh.jpg)\n\n#### ②打开AES：\n\n**AES 指令集：**高级加密标准指令集（英特尔高级加密标准新指令，简称 AES-NI）是一个 x86 指令集架构的扩展，用于 Intel 和 AMD 微处理器，由 Intel 在 2008 年 3 月提出。该指令集的目的是改进应用程序使用 高级加密标准（AES）执行加密和解密的速度，可以提高出国留学的速度。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/WnuyfaMBZqvLCH6.jpg)\n\n#### ④开启睿频加速技术\n\n在 CPU 技术设置选项中，找到 “Intel Turbo Mode Tech” 选项，有的主板可能会显示 “Intel Turbo Boost Tech”。至于 C-STATE就先不开了。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/KoWrmX9pyfSUGik.jpg)\n\nC-STATE 是 CPU 的电源管理功能，它会根据 CPU 的负载来管理 CPU 的能耗，和睿频加速技术结合，在运行单线程应用时，C-STATE 会关闭或降低其他核心的能耗，把这些能源加到执行程序的核心上提高CPU的执行效率。\n\nC-STATE的模式从 C0 开始，C0 表示 “正常” 的 CPU 运行模式（CPU 已 100% 激活）。C 后的数字越大，表示 CPU 进入休眠模式的程度越深。换言之，关闭的电路和时钟信号越多，完全唤醒 CPU 进入 C0 模式需要的时间越长。\n\n| Mode（模式） | 姓名               | 作用                                                         | CPU                                                          |\n| ------------ | ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| C0           | 操作状态           | CPU 完全打开                                                 | 所有 CPU                                                     |\n| C1           | 停止               | 通过软件停止 CPU 内部主时钟；总线接口单元和 APIC 仍然保持全速运行 | 486DX4 及以上                                                |\n| C1E          | 增强型停止         | 通过软件停止 CPU 内部主时钟并降低 CPU 电压；总线接口单元和 APIC 仍然保持全速运行 | 所有 socket 775 CPU                                          |\n| C1E          | —                  | 停止所有 CPU 内部时钟                                        | Turion 64、65-nm Athlon X2 和 Phenom CPU                     |\n| C2           | 停止授予           | 通过硬件停止 CPU 内部主时钟；总线接口单元和 APIC 仍然保持全速运行 | 486DX4 及以上                                                |\n| C2           | 停止时钟           | 通过硬件停止 CPU 内部和外部时钟                              | 仅限 486DX4、Pentium、Pentium MMX、K5、K6、K6-2、K6-III      |\n| C2E          | 扩展的停止授予     | 通过硬件停止 CPU 内部主时钟并降低 CPU 电压；总线接口单元和 APIC 仍然保持全速运行 | Core 2 Duo 和更高版本（仅限 Intel）                          |\n| C3           | 睡眠               | 停止所有 CPU 内部时钟                                        | Pentium II、Athlon 以上支持，但 Core 2 Duo E4000 和 E6000 上不支持 |\n| C3           | 深度睡眠           | 停止所有 CPU 内部和外部时钟                                  | Pentium II 以上支持，但 Core 2 Duo E4000、E6000 和 Turion 64 上不支持 |\n| C3           | AltVID             | 停止所有 CPU 内部时钟和降低 CPU 电压                         | AMD Turion 64                                                |\n| C4           | 更深入的睡眠       | 降低 CPU 电压                                                | Pentium M 以上支持，但 Core 2 Duo E4000、E6000 和 Turion 64 上不支持 |\n| C4E/C5       | 增强的更深入的睡眠 | 大幅降低 CPU 电压并关闭内存高速缓存                          | Core Solo、Core Duo 和 45-nm 移动版 Core 2 Duo 支持          |\n| C6           | 深度电源关闭       | 将 CPU 内部电压降低至任何值，包括 0 V                        | 仅 45-nm 移动版 Core 2 Duo 支                                |\n\n### 2.设置USB启动\n\n在BOOT里把U盘设置为第一启动项。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/p4xezHrG2oyPTbs.jpg)\n\n### 3.删除硬盘分区\n\n重启开机后，即可进入 Ventoy 界面，U 盘内保存的系统镜像都在列表中，选择要安装的镜像文件即可，选择启动WinPE64，按Enter键进入PE。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/A1dl3YmgTFMhOcS.jpg)\n\n进到PE后，用分区工具把软路由硬盘分区全部删除(注意不要删错)，这里有个大坑，如果硬盘存在分区的话，很可能造成无法安装的bug，尤其是对于拆机的硬盘来说，一定要将上面的分区及隐藏分区全部删掉。\n\n### 4.加载ESXi8.0镜像\n\n删除之后，重启电脑，选择ESXi启动安装：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/3wJcm8RZdFfS42q.jpg)\n\n### 5.修改ESXI的默认空间\n\n在读秒阶段，快速按下Shift+O，调出命令行，来修改ESXI的默认空间大小：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/4BrZG7qwXT5aMLo.jpg)\n\n在下面命令行输入：autoPartotionOSDataSize=20480。命令注意区分大小写，我这里将默认空间设置为20GB。硬盘空间不足的话推荐设置8192(8GB)即可，大家可以根据自己的情况进行设定：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/I6PyV7ZKoxeuvtQ.jpg)\n\n回车，开始跑码：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/hJvFHy7wsaBjRN1.jpg)\n\n还在跑码，等待跑码完成\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/xJyKqmpC4Dk7XbZ.jpg)\n\n继续跑码，不用管，等着就行：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/9yNumCapzt1ciXs.jpg)\n\n跑码：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/JUsjgb92yWV8FaM.jpg)\n\n跑码：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/YmLF7tk5y1qJdv6.jpg)\n\n这一步 **Starting service vmtoolsd** 的加载时间会比较长，一定要耐心等待，不是死机了。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/V52oXGlrmwFixy4.png)\n\n一直等待到出现如下界面，选择 Continue，按回车，继续下一步：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/SxNzKIF8BV3Z5yT.jpg)\n\n同意 VMWARE 的条款，按F11，继续下一步：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/cr4RNepH83LzEWZ.jpg)\n\n### 6.选择安装位置\n\n接下来会扫描此计算机上的所有存储器(硬盘)，等待扫描结果：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/JULE2dcfpZFnGPl.png)\n\n选择安装位置，可以看到有两个盘，一个NVMe的`固态硬盘`和U盘，用键盘上下键调整，选择第一个安装在固态硬盘。一定要看好，不要安装错位置。选择好了回车继续：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/gCadXqHT4GwUluJ.jpg)\n\n选择键盘布局，回车继续下一步：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/LVqEvxXRIjnlT8J.jpg)\n\n### 7.设置登录密码\n\n弹出密码输入页，这里输入密码，需要输入两遍，输入第一遍之后，按table键切换到第二行输入第二遍确认密码，输入一定要慢一点，因为不显示输入的密码，很容易输错，密码需要大小写带数字。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/TE6542fiqQNjcrk.png)\n\n输入完毕后，回车进行下一步：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/gaOhdtKGcBpwMbE.jpg)\n\n弹出确认安装位置选项，看一下安装位置有没有问题，没选错，按F11继续安装：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/o8Iys9mJt2XFgvV.jpg)\n\n等待加载完成：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/6RshOaS1TwQzFjE.jpg)\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/3tl6HCDhwVUzNL4.jpg)\n\n到这里拔掉U盘，之后按回车，重启。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/mB3Iq62eGbgDnMw.png)\n\n回车继续：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/e5LXlnhj7Gpa1T8.jpg)\n\n重启后开始跑码：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/hBKytFj1DQ2IvcA.jpg)\n\n等待跑码完成：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/XDugv6xW4dtzoeA.jpg)\n\n继续等待：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/2TRGZ7PgKEFL3xV.jpg)\n\n继续加载，下方的安装指示条可以看到安装的进度，全程不用管：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/D1T6wodjOimGUsa.jpg)\n\n有以下画面表示已经安装成功，按F2可进入管理后台，F12是关闭或者重启：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/43hvyJnjNPUaK7X.jpg)\n\n## 四、ESXI虚拟机设置\n\n按F2，弹出登录页面，输入刚才设定的密码。回车，进入ESXI管理后台。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/L2Xxtkfyv1g7SCQ.jpg)\n\n可以看到第一项是修改密码，第三项是设置网络。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/sfn38gUa6Oq4kXD.jpg)\n\n### 1.设置网口\n\n键盘上下键选择第三项，修改网络配置，回车进入：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/OTn5FbpkrslR4XY.jpg)\n\n选择第一项，设置网口：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/3xRF8avAcdmTGUq.jpg)\n\n上下键选择你要用来管理ESXI的网口，这里有些工程机的网口是错乱的，可以通过插拔`网线`来确定是不是正确。如果不正确的话，需要通过后面在web端设置进行接口对应。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/TfsNH94EU6mRziv.jpg)\n\n经过插拔网线，四个接口的顺序和ESXi系统显示的网口是一一对应的。选择etho接口作为管理口。通过键盘上下键，移动黑色条框，按空格确定选项。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/BPsJhVCHWKgqowp.jpg)\n\n回车保存，自动退回到【网络配置】页面：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/dqBWaRbfijKk4Vc.png)\n\n### 2.设置IPV4选项\n\n选择设置IPV4选项：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/XJzwYv7sU5p8LlP.jpg)\n\n键盘上下键，移动黑色条框到第三项，可以看到第三项前面的括号里有个圆圈(○)，按空格确定选项。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/huUHeZcIk73zEAd.png)\n\n设置下面三个选项【IPV4 Address(ESXI管理地址)】、【Subnet Mask(子网掩码)】、【Default Gateway(默认网关)】：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/ieIX7rZVFEgyLYc.jpg)\n\n> - IPV4 Address【ESXI管理地址】：192.168.50.3\n> - Subnet Mask【子网掩码】：255.255.255.0\n> - Default Gateway【默认网关】：192.168.50.1\n\n这个管理地址是后面我们在web端进行访问的地址，千万不要和ikuai以及openwrt冲突。Default Gateway【默认网关】就设置为主路由的网管即可。我以ikuai作为主路由。这里就直接将网关设置为主路由ikuai的地址了。按回车保存：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/mi3RnKMa65ozXG1.jpg)\n\n退出来之后，在页面右上角就看到我们设置的信息了，按ESC，退出：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/v5gJUxmIz3X8Rsi.jpg)\n\n在弹出的页面，按Y，并自动重启网络：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/JfkPXqziR2hp4EN.png)\n\n网络重启完后，可以看到，已经设置成功了，按ESC，回到首页：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/tIjaskAhu1cvb2p.jpg)\n\n返回首页之后，也可以看到已经设置完成：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/ejlu21p6PR3JHKc.jpg)\n\n## 五、连接ESXi 8.0网页端设置\n\n### 1.给电脑分配IP\n\n我们将网线一头插到软路由的eth0口，另外一端插到电脑上，因为ESXi没有DHCP(Dynamic Host Configuration Protocol, 动态主机配置协议) 功能，没办法给电脑自动分配IP地址，这里要手动修改一下：\n\n打开控制面板—网络和internet——更改适配器选项\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/WHpdmoRX8rMLQC7.png)\n\n这时候电脑显示未识别的网络：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/HbPASEBytlfsQkZ.png)\n\n右击网络-【属性】：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/7RbiLTzWVodX9rw.png)\n\n双击IPV4协议，在弹出的属性内，填入相同的IP段：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/39MnYgJUWZLExyj.png)\n\n### 2.访问web端\n\n打开浏览器，在浏览器内输入：192.168.50.3访问，用账户名：root和前面安装系统时设置的密码登录：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/JKUhf6awWBvYskd.png)\n\n弹出的页面选择不加入改进计划，确认下一步：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/yeTHEFB4gYUMLbo.png)\n\n### 3.激活\n\n在【管理】——【许可】看下激活状态，进来之后可以看到系统分配的60天的密钥：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/7MT1E6nvSDokajf.png)\n\n然后点分配许可证，输入密钥激活即可：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/UEth1AeSxq5BLCc.png)\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/HWM3VgiOlD1rLRw.png)\n\n## 六、开启直通网卡\n\n选择【管理】-【硬件】-【PCI设备】，查看可以直通的网卡，这里网卡的顺序就是按照我们物理接口的etho、eth1、eth2、eth3顺序来的，第一个网卡千万不要直通，也就是我们前面设置的ESXi管理口，不要设置直通。如果把管理口也做了直通，ESXI 重启后 WEB 管理界面就进入不去了。\n\n### **直通的好处？**\n\n直通是指虚拟化时将硬件管理权、使用权完全交给一个虚拟出的系统(使用这个网卡的虚拟机)，不经过虚拟系统的虚拟封装，以直接以原生方式使用硬件，达到最高性能。直通的效率更好，因为直接直通给了虚拟机使用，硬件使用中产生的数据不会再经过ESXI进行二次处理，可以节约一部分系统性能，不直通的话虚拟机在运行中会占用更多的cpu。\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/f4c2VZomaDSPnYe.png)\n\n选择要直通的设备，然点击切换直通，将三个网卡的直通全部开启：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/yQ8SrRYDLqZzPV3.png)\n\n看到网卡直通状态变为活动后，就是直通开通成功了，这样后面我们安装路由虚拟机时，直接添加PCl设备就可以直通了，同时注意内存设置全部保留。这个放到安装ikuai和openwrt时具体再讨论：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/qvpz93PYN8CstSu.png)\n\n## 七、设置网络\n\n在网络内对虚拟机VM Network进行设置，选择【编辑设置】——安全内的混杂模式、mac地址改变、伪传输都改为接受：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/JLYzVI145RaEFMC.png)\n\n## 八、修改电源模式\n\n一定要电源模式改为高性能，否则会`路由器`会自动限制性能，百度网盘，迅雷等软件下载速度会限制在10MB/S。\n\n选择【管理】-【硬件】-【电源管理】-【更改策略】-高性能：\n\n![ESXi 8.0虚拟机必备知识与保姆级安装过程](https://s2.loli.net/2024/08/18/bEJdFVg6R1vIH4Y.png)\n\n## 小结：\n\n本期的经验分享就到这里结束了，本期主要是安装ESXi8.0虚拟机和基本的配置，在安装过程中碰到的一些问题写出来分享给大家，下一步就可以安装路由虚拟机了，后面我们来安装ikuai及openwrt，继续折腾。","tags":["虚拟机"],"categories":["_A8-工具","虚拟机"]},{"title":"内存小于-1G，宝塔面板-9.0.0-无法安装-mysql-解决方法","url":"/2024/08/08/内存小于-1G，宝塔面板-9-0-0-无法安装-mysql-解决方法/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>内存小于 1G，宝塔面板`9.0.0`无法安装`mysql`解决方法</strong></font>\n\n<!--more-->\n\n宝塔官方限制了内存小于`1G`无法安装`mysql`\n\n<font color=#00b2c2 size=5 face=宋体><strong>解决方法：</strong></font>\n\n找到路径：`/www/server/panel/class` 下的 `panelPlugin.py`\n\n![image-20240808124006141](https://s2.loli.net/2024/08/09/XxNRyJokGCQa6e9.png)\n\n定位到>>> 关键字 `limit_list` 将如下注释掉即可\n\n![image-20240808123340813](https://s2.loli.net/2024/08/08/WutVP8LYhXv9rxN.png)","tags":["系统","运维","宝塔"],"categories":["_A3-linux","宝塔面板"]},{"title":"requests-支持Ja3指纹修改的golang请求库","url":"/2024/07/03/requests-支持Ja3指纹修改的golang请求库/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>requests：支持Ja3指纹修改的golang请求库</strong></font>\n\n<!--more-->\n\n随着Python的验证限制越来越多，网络请求被限制得很严重，想要修改指纹等信息，requests库显得力不从心\n\n**于是转战Go**\n\n\n\n**requests支持以下新特性：**\n\n- 支持http2，默认以http2进行连接，连接失败后会进行退化而进行http1.1连接\n- 支持JA3指纹修改\n- 支持http2+JA3指纹\n- 支持在使用代理的基础上修改JA3指纹\n\n**下载requests库**:\n\n```bash\ngo get github.com/wangluozhe/requests\n```\n\n**项目地址：https://github.com/wangluozhe/requests**:\n\n\n\n### **http2：请求**\n\n```bash\nfunc request(_url string) (string, map[string]string) {\n\treq := url.NewRequest()\n\theaders := &http.Header{\n\t\t\"User-Agent\":                []string{\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/112.0\"},\n\t\t\"accept\":                    []string{\"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\"},\n\t\t\"accept-language\":           []string{\"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\"},\n\t\t\"accept-encoding\":           []string{\"gzip, deflate, br\"},\n\t\t\"upgrade-insecure-requests\": []string{\"1\"},\n\t\t\"sec-fetch-dest\":            []string{\"document\"},\n\t\t\"sec-fetch-mode\":            []string{\"navigate\"},\n\t\t\"sec-fetch-site\":            []string{\"none\"},\n\t\t\"sec-fetch-user\":            []string{\"?1\"},\n\t\t\"te\":                        []string{\"trailers\"},\n\t\thttp.PHeaderOrderKey: []string{\n\t\t\t\":method\",\n\t\t\t\":path\",\n\t\t\t\":authority\",\n\t\t\t\":scheme\",\n\t\t},\n\t\thttp.HeaderOrderKey: []string{\n\t\t\t\"user-agent\",\n\t\t\t\"accept\",\n\t\t\t\"accept-language\",\n\t\t\t\"accept-encoding\",\n\t\t\t\"upgrade-insecure-requests\",\n\t\t\t\"sec-fetch-dest\",\n\t\t\t\"sec-fetch-mode\",\n\t\t\t\"sec-fetch-site\",\n\t\t\t\"sec-fetch-user\",\n\t\t\t\"te\",\n\t\t},\n\t}\n\treq.Headers = headers\n\treq.Ja3 = \"771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-21,29-23-24,0\"\n\th2s := &transport.H2Settings{\n\t\tSettings: map[string]int{\n\t\t\t\"HEADER_TABLE_SIZE\": 65536,\n\t\t\t//\"ENABLE_PUSH\":            0,\n\t\t\t//\"MAX_HEADER_LIST_SIZE\":   262144,\n\t\t\t//\"MAX_CONCURRENT_STREAMS\": 1000,\n\t\t\t\"INITIAL_WINDOW_SIZE\": 131072,\n\t\t\t\"MAX_FRAME_SIZE\":      16384,\n\t\t},\n\t\tSettingsOrder: []string{\n\t\t\t\"HEADER_TABLE_SIZE\",\n\t\t\t\"INITIAL_WINDOW_SIZE\",\n\t\t\t\"MAX_FRAME_SIZE\",\n\t\t},\n\t\tConnectionFlow: 12517377,\n\t\tHeaderPriority: map[string]interface{}{\n\t\t\t\"weight\":    42,\n\t\t\t\"streamDep\": 13,\n\t\t\t\"exclusive\": false,\n\t\t},\n\t\tPriorityFrames: []map[string]interface{}{\n\t\t\t{\n\t\t\t\t\"streamID\": 3,\n\t\t\t\t\"priorityParam\": map[string]interface{}{\n\t\t\t\t\t\"weight\":    201,\n\t\t\t\t\t\"streamDep\": 0,\n\t\t\t\t\t\"exclusive\": false,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"streamID\": 5,\n\t\t\t\t\"priorityParam\": map[string]interface{}{\n\t\t\t\t\t\"weight\":    101,\n\t\t\t\t\t\"streamDep\": 0,\n\t\t\t\t\t\"exclusive\": false,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"streamID\": 7,\n\t\t\t\t\"priorityParam\": map[string]interface{}{\n\t\t\t\t\t\"weight\":    1,\n\t\t\t\t\t\"streamDep\": 0,\n\t\t\t\t\t\"exclusive\": false,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"streamID\": 9,\n\t\t\t\t\"priorityParam\": map[string]interface{}{\n\t\t\t\t\t\"weight\":    1,\n\t\t\t\t\t\"streamDep\": 7,\n\t\t\t\t\t\"exclusive\": false,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"streamID\": 11,\n\t\t\t\t\"priorityParam\": map[string]interface{}{\n\t\t\t\t\t\"weight\":    1,\n\t\t\t\t\t\"streamDep\": 3,\n\t\t\t\t\t\"exclusive\": false,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"streamID\": 13,\n\t\t\t\t\"priorityParam\": map[string]interface{}{\n\t\t\t\t\t\"weight\":    241,\n\t\t\t\t\t\"streamDep\": 0,\n\t\t\t\t\t\"exclusive\": false,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\th2ss := transport.ToHTTP2Settings(h2s)\n\treq.HTTP2Settings = h2ss\n\tr, err := requests.Get(_url, req)\n\n\terrMessage := map[string]string{}\n\tif err != nil {\n\t\terrMessage = map[string]string{\"status\": \"false\", \"errMessage\": \"获取内容错误\"}\n\t\t//fmt.Println(err)\n\t}\n\tif r.StatusCode != 200 {\n\t\terrMessage = map[string]string{\"status\": \"false\", \"errMessage\": \"状态响应错误\"}\n\t} else {\n\t\terrMessage = map[string]string{\"status\": \"true\", \"errMessage\": \"获取内容成功\"}\n\t}\n\t//fmt.Println(r.Request.Headers)\n\t//fmt.Println(\"url:\", r.Url)\n\t//fmt.Println(\"headers:\", r.Headers)\n\t//fmt.Println(\"text:\", r.Text)\n\treturn r.Text, errMessage\n}\n```\n\n","tags":["视频","go","爬虫"],"categories":["Golang","爬虫"]},{"title":"Django-ORM-存储JSON数据","url":"/2024/06/26/Django-ORM-存储JSON数据/","content":"\n## <font color=#00b2c2 size=5 face=宋体><strong>Django ORM 存储JSON数据</strong></font>\n\n<!--more-->\n\n在`Django`模型中，如果你想要一个字段能够接受一个列表（例如，一个图片URL的列表），你需要考虑数据库的设计如何能够支持这种结构。数据库通常不支持直接存储Python列表这样的复杂数据类型，但你可以使用几种方法来模拟这种行为。\n\n`以下是一些方法，你可以根据你的需求来选择：`\n\n### **使用JSONField**（Django 3.1+）\n\n如果你的Django版本是3.1或更高，你可以使用`JSONField`来存储JSON数据，包括列表。\n\n```python\nfrom django.db import models  \nfrom django.contrib.postgres.fields import JSONField  \n  \nclass MyModel(models.Model):  \n    list_image = JSONField(null=True, blank=True)  # 假设你想存储图片URL的列表\n```\n\n然后你可以这样使用它：\n\n```python\ninstance = MyModel.objects.create(list_image=['url1.com', 'url2.com'])\n```\n\n### **使用CharField或TextField并手动序列化/反序列化**\n\n如果你不想使用`JSONField`，或者你的Django版本较旧，你可以将列表转换为JSON字符串（使用`json.dumps`），然后将其存储在`CharField`或`TextField`中。读取时，你需要使用`json.loads`将其转换回Python列表。\n\n```python\nimport json  \nfrom django.db import models  \n  \nclass MyModel(models.Model):  \n    list_image = models.TextField(null=True, blank=True)  # 假设你想存储图片URL的列表的JSON字符串  \n  \n    def get_image_list(self):  \n        if self.list_image:  \n            return json.loads(self.list_image)  \n        return []  \n  \n    def set_image_list(self, image_list):  \n        self.list_image = json.dumps(image_list)  \n  \n# 使用时  \ninstance = MyModel()  \ninstance.set_image_list(['url1.com', 'url2.com'])  \ninstance.save()  \n  \n# 读取时  \nimage_list = instance.get_image_list()\n```\n\n### **使用关联模型**\n\n如果你想要建立更复杂的关联（例如，每个图片都有自己的元数据），你可以创建一个关联模型来表示这种关系。\n\n```python\nfrom django.db import models  \n  \nclass Image(models.Model):  \n    url = models.URLField()  \n    # 其他字段，如标题、描述等  \n  \nclass MyModel(models.Model):  \n    images = models.ManyToManyField(Image)\n```\n\n这样，你可以将多个`Image`对象与`MyModel`对象关联起来，并使用Django的ORM来查询和管理这些关联。\n\n\n\n<font color=red size=3 face=宋体><strong>根据你的具体需求，选择最适合你的方法。如果你只是想简单地存储一个图片URL的列表，并且不需要复杂的查询或关系，那么使用`JSONField`或手动序列化/反序列化可能是最简单的选择。如果你需要更复杂的关联或查询功能，那么使用关联模型可能是更好的选择。</strong></font>\n\n","tags":["数据库","django","python"],"categories":["Python","Django_ORM"]},{"title":"在CentOS-7上安装Go-1.22","url":"/2024/06/11/在CentOS-7上安装Go-1-22/","content":"\n## <font color=#00b2c2 size=5 face=宋体><strong>在CentOS 7上安装Go 1.22：</strong></font>\n\n<!--more-->\n\n### 在CentOS 7上安装Go 1.22.2的步骤如下：\n\n#### 一、准备工作\n\n1. 确保你的`CentOS 7`系统已经更新到最新状态，可以通过以下命令进行更新：\n\n   ```bash\n   sudo yum update\n   ```\n\n2. 检查系统是否已安装`Go`的旧版本，如果有，则先卸载：\n\n   ```bash\n   sudo yum remove golang\n   ```\n\n#### 二、下载并安装Go 1.22.2\n\n1. 访问Go的官方网站或使用提供的下载链接来获取`Go 1.22.2`的`Linux-amd64`版本。你可以直接通过`wget`命令下载：\n\n   ```bash\n   cd /usr/local/src  \n   wget https://golang.google.cn/dl/go1.22.2.linux-amd64.tar.gz\n   ```\n\n2. 解压下载的Go压缩包到`/usr/local`目录下：\n\n   ```bash\n   sudo tar -zxvf go1.22.2.linux-amd64.tar.gz -C /usr/local/\n   ```\n\n   这将把Go的安装文件解压到`/usr/local/go`目录下。\n\n#### 三、配置环境变量\n\n1. 打开`/etc/profile`文件，并在文件末尾添加以下配置：\n\n   ```bash\n   export GOROOT=/usr/local/go  \n   export PATH=$PATH:$GOROOT/bin  \n   export GOPATH=/opt/go  # 或者你可以设置为其他目录，作为你的工作区  \n   export PATH=$PATH:$GOPATH/bin\n   ```\n\n2. 应用更改：\n\n   ```bash\n   source /etc/profile\n   ```\n\n   或者使用`su -`命令重新登录shell会话。\n\n#### 四、验证安装\n\n1. 在终端中输入`go version`来检查Go的版本：\n\n   ```bash\n   go version\n   ```\n\n   如果安装成功，你应该看到类似于`go version go1.22.2 linux/amd64`的输出。\n\n#### 五、解决依赖下载速度过慢的问题（可选）\n\n如果你的网络环境中Go依赖包的下载速度过慢，你可以设置`GOPROXY`环境变量来使用国内的代理服务器，如`Goproxy.cn`：\n\n```bash\ngo env -w GO111MODULE=on  \ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n\n这样设置后，Go的依赖包将会从指定的代理服务器下载，通常会有更快的下载速度。\n\n以上就是在`CentOS 7`上安装`Go 1.22.2`的详细步骤。请注意，Go的最新版本可能已经更新，但上述步骤对于安装任何版本的Go都是通用的，只需将版本号替换为你要安装的版本即可。","tags":["go","安装","教程"],"categories":["_A5-安装教程","Golang"]},{"title":"django获取请求进来的ip","url":"/2024/05/31/django获取请求进来的ip/","content":"\n## <font color=#00b2c2 size=5 face=宋体><strong>django获取请求进来的IP</strong></font>\n\n<!--more-->\n\n你可以创建一个中间件来检查请求的IP地址是否在白名单中。如果不在，就拒绝访问。\n\n```python\nfrom django.http import HttpResponseForbidden  \n  \nclass WhiteListMiddleware:  \n    def __init__(self, get_response):  \n        self.get_response = get_response  \n        # 这里设置你的白名单IP地址  \n        self.white_list = ['127.0.0.1', '192.168.1.100']  \n  \n    def __call__(self, request):  \n        if request.META['REMOTE_ADDR'] not in self.white_list:  \n            return HttpResponseForbidden('Access Forbidden')  \n        response = self.get_response(request)  \n        return response\n```\n\n然后，在`settings.py`中添加这个中间件：\n\n```python\nMIDDLEWARE = [  \n    # ... 其他中间件 ...  \n    'path.to.your.WhiteListMiddleware',  # 替换为中间件的实际路径  \n    # ... 可能还有其他中间件 ...  \n]\n```\n\n","tags":["django","请求"],"categories":["Python","Django"]},{"title":"django-后台管理模板-simpleui-的配置教程","url":"/2024/05/25/django-后台管理模板-simpleui-的配置教程/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>django 后台管理模板 simpleui 的配置教程</strong></font>\n\n<!--more-->\n\n## 1、将静态资源文件夹克隆到本地\n\n项目根目录下的 setting配置\n\n```python\nimport os   # 导入os包，\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")   # 设置static根目录\n\n# 开始执行克隆到本地 资源命令\npython3 manage.py collectstatic  # bash命令\n```\n\n","tags":["simpleui","后台","模版"],"categories":["Python","Django"]},{"title":"【爬虫】巧用-js2py-（附带bug解决）","url":"/2024/05/25/【爬虫】巧用-js2py-（附带bug解决）/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>【爬虫】巧用-js2py-（附带bug解决）：</strong></font>\n\n<!--more-->\n\n本文搬运自CSDN：[传送阵](https://blog.csdn.net/sc_lilei/article/details/100122347)\n\n项目地址： https://github.com/PiotrDabkowski/Js2Py\n\n项目介绍：（根据github）此项目完全用Python编写，支持Python2/3。可以在Python中执行JS代码，并获取JS对象值。\n\n目前支持ES5，ES6仍在测试中。\n\n一句话解释：一个纯Python的JS解释器。\n\n推荐指数：四颗星  （博主用过其他的库如execjs, pyv8，多多少少都没有这个库的功能完备）\n\n## 安装：\n\n```python\npip3 install js2py\n```\n\n本文主要介绍js2py的EvalJs对象，因为它是功能最完备的。\n\n\n\n## 1. 执行简单的JS代码\n\n```python\nimport js2py\njs = \"\"\"\n    a =1 \n    b =1\n    function f(x){\n        return x*x\n    }\n    \"\"\"\nctx = js2py.EvalJs()  # 初始化context对象\nctx.execute(js)  # 执行js\nprint(ctx.a)  # >>1   获取js变量\nprint(ctx.f(9))  # >>81  执行js函数\n```\n\n说明：EvalJs对象支持在同一个上下文中执行多次多段js代码，并能通过属性的方式获取js变量，非常好用。\n\n## **2. Python与JS对象交互**\n\n```python\nimport js2py\njs = \"\"\"\n    function f(arg1, arg2){\n        return arg1+arg2\n    }\n    end = f(a,b)\n    \"\"\"\nctx = js2py.EvalJs(context={'a':1, 'b':2})  # 初始化context对象,通过字典形式传入python对象与js交互\nctx.execute(js)  # 执行js\nprint(ctx.end)  # 3\n```\n\n## **3. 在JS代码中引入外部JS库(需要安装nodejs环境)**\n\n```python\nimport js2py\njs = \"\"\"var path = require('path')\n        p=path.join('/foo/bar', 'file')\n        \"\"\"\nctx = js2py.EvalJs(enable_require=True)  # 开启require功能\nctx.execute(js)  # 执行js\nprint(ctx.p)  # /foo/bar/file\njs = \"\"\"p = p+p\"\"\"\nctx.execute(js)  # 执行js\nprint(ctx.p)  # /foo/bar/file/foo/bar/file\n```\n\n关于require在js2py中使用有个bug，会在最后说明。\n\n## **4. Python与JS混编**\n\n```python\nCryptoJS = js2py.require('crypto-js')\ndata = [{'id':1}, {'id':2}]\nJSON = js2py.eval_js('JSON')\n \nciphertext = CryptoJS.AES.encrypt(JSON.stringify(data), 'secret key 123')\nbytes = CryptoJS.AES.decrypt(ciphertext.toString(), 'secret key 123')\ndecryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)).to_list()\n \nprint(decryptedData)  # [{'id':1}, {'id':2}]\n```\n\n## 5. 最后\n\n在对js2py这个库的摸索使用中，发现了不少的问题(bug)，发现作者最后一次处理issue是在2018年11月了，超过20个issue未处理，博主也把遇到的问题提了两个上去，不知道能不能收到回复。\n\n博主修复的bug：在windows 10 上使用这个库执行带有require语句的JS代码时遇到的错误\n\n```python\nCould not link required node_modules\n```\n\n**解决**：经过反复测试与检查，发现是subprocess库在windows上执行shell命令有bug。具体是这样，在Python包安装路径下的js2py/node_import.py的17行有以下代码：\n\n```python\nassert subprocess.call(\n        'cd %s;npm install babel-core babel-cli babel-preset-es2015 babel-polyfill babelify browserify browserify-shim'\n        % repr(DIRNAME),\n        shell=True,\n        cwd=DIRNAME) == 0, 'Could not link required node_modules'\n```\n\n其实这里作者的cd命令是多余的，因为cwd参数已经指定了命令的执行路径，无需再cd进入路径。\n\n除了这里，还要修改这个文件第79行，一样的问题。\n\n最后友情提醒，如果你的环境不能科学上网，你最好修改一下npm的源：\n\n```python\n npm config set registry https://registry.npm.taobao.org\n```\n\n避免网络问题导致不必要的麻烦，因为执行的JS代码依赖外部库时，这个库会在后台执行npm install操作(仅一次)。\n\n**其他：**\n\n因为博主也是搞爬虫的，所有有时会用到这样的库，这次就做一下完整的记录，助己助人。\n\n本博客欢迎留言 :) ","tags":["Js","js2py"],"categories":["_A7-逆向","JavaScript"]},{"title":"网站克隆工具-httrack","url":"/2024/05/24/网站克隆工具-httrack/","content":"\n\n\n## <font color=#00b2c2 size=5 face=宋体><strong>网站克隆工具-httrack：</strong></font>\n\n<!--more-->\n\n本文搬运自[kali-网站克隆工具-httrack_kali克隆网站-CSDN博客](https://blog.csdn.net/qq_32393893/article/details/105049728)\n\n<font color=#f26522 size=4 face=宋体><strong>以下为 kali命令，如果是mac的同学，请自行使用`brew` 替换 `apt-get`即可</strong></font>\n\nHTTrack是一款网站克隆工具，主要用户克隆网站。渗透测试人员可以将目标网站克隆到本地进行查看，包含了所有的页面和离线文件，是可以进行社会工程学攻击，是钓鱼网站的利器。\n\n### 1，安装 \n\n**`sudo apt-get isntall httarck`**\n\n![](https://s2.loli.net/2024/05/24/NputOms3gJha7IB.png)\n\n<font color=#b0171f size=3 face=宋体><strong>（如果已经安装了，就会像上图这样）</strong></font>\n\n### 2，新建一个文件夹放置下载的网站\n\n**`mkdir site`**\n\n![](https://s2.loli.net/2024/05/24/jcJ4LeKEPmY87bi.png)\n\n### 3，切换到新建的文件夹中\n\n**`cd site`**\n\n### 4，启动httrack\n\n**`httrack`**\n\n### 5，进行设置\n\n![](https://s2.loli.net/2024/05/24/Phwa4YpE8u32LVJ.png)\n\n### 6，已经将网站保存在本地了\n\n![](https://s2.loli.net/2024/05/24/CigUqDpQuRf1VvJ.png)\n\n","tags":["工具","克隆","网站"],"categories":["_A8-工具","网站克隆工具"]},{"title":"selenium-获取请求日志-获取获取Ajax请求的url","url":"/2024/05/22/selenium-获取请求日志-获取获取Ajax请求的url/","content":"\n\n\n## 创建 selenium：\n\n<!--more-->\n\n```python\n# 导入包\nfrom selenium import webdriver   \nfrom selenium.webdriver.chrome.options import Options\n\n# 初始化 ChromeOptions 对象\nchrome_options = Options()\n\n# 设置需要的选项\nchrome_options.add_argument(\"--start-maximized\")\nchrome_options.add_argument(\"--disable-infobars\")\n\n# 创建 WebDriver 实例\ndriver = webdriver.Chrome(options=chrome_options)\n\ndriver.get(url)  # 请求url地址\nprint(driver.current_url)   # 获取请求的 url 地址\nprint(driver.page_source)   # 打印当前页面文本\ndriver.implicitly_wait(3)   # 等待selenium加载完成js内容\ndriver.close()  # 退出程序\n```\n\n\n\n## selenium下 options配置的常用参数：[参考自`温一壶清酒`](https://www.cnblogs.com/hong-fithing/p/12796602.html)\n\n```python\noptions.add_argument('--disable-infobars')  # 禁止策略化\noptions.add_argument('--no-sandbox')  # 解决DevToolsActivePort文件不存在的报错\noptions.add_argument('window-size=1920x3000')  # 指定浏览器分辨率\noptions.add_argument('--disable-gpu')  # 谷歌文档提到需要加上这个属性来规避bug\noptions.add_argument('--incognito')  # 隐身模式（无痕模式）\noptions.add_argument('--disable-javascript')  # 禁用javascript\noptions.add_argument('--start-maximized')  # 最大化运行（全屏窗口）,不设置，取元素会报错\noptions.add_argument('--hide-scrollbars')  # 隐藏滚动条, 应对一些特殊页面\noptions.add_argument('blink-settings=imagesEnabled=false')  # 不加载图片, 提升速度\noptions.add_argument('--headless')  # 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败\noptions.binary_location = r\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\"  # 手动指定使用的浏览器位置\noptions.add_argument('lang=en_US') # 设置语言\noptions.add_argument('User-Agent=Mozilla/5.0 (Linux; U; Android 8.1.0; zh-cn; BLA-AL00 Build/HUAWEIBLA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.132 MQQBrowser/8.9 Mobile Safari/537.36')\noptions.add_argument('--headless')  # 浏览器不提供可视化页面\nprefs = {\"\":\"\"}\nprefs[\"credentials_enable_service\"] = False\nprefs[\"profile.password_manager_enabled\"] = False\nchrome_option_set.add_experimental_option(\"prefs\", prefs) # 屏蔽'保存密码'提示框\n```\n\n## 【测试】selenium拦截Ajax（XHR）等异步请求数据：[参考自`冰冷的希望`](https://blog.csdn.net/qq_39147299/article/details/132236245)\n\n#### 1.说明\n\n在爬取某个网站的时候遇到加密参数，由于js代码经过混淆编译不好破解，所以采用`selenium`的方式获取参数，但是我们获取selenium的数据基本上都是基于页面的，对于网站发起的异步请求，我们可以从日志中提取\n\n#### 2.设置driver参数\n\n我们首先要通过Option对象（比如说ChromeOptions）设置监控浏览器日志，旧版本的Selenium是通过DesiredCapabilities设置的，下面是新版本的写法\n\n```python\nfrom selenium.webdriver import Chrome, ChromeOptions\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.webdriver.support.wait import WebDriverWait\n\noptions = ChromeOptions()\noptions.add_argument(\"--no-sandbox\")\noptions.add_argument(\"--allow-running-insecure-content\")\noptions.add_argument(\"--ignore-certificate-errors\")\noptions.add_argument(\"--disable-single-click-autofill\")\noptions.add_argument(\"--disable-autofill-keyboard-accessory-view[8]\")\noptions.add_argument(\"--disable-full-form-autofill-ios\")\noptions.add_experimental_option('perfLoggingPrefs', {'enableNetwork': True,'enablePage': False,})\noptions.set_capability(\"goog:loggingPrefs\", {'browser': 'ALL','performance': 'ALL',})\noptions.set_capability(\"goog:perfLoggingPrefs\", {'enableNetwork': True,'enablePage': False,'enableTimeline': False})\n\n```\n\n#### 3.请求网页\n\n现在`实例化`一个driver，发起一个网页请求，我这里使用`WebDriverWait`显式等待的方式等待某个元素出现，你也可以隐式等待或者直接sleep，如果你不等待，异步请求还没加载完就开始获取，你可能会拿不到想要的数据\n\n```python\nservice = Service(executable_path=executable_path)\ndriver = Chrome(service=service, options=options)\ndriver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\",\n                       {\"source\": \"\"\"Object.defineProperty(navigator, 'webdriver', {get: () => undefined})\"\"\"})\ndriver.get(page_url)\nwait = WebDriverWait(driver, 15, 0.5)\ntry:\n    wait.until(expected_conditions.presence_of_element_located((By.CLASS_NAME, \"item \")))\nexcept Exception as e:\n    print(\"WebDriverWait.until timeout error: {}\".format(e))\nhtml = driver.execute_script(\"return document.documentElement.outerHTML\")\n\n```\n\n#### 4.处理日志\n访问一下driver的`log_types`属性可以获取到所有日志类型，遍历它，通过`get_log()`方法获取对应的日志，之后再过滤出自己想要的日志就行。\n\n比如说，我这里是过滤出所有`Network.requestWillBeSent`的日志，即发送异步请求的数据，因为我需要该请求的请求头，如果是响应类型的日志（`Network.responseReceived`），它只包含响应头。具体支持的类型可以参考[谷歌devtools的文档](https://chromedevtools.github.io/devtools-protocol/tot/Network/)\n\n如果需要过滤出Ajax（XHR）请求，可以根据日志的params里的type进行判断，也可以通过它判断\n\n```python\nsign_dict = dict()  # 用来存储自己想要的数据\nfor log_type in driver.log_types:\n    perf_list = driver.get_log(log_type)\n    for row_log in perf_list:\n        try:\n            log_json = json.loads(row_log['message'])\n            message_log = log_json['message']\n        except Exception as e:\n            print(e)\n            continue\n        if message_log.get('method') != 'Network.requestWillBeSent':\n            continue\n        if message_log.get(\"params\", {}).get(\"type\", \"\").upper() != \"XHR\":\n            continue\n        headers = message_log['params'].get('request', {}).get('headers')\n        if not headers:\n            continue\n        x_sign = headers.get('X-Sign')\n        if not x_sign:\n            continue\n        x_app_id = headers.get('X-AppID')\n        x_ts = headers.get('X-Ts')\n        print(\"success:\", x_sign, x_app_id, x_ts)\n        req_url = message_log['params'].get('request', {}).get('url')\n        key = os.path.split(req_url.split(\"?\")[0])[1]\n        sign_dict[key] = {\"X-AppID\": x_app_id, \"X-Sign\": x_sign, \"X-Ts\": x_ts}\n\n```\n\n注意，如果你想要响应体，`Network.responseReceived`类型的日志的`response`字段是没有响应体的，你需要通过`params`字段里的`requestId`获取，参考代码如下\n\n```python\nres_body_dict = dict()\nfor log_type in driver.log_types:\n    perf_list = driver.get_log(log_type)\n    for row_log in perf_list:\n        try:\n            log_json = json.loads(row_log['message'])\n            message_log = log_json['message']\n        except Exception as e:\n            print(e)\n            continue\n        if message_log.get('method') != 'Network.responseReceived':\n            continue\n        if message_log.get(\"params\", {}).get(\"type\", \"\").upper() != \"XHR\":\n            continue\n        request_id = message_log['params'].get(\"requestId\")\n        if not request_id:\n            continue\n        req_url = message_log['params'].get('response', {}).get('url')\n        key = os.path.split(req_url.split(\"?\")[0])[1]\n        content = driver.execute_cdp_cmd('Network.getResponseBody', {'requestId': request_id})\n        body = None\n        try:\n            body = json.loads(content[\"body\"])\n        except Exception as e:\n            print(\"get_unisat_data_by_selenium() json loads error: {}, content:{}\".format(e, content))\n        res_body_dict[key] = body\n\n```\n\n#### 5.完整代码\n\n上面的完整参考代码如下\n\n```python\nimport json\nimport os.path\n\nfrom selenium.webdriver import Chrome, ChromeOptions\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.webdriver.support.wait import WebDriverWait\n\n\ndef get_selenium_driver(executable_path=r\"E:\\webdriver\\chromedriver.exe\"):\n    options = ChromeOptions()\n    options.add_argument(\"--no-sandbox\")\n    options.add_argument(\"--allow-running-insecure-content\")\n    options.add_argument(\"--ignore-certificate-errors\")\n    options.add_argument(\"--disable-single-click-autofill\")\n    options.add_argument(\"--disable-autofill-keyboard-accessory-view[8]\")\n    options.add_argument(\"--disable-full-form-autofill-ios\")\n    options.add_experimental_option('perfLoggingPrefs', {\n        'enableNetwork': True,\n        'enablePage': False,\n    })\n    options.set_capability(\"goog:loggingPrefs\", {\n        'browser': 'ALL',\n        'performance': 'ALL',\n    })\n    options.set_capability(\"goog:perfLoggingPrefs\", {\n        'enableNetwork': True,\n        'enablePage': False,\n        'enableTimeline': False\n    })\n    service = Service(executable_path=executable_path)\n    driver = Chrome(service=service, options=options)\n    driver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\",\n                           {\"source\": \"\"\"Object.defineProperty(navigator, 'webdriver', {get: () => undefined})\"\"\"})\n\n    return driver\n\n\ndef get_sign_by_selenium(page_url):\n    driver = get_selenium_driver()\n    driver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\",\n                           {\"source\": \"\"\"Object.defineProperty(navigator, 'webdriver', {get: () => undefined})\"\"\"})\n    driver.get(page_url)\n    wait = WebDriverWait(driver, 15, 0.5)\n    try:\n        wait.until(expected_conditions.presence_of_element_located((By.CLASS_NAME, \"item \")))\n    except Exception as e:\n        print(\"WebDriverWait.until timeout error: {}\".format(e))\n    # html = driver.execute_script(\"return document.documentElement.outerHTML\")\n    # with open(r\"C:\\Users\\admin\\Desktop\\test\\test.html\", \"w\") as f:\n    #     f.write(html)\n    # time.sleep(10)\n    sign_dict = dict()\n    for log_type in driver.log_types:\n        perf_list = driver.get_log(log_type)\n        for row_log in perf_list:\n            try:\n                log_json = json.loads(row_log['message'])\n                message_log = log_json['message']\n            except Exception as e:\n                print(e)\n                continue\n            if message_log.get('method') != 'Network.requestWillBeSent':\n                continue\n            if message_log.get(\"params\", {}).get(\"type\", \"\").upper() != \"XHR\":\n                continue\n            headers = message_log['params'].get('request', {}).get('headers')\n            if not headers:\n                continue\n            x_sign = headers.get('X-Sign')\n            if not x_sign:\n                continue\n            x_app_id = headers.get('X-AppID')\n            x_ts = headers.get('X-Ts')\n            print(\"success:\", x_sign, x_app_id, x_ts)\n            req_url = message_log['params'].get('request', {}).get('url')\n            key = os.path.split(req_url.split(\"?\")[0])[1]\n            sign_dict[key] = {\"X-AppID\": x_app_id, \"X-Sign\": x_sign, \"X-Ts\": x_ts}\n    return sign_dict\n\n\ndef get_unisat_data_by_selenium(page_url):\n    driver = get_selenium_driver()\n    driver.execute_cdp_cmd(\"Page.addScriptToEvaluateOnNewDocument\",\n                           {\"source\": \"\"\"Object.defineProperty(navigator, 'webdriver', {get: () => undefined})\"\"\"})\n    driver.get(page_url)\n    wait = WebDriverWait(driver, 15, 0.5)\n    try:\n        wait.until(expected_conditions.presence_of_element_located((By.CLASS_NAME, \"item \")))\n    except Exception as e:\n        print(\"WebDriverWait.until timeout error: {}\".format(e))\n    res_body_dict = dict()\n    for log_type in driver.log_types:\n        perf_list = driver.get_log(log_type)\n        for row_log in perf_list:\n            try:\n                log_json = json.loads(row_log['message'])\n                message_log = log_json['message']\n            except Exception as e:\n                print(e)\n                continue\n            if message_log.get('method') != 'Network.responseReceived':\n                continue\n            if message_log.get(\"params\", {}).get(\"type\", \"\").upper() != \"XHR\":\n                continue\n            request_id = message_log['params'].get(\"requestId\")\n            if not request_id:\n                continue\n            req_url = message_log['params'].get('response', {}).get('url')\n            key = os.path.split(req_url.split(\"?\")[0])[1]\n            content = driver.execute_cdp_cmd('Network.getResponseBody', {'requestId': request_id})\n            body = None\n            try:\n                body = json.loads(content[\"body\"])\n            except Exception as e:\n                print(\"get_unisat_data_by_selenium() json loads error: {}, content:{}\".format(e, content))\n            res_body_dict[key] = body\n    return res_body_dict\n\n\nif __name__ == '__main__':\n    url = \"https://unisat.io/brc20?q=bc1pkmnh3nj89uns3yp2mtqqxjns65vy6ca6n5jvp4s8ua8nke69cnjs987vtp\"\n    print(\"get_sign_by_selenium(url):\", get_sign_by_selenium(url))\n    # print(\"get_unisat_data_by_selenium(url):\", get_unisat_data_by_selenium(url))\n\n\n```\n\n","tags":["python","selenium","自动化"],"categories":["_A7-逆向","selenium"]},{"title":"django-Session的配置与使用","url":"/2024/05/16/django-Session的配置与使用/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>django Session的配置与使用</strong></font>\n\n<!--more-->\n\n```python\n# 所有的 session 默认配置是在源码中的 conf/global_settings.py\n############\n# SESSIONS #\n############\n\n以下内容存储位置，任选其一即可：即 SESSION_ENGINE 的配置只能选一个\n# # session 相关数据存储位置 ： 数据库\nSESSION_ENGINE = \"django.contrib.sessions.backends.db\"\n\n# session 相关数据存储位置 ： 文件\nSESSION_ENGINE = \"django.contrib.sessions.backends.file\"\nSESSION_FILE_PATH = \"None\"   # 如果要存储到文件中，需要先创建文件夹 相对路径(也可以绝对路径)\n\n# # 存储到缓存\nSESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\nSESSION_CACHE_ALIAS = \"default\"\n\n# # 存储到 缓存 + 数据库\nSESSION_ENGINE = \"django.contrib.sessions.backends.cached_db\"\nSESSION_CACHE_ALIAS = \"default\"\n\n# 如果存储到 cookie中，需要配置下面所有项目\nSESSION_COOKIE_NAME = \"sessionid\"\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2  # 生存时间\nSESSION_COOKIE_DOMAIN = None  # 域名\nSESSION_COOKIE_SECURE = False\nSESSION_COOKIE_PATH = \"/\"\nSESSION_COOKIE_HTTPONLY = True\nSESSION_COOKIE_SAMESITE = \"Lax\"\nSESSION_SAVE_EVERY_REQUEST = False\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False\n\n# 序列号 session信息\nSESSION_SERIALIZER = \"django.contrib.sessions.serializers.JSONSerializer\"\n```\n\n\n\n+ 路由：\n\n```python\nurlpatterns = [\n    #    path('admin/', admin.site.urls),\n    path('x1/', x1, name=\"x1\"),\n    path('x2/', x2, name=\"x2\"),\n]\n```\n\n```python\nfrom django.urls import path\nfrom apps.app01 import views\nfrom django.shortcuts import HttpResponse\n\n# 访问 /x1 设置session 属性\n# session 的设置\ndef x1(request):\n    request.session['id'] = 999\n    request.session[\"name\"] = \"wupeiqi\"\n    request.session[\"age\"] = 25\n    return HttpResponse(\"x1\")\n\n# 访问 x2 校验 session\n# session的读取\ndef x2(request):\n    print(request.session.get(\"id\"))\n    print(request.session.get(\"name\"))\n    print(request.session.get(\"age\"))\n    \n    # del request.session[\"id\"]   # 删除 session 相关信息  >>> 如果二次访问，浏览器会报错  推荐下面方法使用\n    request.session.clear()   # 清除session 相关数据\n    \n    return HttpResponse(\"x2\")\n\n# 路由关系\nurlpatterns = [\n    path('x1/', x1, name=\"x1\"),\n    path('x2/', x2, name=\"x2\"),\n]\n```\n\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"django-Cookie的配置与使用","url":"/2024/05/16/django-Cookie的配置与使用/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>django Cookie的配置与使用</strong></font>\n\n<!--more-->\n\n![image-20240516012934469](https://s2.loli.net/2024/05/16/x6nONyUZvAWq9c7.png)\n\n+ 路由：\n\n```python\nurlpatterns = [\n    #    path('admin/', admin.site.urls),\n    path('x1/', x1, name=\"x1\"),\n    path('x2/<int:v1>/', x2, name=\"x2\"),\n]\n```\n\n```python\ndef x1(request):\n    print(\"视图.x1\")\n\n    obj = HttpResponse(\"x1\", status=201, reason=\"OK\")\n    obj[\"name\"] = \"xiao zhu pei qi\"\n\n    # 设置 cookie\n    obj.set_cookie(\"v1\", \"hello world\")   # 会在set_cookie 中跟一个字符串\n    \n    # 设置cookie 过期时间 一：\n     obj.set_cookie(\"v2\", \"user\", max_age=10)  # 当前cookie v2=user 在10秒过期\n      \n    # 设置cookie 过期时间 二：\n    ctime = datetime.datetime.now() + datetime.timedelta(seconds=10)   # 设置时间戳 加减\n    obj.set_cookie(\"v3\", \"root\", expires=ctime)  # 当前cookie v3=root 在10秒过期\n\n    return obj\n```\n\n![image-20240516005846278](https://s2.loli.net/2024/05/16/5BzWNUVlPk3h7uo.png)\n\n```python\ndef x2(request, v1):\n    # 获取cookie视图函数\n    print(request.COOKIES)\n    return HttpResponse(\"x2\")\n```\n\n![image-20240516010145709](https://s2.loli.net/2024/05/16/ncOxQNVTfrBUuY4.png)\n\n<font color=#00b2c2 size=5 face=宋体><strong>django 独有的签名与校验：</strong></font>\n\n```python\ndef x1(request):\n    print(\"视图.x1\")\n\n    obj = HttpResponse(\"x1\", status=201, reason=\"OK\")\n    obj[\"name\"] = \"xiao zhu pei qi\"\n    obj.set_signed_cookie(\"info\", \"xiaoguang\")  # django 独有签名算法，防止请求被人修改\n    return obj\n\n\ndef x2(request):\n    # 获取cookie视图函数\n    print(request.COOKIES)\n    xx = request.get_signed_cookie(\"info\")\n    print(xx)\n    return HttpResponse(\"x2\")\n\nurlpatterns = [\n    path('x1/', x1, name=\"x1\"),\n    path('x2/', x2, name=\"x2\"),\n]\n\n```\n\n**校验与签名字符比对**\n\n![校验与签名字符比对](https://s2.loli.net/2024/05/16/k9NWcslPfen4vrY.png)\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"django-中间件的配置与使用","url":"/2024/05/15/django-中间件的配置与使用/","content":"\n <font color=#00b2c2 size=5 face=宋体><strong>中间件的运行流程图：</strong></font>\n\n<!--more-->\n\n![image-20230716091532551](https://s2.loli.net/2024/05/15/Gre7voNmpj3wb1u.png)\n\n#### 1.编写类\n\n1.1 在项目根目录创建 `utils`\n\n![image-20240515182654186](https://s2.loli.net/2024/05/15/LRYxDcgPUG5lTK2.png)\n\n1.2 在`utils` 下的 `md.py` 中创建类。可以写在任意的目录：自定义的类、继承一个类**（推荐）**\n\n```python\nfrom django.utils.deprecation import MiddlewareMixin\n\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_request(self, request):\n        # request是请求相关所有的数据\n        pass\n\n    def process_view(self, request, view, *args, **kwargs):\n        # request是请求相关所有的数据； view是试图函数； 路由参数*args, **kwargs\n        pass\n\n    def process_response(self, request, response):\n        # request是请求相关所有的数据\n        # response是试图函数返回的那个对象（封装了要返回到用户浏览器的所有数据）\n        return response\n```\n\n#### 2.注册\n\n```python\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    \"utils.md.KeLaMiddleware\"\n]\n# 动态导入 + 反射\n```\n\n#### 3.测试\n\n```python\nfrom django.utils.deprecation import MiddlewareMixin\n\n\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_request(self, request):\n        print(\"KeLa.process_request\")\n\n    def process_view(self, request, view, *args, **kwargs):\n        print(\"KeLa.process_view\",view, *args, **kwargs)\n\n    def process_response(self, request, response):\n        print(\"KeLa.process_response\")\n        return response\n```\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\nfrom django.shortcuts import HttpResponse\n\n\ndef x1(request):\n    print(\"视图.x1\")\n    return HttpResponse(\"x1\")\n\n\ndef x2(request, v1):\n    print(\"视图.x2\", v1)\n    return HttpResponse(\"x2\")\n\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('x1/', x1),\n    path('x2/<int:v1>/', x2),\n]\n```\n\n```python\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    \"utils.md.KeLaMiddleware\"\n]\n```\n\n#### 4.问题\n\n- 中间件的功能好像有点像装饰器【底层源码闭包】\n\n- 基于中间件可以做什么？\n\n  - 根据请求周期，对 request 进行赋值，后续方便进行调用。\n\n  - 根据请求周期，对业务逻辑代码进行自定义，决定是否可以继续向后\n\n    - return None，继续向后走\n\n    - return HttpResponse对象\n\n      ```\n      return HttpResponse(\"...\")\n      return render(\"...\")        ->   HttpResponse(\"...\")\n      return JsonReponse(\"...\")   ->   HttpResponse(\"...\")\n      ```\n\n  - 根据请求周期，对返回给用户浏览器的数据进行自定义：删除内容、增加、cookie、响应头...\n\n\n\n- 这个中间件和nginx  apache这样的**中间件**概念一样吗？比如做前置代理，做https\n\n  ```\n  Django中间件  /  拦截器  / RequestHanler\n  ```\n\n- 中间件可以跨语言调用吗？比如别人不是用python 写的，但是可以给我们的django 项目用？\n\n  ```\n  Django中间件\n  \t...\n  架构中间件：\n  \tDjango + redis（C语言）\n  ```\n\n- 中间件只要两层,不要中间那个process.riew行不行,是不是有些特定场合需要返回最后一层\n\n  ```\n  ...\n  ```\n\n- 那Django内置的中间件完成了些什么功能？\n\n  ```\n  ...\n  ```\n\n  \n\n### 1.1.2 “不正常”\n\n![image-20230716091818839](https://s2.loli.net/2024/05/16/m93EMl6sKOvVNJ1.png)\n\n如果用户向我的网站请求时，如果访问URL：\n\n- /x1/\n- /x2/\n- /x3/ ，比如携带凭证token，有凭证继续，无凭证返回无权访问。\n\n```\nhttp://127.0.0.1:8000/x2/12/\nhttp://127.0.0.1:8000/x2/12/?xxx=123\n\nhttp://127.0.0.1:8000/x3/?token=12938791923981723123\n```\n\n```python\nfrom django.utils.deprecation import MiddlewareMixin\nfrom django.shortcuts import HttpResponse\n\n\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_request(self, request):\n        # request.path_info\n        # print(request.path_info,\"KeLa.process_request\")\n        if request.path_info == \"/x3/\":\n            token = request.GET.get('token')\n            if token == \"12938791923981723123\":\n                return\n            else:\n                return HttpResponse(\"无权访问\")\n```\n\n\n\n\n\n如果用户向我的网站请求时，如果访问URL：\n\n- /x1/\n\n- /x2/  ，比如携带凭证token，有凭证继续，无凭证返回无权访问。\n\n  ```\n  x2/<int:v1>/', x2\n  \n  http://127.0.0.1:8000/x1/10/\n  http://127.0.0.1:8000/x1/20/\n  http://127.0.0.1:8000/x1/11/\n  ```\n\n- /x3/\n\n```python\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_request(self, request):\n        # request.path_info\n        # print(request.path_info,\"KeLa.process_request\")\n        # 以x2开头 或 正则   /x2/1111/   /x2/10/\n        # if request.path_info == \"/x2/\":\n        if request.path_info.startswith(\"/x2/\"):    # 判断是不是以 /x2/开头\n            token = request.GET.get('token')\n            if token == \"12938791923981723123\":\n                return \n            else:\n                return HttpResponse(\"无权访问\")\n```\n\n```python\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_view(self, request, view, *args, **kwargs):\n        # request.path_info\n        # print(request.path_info,\"KeLa.process_request\")\n        url_name = request.resolver_match.url_name\n        if url_name == \"x2\":\n            token = request.GET.get('token')\n            if token == \"12938791923981723123\":\n                return\n            else:\n                return HttpResponse(\"无权访问\")\n```\n\n\n\n关于自定义prcess_response，一般用于对请求要返回的数据进行修改。\n\n```python\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_response(self, request, response):\n        response[\"xx\"] = \"wupeiqi\"\n        return response\n```\n\n## 1.2 使用（几乎不用）\n\n- 编写类，在类型定义：process_request、process_view、process_response、process_exception、process_template_response\n\n  ```\n  process_exception，视图函数有异常，处理出现异常时\n  process_template_response，对于视图函数返回内容渲染扩展。\n  \t- 在视图函数中如果返回的对象内部有一个render方法且可以被调用执行\n  \t- process_template_response返回response参数（返回值）\n  \t- 在自定义的MyReponse的render方法中必须返回HttpRespose\n  ```\n\n- 中间件注册，在settings中的配置。\n\n\n\n```python\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_exception(self, request, exception):\n        print(request)\n        print(exception, type(exception))\n        return HttpResponse(\"错误了\")\n```\n\n\n\n\n\n```python\ndef x1(request):\n    print(\"视图.x1\")\n    return HttpResponse(\"x1\")\n```\n\n\n\n\n\n```python\nclass MyHttpResponse:\n    def __init__(self, body):\n        self.body = body\n\n    def render(self):\n        return HttpResponse(self.body)  # 真正的返回\n\n\ndef x1(request):\n    print(\"视图.x1\")\n    return MyHttpResponse(\"x1\")\n```\n\n```python\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_template_response(self, request, response):\n        return response\n```\n\n\n\n\n\n----\n\n```python\ndef x1(request):\n    print(\"视图.x1\")\n    return HttpResponse(\"源代码-x1\")\n\n\ndef x2(request, v1):\n    return HttpResponse(\"源代码-x2\")\n\n\ndef x3(request):\n    return HttpResponse(\"源代码-x3\")\n```\n\n---\n\n```python\nclass MyHttpResponse:\n    def __init__(self, body):\n        self.body = body\n\n    def render(self):\n        return HttpResponse(self.body)\n\n\ndef x1(request):\n    print(\"视图.x1\")\n    return MyHttpResponse(\"x1\")\n\n\ndef x2(request, v1):\n    return MyHttpResponse(\"x2\")\n\n\ndef x3(request):\n    return MyHttpResponse(\"x3\")\n\n```\n\n```python\nclass KeLaMiddleware(MiddlewareMixin):\n\n    def process_template_response(self, request, response):\n        response.body = f\"源代码-{response.body}\"\n        return response\n```\n\n## 1.3 源码\n\n### 1.关于请求\n\n![image-20230716111119343](https://s2.loli.net/2024/05/16/yoCPvtDnTzM9Wxr.png)\n\n```python\nfrom wsgiref.simple_server import make_server\n\n\ndef run_server(environ, start_response):\n    # 只要请求到来，就会走这里的代码\n    # 1.根据请求 environ 进行后续业务处理\n    # 2.返回内容。。。\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    return [bytes('<h1>Hello, web!</h1>', encoding='utf-8'), ]\n\n\nif __name__ == '__main__':\n    httpd = make_server('127.0.0.1', 8000, run_server)  # # 有请求到来时，执行  obj(environ, start_response)\n    httpd.serve_forever()\n```\n\n\n\n```python\nfrom wsgiref.simple_server import make_server\n\nclass Handler:\n    \n    def __init__(self):\n        # 做一些初始化动作\n        self.name = \"wupeiqi\"\n        \n\t\n    def __call__(self,environ, start_response):\n        # 根据初始化的动作，去执行...\n        # ...\n        start_response('200 OK', [('Content-Type', 'text/html')])\n    \treturn [bytes('<h1>Hello, web!</h1>', encoding='utf-8'), ]\n\n\nif __name__ == '__main__':\n    obj = Handler() # 执行 \n    httpd = make_server('127.0.0.1', 8000, obj)  # 有请求到来时，执行 obj(environ, start_response)\n    httpd.serve_forever()\n```\n\n![image-20230716112505648](https://s2.loli.net/2024/05/16/RmezGMnuCr9qySw.png)\n\n\n\n### 2.启动Django项目`WSGIHandler.__init__` \n\n![image-20230716121612821](https://s2.loli.net/2024/05/16/w9fpduBPR5yjJ1s.png)\n\n![image-20230716121637108](https://s2.loli.net/2024/05/16/vDkNrwV5Hu4sQoT.png)\n\n\n\n\n\n### 3.请求到来`WSGIHandler.__call__` \n\n流程：中间件的执行、路由匹配、视图函数的执行。\n\n\n\n### 小结\n\n- 1.7.x源码，底层实现，是基于好几个列表。\n\n- 4.x源码，\n\n  ```\n  函数的作用域 + 闭包 + 装饰器\n  面向对象 + __call__方法\n  ```\n\n  ```\n  # 核心\n  # handler = SecurityMiddleware对象\n  #             __call__\n  #                process_request\n  #                get_reponse = SessionMiddleware对象\n  #                process_response \n  #                              __call__\n  #                                   process_request \n  #                                   get_reponse = CommonMiddleware对象\n  #                                   process_response\n  #                                                 __call__\n  #                                                     process_request\n  #                                                     get_reponse = KeLaMiddleware对象\n  #                                                     process_response\n  ```\n\n  \n\n### 答疑\n\n- 没悟透，不需要吾、只需要懂【不需要背+建立】\n- 有些难\n  - 入门，听懂+能用（全家桶）\n  - 文档，用法没有源码。\n  - 源码，到底是怎么实现的功能（不修改、扩展）【*】\n- 感觉听懂了，但又不清楚，这是不是**学源码**的正常情况，看B站视频写程序都很简单，也容易懂\n- 课下还是得自己分析分析，一定会忘记\n\n","tags":["django","python","中间件"],"categories":["Python","Django"]},{"title":"Django-的国际化与本地化详解","url":"/2024/05/13/Django-的国际化与本地化详解/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>Django 的国际化与本地化详解</strong></font>\n\n<!--more-->\n\n概要\n随着全球化的发展，为 Web 应用提供多语言支持变得日益重要。Django 作为一个功能强大的 Web 框架，提供了一套完整的国际化（i18n）和本地化（l10n）工具，使得开发多语言应用变得简单。本文将详细介绍 Django 中的国际化和本地化机制，并通过丰富的示例来展示如何实现。\n\n---\n\n#### 1. 国际化与本地化基础\n\n+ **国际化（i18n）**：指的是设计软件产品以便轻松适配不同语言和地区，而无需进行重大的改动。\n+ **本地化（l10n）**：指的是根据特定语言和地区的需要，将国际化的产品进行具体适配的过程。\n\n#### 2. 配置 Django 项目进行国际化和本地化\n\n首先，需要在 Django 项目的 `settings.py` 文件中启用国际化和本地化相关的设置。\n\n```python\n# settings.py\n# 启用国际化\nUSE_I18N = True\n# 启用本地化\nUSE_L10N = True\n# 设置默认语言\nLANGUAGE_CODE = 'en-us'\n# 设置支持的语言\nLANGUAGES = [\n    ('en', 'English'),\n    ('zh-hans', 'Simplified Chinese'),\n]\n# 设置国际化翻译文件的路径\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]\n```\n\n#### 3. 创建和编译翻译文件\n\nDjango 使用 GNU gettext 工具管理翻译。首先，需要创建翻译文件：\n\n```python\ndjango-admin makemessages -l zh_hans\n```\n\n这将为简体中文创建一个翻译文件。然后，可以在生成的 `.po` 文件中添加翻译。\n\n```python\n# locale/zh_hans/LC_MESSAGES/django.po\n \nmsgid \"Welcome\"\nmsgstr \"欢迎\"\n```\n\n编译翻译文件：\n\n```python\ndjango-admin compilemessages\n```\n\n#### 4. 在模板中使用国际化\n\n在 Django 模板中，使用 `{% trans %}` 标签来标记需要翻译的字符串。\n\n```html\n<!-- templates/my_template.html -->\n \n{% load i18n %}\n<p>{% trans \"Welcome\" %}</p>\n```\n\n#### 5. 在 Python 代码中使用国际化\n\n在 Python 代码中，使用 `gettext` 函数来标记和翻译字符串。\n\n```python\nfrom django.utils.translation import gettext as _\n \ndef my_view(request):\n    message = _(\"Welcome\")\n    # ...\n```\n\n#### 6. 本地化日期和时间\n\nDjango 还提供了本地化日期和时间的功能。在模板中，可以使用 `{% localize %}` 标签。\n\n```html\n{% load l10n %}\n \n{% localize on %}\n    {{ my_date }}\n{% endlocalize %}\n```\n\n#### 7. 中间件和 URL 配置\n\n为了根据用户的语言偏好动态切换语言，可以使用 Django 的 `LocaleMiddleware`。\n\n```python\n# settings.py\n \nMIDDLEWARE = [\n    # ...\n    'django.middleware.locale.LocaleMiddleware',\n    # ...\n]\n```\n\n同时，可以在 URL 中添加语言前缀来支持不同语言的页面。\n\n```python\n# urls.py\n \nfrom django.conf.urls.i18n import i18n_patterns\nfrom . import views\n \nurlpatterns = i18n_patterns(\n    path('welcome/', views.welcome, name='welcome'),\n    # ...\n)\n```\n\n#### 8. 测试多语言功能\n\n在开发过程中，需要确保各种语言的正确显示和切换。可以通过修改浏览器的语言设置来测试不同语言环境下的显示效果。\n\n#### 结论\n\n通过 Django 的国际化和本地化功能，可以有效地为应用添加多语言支持，满足不同地区用户的需求。虽然这个过程可能涉及到复杂的配置和大量的翻译工作，但 Django 提供的工具和框架使这一过程变得更加可管理和高效。\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"django的创建与配置","url":"/2024/05/13/django的创建与配置/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Django 纯净版的创建：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=5 face=宋体><strong>使用Django admin路径：</strong></font>\n\n```bash\npython3 manage.py createsuperuser   # 创建admin账户密码\n```\n\n<font color=#f26522 size=5 face=宋体><strong>安装Django环境：</strong></font>\n\n```bash\n# 安装virtualenv\npip3 install virtualenv\n\n# 创建python环境文件夹\npython3 -m venv django_venv     # (bash 运行结果，会在当前文件夹创建一个django_venv的文件夹)\n\n# source /bin/activate\nsource ./django_venv/bin/activate\n# 备注：如果进入虚拟环境成功，在命令行前面会有一个小括号\n\n# 进入成功后，安装django环境\npip3 install django #国外服务器下载\npip3 install django==2.2     #  指定安装django版本2.2\npip3 install django -i https://pypi.douban.com/simple   #  国内豆瓣源加速连接\n\n# 创建网站项目工程\n# django-admin startproject <网站工程名>\ndjango-admin startproject mysite\n\n# 开启python—django网站服务\npython3 manage.py runserver   # 以默认的方式启动django服务\npython3 manage.py runserver 0.0.0.0:8000  # 命令行模式\n\nnohup python3 manage.py runserver 0.0.0.0:8000 > manage.log 2>&1 &   # 进程模式\n\n# python manage.py startapp <子应用名称>\npython manage.py startapp index  # 创建了一个名叫 的文件夹\n```\n\n<font color=#f26522 size=5 face=宋体><strong>settings：配置</strong></font>\n\n+ 如果使用默认的sqlite数据库：\n\n```bash\n# 在虚拟环境下使用：\npython3 manage.py makemigrations\npython3 manage.py migrate\n```\n\n\n```python\nfrom pathlib import Path\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-p5t$3q2@12loakok_!**=^+c2h+fpgw#ca=zl$@in)(^=tcv^f'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    # 'django.contrib.admin',     #  纯净版django  # django 内置后台管理，简单数据库的增删改查\n    # 'django.contrib.auth',      #  纯净版django 剔除  # 用户登录和认证权限\n    # 'django.contrib.contenttypes',   #  纯净版django 剔除  # 复杂表结构关系\n    # 'django.contrib.sessions',    #  纯净版django 剔除  # 如果项目中有登录成功 让用户可以访问\n    # 'django.contrib.messages',    #  纯净版django 剔除  # 消息展示，依赖Session\n    'django.contrib.staticfiles',   # 静态资源处理，图片、css、js等\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    # 'django.contrib.sessions.middleware.SessionMiddleware',   # 纯净版django 剔除\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    # 'django.contrib.auth.middleware.AuthenticationMiddleware',   # 纯净版django 剔除\n    # 'django.contrib.messages.middleware.MessageMiddleware',   # 纯净版django 剔除\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'Dome_Datou.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                # 'django.contrib.auth.context_processors.auth',   # 纯净版django 剔除\n                # 'django.contrib.messages.context_processors.messages',    # 纯净版django 剔除\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'Dome_Datou.wsgi.application'\n# >>>  python3 manage.py makemigrations\n# >>>  python3 manage.py migrate\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# LANGUAGE_CODE = 'en-us'    # 设置 英文\nLANGUAGE_CODE = 'zh-hans'    # 设置中文\n# TIME_ZONE = 'UTC'\nTIME_ZONE = 'Asia/Shanghai'  # 亚洲上海\n# 启用国际化\nUSE_I18N = True\n# 启用本地化\n# USE_L10N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>urls：配置</strong></font>\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    # path('admin/', admin.site.urls),\n]\n\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>Django 多App的创建：</strong></font>\n\n+ 1、在根目录下创建目录：`apps`\n\n  ```bash\n  # 创建apps\n  # 以下命令 在项目根目录下运行 就是在有 manage.py文件的那个路径\n  mkdir apps  # 创建apps文件夹\n  \n  # 创建即将创建的 app名称文件夹\n  mkdir apps/app01\n  \n  # 创建app01\n  python3 manage.py startapp app01 apps/app01   # 在apps/app01 中创建app01程序\n  \n  \n  # 创建即将创建的 app名称文件夹\n  mkdir apps/www\n  \n  # 创建app01\n  python3 manage.py startapp www apps/www   # 在apps/www 中创建www程序\n  ```\n\n+ 修改app下面 apps.py中的配置文件\n\n![修改apps中的配置](https://s2.loli.net/2024/05/14/jGvOfcRNmyKuEnk.png)\n\n+ 在settings中组册app\n\n  ```python\n  INSTALLED_APPS = [\n      # 'django.contrib.admin',     #  纯净版django  # django 内置后台管理，简单数据库的增删改查\n      # 'django.contrib.auth',      #  纯净版django 剔除  # 用户登录和认证权限\n      # 'django.contrib.contenttypes',   #  纯净版django 剔除  # 复杂表结构关系\n      # 'django.contrib.sessions',    #  纯净版django 剔除  # 如果项目中有登录成功 让用户可以访问\n      # 'django.contrib.messages',    #  纯净版django 剔除  # 消息展示，依赖Session\n      'django.contrib.staticfiles',   # 静态资源处理，图片、css、js等\n      'apps.app01.apps.App01Config'\n  ]\n  ```\n\n  ![image-20240514014804221](https://s2.loli.net/2024/05/14/goejlnG4syaN6ri.png)\n\n<font color=#00b2c2 size=5 face=宋体><strong>路由：配置</strong></font>\n\n+ 路由分发配置：\n\n  + 访问url：http://127.0.0.1:8000/web/user/\n\n  + 主路由：\n\n    ```python\n    from django.urls import path, re_path, include\n    urlpatterns = [\n        path(\"web/\", include(\"apps.www.urls\"))\n    ]\n    ```\n\n  + 子路由（apps/www）：\n\n    ```python\n    from django.urls import path\n    from apps.www import views\n    \n    urlpatterns = [\n        path(\"user/\", views.user)\n    ]\n    ```\n\n  + 视图配置：\n\n    ```python\n    from django.http import HttpResponse\n    # Create your views here.\n    def user(request):\n        return HttpResponse(\"创建用户名成功 >>> \")\n    ```\n\n+ 路由中 `name`的使用 => 反向生成网址，登录成功 => 跳转页面：\n\n  ```python\n  from apps.app01 import views\n  # 自定义请求 添加模块\n  from django.urls import URLPattern, ResolverMatch\n  from django.urls.resolvers import RoutePattern, RegexPattern     # RoutePattern：普通路由， 正则路由： RegexPattern\n  \n  \n  class MyURLPattern(URLPattern):\n      def resolve(self, path):\n          match = self.pattern.match(path)\n          if match:\n              new_path, args, captured_kwargs = match\n              # Pass any default args as **kwargs.\n              kwargs = {**captured_kwargs, **self.default_args}\n              return ResolverMatch(\n                  self.callback,\n                  args,\n                  kwargs,\n                  self.pattern.name,\n                  route=str(self.pattern),\n                  captured_kwargs=captured_kwargs,\n                  extra_kwargs=self.default_args,\n              )\n  \n  \n  class MyRoutePattern(RoutePattern):\n      def match(self, path):\n          match = self.regex.search(path)\n          if match:\n              # RoutePattern doesn't allow non-named groups so args are ignored.\n              kwargs = match.groupdict()\n              for key, value in kwargs.items():\n                  converter = self.converters[key]\n                  try:\n                      kwargs[key] = converter.to_python(value)\n                  except ValueError:\n                      return None\n              return path[match.end():], (), kwargs\n          return None\n  urlpatterns = [\n    MyURLPattern(MyRoutePattern(\"login/<str:v1>\", name=\"n1\", is_endpoint=True), views.login, None, \"n1\"),   # 等价于 path('login/', views.login, name=\"n1\"),\n  ]\n  ```\n\n  ```python\n  def login(request, v1):\n    \turl = reverse('n1', kwargs={\"v1\": v1})   # kwargs={\"<路由中的键>\": <用户传递进来的v1>}\n      print(url) # /login/sdad\n      return HttpResponse(\"欢迎登录！\")\n  ```\n\n+ `urls.py` 配置:\n\n  ```python\n  from django.contrib import admin\n  from django.urls import path, re_path\n  from apps.app01 import views\n  \n  # 自定义请求 添加模块\n  from django.urls import URLPattern, ResolverMatch\n  from django.urls.resolvers import RoutePattern, RegexPattern     # RoutePattern：普通路由， 正则路由： RegexPattern\n  \n  # 重写 URLPattern\n  class MyURLPattern(URLPattern):\n      def resolve(self, path):\n          match = self.pattern.match(path)\n          if match:\n              new_path, args, captured_kwargs = match\n              # Pass any default args as **kwargs.\n              kwargs = {**captured_kwargs, **self.default_args}\n              return ResolverMatch(\n                  self.callback,\n                  args,\n                  kwargs,\n                  self.pattern.name,\n                  route=str(self.pattern),\n                  captured_kwargs=captured_kwargs,\n                  extra_kwargs=self.default_args,\n              )\n  \n  # 重写 RoutePattern\n  class MyRoutePattern(RoutePattern):\n      def match(self, path):\n          match = self.regex.search(path)\n          if match:\n              # RoutePattern doesn't allow non-named groups so args are ignored.\n              kwargs = match.groupdict()\n              for key, value in kwargs.items():\n                  converter = self.converters[key]\n                  try:\n                      kwargs[key] = converter.to_python(value)\n                  except ValueError:\n                      return None\n              return path[match.end():], (), kwargs\n          return None\n  \n  urlpatterns = [\n      # 默认后台登录页面， 一般不用(自己重写)\n      # path('admin/', admin.site.urls),\n  \n      # http://127.0.0.1:8000/login/    # 默认地址 无传参\n      # http://127.0.0.1:8000/login/?a1=1&a2=2   # 默认传递两个参数 ： a1=1   a2=2\n      MyURLPattern(MyRoutePattern(\"login/\", name=None, is_endpoint=True), views.login, None, None),\n      # path('login/', views.login),\n  \n      # http://127.0.0.1:8000/info/2222/\n      # http://127.0.0.1:8000/info/2222/?a1=1&a2=2\n      # path(\"info/<int:v1>/\", views.info),\n      MyURLPattern(MyRoutePattern(\"info/<int:v1>/\", name=None, is_endpoint=True), views.info, None, None),\n  \n      # http://127.0.0.1:8000/info/2222/\n      # http://127.0.0.1:8000/info/2222/?a1=1&a2=2\n      # path(\"xx/<path:v2>/\", views.s_path),\n      MyURLPattern(MyRoutePattern(\"xx/<path:v2>/\", name=None, is_endpoint=True), views.s_path, None, None),\n  \n      # # http://127.0.0.1:8000/xx/f9aa6e73-c310-8aab-a36c-e9758d8c4a1d/\n      # path(\"xx/<uuid:v3>/\", views.uuid),\n      MyURLPattern(MyRoutePattern(\"xx/<uuid:v3>/\", name=None, is_endpoint=True), views.uuid, None, None),\n  \n      # # http://127.0.0.1:8000/other/11/kanoc/\n      # path(\"other/<int:v1>/<str:v2>/\", views.other),\n      MyURLPattern(MyRoutePattern(\"other/<int:v1>/<str:v2>/\", name=None, is_endpoint=True), views.other, None, None),\n  \n      # 要使用 re_path 要引入文件  from django.urls import path, re_path\n      # # http://127.0.0.1:8000/yy/2024-05-14/\n      # re_path(r'yy/(\\d{4})-(\\d{2})-(\\d{2})', views.yy),\n      MyURLPattern(RegexPattern(r'yy/(\\d{4})-(\\d{2})-(\\d{2})', name=None, is_endpoint=True), views.yy, None, None),\n  ```\n\n+ `views.py` 配置:\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n\n# Create your views here.\n\n# path('login/', views.login),\ndef login(request):\n    print(request.GET)\n    # # 如果 http://127.0.0.1:8000/login/?a1=1&a2=2\n    # # 则：\n    # a1 = request.GET.get('a1')   # 获取 a1的值\n    # a2 = request.GET.get('a2')   # 获取 a2的值\n    # print(a1)\n    # print(a2)\n    return HttpResponse(\"欢迎登录！\")\n\n# path(\"info/<int:v1>/\", views.info)\n# http://127.0.0.1:8000/info/2222/\ndef info(request, v1):\n    print(v1)  # 结果 ：2222\n    print(request.GET)\n    return HttpResponse(\"欢迎登录！\")\n\n# path(\"xx/<path:v2>/\", views.s_path),\n# http://127.0.0.1:8000/xx/user/ps/ja/\ndef s_path(request, v2):\n    print(v2)  # 结果 ：user/ps/ja\n    print(request.GET)\n    return HttpResponse(\"欢迎登录！\")\n\n# path(\"xx/<uuid:v3>/\", views.uuid)\n# http://127.0.0.1:8000/xx/f9aa6e73-c310-8aab-a36c-e9758d8c4a1d/\ndef uuid(request, v3):\n    print(v3)  # 结果 ：f9aa6e73-c310-8aab-a36c-e9758d8c4a1d\n    print(request.GET)\n    return HttpResponse(\"欢迎登录！\")\n\n# path(\"other/<int:v1>/<str:v2>/\", views.uuid),\n# http://127.0.0.1:8000/other/11/kanoc/\ndef other(request, v1, v2):\n    print(v1, v2)  # 结果 ：11    kanoc\n    print(request.GET)\n    return HttpResponse(\"欢迎登录！\")\n\n# 此路由 为正则匹配路由， 要使用则正匹配路由 需要在路由配置文件中 引入模块 from django.urls import path, re_path\n# re_path(r'yy/(\\d{4})-(\\d{2})-(\\d{2})', views.other)\n# http://127.0.0.1:8000/yy/2024-05-14/\n\ndef yy(request, v1, v2, v3):\n    print(v1, v2, v3)  # 结果 ：2024 05 14\n    print(request.GET)\n    return HttpResponse(\"欢迎登录！\")\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong> URL-CBV：写法</strong></font>\n\n+ cbv写法 django会自动定位到 请求到方法，不用自己单独的去判断`post` 、`get`...\n\n![image-20240514215331327](https://s2.loli.net/2024/05/14/M7szuLmA42P1Kkw.png)\n\n```python\nfrom django.urls import path\nfrom apps.CBV import views\n\nurlpatterns = [\n    path(\"cbv/\", views.CBV.as_view())\n]\n```\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.views import View\n\n# Create your views here.\n\nclass CBV(View):\n    def get(self, request):\n        return HttpResponse(\"The CBV get\")\n\n    def post(self, request):\n        return HttpResponse(\"The CBV post\")\n```\n\n\n\n<font color=#00b2c2 size=5 face=宋体><strong> URL-CBV：取值</strong></font>\n\n```python\nfrom django.urls import path, re_path\nfrom apps.CBV import views\n\nurlpatterns = [\n    path(\"cbv/<int:v1>\", views.CBV.as_view()),    # 传递的 v1 会放到 self.kwargs\n    re_path(\"cbv/(\\d+)/\", views.CBV.as_view()),    # 传递的 参数 会放到 self.args\n    re_path(\"cbv/(?P<v1>\\d+)/\", views.CBV.as_view())    # 传递的 参数 会放到 self.kwargs\n]\n```\n\n\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.views import View\nclass CBV(View):\n    def get(self, request, v1):\n       # 非命名的方式 传递的参数，会放到 self.args 命名的参数，会放到self.kwargs\n        print(self.request, self.args, self.kwargs) \n        return HttpResponse(\"The CBV get\")\n    def post(self, request):\n        return HttpResponse(\"The CBV post\")\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>ORM：配置</strong></font>\n\n+ 新建app：\n\n```python\npython3 manage.py startapp app01 # 在当前目录下 创建一个叫 app01的文件夹\n```\n\n+ settings 中组册app目录：\n\n```python\n\nINSTALLED_APPS = [\n    # 'django.contrib.admin',     #  纯净版django  # django 内置后台管理，简单数据库的增删改查\n    # 'django.contrib.auth',      #  纯净版django 剔除  # 用户登录和认证权限\n    # 'django.contrib.contenttypes',   #  纯净版django 剔除  # 复杂表结构关系\n    # 'django.contrib.sessions',    #  纯净版django 剔除  # 如果项目中有登录成功 让用户可以访问\n    # 'django.contrib.messages',    #  纯净版django 剔除  # 消息展示，依赖Session\n    'django.contrib.staticfiles',   # 静态资源处理，图片、css、js等\n    'app01.apps.App01Config'    # 添加app\n]\n```\n\n+ models.py 配置:\n\n```python\nfrom django.db import models\n# Create your models here.\nclass UserInfo(models.Model):\n    username = models.CharField(verbose_name=\"用户名\", max_length=32)\n    password = models.CharField(verbose_name=\"密码\", max_length=64)\n\n```\n\n+ 读取models 生成相应本地配置：\n\n```python\n1、>>> python3 manage.py makemigrations   # 生成配置  \n2、>>> python3 manage.py migrate  # 载入配置\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>返回数据：</strong></font>\n\n```python\nfrom django.http import HttpResponse, JsonResponse\nfrom django.shortcuts import render, redirect\n\nreturn HttpResponse(\"The CBV get\")   # 返回字符串\nreturn JsonResponse({\"status\": True, \"name\": \"小蘑菇\"}, json_dumps_params={\"ensure_ascii\": False})   # 返回中文 而非 ascii 码\nreturn render(request, \"demo.html\")   # 返回html 页面\nreturn redirect(\"https://www.baidu.com\", permanent=False)   # 返回 302 临时重定向\nreturn redirect(\"https://www.baidu.com\", permanent=True)  # 返回 301 永久重定向\n```\n\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"收藏-常用脚本","url":"/2024/05/11/收藏-常用脚本/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>收藏-常用脚本：</strong></font>\n\n<!--more-->\n\n[Python、Go 打包运行代码 ](https://blog.teadan.com/2024/04/02/Python、Go 打包运行代码/)\n\n[python-虚拟环境包(requirements.txt)的导出与安装 ](https://blog.teadan.com/2024/03/20/python-虚拟环境包(requirements.txt)的导出与安装/)\n\n[Nginx跨域解决方案 ](https://blog.teadan.com/2023/03/20/Nginx跨域解决方案/)\n\n[Django_学习笔记 ](https://blog.teadan.com/2023/05/22/Django-学习笔记/)\n\n[关于Jet Brains历史版本获取 ](https://blog.teadan.com/2023/03/20/关于Jet-Brains历史版本获取/)\n\n[django-跨域支持配置 ](https://blog.teadan.com/2024/03/20/django-跨域支持配置/)\n\n[宝塔部署Django进程守护Supervisor](https://blog.teadan.com/2023/03/20/宝塔部署Django进程守护Supervisor/)\n\n[pip-更换源 ](https://blog.teadan.com/2024/05/01/pip-更换源/)\n\n[必备工具-代码类 ](https://blog.teadan.com/2024/04/24/必备工具-代码类/)\n\n[一键搞定多层跳板访问目标机器 ](https://blog.teadan.com/2024/04/13/一键搞定多层跳板访问目标机器/)\n\n[Shadowsocks 一键安装脚本（四合一） ](https://blog.teadan.com/2024/01/25/Shadowsocks-一键安装脚本（四合一）/)\n\n[必备工具 ](https://blog.teadan.com/2023/07/11/必备工具/)\n\n[centos测网速脚本 ](https://blog.teadan.com/2023/06/13/centos测网速脚本/)\n\n[python 时间格式返回值 ](https://blog.teadan.com/2023/05/27/python-时间格式返回值/)\n\n[ThreadPoolExecutor多线程返回值 ](https://blog.teadan.com/2023/03/20/ThreadPoolExecutor多线程返回值/)\n\n[V2ray官方一键安装脚本(2021/10) ](https://blog.teadan.com/2023/03/20/V2ray官方一键安装脚本-2021-10/)\n\n[m3u8下载协议不在白名单 ](https://blog.teadan.com/2023/03/20/m3u8下载协议不在白名单/)\n","tags":["收藏","常用脚本"],"categories":["_A8-工具","常用脚本"]},{"title":"Scp命令","url":"/2024/04/24/scp命令/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>必备工具（代码类）：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>SCP命令：[本文参考自](https://blog.csdn.net/CHNIM/article/details/134813154)</strong></font>\n\n```bash\n# 1. 基本语法\n# scp [选项] 源文件/目录 目标路径\n# 选项：\n#\t\t-r：递归复制，用于复制目录。\n# \t-P：指定SSH端口号。\n# \t-i：指定身份文件（私钥文件）。\n# \t-v：详细模式，显示详细的调试信息。\n\n# 从 远程 ==> 本地\nscp root@192.168.1.33:/root/requirements.txt /root/requirements.txt\n\n# 从 本地 ==> 远程\nscp /root/requirements.txt root@192.168.1.33:/root/requirements.txt\n\n# 从 远程 ==> 远程  \nscp root@192.168.1.33:/root/requirements.txt root@172.16.73.130:/root\n\n# 使用端口和指定私钥\nscp -P 2222 -i /path/to/private_key.pem localfile.txt user@remote:/path/to/destination/\n\n# 递归复制目录\nscp -r sourcedir user@remote:/path/to/destination/\n#3. 注意事项\n# \t如果目标路径是目录，文件将会被复制到该目录中。\n# \t如果目标路径包含文件名，文件将被复制并重命名为指定的文件名。\n# \t使用递归选项 -r 可以复制整个目录及其内容。\n# \t如果目标路径中包含空格，应该使用引号将其括起来。\n# \t要连接到非标准SSH端口，可以使用 -P 选项。\n# \t使用 -i 选项可以指定用于身份验证的私钥文件。\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>Python pip可用包查看：</strong></font>\n\n```bash\npip3 list  # 查看已经安装的包\n\npip3 index versions <包名>   # 查看服务器上 当前系统可以用所有包  例如：pip3 index versions requests\n```\n\n","tags":["复制","scp"],"categories":["_A3-linux","命令","scp"]},{"title":"Python利用Minio-API实现文件上传下载、删除等操作","url":"/2024/04/23/Python利用Minio-API实现文件上传下载、删除等操作/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>Python利用Minio API实现文件上传下载、删除等操作：</strong></font>\n\n<!--more-->\n\n#### <font color=#00b2c2 size=5 face=宋体><strong>**pip安装minio**</strong></font>\n\n#### **2、文件目录**\n\n![img](https://img-blog.csdnimg.cn/20201205142832860.png)\n\nImportError: cannot import name '[Minio](https://so.csdn.net/so/search?q=Minio&spm=1001.2101.3001.7020)'\n\n![img](https://img-blog.csdnimg.cn/20201205142907370.png)\n\npip3 install minio 还是报错ImportError错误。\n\n原因是建的文件夹名与pytnon文件minio包重名了，qaq。。。\n\n#### **3、连接Minio文件存储服务器**\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@author:ZSW\n@file:MinioConfig.py\n@time:2020/12/04\n\"\"\"\n \nfrom minio import Minio\n \n# 使用endpoint、access key和secret key来初始化minioClient对象。\nminioClient = Minio('192.168.18.26:9000',\n                    access_key='minioadmin',\n                    secret_key='minioadmin',\n                    secure=False)\n```\n\n#### 4、Python操作存储桶(文件夹)\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@author:ZSW\n@file:MinioBucketBase.py\n@time:2020/12/04\n\"\"\"\n \nfrom minio_learn.MinioConfig import minioClient\nfrom minio.error import ResponseError\n \n \nclass Bucket:\n    # 创建桶(调用make_bucket来创建一个存储桶) make_bucket函数\n    \"\"\"\n    注：创建桶命名限制：小写字母，句点，连字符和数字是\n    唯一允许使用的字符（使用大写字母、下划线等命名会报错），长度至少应为3个字符\n    \"\"\"\n    def create_bucket(self):\n        try:\n            if minioClient.bucket_exists(bucket_name='pictures'):  # bucket_exists：检查桶是否存在\n                print(\"该存储桶已经存在\")\n            else:\n                minioClient.make_bucket(\"pictures\")\n                print(\"存储桶创建成功\")\n        except ResponseError as err:\n            print(err)\n \n    # 列出所有的存储桶 list_buckets函数\n    def get_bucket_list(self):\n        try:\n            buckets = minioClient.list_buckets()\n            for bucket in buckets:\n                print(bucket.name, bucket.creation_date)  # 获取桶的名称和创建时间\n        except ResponseError as err:\n            print(err)\n \n    # 删除存储桶\n    def get_remove_bucket(self):\n        try:\n            minioClient.remove_bucket(\"pictures\")\n            print(\"删除存储桶成功\")\n        except ResponseError as err:\n            print(err)\n \n    # 列出存储桶中所有对象  或者使用 list_objects_v2也可\n    def get_bucket_files(self):\n        try:\n            objects = minioClient.list_objects('testfiles', prefix=None,\n                                               recursive=True)   # prefix用于过滤的对象名称前缀\n            for obj in objects:\n                print(obj.bucket_name, obj.object_name.encode('utf-8'), obj.last_modified,\n                      obj.etag, obj.size, obj.content_type)\n        except ResponseError as err:\n            print(err)\n \n    # 列出存储桶中未完整上传的对象\n    def get_list_incomplete_uploads(self):\n        try:\n            uploads = minioClient.list_incomplete_uploads('testfiles',\n                                                          prefix=None,\n                                                          recursive=True)\n            for obj in uploads:\n                print(obj.bucket_name, obj.object_name, obj.upload_id, obj.size)\n        except ResponseError as err:\n            print(err)\n \n    # 获取存储桶的当前策略\n    def bucket_policy(self):\n        try:\n            policy = minioClient.get_bucket_policy('testfiles')\n            print(policy)\n        except ResponseError as err:\n            print(err)\n \n    # # 给指定的存储桶设置存储桶策略\n    # def get_set_bucket_policy(self):\n    #     try:\n    #         minioClient.set_bucket_policy('testfiles', policy.READ_ONLY)\n    #     except ResponseError as err:\n    #         print(err)\n \n    # 获取存储桶上的通知配置\n    def bucket_notification(self):\n        try:\n            # 获取存储桶的通知配置。\n            notification = minioClient.get_bucket_notification('testfiles')\n            print(notification)\n            # 如果存储桶上没有任何通知：\n            # notification  == {}\n        except ResponseError as err:\n            print(err)\n \n    # 给存储桶设置通知配置\n    def set_bucket_notification(bucket_name, notification):\n        pass\n \n    # 删除存储桶上配置的所有通知\n    def remove_all_bucket_notifications(bucket_name):\n        try:\n            minioClient.remove_all_bucket_notifications('mybucket')\n        except ResponseError as err:\n            print(err)\n \n    # 监听存储桶上的通知\n    def listen_bucket_notification(bucket_name, prefix, suffix, events):\n        pass\n \n \nif __name__ == '__main__':\n    Bucket().bucket_notification()\n```\n\n#### 5、Python操作文件对象\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\"\"\"\n@author:ZSW\n@file:MinioObjectBase.py\n@time:2020/12/04\n\"\"\"\n \nfrom minio_learn.MinioConfig import minioClient\nfrom minio.error import ResponseError\nimport os\n \n \nclass Object:\n \n    # 从桶中下载一个对象txt、csv文件都可以\n    def load_object(self):\n        try:\n            data = minioClient.get_object('testfiles', 'long_lat.csv')\n            with open('./load_files/long_lat.csv', 'wb') as file_data:\n                for d in data.stream(32 * 1024):\n                    file_data.write(d)\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n \n    # 下载一个对象的指定区间的字节数组\n    def load_partial_object(self):\n        try:\n            data = minioClient.get_partial_object('testfiles', '123.txt', 2, 8)\n            with open('./load_files/123_new.txt', 'wb') as file_data:\n                for d in data:\n                    file_data.write(d)\n            print(\"Sussess\")  # 部分出现乱码\n        except ResponseError as err:\n            print(err)\n \n    # 下载并将文件保存到本地\n    def fget_object(self):\n        try:\n            print(minioClient.fget_object('testfiles', '123.txt', './load_files/123_new1.txt'))\n        except ResponseError as err:\n            print(err)\n \n    # 拷贝对象存储服务上的源对象到一个新对象\n    # 注：该API支持的最大文件大小是5GB\n    # 可通过copy_conditions参数设置copy条件\n    # 经测试copy复制28M的文件需要663ms; 1.8G的压缩包需要53s\n    def get_copy_object(self):\n        try:\n            copy_result = minioClient.copy_object(\"pictures\", \"123.jpg\",\n                                                  \"/testfiles/123.jpg\"\n                                                  )\n            print(copy_result)\n        except ResponseError as err:\n            print(err)\n \n    # 添加一个新的对象到对象存储服务\n    \"\"\"\n    单个对象的最大大小限制在5TB。put_object在对象大于5MiB时，自动使用multiple parts方式上传。\n    这样，当上传失败时，客户端只需要上传未成功的部分即可（类似断点上传）。\n    上传的对象使用MD5SUM签名进行完整性验证。\n    \"\"\"\n    def upload_object(self):\n        # 放置一个具有默认内容类型的文件，成功后将打印服务器计算出的etag标识符\n        try:\n            with open('./picture_files/123.txt', 'rb') as file_data:\n                file_stat = os.stat('./picture_files/123.txt')\n                print(minioClient.put_object('pictures', '123.txt',\n                                             file_data, file_stat.st_size))\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n        # 放一个文件'application/csv'\n        try:\n            with open('./picture_files/long_lat.csv', 'rb') as file_data:\n                file_stat = os.stat('./picture_files/long_lat.csv')\n                minioClient.put_object('pictures', 'long_lat.csv', file_data,\n                                       file_stat.st_size, content_type='application/csv')\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n \n    # 通过文件上传到对象中\n    def fput_object(self):\n        try:\n            print(minioClient.fput_object('pictures', '234.jpg', './picture_files/234.jpg'))\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n        try:\n            print(minioClient.fput_object('pictures', 'long_lat.csv',\n                                          './picture_files/long_lat.csv',\n                                          content_type='application/csv'))\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n \n    # 获取对象的元数据\n    def stat_object(self):\n        try:\n            print(minioClient.stat_object('pictures', '123.txt'))\n        except ResponseError as err:\n            print(err)\n \n    # 删除对象\n    def remove_object(self):\n        try:\n            minioClient.remove_object('pictures', '234.jpg')\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n \n    # 删除存储桶中的多个对象\n    def remove_objects(self):\n        try:\n            objects_to_delete = ['123.txt', 'long_lat.csv']\n            for del_err in minioClient.remove_objects('testfiles', objects_to_delete):\n                print(\"Deletion Error: {}\".format(del_err))\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n \n    # 删除一个未完整上传的对象\n    def remove_incomplete_upload(self):\n        try:\n            minioClient.remove_incomplete_upload('testfiles', '123.jpg')\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n \n \nif __name__ == '__main__':\n    Object().remove_incomplete_upload()\n```\n\n#### 6、Python Presigned操作\n\n```python\nfrom minio_learn.MinioConfig import minioClient\nfrom minio.error import ResponseError\nfrom datetime import timedelta\n \n \nclass Presigned:\n \n    # 生成一个用于HTTP GET操作的presigned URL \n    def presigned_get_object(self):\n        # 预先获得的对象名称的获取对象URL，将在2天后过期\n        try:\n            print(minioClient.presigned_get_object('testfiles', '123.jpg', expires=timedelta(days=7)))\n            print(\"Sussess\")\n        # 由于内部预定位确实会获得存储桶位置，因此仍然可能出现响应错误\n        except ResponseError as err:\n            print(err)\n \n    # 生成一个用于HTTP PUT操作的presigned URL\n    def presigned_put_object(self):\n        try:\n            print(minioClient.presigned_put_object('testfiles',\n                                                   '123.txt',\n                                                   expires=timedelta(days=7)))\n            print(\"Sussess\")\n        except ResponseError as err:\n            print(err)\n \n    # 允许给POST操作的presigned URL设置策略条件。这些策略包括比如，\n    # 接收对象上传的存储桶名称，名称前缀，过期策略\n    def presigned_post_policy(self, PostPolicy):\n        pass\n \n \nif __name__ == '__main__':\n    Presigned().presigned_put_object()\n```\n","tags":["django","python","MinIO","基础"],"categories":["Python","爬虫","同步"]},{"title":"移动光猫-吉比特 H3-1S H3-2S获取超级密码方法(亲测可用！！)","url":"/2024/04/15/移动光猫-吉比特-H3-1S-H3-2S获取超级密码方法-亲测可用！！/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>**移动光猫-吉比特 H3-1S H3-2S获取超级密码方法**:</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>1.使用光猫背后的普通用户名登录进光猫，浏览器复制以下链接打开</strong></font>\n\n[http://192.168.1.1/usr=CMCCAdmin ... md=1&telnet.gch](http://192.168.1.1/usr=CMCCAdmin&psw=aDm8H%MdA&cmd=1&telnet.gch)\n\n<font color=#f26522 size=4 face=宋体><strong>2.电脑启用 telnet</strong></font>\n\n![开启telnet成功](https://s2.loli.net/2024/05/09/uKpnNMcji45sfxv.png)\n\n<font color=#f26522 size=4 face=宋体><strong>3.通过telnet进入光猫</strong></font>\n\n\n输入：\n\n`telnet 192.168.1.1`\n\n用户名、密码如下：\n`CMCCAdmin`\n`aDm8H%MdA`\n\n<font color=red size=3 face=宋体><strong>注意：密码默认不显示 不需要重复输入</strong></font>\n\n![连接状态](https://s2.loli.net/2024/05/09/4riCBgt57fanybh.png)\n<font color=#f26522 size=4 face=宋体><strong>4.查看一下登陆信息,可以看到账号密码全部进行了加密</strong></font>\n\n```bash\nsidbg 1 DB p DevAuthInfo\n```\n\n输入上面的命令后将会显示下面的内容：\n\n```bash\n<Tbl name=\"DevAuthInfo\" RowCount=\"2\">\n<Row No=\"0\">\n<DM name=\"ViewName\" val=\"IGD.AU1\"/>\n<DM name=\"Enable\" val=\"1\"/>\n<DM name=\"IsOnline\" val=\"0\"/>\n<DM name=\"AppID\" val=\"1\"/>\n<DM name=\"User\" val=\"******\"/>\n<DM name=\"Pass\" val=\"******\"/>\n<DM name=\"Level\" val=\"1\"/>\n<DM name=\"Extra\" val=\"\"/>\n<DM name=\"ExtraInt\" val=\"0\"/>\n</Row>\n<Row No=\"1\">\n<DM name=\"ViewName\" val=\"IGD.AU2\"/>\n<DM name=\"Enable\" val=\"1\"/>\n<DM name=\"IsOnline\" val=\"0\"/>\n<DM name=\"AppID\" val=\"1\"/>\n<DM name=\"User\" val=\"******\"/>\n<DM name=\"Pass\" val=\"******\"/>\n<DM name=\"Level\" val=\"2\"/>\n<DM name=\"Extra\" val=\"\"/>\n<DM name=\"ExtraInt\" val=\"0\"/>\n</Row>\n</Tbl> \n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>5.修改CMCCAdmin用户的登录密码</strong></font>\n\n\n输入下面的命令更改CMCCAdmin的密码：\n\nsidbg 1 DB set DevAuthInfo 0 Pass admin\n\nPass后面是CMCCAdmin的登录密码\n\n再输入下面的命令保存即可\n\n```bash\nsidbg 1 DB save\n```\n\n\n\n完成后即可使用CMCCAdmin+更改后的密码即可登录光猫后台。\n\n祝各位使用愉快！\n","tags":["运维","移动","光猫","超级用户"],"categories":["_S9-折腾","光猫"]},{"title":"一键搞定多层跳板访问目标机器","url":"/2024/04/13/一键搞定多层跳板访问目标机器/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>一、免密码登录ssh</strong></font>\n\n<!--more-->\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、生成钥匙对</strong></font>\n\n  ```bash\n  # 生成key，但首先你得安装ssh\n  ssh-keygen -t rsa -b 2048\n  # 一路按回车换行，终端输出大概是这样\n  # Generating public/private rsa key pair.\n  # Enter file in which to save the key (/home/username/.ssh/id_rsa): \n  # Enter passphrase (empty for no passphrase): \n  # Enter same passphrase again: \n  # Your identification has been saved in /home/username/.ssh/id_rsa.\n  # Your public key has been saved in /home/username/.ssh/id_rsa.pub.\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、将共钥传输给远端主机</strong></font>\n\n  ```bash\n  # id@server 是你的用户名和远端主机地址喔\n  ssh-copy-id id@server\n  # 按规定输入远端主机密码后，成功的话能看到终端输出\n  # Number of key(s) added:        1\n  ```\n\n<font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>公钥储存在远端主机这个文件里：.ssh/authorized_keys，现在当你重新再通过SSH连接到远端主机时，已经不再需要密码啦！</strong></font>\n\n<font color=#00b2c2 size=5 face=宋体><strong>二、使用`跳板`连接到`目标机器`(ProxyJump)</strong></font>\n\n 本节内容参考自：[SSH 通过跳板机直接访问内网机器](https://link.zhihu.com/?target=https%3A//woodenrobot.me/2019/07/18/ssh-proxyjump/)、[SSH使用技巧-免密码/自动代理](https://atomlab.org/posts/code/ssh-trick/)\n\n<font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>需要 `OpenSSH 7.3` 以上版本才可以使用 `ProxyJump`, 使用下列命令查看`OpenSSH` 版本：</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、直接命令`临时使用`：</strong></font>\n\n  ```bash\n  ssh -J [email protected]:port1,[email protected]:port2\n  \n  # 可以直接使用上述命令通过跳板机直接登录内网机器，比如：\n  # ssh username@目标机器IP -p 22 -J username@跳板机IP:22\n  # 如果需要通过多个跳板机则以 , 分割：\n  # ssh username@目标机器IP -p 22 -J username1@跳板机IP1:22,username2@跳板机IP2:22\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、长期使用`配置文件`||`~\\.ssh\\config`：</strong></font>\n\n  ```bash\n  Host tiaoban1    # 代表跳板机 1\n      HostName 跳板机 1 的 IP\n      Port 22    # ssh 连接端口\n      User username1    # 跳板机 1 的用户名\n  \n  Host tiaoban2    # 代表跳板机 2\n      HostName 跳板机 2 的 IP\n      Port 22    # ssh 连接端口\n      User username2    # 跳板机 2 的用户名\n  \n  Host target    # 代表目标机器的名字\n      HostName 目标机器 IP    # 这个是目标机器的 IP\n      Port 22    # 目标机器 ssh 的端口\n      User username_target    # 目标机器的用户名\n      ProxyJump tiaoban1,tiaoban2\n  \n  Host 10.10.0.*    # 使用通配符 * 代表 10.10.0.1 - 10.10.0.255\n      Port 22    # 服务器端口\n      User username    # 服务器用户名\n      ProxyJump tiaoban1,tiaoban2\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>3、使用方法：</strong></font>\n\n  ```bash\n  ssh tiaoban1   # 连接到跳板机 1\n  \n  ssh target   # 连接到目标机器\n  ```\n\n<font color=#00b2c2 size=5 face=宋体><strong>三、安装`expect`交互</strong></font>\n\n 本节内容参考自：[Shell脚本交互之：自动输入密码](https://blog.csdn.net/zhangjikuan/article/details/51105166)\n\n<font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>用于与控制台交互，如果上面的内容无法 免密登录服务器，可以用这种方法</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、安装 `expect`：</strong></font>\n\n  ```shell\n  # ubuntu or debian\n  sudo apt-get install expect\n  \n  # centos7\n  yum install expect\n  \n  # mac os  // 没有brew 去搜一下，怎么安装 brew\n  brew install expect\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、语法：</strong></font>\n\n  ```bash\n  #!/usr/bin/expect -f\n  # #!/bin/expect   //原文此处是错误，导致 no such file or directory  正确的写法是 #!/usr/bin/expect -f\n  set timeout 30\n  spawn ssh -l jikuan.zjk 10.125.25.189\n  expect \"password:\"\n  send \"zjk123\\r\"\n  interact\n  ```\n\n+ <font color=#f26522 size=4 face=宋体><strong>3、说明：</strong></font>\n\n  ```\n  在运行脚本时候要expect  file，不能sh file了\n  上面语句第一句是设定超时时间为30s，spawn是expect的语句，执行命令前都要加这句\n  expect \"password：\"这句意思是交互获取是否返回password：关键字，因为在执行ssh时会返回输入password的提示：jikuan.zjk@10.125.25.189's password:\n  send就是将密码zjk123发送过去\n  interact代表执行完留在远程控制台，不加这句执行完后返回本地控制台\n  ```\n\n","tags":["运维","跳板","ssh"],"categories":["_A5-安装教程","SSH"]},{"title":"django-跨域支持配置","url":"/2024/03/20/django-跨域支持配置/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>django-跨域支持配置</strong></font>\n\n<!--more-->\n\n```python\n# 安装模块\npip3 install django-cors-headers\n\n\n\n# books_demo/settings.py\nINSTALLED_APPS = [\n    ...\n    # demo\n    'corsheaders',\n    ...\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware', # 需注意与其他中间件顺序，这里放在最前面即可\n    ...\n]\n\n# 支持跨域配置开始\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOW_CREDENTIALS = True \n\n```\n\n\n\n## 第二种方式：\n\n您遇到的错误是由于跨源资源共享（CORS）策略的限制。当您的前端应用（位于 `http://localhost:5173`）尝试访问后端API（位于 `http://localhost:8000`）时，浏览器会执行一个预检请求（preflight request）来检查服务器是否允许跨域请求。如果服务器没有在响应中包含适当的 `Access-Control-Allow-Origin` 头部，浏览器就会阻止该请求。\n\n### 解决方案\n\n由于您的 Django 项目中已经安装了 `corsheaders` 并且将其添加到了 `INSTALLED_APPS` 和 `MIDDLEWARE` 中，您需要确保配置了 `corsheaders` 以允许来自 `http://localhost:5173` 的请求。\n\n#### 步骤 1: 配置 CORS 设置\n\n在 `AccountingSystem/settings.py` 文件中，添加或修改以下设置以允许特定的源或所有源进行跨域请求：\n\n```python\nPython\n\n\n采纳\n复制\n新建文件\n# 在文件末尾或适当的位置添加以下配置\n\n# CORS 设置\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",  # 允许的前端源\n]\n\n# 如果您希望允许所有源，可以使用以下设置（但出于安全考虑，通常不推荐在生产环境中这样做）\n# CORS_ALLOWED_ORIGINS = [\n#     \"*\"\n# ]\n\n# 可选：允许携带认证信息（如 Cookies）\nCORS_ALLOW_CREDENTIALS = True\n\n# 可选：设置允许的 HTTP 方法\nCORS_ALLOWED_METHODS = [\n    'GET',\n    'POST',\n    'PUT',\n    'DELETE',\n    'OPTIONS'\n]\n\n# 可选：设置允许的 HTTP 头\nCORS_ALLOWED_HEADERS = [\n    'content-type',\n    'authorization'\n]\n```\n\n#### 步骤 2: 确保中间件顺序正确\n\n`corsheaders.middleware.CorsMiddleware` 应该放在可能修改响应的中间件之前，通常是在 `django.middleware.common.CommonMiddleware` 之后。从您提供的配置来看，顺序似乎是正确的。\n\n#### 步骤 3: 重启 Django 服务器\n\n修改设置后，您需要重启 Django 开发服务器以使更改生效。\n\n#### 步骤 4: 测试\n\n在浏览器中重新加载您的前端应用并尝试再次发起请求，检查是否还会出现 CORS 错误。\n\n通过以上步骤，您应该能够解决因 CORS 策略导致的请求被阻止的问题。如果问题依旧存在，请检查是否有其他中间件或设置可能影响到 CORS 头部的设置。\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"禹神 Vue3 前端笔记","url":"/2024/02/22/禹神-Vue3-前端笔记/","content":"\n\n\n# 1. Vue3简介\n\n<!--more-->\n\n- 2020年9月18日，`Vue.js`发布版`3.0`版本，代号：`One Piece`（n\n- 经历了：[4800+次提交](https://github.com/vuejs/core/commits/main)、[40+个RFC](https://github.com/vuejs/rfcs/tree/master/active-rfcs)、[600+次PR](https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+)、[300+贡献者](https://github.com/vuejs/core/graphs/contributors)\n- 官方发版地址：[Release v3.0.0 One Piece · vuejs/core](https://github.com/vuejs/core/releases/tag/v3.0.0)\n- 截止2023年10月，最新的公开版本为：`3.3.4`\n\n  <img src=\"https://s2.loli.net/2024/02/22/GLPQrNvRBaWe9Ts.png\" alt=\"image.png\" style=\"zoom:30%;\" /> \n\n## 1.1. 【性能的提升】\n\n- 打包大小减少`41%`。\n\n- 初次渲染快`55%`, 更新渲染快`133%`。\n\n- 内存减少`54%`。\n\n  \n## 1.2.【 源码的升级】\n\n- 使用`Proxy`代替`defineProperty`实现响应式。\n\n- 重写虚拟`DOM`的实现和`Tree-Shaking`。\n\n  \n## 1.3. 【拥抱TypeScript】\n\n- `Vue3`可以更好的支持`TypeScript`。\n\n  \n## 1.4. 【新的特性】\n\n1. `Composition API`（组合`API`）：\n   - `setup`\n   - `ref`与`reactive`\n   - `computed`与`watch`\n   \n     ......\n   \n2. 新的内置组件：\n   - `Fragment`\n   - `Teleport`\n   - `Suspense`\n\n     ......\n\n3. 其他改变：\n   - 新的生命周期钩子\n   - `data` 选项应始终被声明为一个函数\n   - 移除`keyCode`支持作为` v-on` 的修饰符\n\n     ......\n\n\n\n# 2. 创建Vue3工程\n\n## 2.1. 【基于 vue-cli 创建】\n点击查看[官方文档](https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create)\n\n> 备注：目前`vue-cli`已处于维护模式，官方推荐基于 `Vite` 创建项目。\n\n```shell\n## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上\nvue --version\n\n## 安装或者升级你的@vue/cli \nnpm install -g @vue/cli\n\n## 执行创建命令\nvue create vue_test\n\n##  随后选择3.x\n##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)\n##  > 3.x\n##    2.x\n\n## 启动\ncd vue_test\nnpm run serve\n```\n\n---\n\n## 2.2. 【基于 vite 创建】(推荐)\n`vite` 是新一代前端构建工具，官网地址：[https://vitejs.cn](https://vitejs.cn/)，`vite`的优势如下：\n\n- 轻量快速的热重载（`HMR`），能实现极速的服务启动。\n- 对 `TypeScript`、`JSX`、`CSS` 等支持开箱即用。\n- 真正的按需编译，不再等待整个应用编译完成。\n- `webpack`构建 与 `vite`构建对比图如下：\n<img src=\"https://s2.loli.net/2024/02/22/Zjp9rwdhWu1zaHK.png\" alt=\"webpack构建\" title=\"webpack构建\" style=\"zoom:20%;box-shadow:0 0 10px black\" />\t<img src=\"https://s2.loli.net/2024/02/22/UmeJz1Hgxk7rOyN.png\" alt=\"vite构建\" title=\"vite构建\" style=\"zoom: 20%;box-shadow:0 0 10px black\" />\n* 具体操作如下（点击查看[官方文档](https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application)）\n\n```shell\n## 1.创建命令\nnpm create vue@latest\n\n## 2.具体配置\n## 配置项目名称\n√ Project name: vue3_test\n## 是否添加TypeScript支持\n√ Add TypeScript?  Yes\n## 是否添加JSX支持\n√ Add JSX Support?  No\n## 是否添加路由环境\n√ Add Vue Router for Single Page Application development?  No\n## 是否添加pinia环境\n√ Add Pinia for state management?  No\n## 是否添加单元测试\n√ Add Vitest for Unit Testing?  No\n## 是否添加端到端测试方案\n√ Add an End-to-End Testing Solution? » No\n## 是否添加ESLint语法检查\n√ Add ESLint for code quality?  Yes\n## 是否添加Prettiert代码格式化\n√ Add Prettier for code formatting?  No\n```\n自己动手编写一个App组件\n\n```html\n<template>\n  <div class=\"app\">\n    <h1>你好啊！</h1>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App' //组件名\n  }\n</script>\n\n<style>\n  .app {\n    background-color: #ddd;\n    box-shadow: 0 0 10px;\n    border-radius: 10px;\n    padding: 20px;\n  }\n</style>\n```\n\n安装官方推荐的`vscode`插件：\n\n<img src=\"https://s2.loli.net/2024/02/22/R1E6rZBwxaFkghs.png\" alt=\"Snipaste_2023-10-08_20-46-34\" style=\"zoom:50%;\" /> \n\n<img src=\"https://s2.loli.net/2024/02/22/tprjsKJVG97YvhI.png\" alt=\"image-20231218085906380\" style=\"zoom:42%;\" /> \n\n总结：\n\n- `Vite` 项目中，`index.html` 是项目的入口文件，在项目最外层。\n- 加载`index.html`后，`Vite` 解析 `<script type=\"module\" src=\"xxx\">` 指向的`JavaScript`。\n- `Vue3`**中是通过 **`createApp` 函数创建一个应用实例。\n## 2.3. 【一个简单的效果】\n\n`Vue3`向下兼容`Vue2`语法，且`Vue3`中的模板中可以没有根标签\n\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'App',\n    data() {\n      return {\n        name:'张三',\n        age:18,\n        tel:'13888888888'\n      }\n    },\n    methods:{\n      changeName(){\n        this.name = 'zhang-san'\n      },\n      changeAge(){\n        this.age += 1\n      },\n      showTel(){\n        alert(this.tel)\n      }\n    },\n  }\n</script>\n```\n\n\n# 3. Vue3核心语法\n## 3.1.  【OptionsAPI 与 CompositionAPI】\n\n- `Vue2`的`API`设计是`Options`（配置）风格的。\n- `Vue3`的`API`设计是`Composition`（组合）风格的。\n###  Options API 的弊端\n\n`Options`类型的 `API`，数据、方法、计算属性等，是分散在：`data`、`methods`、`computed`中的，若想新增或者修改一个需求，就需要分别修改：`data`、`methods`、`computed`，不便于维护和复用。\n\n<img src=\"https://s2.loli.net/2024/02/22/kvMuHFr4tSRKGmB.gif\" alt=\"1.gif\" style=\"zoom:70%;border-radius:20px\" /><img src=\"https://s2.loli.net/2024/02/22/lbNcvXTUHEzKe96.gif\" alt=\"2.gif\" style=\"zoom:70%;border-radius:20px\" />\n\n### Composition API 的优势\n\n可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。\n\n<img src=\"https://s2.loli.net/2024/02/22/LVDAY2KZjREvb9F.gif\" alt=\"3.gif\" style=\"height:300px;border-radius:10px\"  /><img src=\"https://s2.loli.net/2024/02/22/hG9SmEjf8d2esDc.gif\" alt=\"4.gif\" style=\"height:300px;border-radius:10px\"  />\n\n> 说明：以上四张动图原创作者：大帅老猿\n\n## 3.2. 【拉开序幕的 setup】\n### setup 概述\n`setup`是`Vue3`中一个新的配置项，值是一个函数，它是 `Composition API` **“表演的舞台**_**”**_，组件中所用到的：数据、方法、计算属性、监视......等等，均配置在`setup`中。\n\n特点如下：\n\n- `setup`函数返回的对象中的内容，可直接在模板中使用。\n- `setup`中访问`this`是`undefined`。\n- `setup`函数会在`beforeCreate`之前调用，它是“领先”所有钩子执行的。\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n    setup(){\n      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）\n      let name = '张三'\n      let age = 18\n      let tel = '13888888888'\n\n      // 方法，原来写在methods中\n      function changeName(){\n        name = 'zhang-san' //注意：此时这么修改name页面是不变化的\n        console.log(name)\n      }\n      function changeAge(){\n        age += 1 //注意：此时这么修改age页面是不变化的\n        console.log(age)\n      }\n      function showTel(){\n        alert(tel)\n      }\n\n      // 返回一个对象，对象中的内容，模板中可以直接使用\n      return {name,age,tel,changeName,changeAge,showTel}\n    }\n  }\n</script>\n```\n### setup 的返回值\n\n- 若返回一个**对象**：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**\n- 若返回一个**函数**：则可以自定义渲染内容，代码如下：\n```html\nsetup(){\n  return ()=> '你好啊！'\n}\n```\n### setup 与 Options API 的关系\n\n- `Vue2` 的配置（`data`、`methos`......）中**可以访问到** `setup`中的属性、方法。\n- 但在`setup`中**不能访问到**`Vue2`的配置（`data`、`methos`......）。\n- 如果与`Vue2`冲突，则`setup`优先。\n### setup 语法糖\n`setup`函数有一个语法糖，这个语法糖，可以让我们把`setup`独立出去，代码如下：\n\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changName\">修改名字</button>\n    <button @click=\"changAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  export default {\n    name:'Person',\n  }\n</script>\n\n<!-- 下面的写法是setup语法糖 -->\n<script setup lang=\"ts\">\n  console.log(this) //undefined\n  \n  // 数据（注意：此时的name、age、tel都不是响应式数据）\n  let name = '张三'\n  let age = 18\n  let tel = '13888888888'\n\n  // 方法\n  function changName(){\n    name = '李四'//注意：此时这么修改name页面是不变化的\n  }\n  function changAge(){\n    console.log(age)\n    age += 1 //注意：此时这么修改age页面是不变化的\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n扩展：上述代码，还需要编写一个不写`setup`的`script`标签，去指定组件名字，比较麻烦，我们可以借助`vite`中的插件简化\n\n1. 第一步：`npm i vite-plugin-vue-setup-extend -D`\n2. 第二步：`vite.config.ts`\n```html\nimport { defineConfig } from 'vite'\nimport VueSetupExtend from 'vite-plugin-vue-setup-extend'\n\nexport default defineConfig({\n  plugins: [ VueSetupExtend() ]\n})\n```\n\n3. 第三步：`<script setup lang=\"ts\" name=\"Person\">`\n## 3.3. 【ref 创建：基本类型的响应式数据】\n\n- **作用：**定义响应式变量。\n- **语法：**`let xxx = ref(初始值)`。\n- **返回值：**一个`RefImpl`的实例对象，简称`ref对象`或`ref`，`ref`对象的`value`**属性是响应式的**。\n- **注意点：**\n   - `JS`中操作数据需要：`xxx.value`，但模板中不需要`.value`，直接使用即可。\n   - 对于`let name = ref('张三')`来说，`name`不是响应式的，`name.value`是响应式的。\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{name}}</h2>\n    <h2>年龄：{{age}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">年龄+1</button>\n    <button @click=\"showTel\">点我查看联系方式</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Person\">\n  import {ref} from 'vue'\n  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。\n  let name = ref('张三')\n  let age = ref(18)\n  // tel就是一个普通的字符串，不是响应式的\n  let tel = '13888888888'\n\n  function changeName(){\n    // JS中操作ref对象时候需要.value\n    name.value = '李四'\n    console.log(name.value)\n\n    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。\n    // name = ref('zhang-san')\n  }\n  function changeAge(){\n    // JS中操作ref对象时候需要.value\n    age.value += 1 \n    console.log(age.value)\n  }\n  function showTel(){\n    alert(tel)\n  }\n</script>\n```\n## 3.4. 【reactive 创建：对象类型的响应式数据】\n\n- **作用：**定义一个**响应式对象**（基本类型不要用它，要用`ref`，否则报错）\n- **语法：**`let 响应式对象= reactive(源对象)`。\n- **返回值：**一个`Proxy`的实例对象，简称：响应式对象。\n- **注意点：**`reactive`定义的响应式数据是“深层次”的。\n```html\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { reactive } from 'vue'\n\n// 数据\nlet car = reactive({ brand: '奔驰', price: 100 })\nlet games = reactive([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = reactive({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nfunction changeCarPrice() {\n  car.price += 10\n}\nfunction changeFirstGame() {\n  games[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.a.b.c.d = 999\n}\n</script>\n```\n## 3.5. 【ref 创建：对象类型的响应式数据】\n\n- 其实`ref`接收的数据可以是：**基本类型**、**对象类型**。\n- 若`ref`接收的是对象类型，内部其实也是调用了`reactive`函数。\n```html\n<template>\n  <div class=\"person\">\n    <h2>汽车信息：一台{{ car.brand }}汽车，价值{{ car.price }}万</h2>\n    <h2>游戏列表：</h2>\n    <ul>\n      <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n    </ul>\n    <h2>测试：{{obj.a.b.c.d}}</h2>\n    <button @click=\"changeCarPrice\">修改汽车价格</button>\n    <button @click=\"changeFirstGame\">修改第一游戏</button>\n    <button @click=\"test\">测试</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\nimport { ref } from 'vue'\n\n// 数据\nlet car = ref({ brand: '奔驰', price: 100 })\nlet games = ref([\n  { id: 'ahsgdyfa01', name: '英雄联盟' },\n  { id: 'ahsgdyfa02', name: '王者荣耀' },\n  { id: 'ahsgdyfa03', name: '原神' }\n])\nlet obj = ref({\n  a:{\n    b:{\n      c:{\n        d:666\n      }\n    }\n  }\n})\n\nconsole.log(car)\n\nfunction changeCarPrice() {\n  car.value.price += 10\n}\nfunction changeFirstGame() {\n  games.value[0].name = '流星蝴蝶剑'\n}\nfunction test(){\n  obj.value.a.b.c.d = 999\n}\n</script>\n```\n## 3.6. 【ref 对比 reactive】\n宏观角度看：\n\n> 1. `ref`用来定义：**基本类型数据**、**对象类型数据**；\n>\n> 2. `reactive`用来定义：**对象类型数据**。\n\n- 区别：\n\n> 1. `ref`创建的变量必须使用`.value`（可以使用`volar`插件自动添加`.value`）。\n>\n>    <img src=\"https://s2.loli.net/2024/02/22/OWeGVjZkt341D5h.png\" alt=\"自动补充value\" style=\"zoom:50%;border-radius:20px\" /> \n>\n> 2. `reactive`重新分配一个新对象，会**失去**响应式（可以使用`Object.assign`去整体替换）。\n\n- 使用原则：\n> 1. 若需要一个基本类型的响应式数据，必须使用`ref`。\n> 2. 若需要一个响应式对象，层级不深，`ref`、`reactive`都可以。\n> 3. 若需要一个响应式对象，且层级较深，推荐使用`reactive`。\n\n## 3.7. 【toRefs 与 toRef】\n\n- 作用：将一个响应式对象中的每一个属性，转换为`ref`对象。\n- 备注：`toRefs`与`toRef`功能一致，但`toRefs`可以批量转换。\n- 语法如下：\n```html\n<template>\n  <div class=\"person\">\n    <h2>姓名：{{person.name}}</h2>\n    <h2>年龄：{{person.age}}</h2>\n    <h2>性别：{{person.gender}}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeGender\">修改性别</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,reactive,toRefs,toRef} from 'vue'\n\n  // 数据\n  let person = reactive({name:'张三', age:18, gender:'男'})\n\t\n  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力\n  let {name,gender} =  toRefs(person)\n\t\n  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力\n  let age = toRef(person,'age')\n\n  // 方法\n  function changeName(){\n    name.value += '~'\n  }\n  function changeAge(){\n    age.value += 1\n  }\n  function changeGender(){\n    gender.value = '女'\n  }\n</script>\n```\n## 3.8. 【computed】\n\n作用：根据已有数据计算出新数据（和`Vue2`中的`computed`作用一致）。\n\n<img src=\"https://s2.loli.net/2024/02/22/vnDHLu7oJBd96tj.gif\" style=\"zoom:20%;\" />  \n\n```html\n<template>\n  <div class=\"person\">\n    姓：<input type=\"text\" v-model=\"firstName\"> <br>\n    名：<input type=\"text\" v-model=\"lastName\"> <br>\n    全名：<span>{{fullName}}</span> <br>\n    <button @click=\"changeFullName\">全名改为：li-si</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"App\">\n  import {ref,computed} from 'vue'\n\n  let firstName = ref('zhang')\n  let lastName = ref('san')\n\n  // 计算属性——只读取，不修改\n  /* let fullName = computed(()=>{\n    return firstName.value + '-' + lastName.value\n  }) */\n\n\n  // 计算属性——既读取又修改\n  let fullName = computed({\n    // 读取\n    get(){\n      return firstName.value + '-' + lastName.value\n    },\n    // 修改\n    set(val){\n      console.log('有人修改了fullName',val)\n      firstName.value = val.split('-')[0]\n      lastName.value = val.split('-')[1]\n    }\n  })\n\n  function changeFullName(){\n    fullName.value = 'li-si'\n  } \n</script>\n```\n## 3.9.【watch】\n\n- 作用：监视数据的变化（和`Vue2`中的`watch`作用一致）\n- 特点：`Vue3`中的`watch`只能监视以下**四种数据**：\n> 1. `ref`定义的数据。\n> 2. `reactive`定义的数据。\n> 3. 函数返回一个值（`getter`函数）。\n> 4. 一个包含上述内容的数组。\n\n我们在`Vue3`中使用`watch`的时候，通常会遇到以下几种情况：\n### * 情况一\n监视`ref`定义的【基本类型】数据：直接写数据名即可，监视的是其`value`值的改变。\n\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况一：监视【ref】定义的【基本类型】数据</h1>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"changeSum\">点我sum+1</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let sum = ref(0)\n  // 方法\n  function changeSum(){\n    sum.value += 1\n  }\n  // 监视，情况一：监视【ref】定义的【基本类型】数据\n  const stopWatch = watch(sum,(newValue,oldValue)=>{\n    console.log('sum变化了',newValue,oldValue)\n    if(newValue >= 10){\n      stopWatch()\n    }\n  })\n</script>\n```\n### * 情况二\n监视`ref`定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。\n\n> 注意：\n>\n> * 若修改的是`ref`定义的对象中的属性，`newValue` 和 `oldValue` 都是新值，因为它们是同一个对象。\n>\n> * 若修改整个`ref`定义的对象，`newValue` 是新值， `oldValue` 是旧值，因为不是同一个对象了。\n\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况二：监视【ref】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,watch} from 'vue'\n  // 数据\n  let person = ref({\n    name:'张三',\n    age:18\n  })\n  // 方法\n  function changeName(){\n    person.value.name += '~'\n  }\n  function changeAge(){\n    person.value.age += 1\n  }\n  function changePerson(){\n    person.value = {name:'李四',age:90}\n  }\n  /* \n    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视\n    watch的第一个参数是：被监视的数据\n    watch的第二个参数是：监视的回调\n    watch的第三个参数是：配置对象（deep、immediate等等.....） \n  */\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  },{deep:true})\n  \n</script>\n```\n### *  情况三\n监视`reactive`定义的【对象类型】数据，且默认开启了深度监视。\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况三：监视【reactive】定义的【对象类型】数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changePerson\">修改整个人</button>\n    <hr>\n    <h2>测试：{{obj.a.b.c}}</h2>\n    <button @click=\"test\">修改obj.a.b.c</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18\n  })\n  let obj = reactive({\n    a:{\n      b:{\n        c:666\n      }\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changePerson(){\n    Object.assign(person,{name:'李四',age:80})\n  }\n  function test(){\n    obj.a.b.c = 888\n  }\n\n  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的\n  watch(person,(newValue,oldValue)=>{\n    console.log('person变化了',newValue,oldValue)\n  })\n  watch(obj,(newValue,oldValue)=>{\n    console.log('Obj变化了',newValue,oldValue)\n  })\n</script>\n```\n### * 情况四\n监视`ref`或`reactive`定义的【对象类型】数据中的**某个属性**，注意点如下：\n\n1. 若该属性值**不是**【对象类型】，需要写成函数形式。\n2. 若该属性值是**依然**是【对象类型】，可直接编，也可写成函数，建议写成函数。\n\n结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。\n\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式\n  /* watch(()=> person.name,(newValue,oldValue)=>{\n    console.log('person.name变化了',newValue,oldValue)\n  }) */\n\n  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数\n  watch(()=>person.car,(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n</script>\n```\n### * 情况五\n监视上述的多个数据\n```html\n<template>\n  <div class=\"person\">\n    <h1>情况五：监视上述的多个数据</h1>\n    <h2>姓名：{{ person.name }}</h2>\n    <h2>年龄：{{ person.age }}</h2>\n    <h2>汽车：{{ person.car.c1 }}、{{ person.car.c2 }}</h2>\n    <button @click=\"changeName\">修改名字</button>\n    <button @click=\"changeAge\">修改年龄</button>\n    <button @click=\"changeC1\">修改第一台车</button>\n    <button @click=\"changeC2\">修改第二台车</button>\n    <button @click=\"changeCar\">修改整个车</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {reactive,watch} from 'vue'\n\n  // 数据\n  let person = reactive({\n    name:'张三',\n    age:18,\n    car:{\n      c1:'奔驰',\n      c2:'宝马'\n    }\n  })\n  // 方法\n  function changeName(){\n    person.name += '~'\n  }\n  function changeAge(){\n    person.age += 1\n  }\n  function changeC1(){\n    person.car.c1 = '奥迪'\n  }\n  function changeC2(){\n    person.car.c2 = '大众'\n  }\n  function changeCar(){\n    person.car = {c1:'雅迪',c2:'爱玛'}\n  }\n\n  // 监视，情况五：监视上述的多个数据\n  watch([()=>person.name,person.car],(newValue,oldValue)=>{\n    console.log('person.car变化了',newValue,oldValue)\n  },{deep:true})\n\n</script>\n```\n## 3.10. 【watchEffect】\n\n* 官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。\n\n* `watch`对比`watchEffect`\n\n  > 1. 都能监听响应式数据的变化，不同的是监听数据变化的方式不同\n  >\n  > 2. `watch`：要明确指出监视的数据\n  >\n  > 3. `watchEffect`：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。\n\n* 示例代码：\n\n  ```html\n  <template>\n    <div class=\"person\">\n      <h1>需求：水温达到50℃，或水位达到20cm，则联系服务器</h1>\n      <h2 id=\"demo\">水温：{{temp}}</h2>\n      <h2>水位：{{height}}</h2>\n      <button @click=\"changePrice\">水温+1</button>\n      <button @click=\"changeSum\">水位+10</button>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"Person\">\n    import {ref,watch,watchEffect} from 'vue'\n    // 数据\n    let temp = ref(0)\n    let height = ref(0)\n  \n    // 方法\n    function changePrice(){\n      temp.value += 10\n    }\n    function changeSum(){\n      height.value += 1\n    }\n  \n    // 用watch实现，需要明确的指出要监视：temp、height\n    watch([temp,height],(value)=>{\n      // 从value中获取最新的temp值、height值\n      const [newTemp,newHeight] = value\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(newTemp >= 50 || newHeight >= 20){\n        console.log('联系服务器')\n      }\n    })\n  \n    // 用watchEffect实现，不用\n    const stopWtach = watchEffect(()=>{\n      // 室温达到50℃，或水位达到20cm，立刻联系服务器\n      if(temp.value >= 50 || height.value >= 20){\n        console.log(document.getElementById('demo')?.innerText)\n        console.log('联系服务器')\n      }\n      // 水温达到100，或水位达到50，取消监视\n      if(temp.value === 100 || height.value === 50){\n        console.log('清理了')\n        stopWtach()\n      }\n    })\n  </script>\n  ```\n  \n  \n\n## 3.11. 【标签的 ref 属性】\n\n作用：用于注册模板引用。\n\n> * 用在普通`DOM`标签上，获取的是`DOM`节点。\n>\n> * 用在组件标签上，获取的是组件实例对象。\n\n用在普通`DOM`标签上：\n\n```html\n<template>\n  <div class=\"person\">\n    <h1 ref=\"title1\">尚硅谷</h1>\n    <h2 ref=\"title2\">前端</h2>\n    <h3 ref=\"title3\">Vue</h3>\n    <input type=\"text\" ref=\"inpt\"> <br><br>\n    <button @click=\"showLog\">点我打印内容</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref} from 'vue'\n\t\n  let title1 = ref()\n  let title2 = ref()\n  let title3 = ref()\n\n  function showLog(){\n    // 通过id获取元素\n    const t1 = document.getElementById('title1')\n    // 打印内容\n    console.log((t1 as HTMLElement).innerText)\n    console.log((<HTMLElement>t1).innerText)\n    console.log(t1?.innerText)\n    \n\t\t/************************************/\n\t\t\n    // 通过ref获取元素\n    console.log(title1.value)\n    console.log(title2.value)\n    console.log(title3.value)\n  }\n</script>\n```\n\n用在组件标签上：\n\n```html\n<!-- 父组件App.vue -->\n<template>\n  <Person ref=\"ren\"/>\n  <button @click=\"test\">测试</button>\n</template>\n\n<script lang=\"ts\" setup name=\"App\">\n  import Person from './components/Person.vue'\n  import {ref} from 'vue'\n\n  let ren = ref()\n\n  function test(){\n    console.log(ren.value.name)\n    console.log(ren.value.age)\n  }\n</script>\n\n\n<!-- 子组件Person.vue中要使用defineExpose暴露内容 -->\n<script lang=\"ts\" setup name=\"Person\">\n  import {ref,defineExpose} from 'vue'\n\t// 数据\n  let name = ref('张三')\n  let age = ref(18)\n  /****************************/\n  /****************************/\n  // 使用defineExpose将组件中的数据交给外部\n  defineExpose({name,age})\n</script>\n```\n\n\n\n## 3.12. 【props】\n\n> ```js\n> // 定义一个接口，限制每个Person对象的格式\n> export interface PersonInter {\n> id:string,\n> name:string,\n>  age:number\n> }\n> \n> // 定义一个自定义类型Persons\n> export type Persons = Array<PersonInter>\n> ```\n>\n> `App.vue`中代码：\n>\n> ```html\n> <template>\n> \t<Person :list=\"persons\"/>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"App\">\n> import Person from './components/Person.vue'\n> import {reactive} from 'vue'\n>  import {type Persons} from './types'\n> \n>  let persons = reactive<Persons>([\n>   {id:'e98219e12',name:'张三',age:18},\n>    {id:'e98219e13',name:'李四',age:19},\n>     {id:'e98219e14',name:'王五',age:20}\n>   ])\n> </script>\n> \n> ```\n>\n> `Person.vue`中代码：\n>\n> ```html\n> <template>\n> <div class=\"person\">\n> <ul>\n>   <li v-for=\"item in list\" :key=\"item.id\">\n>      {{item.name}}--{{item.age}}\n>    </li>\n>  </ul>\n> </div>\n> </template>\n> \n> <script lang=\"ts\" setup name=\"Person\">\n> import {defineProps} from 'vue'\n> import {type PersonInter} from '@/types'\n> \n> // 第一种写法：仅接收\n> // const props = defineProps(['list'])\n> \n> // 第二种写法：接收+限制类型\n> // defineProps<{list:Persons}>()\n> \n> // 第三种写法：接收+限制类型+指定默认值+限制必要性\n> let props = withDefaults(defineProps<{list?:Persons}>(),{\n>   list:()=>[{id:'asdasg01',name:'小猪佩奇',age:18}]\n> })\n> console.log(props)\n> </script>\n> ```\n>\n\n## 3.13. 【生命周期】\n\n* 概念：`Vue`组件实例在创建时要经历一系列的初始化步骤，在此过程中`Vue`会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子\n\n* 规律：\n\n  > 生命周期整体分为四个阶段，分别是：**创建、挂载、更新、销毁**，每个阶段都有两个钩子，一前一后。\n\n* `Vue2`的生命周期\n\n  > 创建阶段：`beforeCreate`、`created`\n  >\n  > 挂载阶段：`beforeMount`、`mounted`\n  >\n  > 更新阶段：`beforeUpdate`、`updated`\n  >\n  > 销毁阶段：`beforeDestroy`、`destroyed`\n\n* `Vue3`的生命周期\n\n  > 创建阶段：`setup`\n  >\n  > 挂载阶段：`onBeforeMount`、`onMounted`\n  >\n  > 更新阶段：`onBeforeUpdate`、`onUpdated`\n  >\n  > 卸载阶段：`onBeforeUnmount`、`onUnmounted`\n\n* 常用的钩子：`onMounted`(挂载完毕)、`onUpdated`(更新完毕)、`onBeforeUnmount`(卸载之前)\n\n* 示例代码：\n\n  ```html\n  <template>\n    <div class=\"person\">\n      <h2>当前求和为：{{ sum }}</h2>\n      <button @click=\"changeSum\">点我sum+1</button>\n    </div>\n  </template>\n  \n  <!-- vue3写法 -->\n  <script lang=\"ts\" setup name=\"Person\">\n    import { \n      ref, \n      onBeforeMount, \n      onMounted, \n      onBeforeUpdate, \n      onUpdated, \n      onBeforeUnmount, \n      onUnmounted \n    } from 'vue'\n  \n    // 数据\n    let sum = ref(0)\n    // 方法\n    function changeSum() {\n      sum.value += 1\n    }\n    console.log('setup')\n    // 生命周期钩子\n    onBeforeMount(()=>{\n      console.log('挂载之前')\n    })\n    onMounted(()=>{\n      console.log('挂载完毕')\n    })\n    onBeforeUpdate(()=>{\n      console.log('更新之前')\n    })\n    onUpdated(()=>{\n      console.log('更新完毕')\n    })\n    onBeforeUnmount(()=>{\n      console.log('卸载之前')\n    })\n    onUnmounted(()=>{\n      console.log('卸载完毕')\n    })\n  </script>\n  ```\n\n## 3.14. 【自定义hook】\n\n- 什么是`hook`？—— 本质是一个函数，把`setup`函数中使用的`Composition API`进行了封装，类似于`vue2.x`中的`mixin`。\n\n- 自定义`hook`的优势：复用代码, 让`setup`中的逻辑更清楚易懂。\n\n示例代码：\n\n- `useSum.ts`中内容如下：\n\n  ```html\n  import {ref,onMounted} from 'vue'\n  \n  export default function(){\n    let sum = ref(0)\n  \n    const increment = ()=>{\n      sum.value += 1\n    }\n    const decrement = ()=>{\n      sum.value -= 1\n    }\n    onMounted(()=>{\n      increment()\n    })\n  \n    //向外部暴露数据\n    return {sum,increment,decrement}\n  }\t\t\n  ```\n  \n- `useDog.ts`中内容如下：\n\n  ```js\n  import {reactive,onMounted} from 'vue'\n  import axios,{AxiosError} from 'axios'\n  \n  export default function(){\n    let dogList = reactive<string[]>([])\n  \n    // 方法\n    async function getDog(){\n      try {\n        // 发请求\n        let {data} = await axios.get('https://dog.ceo/api/breed/pembroke/images/random')\n        // 维护数据\n        dogList.push(data.message)\n      } catch (error) {\n        // 处理错误\n        const err = <AxiosError>error\n        console.log(err.message)\n      }\n    }\n  \n    // 挂载钩子\n    onMounted(()=>{\n      getDog()\n    })\n  \t\n    //向外部暴露数据\n    return {dogList,getDog}\n  }\n  ```\n\n- 组件中具体使用：\n\n  ```html\n  <template>\n    <h2>当前求和为：{{sum}}</h2>\n    <button @click=\"increment\">点我+1</button>\n    <button @click=\"decrement\">点我-1</button>\n    <hr>\n    <img v-for=\"(u,index) in dogList.urlList\" :key=\"index\" :src=\"(u as string)\"> \n    <span v-show=\"dogList.isLoading\">加载中......</span><br>\n    <button @click=\"getDog\">再来一只狗</button>\n  </template>\n  \n  <script lang=\"ts\">\n    import {defineComponent} from 'vue'\n  \n    export default defineComponent({\n      name:'App',\n    })\n  </script>\n  \n  <script setup lang=\"ts\">\n    import useSum from './hooks/useSum'\n    import useDog from './hooks/useDog'\n  \t\n    let {sum,increment,decrement} = useSum()\n    let {dogList,getDog} = useDog()\n  </script>\n  ```\n\n    \n\n---\n\n# 4. 路由\n\n## 4.1. 【对路由的理解】\n\n<img src=\"https://s2.loli.net/2024/02/22/DwoFp1lznKBvS5R.png\" alt=\"image-20231018144351536\" style=\"zoom:20%;border-radius:40px\" /> \n\n## 4.2. 【基本切换效果】\n\n- `Vue3`中要使用`vue-router`的最新版本，目前是`4`版本。\n\n- 路由配置文件代码如下：\n\n  ```js\n  import {createRouter,createWebHistory} from 'vue-router'\n  import Home from '@/pages/Home.vue'\n  import News from '@/pages/News.vue'\n  import About from '@/pages/About.vue'\n  \n  const router = createRouter({\n  \thistory:createWebHistory(),\n  \troutes:[\n  \t\t{\n  \t\t\tpath:'/home',\n  \t\t\tcomponent:Home\n  \t\t},\n  \t\t{\n  \t\t\tpath:'/about',\n  \t\t\tcomponent:About\n  \t\t}\n  \t]\n  })\n  export default router\n  ```\n* `main.ts`代码如下：\n\n  ```js\n  import router from './router/index'\n  app.use(router)\n  \n  app.mount('#app')\n  ```\n\n- `App.vue`代码如下\n\n  ```html\n  <template>\n    <div class=\"app\">\n      <h2 class=\"title\">Vue路由测试</h2>\n      <!-- 导航区 -->\n      <div class=\"navigate\">\n        <RouterLink to=\"/home\" active-class=\"active\">首页</RouterLink>\n        <RouterLink to=\"/news\" active-class=\"active\">新闻</RouterLink>\n        <RouterLink to=\"/about\" active-class=\"active\">关于</RouterLink>\n      </div>\n      <!-- 展示区 -->\n      <div class=\"main-content\">\n        <RouterView></RouterView>\n      </div>\n    </div>\n  </template>\n  \n  <script lang=\"ts\" setup name=\"App\">\n    import {RouterLink,RouterView} from 'vue-router'  \n  </script>\n  ```\n\n## 4.3. 【两个注意点】\n\n> 1. 路由组件通常存放在`pages` 或 `views`文件夹，一般组件通常存放在`components`文件夹。\n>\n> 2. 通过点击导航，视觉效果上“消失” 了的路由组件，默认是被**卸载**掉的，需要的时候再去**挂载**。\n\n## 4.4.【路由器工作模式】\n\n1. `history`模式\n\n   > 优点：`URL`更加美观，不带有`#`，更接近传统的网站`URL`。\n   >\n   > 缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有`404`错误。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHistory(), //history模式\n   > \t/******/\n   > })\n   > ```\n\n2. `hash`模式\n\n   > 优点：兼容性更好，因为不需要服务器端处理路径。\n   >\n   > 缺点：`URL`带有`#`不太美观，且在`SEO`优化方面相对较差。\n   >\n   > ```js\n   > const router = createRouter({\n   > \thistory:createWebHashHistory(), //hash模式\n   > \t/******/\n   > })\n   > ```\n\n## 4.5. 【to的两种写法】\n\n```html\n<!-- 第一种：to的字符串写法 -->\n<router-link active-class=\"active\" to=\"/home\">主页</router-link>\n\n<!-- 第二种：to的对象写法 -->\n<router-link active-class=\"active\" :to=\"{path:'/home'}\">Home</router-link>\n```\n\n## 4.6. 【命名路由】\n\n作用：可以简化路由跳转及传参（后面就讲）。\n\n给路由规则命名：\n\n```js\nroutes:[\n  {\n    name:'zhuye',\n    path:'/home',\n    component:Home\n  },\n  {\n    name:'xinwen',\n    path:'/news',\n    component:News,\n  },\n  {\n    name:'guanyu',\n    path:'/about',\n    component:About\n  }\n]\n```\n\n跳转路由：\n\n```html\n<!--简化前：需要写完整的路径（to的字符串写法） -->\n<router-link to=\"/news/detail\">跳转</router-link>\n\n<!--简化后：直接通过名字跳转（to的对象写法配合name属性） -->\n<router-link :to=\"{name:'guanyu'}\">跳转</router-link>\n```\n\n\n\n## 4.7. 【嵌套路由】\n\n1. 编写`News`的子路由：`Detail.vue`\n\n2. 配置路由规则，使用`children`配置项：\n\n   ```ts\n   const router = createRouter({\n     history:createWebHistory(),\n   \troutes:[\n   \t\t{\n   \t\t\tname:'zhuye',\n   \t\t\tpath:'/home',\n   \t\t\tcomponent:Home\n   \t\t},\n   \t\t{\n   \t\t\tname:'xinwen',\n   \t\t\tpath:'/news',\n   \t\t\tcomponent:News,\n   \t\t\tchildren:[\n   \t\t\t\t{\n   \t\t\t\t\tname:'xiang',\n   \t\t\t\t\tpath:'detail',\n   \t\t\t\t\tcomponent:Detail\n   \t\t\t\t}\n   \t\t\t]\n   \t\t},\n   \t\t{\n   \t\t\tname:'guanyu',\n   \t\t\tpath:'/about',\n   \t\t\tcomponent:About\n   \t\t}\n   \t]\n   })\n   export default router\n   ```\n   \n3. 跳转路由（记得要加完整路径）：\n\n   ```html\n   <router-link to=\"/news/detail\">xxxx</router-link>\n   <!-- 或 -->\n   <router-link :to=\"{path:'/news/detail'}\">xxxx</router-link>\n   ```\n\n4. 记得去`Home`组件中预留一个`<router-view>`\n\n   ```html\n   <template>\n     <div class=\"news\">\n       <nav class=\"news-list\">\n         <RouterLink v-for=\"news in newsList\" :key=\"news.id\" :to=\"{path:'/news/detail'}\">\n           {{news.name}}\n         </RouterLink>\n       </nav>\n       <div class=\"news-detail\">\n         <RouterView/>\n       </div>\n     </div>\n   </template>\n   ```\n\n   \n\n## 4.8. 【路由传参】\n\n### query参数\n\n   1. 传递参数\n\n      ```html\n      <!-- 跳转并携带query参数（to的字符串写法） -->\n      <router-link to=\"/news/detail?a=1&b=2&content=欢迎你\">\n      \t跳转\n      </router-link>\n      \t\t\t\t\n      <!-- 跳转并携带query参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          //name:'xiang', //用name也可以跳转\n          path:'/news/detail',\n          query:{\n            id:news.id,\n            title:news.title,\n            content:news.content\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印query参数\n      console.log(route.query)\n      ```\n\n\n### params参数\n\n   1. 传递参数\n\n      ```html\n      <!-- 跳转并携带params参数（to的字符串写法） -->\n      <RouterLink :to=\"`/news/detail/001/新闻001/内容001`\">{{news.title}}</RouterLink>\n      \t\t\t\t\n      <!-- 跳转并携带params参数（to的对象写法） -->\n      <RouterLink \n        :to=\"{\n          name:'xiang', //用name跳转\n          params:{\n            id:news.id,\n            title:news.title,\n            content:news.title\n          }\n        }\"\n      >\n        {{news.title}}\n      </RouterLink>\n      ```\n\n   2. 接收参数：\n\n      ```js\n      import {useRoute} from 'vue-router'\n      const route = useRoute()\n      // 打印params参数\n      console.log(route.params)\n      ```\n\n> 备注1：传递`params`参数时，若使用`to`的对象写法，必须使用`name`配置项，不能用`path`。\n>\n> 备注2：传递`params`参数时，需要提前在规则中占位。\n\n## 4.9. 【路由的props配置】\n\n作用：让路由组件更方便的收到参数（可以将路由参数作为`props`传给组件）\n\n```js\n{\n\tname:'xiang',\n\tpath:'detail/:id/:title/:content',\n\tcomponent:Detail,\n\n  // props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件\n  // props:{a:1,b:2,c:3}, \n\n  // props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件\n  // props:true\n  \n  // props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件\n  props(route){\n    return route.query\n  }\n}\n```\n\n## 4.10. 【 replace属性】\n\n  1. 作用：控制路由跳转时操作浏览器历史记录的模式。\n\n  2. 浏览器的历史记录有两种写入方式：分别为```push```和```replace```：\n\n     - ```push```是追加历史记录（默认值）。\n     - `replace`是替换当前记录。\n\n  3. 开启`replace`模式：\n\n     ```html\n     <RouterLink replace .......>News</RouterLink>\n     ```\n\n## 4.11. 【编程式导航】\n\n路由组件的两个重要的属性：`$route`和`$router`变成了两个`hooks`\n\n```js\nimport {useRoute,useRouter} from 'vue-router'\n\nconst route = useRoute()\nconst router = useRouter()\n\nconsole.log(route.query)\nconsole.log(route.parmas)\nconsole.log(router.push)\nconsole.log(router.replace)\n```\n\n## 4.12. 【重定向】\n\n1. 作用：将特定的路径，重新定向到已有路由。\n\n2. 具体编码：\n\n   ```js\n   {\n       path:'/',\n       redirect:'/about'\n   }\n   ```\n\n\n\n# 5. pinia \n\n## 5.1【准备一个效果】\n\n<img src=\"https://s2.loli.net/2024/02/22/GbKyu4poHJZtgw2.gif\" alt=\"pinia_example\" style=\"zoom:30%;border:3px solid\" /> \n\n## 5.2【搭建 pinia 环境】\n\n第一步：`npm install pinia`\n\n第二步：操作`src/main.ts`\n\n```ts\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\n/* 引入createPinia，用于创建pinia */\nimport { createPinia } from 'pinia'\n\n/* 创建pinia */\nconst pinia = createPinia()\nconst app = createApp(App)\n\n/* 使用插件 */{}\napp.use(pinia)\napp.mount('#app')\n```\n\n此时开发者工具中已经有了`pinia`选项\n\n<img src=\"https://s2.loli.net/2024/02/22/avODA9IErUTojih.png\" style=\"zoom:80%;border:1px solid black;border-radius:10px\" />\n\n## 5.3【存储+读取数据】\n\n1. `Store`是一个保存：**状态**、**业务逻辑** 的实体，每个组件都可以**读取**、**写入**它。\n\n2. 它有三个概念：`state`、`getter`、`action`，相当于组件中的： `data`、 `computed` 和 `methods`。\n\n3. 具体编码：`src/store/count.ts`\n\n   ```ts\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useCountStore = defineStore('count',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         sum:6\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n\n4. 具体编码：`src/store/talk.ts`\n\n   ```js\n   // 引入defineStore用于创建store\n   import {defineStore} from 'pinia'\n   \n   // 定义并暴露一个store\n   export const useTalkStore = defineStore('talk',{\n     // 动作\n     actions:{},\n     // 状态\n     state(){\n       return {\n         talkList:[\n           {id:'yuysada01',content:'你今天有点怪，哪里怪？怪好看的！'},\n        \t\t{id:'yuysada02',content:'草莓、蓝莓、蔓越莓，你想我了没？'},\n           {id:'yuysada03',content:'心里给你留了一块地，我的死心塌地'}\n         ]\n       }\n     },\n     // 计算\n     getters:{}\n   })\n   ```\n   \n5. 组件中使用`state`中的数据\n\n   ```html\n   <template>\n     <h2>当前求和为：{{ sumStore.sum }}</h2>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     // 引入对应的useXxxxxStore\t\n     import {useSumStore} from '@/store/sum'\n     \n     // 调用useXxxxxStore得到对应的store\n     const sumStore = useSumStore()\n   </script>\n   ```\n\n   ```html\n   <template>\n   \t<ul>\n       <li v-for=\"talk in talkStore.talkList\" :key=\"talk.id\">\n         {{ talk.content }}\n       </li>\n     </ul>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Count\">\n     import axios from 'axios'\n     import {useTalkStore} from '@/store/talk'\n   \n     const talkStore = useTalkStore()\n   </script>\n   ```\n\n   \n\n## 5.4.【修改数据】(三种方式)\n\n1. 第一种修改方式，直接修改\n\n   ```ts\n   countStore.sum = 666\n   ```\n\n2. 第二种修改方式：批量修改\n\n   ```ts\n   countStore.$patch({\n     sum:999,\n     school:'atguigu'\n   })\n   ```\n\n3. 第三种修改方式：借助`action`修改（`action`中可以编写一些业务逻辑）\n\n   ```js\n   import { defineStore } from 'pinia'\n   \n   export const useCountStore = defineStore('count', {\n     /*************/\n     actions: {\n       //加\n       increment(value:number) {\n         if (this.sum < 10) {\n           //操作countStore中的sum\n           this.sum += value\n         }\n       },\n       //减\n       decrement(value:number){\n         if(this.sum > 1){\n           this.sum -= value\n         }\n       }\n     },\n     /*************/\n   })\n   ```\n\n4. 组件中调用`action`即可\n\n   ```js\n   // 使用countStore\n   const countStore = useCountStore()\n   \n   // 调用对应action\n   countStore.incrementOdd(n.value)\n   ```\n\n\n## 5.5.【storeToRefs】\n\n- 借助`storeToRefs`将`store`中的数据转为`ref`对象，方便在模板中使用。\n- 注意：`pinia`提供的`storeToRefs`只会将数据做转换，而`Vue`的`toRefs`会转换`store`中数据。\n\n```html\n<template>\n\t<div class=\"count\">\n\t\t<h2>当前求和为：{{sum}}</h2>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Count\">\n  import { useCountStore } from '@/store/count'\n  /* 引入storeToRefs */\n  import { storeToRefs } from 'pinia'\n\n\t/* 得到countStore */\n  const countStore = useCountStore()\n  /* 使用storeToRefs转换countStore，随后解构 */\n  const {sum} = storeToRefs(countStore)\n</script>\n\n```\n\n## 5.6.【getters】\n\n  1. 概念：当`state`中的数据，需要经过处理后再使用时，可以使用`getters`配置。\n\n  2. 追加```getters```配置。\n\n     ```js\n     // 引入defineStore用于创建store\n     import {defineStore} from 'pinia'\n     \n     // 定义并暴露一个store\n     export const useCountStore = defineStore('count',{\n       // 动作\n       actions:{\n         /************/\n       },\n       // 状态\n       state(){\n         return {\n           sum:1,\n           school:'atguigu'\n         }\n       },\n       // 计算\n       getters:{\n         bigSum:(state):number => state.sum *10,\n         upperSchool():string{\n           return this. school.toUpperCase()\n         }\n       }\n     })\n     ```\n\n  3. 组件中读取数据：\n\n     ```js\n     const {increment,decrement} = countStore\n     let {sum,school,bigSum,upperSchool} = storeToRefs(countStore)\n     ```\n\n     \n\n## 5.7.【$subscribe】\n\n通过 store 的 `$subscribe()` 方法侦听 `state` 及其变化\n\n```ts\ntalkStore.$subscribe((mutate,state)=>{\n  console.log('LoveTalk',mutate,state)\n  localStorage.setItem('talk',JSON.stringify(talkList.value))\n})\n```\n\n\n\n## 5.8. 【store组合式写法】\n\n```ts\nimport {defineStore} from 'pinia'\nimport axios from 'axios'\nimport {nanoid} from 'nanoid'\nimport {reactive} from 'vue'\n\nexport const useTalkStore = defineStore('talk',()=>{\n  // talkList就是state\n  const talkList = reactive(\n    JSON.parse(localStorage.getItem('talkList') as string) || []\n  )\n\n  // getATalk函数相当于action\n  async function getATalk(){\n    // 发请求，下面这行的写法是：连续解构赋值+重命名\n    let {data:{content:title}} = await axios.get('https://api.uomg.com/api/rand.qinghua?format=json')\n    // 把请求回来的字符串，包装成一个对象\n    let obj = {id:nanoid(),title}\n    // 放到数组中\n    talkList.unshift(obj)\n  }\n  return {talkList,getATalk}\n})\n```\n\n\n\n# 6. 组件通信\n\n**`Vue3`组件通信和`Vue2`的区别：**\n\n* 移出事件总线，使用`mitt`代替。\n\n- `vuex`换成了`pinia`。\n- 把`.sync`优化到了`v-model`里面了。\n- 把`$listeners`所有的东西，合并到`$attrs`中了。\n- `$children`被砍掉了。\n\n**常见搭配形式：**\n\n<img src=\"https://s2.loli.net/2024/02/22/WZaSR8Mor15mfIT.png\" alt=\"image-20231119185900990\" style=\"zoom:60%;\" /> \n\n## 6.1. 【props】\n\n概述：`props`是使用频率最高的一种通信方式，常用与 ：**父 ↔ 子**。\n\n- 若 **父传子**：属性值是**非函数**。\n- 若 **子传父**：属性值是**函数**。\n\n父组件：\n\n```html\n<template>\n  <div class=\"father\">\n    <h3>父组件，</h3>\n\t\t<h4>我的车：{{ car }}</h4>\n\t\t<h4>儿子给的玩具：{{ toy }}</h4>\n\t\t<Child :car=\"car\" :getToy=\"getToy\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\t// 数据\n\tconst car = ref('奔驰')\n\tconst toy = ref()\n\t// 方法\n\tfunction getToy(value:string){\n\t\ttoy.value = value\n\t}\n</script>\n```\n\n子组件\n\n```html\n<template>\n  <div class=\"child\">\n    <h3>子组件</h3>\n\t\t<h4>我的玩具：{{ toy }}</h4>\n\t\t<h4>父给我的车：{{ car }}</h4>\n\t\t<button @click=\"getToy(toy)\">玩具给父亲</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport { ref } from \"vue\";\n\tconst toy = ref('奥特曼')\n\t\n\tdefineProps(['car','getToy'])\n</script>\n```\n\n## 6.2. 【自定义事件】\n\n1. 概述：自定义事件常用于：**子 => 父。**\n2. 注意区分好：原生事件、自定义事件。\n\n- 原生事件：\n  - 事件名是特定的（`click`、`mosueenter`等等）\t\n  - 事件对象`$event`: 是包含事件相关信息的对象（`pageX`、`pageY`、`target`、`keyCode`）\n- 自定义事件：\n  - 事件名是任意名称\n  - <strong style=\"color:red\">事件对象`$event`: 是调用`emit`时所提供的数据，可以是任意类型！！！</strong >\n\n3. 示例：\n\n   ```html\n   <!--在父组件中，给子组件绑定自定义事件：-->\n   <Child @send-toy=\"toy = $event\"/>\n   \n   <!--注意区分原生事件与自定义事件中的$event-->\n   <button @click=\"toy = $event\">测试</button>\n   ```\n\n   ```js\n   //子组件中，触发事件：\n   this.$emit('send-toy', 具体数据)\n   ```\n\n## 6.3. 【mitt】\n\n概述：与消息订阅与发布（`pubsub`）功能类似，可以实现任意组件间通信。\n\n安装`mitt`\n\n```shell\nnpm i mitt\n```\n\n新建文件：`src\\utils\\emitter.ts`\n\n```javascript\n// 引入mitt \nimport mitt from \"mitt\";\n\n// 创建emitter\nconst emitter = mitt()\n\n/*\n  // 绑定事件\n  emitter.on('abc',(value)=>{\n    console.log('abc事件被触发',value)\n  })\n  emitter.on('xyz',(value)=>{\n    console.log('xyz事件被触发',value)\n  })\n\n  setInterval(() => {\n    // 触发事件\n    emitter.emit('abc',666)\n    emitter.emit('xyz',777)\n  }, 1000);\n\n  setTimeout(() => {\n    // 清理事件\n    emitter.all.clear()\n  }, 3000); \n*/\n\n// 创建并暴露mitt\nexport default emitter\n```\n\n接收数据的组件中：绑定事件、同时在销毁前解绑事件：\n\n```typescript\nimport emitter from \"@/utils/emitter\";\nimport { onUnmounted } from \"vue\";\n\n// 绑定事件\nemitter.on('send-toy',(value)=>{\n  console.log('send-toy事件被触发',value)\n})\n\nonUnmounted(()=>{\n  // 解绑事件\n  emitter.off('send-toy')\n})\n```\n\n【第三步】：提供数据的组件，在合适的时候触发事件\n\n```javascript\nimport emitter from \"@/utils/emitter\";\n\nfunction sendToy(){\n  // 触发事件\n  emitter.emit('send-toy',toy.value)\n}\n```\n\n**注意这个重要的内置关系，总线依赖着这个内置关系**\n\n## 6.4.【v-model】\n\n1. 概述：实现 **父↔子** 之间相互通信。\n\n2. 前序知识 —— `v-model`的本质\n\n   ```html\n   <!-- 使用v-model指令 -->\n   <input type=\"text\" v-model=\"userName\">\n   \n   <!-- v-model的本质是下面这行代码 -->\n   <input \n     type=\"text\" \n     :value=\"userName\" \n     @input=\"userName =(<HTMLInputElement>$event.target).value\"\n   >\n   ```\n\n3. 组件标签上的`v-model`的本质：`:moldeValue` ＋ `update:modelValue`事件。\n\n   ```html\n   <!-- 组件标签上使用v-model指令 -->\n   <AtguiguInput v-model=\"userName\"/>\n   \n   <!-- 组件标签上v-model的本质 -->\n   <AtguiguInput :modelValue=\"userName\" @update:model-value=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```html\n   <template>\n     <div class=\"box\">\n       <!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 -->\n   \t\t<!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件-->\n       <input \n          type=\"text\" \n          :value=\"modelValue\" \n          @input=\"emit('update:model-value',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['modelValue'])\n     // 声明事件\n     const emit = defineEmits(['update:model-value'])\n   </script>\n   ```\n\n4. 也可以更换`value`，例如改成`abc`\n\n   ```html\n   <!-- 也可以更换value，例如改成abc-->\n   <AtguiguInput v-model:abc=\"userName\"/>\n   \n   <!-- 上面代码的本质如下 -->\n   <AtguiguInput :abc=\"userName\" @update:abc=\"userName = $event\"/>\n   ```\n\n   `AtguiguInput`组件中：\n\n   ```html\n   <template>\n     <div class=\"box\">\n       <input \n          type=\"text\" \n          :value=\"abc\" \n          @input=\"emit('update:abc',$event.target.value)\"\n       >\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"AtguiguInput\">\n     // 接收props\n     defineProps(['abc'])\n     // 声明事件\n     const emit = defineEmits(['update:abc'])\n   </script>\n   ```\n\n5. 如果`value`可以更换，那么就可以在组件标签上多次使用`v-model`\n\n   ```html\n   <AtguiguInput v-model:abc=\"userName\" v-model:xyz=\"password\"/>\n   ```\n\n   \n\n\n## 6.5.【$attrs 】\n\n1. 概述：`$attrs`用于实现**当前组件的父组件**，向**当前组件的子组件**通信（**祖→孙**）。\n\n2. 具体说明：`$attrs`是一个对象，包含所有父组件传入的标签属性。\n\n   >  注意：`$attrs`会自动排除`props`中声明的属性(可以认为声明过的 `props` 被子组件自己“消费”了)\n\n父组件：\n\n```html\n<template>\n  <div class=\"father\">\n    <h3>父组件</h3>\n\t\t<Child :a=\"a\" :b=\"b\" :c=\"c\" :d=\"d\" v-bind=\"{x:100,y:200}\" :updateA=\"updateA\"/>\n  </div>\n</template>\n\n<script setup lang=\"ts\" name=\"Father\">\n\timport Child from './Child.vue'\n\timport { ref } from \"vue\";\n\tlet a = ref(1)\n\tlet b = ref(2)\n\tlet c = ref(3)\n\tlet d = ref(4)\n\n\tfunction updateA(value){\n\t\ta.value = value\n\t}\n</script>\n```\n\n子组件：\n\n```html\n<template>\n\t<div class=\"child\">\n\t\t<h3>子组件</h3>\n\t\t<GrandChild v-bind=\"$attrs\"/>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"Child\">\n\timport GrandChild from './GrandChild.vue'\n</script>\n```\n\n孙组件：\n\n```html\n<template>\n\t<div class=\"grand-child\">\n\t\t<h3>孙组件</h3>\n\t\t<h4>a：{{ a }}</h4>\n\t\t<h4>b：{{ b }}</h4>\n\t\t<h4>c：{{ c }}</h4>\n\t\t<h4>d：{{ d }}</h4>\n\t\t<h4>x：{{ x }}</h4>\n\t\t<h4>y：{{ y }}</h4>\n\t\t<button @click=\"updateA(666)\">点我更新A</button>\n\t</div>\n</template>\n\n<script setup lang=\"ts\" name=\"GrandChild\">\n\tdefineProps(['a','b','c','d','x','y','updateA'])\n</script>\n```\n\n## 6.6. 【$refs、$parent】\n\n1. 概述：\n\n   * `$refs`用于 ：**父→子。**\n   * `$parent`用于：**子→父。**\n\n2. 原理如下：\n\n   | 属性      | 说明                                                     |\n   | --------- | -------------------------------------------------------- |\n   | `$refs`   | 值为对象，包含所有被`ref`属性标识的`DOM`元素或组件实例。 |\n   | `$parent` | 值为对象，当前组件的父组件实例对象。                     |\n\n## 6.7. 【provide、inject】\n\n1. 概述：实现**祖孙组件**直接通信\n\n2. 具体使用：\n\n   * 在祖先组件中通过`provide`配置向后代组件提供数据\n   * 在后代组件中通过`inject`配置来声明接收数据\n\n4. 具体编码：\n\n   【第一步】父组件中，使用`provide`提供数据\n\n   ```html\n   <template>\n     <div class=\"father\">\n       <h3>父组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"money += 1\">资产+1</button>\n       <button @click=\"car.price += 1\">汽车价格+1</button>\n       <Child/>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"Father\">\n     import Child from './Child.vue'\n     import { ref,reactive,provide } from \"vue\";\n     // 数据\n     let money = ref(100)\n     let car = reactive({\n       brand:'奔驰',\n       price:100\n     })\n     // 用于更新money的方法\n     function updateMoney(value:number){\n       money.value += value\n     }\n     // 提供数据\n     provide('moneyContext',{money,updateMoney})\n     provide('car',car)\n   </script>\n   ```\n   \n   > 注意：子组件中不用编写任何东西，是不受到任何打扰的\n   \n   【第二步】孙组件中使用`inject`配置项接受数据。\n   \n   ```html\n   <template>\n     <div class=\"grand-child\">\n       <h3>我是孙组件</h3>\n       <h4>资产：{{ money }}</h4>\n       <h4>汽车：{{ car }}</h4>\n       <button @click=\"updateMoney(6)\">点我</button>\n     </div>\n   </template>\n   \n   <script setup lang=\"ts\" name=\"GrandChild\">\n     import { inject } from 'vue';\n     // 注入数据\n    let {money,updateMoney} = inject('moneyContext',{money:0,updateMoney:(x:number)=>{}})\n     let car = inject('car')\n   </script>\n   ```\n\n\n## 6.8. 【pinia】\n\n参考之前`pinia`部分的讲解\n\n## 6.9. 【slot】\n\n### 1. 默认插槽\n\n![img](https://s2.loli.net/2024/02/22/KDmNvArchICu3PF.png)\n\n```html\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <ul>\n            <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n          </ul>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <!-- 默认插槽 -->\n            <slot></slot>\n          </div>\n        </template>\n```\n\n### 2. 具名插槽\n\n```html\n父组件中：\n        <Category title=\"今日热门游戏\">\n          <template v-slot:s1>\n            <ul>\n              <li v-for=\"g in games\" :key=\"g.id\">{{ g.name }}</li>\n            </ul>\n          </template>\n          <template #s2>\n            <a href=\"\">更多</a>\n          </template>\n        </Category>\n子组件中：\n        <template>\n          <div class=\"item\">\n            <h3>{{ title }}</h3>\n            <slot name=\"s1\"></slot>\n            <slot name=\"s2\"></slot>\n          </div>\n        </template>\n```\n\n### 3. 作用域插槽 \n\n1. 理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在`News`组件中，但使用数据所遍历出来的结构由`App`组件决定）\n\n3. 具体编码：\n\n   ```html\n   父组件中：\n         <Game v-slot=\"params\">\n         <!-- <Game v-slot:default=\"params\"> -->\n         <!-- <Game #default=\"params\"> -->\n           <ul>\n             <li v-for=\"g in params.games\" :key=\"g.id\">{{ g.name }}</li>\n           </ul>\n         </Game>\n   \n   子组件中：\n         <template>\n           <div class=\"category\">\n             <h2>今日游戏榜单</h2>\n             <slot :games=\"games\" a=\"哈哈\"></slot>\n           </div>\n         </template>\n   \n         <script setup lang=\"ts\" name=\"Category\">\n           import {reactive} from 'vue'\n           let games = reactive([\n             {id:'asgdytsa01',name:'英雄联盟'},\n             {id:'asgdytsa02',name:'王者荣耀'},\n             {id:'asgdytsa03',name:'红色警戒'},\n             {id:'asgdytsa04',name:'斗罗大陆'}\n           ])\n         </script>\n   ```\n\n\n\n# 7. 其它 API\n\n## 7.1.【shallowRef 与 shallowReactive 】\n\n### `shallowRef`\n\n1. 作用：创建一个响应式数据，但只对顶层属性进行响应式处理。\n\n2. 用法：\n\n   ```js\n   let myVar = shallowRef(initialValue);\n   ```\n\n3. 特点：只跟踪引用值的变化，不关心值内部的属性变化。\n\n### `shallowReactive`\n\n1. 作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的\n\n2. 用法：\n\n   ```js\n   const myObj = shallowReactive({ ... });\n   ```\n\n3. 特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。\n\n### 总结\n\n> 通过使用 [`shallowRef()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowref) 和 [`shallowReactive()`](https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive) 来绕开深度响应。浅层式 `API` 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。\n\n\n\n## 7.2.【readonly 与 shallowReadonly】\n\n### **`readonly`**\n\n1. 作用：用于创建一个对象的深只读副本。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const readOnlyCopy = readonly(original);\n   ```\n\n3. 特点：\n\n   * 对象的所有嵌套属性都将变为只读。\n   * 任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。\n\n4. 应用场景：\n   * 创建不可变的状态快照。\n   * 保护全局状态或配置不被修改。\n\n### **`shallowReadonly`**\n\n1. 作用：与 `readonly` 类似，但只作用于对象的顶层属性。\n\n2. 用法：\n\n   ```js\n   const original = reactive({ ... });\n   const shallowReadOnlyCopy = shallowReadonly(original);\n   ```\n\n3. 特点：\n\n   * 只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。\n\n   * 适用于只需保护对象顶层属性的场景。\n\n     \n\n## 7.3.【toRaw 与 markRaw】\n\n### `toRaw`\n\n1. 作用：用于获取一个响应式对象的原始对象， `toRaw` 返回的对象不再是响应式的，不会触发视图更新。\n\n   > 官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。\n\n   > 何时使用？ —— 在需要将响应式对象传递给非 `Vue` 的库或外部系统时，使用 `toRaw` 可以确保它们收到的是普通对象\n\n2. 具体编码：\n\n   ```js\n   import { reactive,toRaw,markRaw,isReactive } from \"vue\";\n   \n   /* toRaw */\n   // 响应式对象\n   let person = reactive({name:'tony',age:18})\n   // 原始对象\n   let rawPerson = toRaw(person)\n   \n   \n   /* markRaw */\n   let citysd = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   console.log(isReactive(person))\n   console.log(isReactive(rawPerson))\n   console.log(isReactive(citys))\n   console.log(isReactive(citys2))\n   ```\n\n### `markRaw`\n\n1. 作用：标记一个对象，使其**永远不会**变成响应式的。\n\n   > 例如使用`mockjs`时，为了防止误把`mockjs`变为响应式对象，可以使用 `markRaw` 去标记`mockjs`\n\n2. 编码：\n\n   ```js\n   /* markRaw */\n   let citys = markRaw([\n     {id:'asdda01',name:'北京'},\n     {id:'asdda02',name:'上海'},\n     {id:'asdda03',name:'天津'},\n     {id:'asdda04',name:'重庆'}\n   ])\n   // 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了\n   let citys2 = reactive(citys)\n   ```\n\n## 7.4.【customRef】\n\n作用：创建一个自定义的`ref`，并对其依赖项跟踪和更新触发进行逻辑控制。\n\n实现防抖效果（`useSumRef.ts`）：\n\n```typescript\nimport {customRef } from \"vue\";\n\nexport default function(initValue:string,delay:number){\n  let msg = customRef((track,trigger)=>{\n    let timer:number\n    return {\n      get(){\n        track() // 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新\n        return initValue\n      },\n      set(value){\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n          initValue = value\n          trigger() //通知Vue数据msg变化了\n        }, delay);\n      }\n    }\n  }) \n  return {msg}\n}\n```\n\n组件中使用：\n\n\n\n\n\n# 8. Vue3新组件\n\n## 8.1. 【Teleport】\n\n- 什么是Teleport？—— Teleport 是一种能够将我们的**组件html结构**移动到指定位置的技术。\n\n```html\n<teleport to='body' >\n    <div class=\"modal\" v-show=\"isShow\">\n      <h2>我是一个弹窗</h2>\n      <p>我是弹窗中的一些内容</p>\n      <button @click=\"isShow = false\">关闭弹窗</button>\n    </div>\n</teleport>\n```\n\n## 8.2. 【Suspense】\n\n-  等待异步组件时渲染一些额外内容，让应用有更好的用户体验 \n-  使用步骤： \n   -  异步引入组件\n   -  使用`Suspense`包裹组件，并配置好`default` 与 `fallback`\n\n```tsx\nimport { defineAsyncComponent,Suspense } from \"vue\";\nconst Child = defineAsyncComponent(()=>import('./Child.vue'))\n```\n\n```html\n<template>\n    <div class=\"app\">\n        <h3>我是App组件</h3>\n        <Suspense>\n          <template v-slot:default>\n            <Child/>\n          </template>\n          <template v-slot:fallback>\n            <h3>加载中.......</h3>\n          </template>\n        </Suspense>\n    </div>\n</template>\n```\n\n\n\n## 8.3.【全局API转移到应用对象】\n\n- `app.component`\n- `app.config`\n- `app.directive`\n- `app.mount`\n- `app.unmount`\n- `app.use`\n\n## 8.4.【其他】\n\n- 过渡类名 `v-enter` 修改为 `v-enter-from`、过渡类名 `v-leave` 修改为 `v-leave-from`。\n\n\n- `keyCode` 作为 `v-on` 修饰符的支持。\n\n- `v-model` 指令在组件上的使用已经被重新设计，替换掉了 `v-bind.sync。`\n\n- `v-if` 和 `v-for` 在同一个元素身上使用时的优先级发生了变化。\n\n- 移除了`$on`、`$off` 和 `$once` 实例方法。\n\n- 移除了过滤器 `filter`。\n\n- 移除了`$children` 实例 `propert`。\n\n  ......\n","tags":["学习笔记","vue3.0"],"categories":["_A2-前端","vue3.0"]},{"title":"解压密码是中文 怎么办？","url":"/2024/02/04/解压密码是中文-怎么办？/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>解压密码是中文 怎么办？</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>一、安装unar软件包：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Linux（Debian系列）：</strong></font>\n\n```shell\napt install unar\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>Linux（RedHat系列）：</strong></font>\n\n```shell\nyum install unar\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>MacOS：</strong></font>\n\n```shell\nbrew install unar \n```\n\n<font color=#f26522 size=4 face=宋体><strong>二、使用unar来解压：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>例如：使用密码“数据科学交流群189158789”解压“机器学习.zip”到目录“机器学习2”的命令如下：</strong></font>\n\n```\nunar -e GBK -E GBK -p 数据科学交流群189158789 -o ./机器学习2 机器学习.zip\n```\n\n","tags":["中文解压密码"],"categories":["_A9-错误解决","中文解压密码"]},{"title":"使用coder-server打造在线IDE","url":"/2024/01/27/使用coder-server打造在线IDE/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>使用coder-server打造在线IDE：</strong></font>\n\n<!--more-->\n\n## <font color=#f26522 size=4 face=宋体><strong>前言：</strong></font>\n\n在平时的学习工作中，我们经常会用到代码编辑器，Vscode已经成为我们的首选。但是本地编辑器有个弊端就是当我们在家庭和公司之间移动的时候，无法连续编码。这个时候就有很多新兴的在线编辑器（web IDE）出现了，目前我最常用的就是腾讯的cloudstudio，但是其每天免费4小时的使用时长在某些时候可能不够用，这个时候我们就需要拥有自己的在线编辑器了。今天我们就一起来介绍下在线编辑器coder-server环境的搭建和基础使用。\n\n## <font color=#f26522 size=4 face=宋体><strong>关于cloud_studio</strong></font>\n\n首先声明，这不是广告。仅仅因为其免费好用。\n\n我们可以在[coding.net](https://coding.net/)注册账号，登录后，点击导航栏的Cloud Studio即可进入。\n![cloudstudio](https://s2.loli.net/2024/01/27/xsLaieJVWdAmqNP.png)\n\n然后我们根据自己需要的环境类型创建虚拟环境即可。\n\n![环境类型](https://s2.loli.net/2024/01/27/S3OjfvNbCHYm9hK.png)\n\n然后你就得到了一个非常方便好用的在线编辑器。\n\n![cloudstudio8c4g](https://s2.loli.net/2024/01/27/ClBLONA4EgbaZH5.png)\n\n> 从上图可以看到，这台服务器的性能还是很不错的，8核4G很强了，免费的还要什么自行车。\n\ncloudstudio非常适合白嫖党，但是今天它不是主角。\n\n## <font color=#00b2c2 size=5 face=宋体><strong>coder-server：</strong></font>\n\ncoder-server一个开源的基于vscode开发的在线编辑器工具。其支持二进制部署、Docker部署、HemlChart部署，目前还不支持windows部署，但是已经足够我们使用了。\n\n具体部署可以参考官方文档：https://coder.com/docs/code-server/latest/install。\n\n这里我们选择相对简单快捷的方式，Docker部署。\n\n### <font color=#f26522 size=4 face=宋体><strong>前置条件</strong></font>\n\n在部署coder-server前，你需要准备一台Linux虚机（建议CentOS 7），你可以去云厂商购买（用于生产），也可以使用VMware在个人电脑创建虚机（用于学习）。\n\n我是购买的腾讯云的轻量应用服务器。\n\n### <font color=#f26522 size=4 face=宋体><strong>拉取coder-server镜像</strong></font>\n\n```bash\ndocker pull codercom/code-server\n```\n\n### <font color=#f26522 size=4 face=宋体><strong>启动coder-server</strong></font>\n\n```bash\ndocker run -d  --name coder-server -p 8082:8080 -e PASSWORD=123 codercom/code-server:latest\n```\n\n启动完成后，我们需要在云服务器的防火墙菜单中打开8082端口，然后就可以使用云服务器的公网ip进行登录使用了。（如果你是本地虚拟机，不需要处理防火墙，直接在浏览器访问虚拟机的ip:8082即可）\n\n### <font color=#f26522 size=4 face=宋体><strong>访问coder-server</strong></font>\n\n我们在浏览器访问云服务器的公网ip:8082。\n\n![coder-server登录界面](https://s2.loli.net/2024/01/27/pkbsfB8w5rvVyM1.png)\n\n输入密码123登录。\n![loginok](https://s2.loli.net/2024/01/27/1HuUbnL8NZvj62T.png)\n\n哇哦，这不就是vscode本vscode嘛。\n\n### <font color=#00b2c2 size=5 face=宋体><strong>安装插件：</strong></font>\n\ncoder-server和vscode一样，支持安装插件，我选择了几个常用的插件安装测试，均完美支持。\n\n![plugin](https://s2.loli.net/2024/01/27/luRLOitqv37s1I2.png)\n\n编码体验\n\n简单体验了下，实际编码体验和vscode没有差别。大家可以放心使用。\n\n### <font color=#f26522 size=4 face=宋体><strong>Tips</strong></font>\n\n因为coder-server专注于编辑器而对语言本身稍有忽略，比如其内置的python没有pip3工具，需要自己安装；而且内置的deb源速度较慢，需要自行替换。\n\n#### <font color=#f26522 size=4 face=宋体><strong>修改deb源</strong></font>\n\n因为自带的vi不要用，所以我们使用以下方式修改deb源，参考：[常用工具大全](https://www.u1s1.vip/archives/tools)。\n\n1. 复制国内源地址到编辑器的文件aaa中\n2. 使用命令 `cat aaa > /etc/apt/sources.list`\n3. 使用命令`apt update`更新源\n\n#### <font color=#f26522 size=4 face=宋体><strong>安装pip3</strong></font>\n\n在完成了修改deb源和更新deb源之后，我们就可以使用命令`apt install python3-pip`来安装pip3了。\n\n安装完成后，你就可以安装你所需要的库了。\n\n亲测可行。赶快行动起来吧。\n\n到此，结束。\n","tags":["在线编辑","部署","开发"],"categories":["_A8-工具","在线编辑器"]},{"title":"Shadowsocks 一键安装脚本（四合一）","url":"/2024/01/25/Shadowsocks-一键安装脚本（四合一）/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>[Shadowsocks 一键安装脚本（四合一）](https://teddysun.com/486.html)</strong></font>\n\n<!--more-->\n\n\n\n本文搬运自秋水大神的[Shadowsocks 一键安装脚本（四合一） | 秋水逸冰 (teddysun.com)](https://teddysun.com/486.html)\n\n## <font color=#00b2c2 size=5 face=宋体><strong>本脚本适用环境 :</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>内存要求：≥128M</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>日期　　：2019 年 01 月 11 日</strong></font>\n\n### <font color=#00b2c2 size=5 face=宋体><strong>关于本脚本 :</strong></font> \n\n+ 1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；\n+ 2、各版本的启动脚本及配置文件名不再重合；\n+ 3、每次运行可安装一种版本；\n+ 4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；\n\n+ 5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；\n+ **友情提示：**如果你有问题，请先阅读这篇《[Shadowsocks Troubleshooting](https://teddysun.com/399.html)》之后再询问。\n\n### <font color=#00b2c2 size=5 face=宋体><strong>默认配置  :</strong></font> \n\n+ 服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）\n+ 密码：自己设定（如不设定，默认为 teddysun.com）\n+ 加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）\n+ 协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）\n+ 混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）\n+ **备注：**脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。\n\n### <font color=#00b2c2 size=5 face=宋体><strong>客户端下载   :</strong></font> \n\n<font color=#f26522 size=4 face=宋体><strong>常规版 Windows 客户端</strong></font>\nhttps://github.com/shadowsocks/shadowsocks-windows/releases\n\n<font color=#f26522 size=4 face=宋体><strong>ShadowsocksR 版 Windows 客户端</strong></font>\nhttps://github.com/shadowsocksrr/shadowsocksr-csharp/releases\n\n### <font color=#00b2c2 size=5 face=宋体><strong>使用方法    :</strong></font> \n\n<font color=#f26522 size=4 face=宋体><strong>使用root用户登录，运行以下命令：</strong></font>\n\n```bash\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n\n### <font color=#00b2c2 size=5 face=宋体><strong>安装完成后，脚本提示如下    :</strong></font>  \n\n```bash\nCongratulations, your_shadowsocks_version install completed!\nYour Server IP        :your_server_ip\nYour Server Port      :your_server_port\nYour Password         :your_password\nYour Encryption Method:your_encryption_method\n\nYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)\n ss://your_encryption_method:your_password@your_server_ip:your_server_port\nYour QR Code has been saved as a PNG file path:\n your_path.png\n\nWelcome to visit:https://teddysun.com/486.html\nEnjoy it!\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>卸载方法     :</strong></font>  \n\n<font color=#f26522 size=4 face=宋体><strong>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）：</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>使用root用户登录，运行以下命令：</strong></font>\n\n```bash\n./shadowsocks-all.sh uninstall\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>启动脚本     :</strong></font>  \n\n<font color=#b0171f size=2 face=宋体><strong>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</strong></font>\n\n```bash\n# Shadowsocks-Python 版：\n/etc/init.d/shadowsocks-python start | stop | restart | status\n\n# ShadowsocksR 版：\n/etc/init.d/shadowsocks-r start | stop | restart | status\n\n# Shadowsocks-Go 版：\n/etc/init.d/shadowsocks-go start | stop | restart | status\n\n# Shadowsocks-libev 版：\n/etc/init.d/shadowsocks-libev start | stop | restart | status\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>各版本默认配置文件      :</strong></font>  \n\n```bash\n# Shadowsocks-Python 版：\n/etc/shadowsocks-python/config.json\n\n# ShadowsocksR 版：\n/etc/shadowsocks-r/config.json\n\n# Shadowsocks-Go 版：\n/etc/shadowsocks-go/config.json\n\n# Shadowsocks-libev 版：\n/etc/shadowsocks-libev/config.json\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong></strong></font>  \n\n<font color=#f26522 size=4 face=宋体><strong></strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong></strong></font>\n\n### <font color=#00b2c2 size=5 face=宋体><strong>更新日志 </strong></font>  \n\n<font color=#f26522 size=4 face=宋体><strong>2019 年 01 月 11 日：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、升级：libsodium 到最新版本 1.0.17；</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>2、升级：mbedtls 到最新版本 2.16.0；</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>2018 年 11 月 05 日：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、升级：使用 Github 上最新代码编译出 Go 版二进制可执行文件，版本号 1.2.2。</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>2018 年 06 月 01 日：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、修正：在启用了插件 simple-obfs 的情况下，libev 版启动失败的问题；</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>2、修正：在使用 /etc/init.d/shadowsocks-libev restart 命令重启 libev 版服务端时，偶尔出现的 “bind: Address already in use” 问题；</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>3、修正：移除 libev 版配置文件中的 local_address 字段；</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>4、修改：不再默认使用 root 用户启动，改为使用 nobody 用户启动 libev 版服务端 ss-server；</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>5、升级：mbedtls 到版本 2.9.0；</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>6、修改：libev 版启动脚本中的 -u 参数（即同时启用 TCP 和 UDP 模式），改到配置文件里配置为 “mode”: “tcp_and_udp”；</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>7、修改：libev 版配置文件的内置 NameServers 为 8.8.8.8，默认是从 /etc/resolv.conf 中取得。</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>2018 年 02 月 07 日：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、修改：将默认端口从 8989 改为从 9000-19999 之间随机生成。</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>2018 年 02 月 06 日：</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、修改：ShadowsocksR 版为 [ShadowsocksRR](https://github.com/shadowsocksrr/shadowsocksr) 最新版；</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>2、新增：ShadowsocksR 版的协议（protocol）增加了 4 个，分别为：</strong></font>\n\n```bash\nauth_chain_c\nauth_chain_d\nauth_chain_e\nauth_chain_f\n```\n\n2017 年 12 月 29 日：\n1、升级：libsodium 到 1.0.16。\n\n2017 年 11 月 25 日：\n1、如果 Linux 内核版本大于 3.7.0，则配置文件默认支持 TCP fast open；\n2、新增：libev 版启动时支持 verbose mode，也就是默认写 log 到 /var/log/messages 方便查看。\n\n2017 年 11 月 12 日：\n1、新增生成 ss:// 或 ssr:// 链接，以及其二维码图片。\n※ 脚本会根据当前安装的版本以及输入的各项配置，自动生成 ss:// 或 ssr:// 的链接并在安装成功后显示，直接复制即可被客户端识别。同时生成其二维码图片，并保存在当前目录下，下载后用看图软件打开，也能被客户端识别。\n\n复制二维码链接后 Shadowsocks 客户端识别示例：\n![Shadowsocks 客户端示例](https://teddysun.com/wp-content/uploads/2017/ss_client.png)\n\n复制二维码链接后 ShadowsocksR 客户端识别示例：\n![ShadowsocksR 客户端示例](https://teddysun.com/wp-content/uploads/2017/ssr_client.png)\n\n二维码（QR Code）参考链接：\nhttps://github.com/shadowsocks/shadowsocks/wiki/Generate-QR-Code-for-Android-or-iOS-Clients\nhttps://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/SSR-QRcode-scheme\n\n2017 年 10 月 22 日：\n1、升级：libsodium 到 1.0.15。\n\n2017 年 10 月 14 日：\n1、新增：在安装 Shadowsocks-libev 版时**可选安装** simple-obfs 服务端。\n※ 脚本通过判断 autoconf 版本是否大于或等于 2.67 来一键安装 simple-obfs 服务端。并且，支持在安装过程中选择 obfs 为 http 或 tls。\n※ 使用方法参考：https://teddysun.com/511.html\n\n2017 年 09 月 16 日：\n1、修正：Shadowsocks-libev 版 v3.1.0 使用 libc-ares 替换 libudns 依赖包，解决了依赖问题；\n2、升级：mbedtls 到版本 2.6.0。\n\n2017 年 07 月 27 日：\n1、新增：ShadowsocksR 版可选协议（protocol）auth_chain_b 。使用该协议需更新到最新（4.7.0） [ShadowsocksR 版客户端](http://dl.teddysun.com/files/ShadowsocksR-4.7.0-win.7z)；\n2、修改：更新 ShadowsocksR 源码下载地址。\n\n2017 年 07 月 23 日：\n1、修正：卸载时可自行选择某个版本卸载，若该版本不存在则报错退出。\n\n2017 年 07 月 22 日：\n1、修正：默认加密方式从 aes-256-cfb 改为 aes-256-gcm（Python 和 libev 版）；\n2、新增：安装时可选 16 种加密方式的其中之一（Python 和 libev 版）。如下所示：\n\n```bsh\naes-256-gcm\naes-192-gcm\naes-128-gcm\naes-256-ctr\naes-192-ctr\naes-128-ctr\naes-256-cfb\naes-192-cfb\naes-128-cfb\ncamellia-128-cfb\ncamellia-192-cfb\ncamellia-256-cfb\nchacha20-ietf-poly1305\nchacha20-ietf\nchacha20\nrc4-md5\n```\n\n3、新增：安装时可选 9 种加密方式的其中之一（Go 版）。如下所示：\n\n```bsh\naes-256-cfb\naes-192-cfb\naes-128-cfb\naes-256-ctr\naes-192-ctr\naes-128-ctr\nchacha20-ietf\nchacha20\nrc4-md5\n```\n\n4、新增：安装时可选 15 种加密方式的其中之一（none 是不加密，ShadowsocksR 版）。如下所示：\n\n```bsh\nnone\naes-256-cfb\naes-192-cfb\naes-128-cfb\naes-256-cfb8\naes-192-cfb8\naes-128-cfb8\naes-256-ctr\naes-192-ctr\naes-128-ctr\nchacha20-ietf\nchacha20\nsalsa20\nxchacha20\nxsalsa20\nrc4-md5\n```\n\n5、新增：安装时可选 7 种协议（protocol）的其中之一（仅限 ShadowsocksR 版）。如下所示：\n\n```bsh\norigin\nverify_deflate\nauth_sha1_v4\nauth_sha1_v4_compatible\nauth_aes128_md5\nauth_aes128_sha1\nauth_chain_a\nauth_chain_b\n```\n\n6、新增：安装时可选 9 种混淆（obfs）的其中之一（仅限 ShadowsocksR 版）。如下所示：\n\n```bsh\nplain\nhttp_simple\nhttp_simple_compatible\nhttp_post\nhttp_post_compatible\ntls1.2_ticket_auth\ntls1.2_ticket_auth_compatible\ntls1.2_ticket_fastauth\ntls1.2_ticket_fastauth_compatible\n```\n\n2017 年 02 月 24 日：\n1、恢复： 通过 Github API 自动获取 Shadowsocks-libev 的最新 release 版本的功能（v3.0.3）。\n\n2017 年 02 月 13 日：\n1、升级： Shadowsocks-libev 版到版本 3.0.2；\n2、升级： Shadowsocks-go 版到版本 1.2.1（基于 [Github 最新代码](https://github.com/shadowsocks/shadowsocks-go)，用 go 1.8 编译完成的 x86 和 x86_64 二进制文件）；\n3、修复：在 Debian 7 下默认没有 libudns-dev 依赖包的问题。\n\n2017 年 02 月 12 日：\n1、升级： Shadowsocks-libev 版到版本 3.0.1。\n\n2017 年 01 月 27 日：\n1、升级： Shadowsocks-go 版到版本 1.2.1 （仅适用于 x86_64 系统）\n\n### 更多单版本 Shadowsocks 服务端一键安装脚本 \n\n[Shadowsocks Python 版一键安装脚本（CentOS，Debian，Ubuntu）](https://teddysun.com/342.html)\n[ShadowsocksR 版一键安装脚本（CentOS，Debian，Ubuntu）](https://shadowsocks.be/9.html)\n[CentOS 下 Shadowsocks-libev 一键安装脚本](https://teddysun.com/357.html)\n[Debian 下 Shadowsocks-libev 一键安装脚本](https://teddysun.com/358.html)\n[Shadowsocks-go 一键安装脚本（CentOS，Debian，Ubuntu）](\n","tags":["梯子","代理"],"categories":["_A8-工具","梯子"]},{"title":"清除 宝塔面板 + Linux ssh 登陆日志","url":"/2024/01/16/清除-宝塔面板-Linux-ssh-登陆日志/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>清除 宝塔面板 + Linux ssh 登陆日志：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**1、登录宝塔面板，会在“面板操作日志”里，留下我们的登录信息**</strong></font>\n\n```python\n/www/server/panel/data/default.db    # 用navicat打开清除\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**2、清除 Linux SSH 登陆的 日志信息**</strong></font>\n\n```python\n# 下面的命令 直接执行即可\ncat /dev/null > /var/log/wtmp\ncat /dev/null > /var/log/btmp\ncat /dev/null > /var/log/lastlog\ncat /dev/null > /var/log/secure\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**3、Windows 清除远程桌面登陆**</strong></font>\n\n```python\n# 步骤1. 按“Win + R”键，然后输入“CMD”打开命令提示符\n# 步骤2. 然后依次输入以下命令，并在每个命令输入完成按下回车键\nreg delete “HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default” /va /f\nreg delete “HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers” /f\nreg add “HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers”\ndel /ah %homepath%\\documents\\default.rdp\n```\n\n","tags":["系统","运维","宝塔"],"categories":["_A3-linux","宝塔面板"]},{"title":"逆向 参考站点记录","url":"/2023/12/25/逆向 参考站点记录/","content":"\n#### 逆向 JS 参考非常具有指导性 ：[数据科学SourceResearch](https://www.resourch.com/)\n\n<!--more-->\n\n#### 12 种方法来隐藏您的机器人自动化检测，如何使 Selenium 不可检测和隐身：https://www.itblogcn.com/article/2034.html\n\n#### 網絡爬蟲-cloudflare五秒等待驗證逆向破解：https://www.twblogs.net/a/5d8c8d4fbd9eee5327001af8\n\n##### 逆向lin狗 大佬 =>https://developer.aliyun.com/profile/iaxsqtcumsgky/highScore_1?spm=a2c6h.24874632.expert-profile.5.27efd78f3t7PF1\n\n#### <font color=#00b2c2 size=5 face=宋体><strong>Cloudflare 小记：</strong></font>https://blog.csdn.net/weixin_58584029/article/details/128719446\n\n##### [     Selenium真正绕过webdriver检测         ](https://www.cnblogs.com/Wl55387370/p/16553574.html)             https://www.cnblogs.com/Wl55387370/p/16553574.html\n\n\n\n\n\n\n\n###### 关键词搜索：selenium绕过检测\n","tags":["逆向","Cloudflare","记录"],"categories":["_A7-逆向","参考"]},{"title":"黑客工具之Google Hacking的简单用法","url":"/2023/11/21/黑客工具之Google-Hacking的简单用法/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>黑客工具之Google Hacking的简单用法：</strong></font>\n\n<!--more-->\n\n本文搬运自：[黑客工具之Google Hacking的简单用法 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/400365865)\n\n+ 感谢大神：[黑客老鸟-九青](https://www.zhihu.com/people/shen-tou-ce-shi-yan-jiu-yuan-9ling) 无私的技术分享\n\n[黑客工具之Sqlmap详细使用教程 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/394955217)\n\n<font color=#f26522 size=4 face=宋体><strong>一、Google Hacking简介</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>Google Hacking 是利用谷歌搜索的强大，来在浩瀚的互联网中搜索到我们需要的信息。轻量级的搜索可以搜素出一些遗留后门，不想被发现的后台入口，中量级的搜索出一些用户信息泄露，源代码泄露，未授权访问等等，重量级的则可能是mdb文件下载，CMS 未被锁定install页面，网站配置密码，php远程文件包含漏洞等重要信息。</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>工具文章合集：</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>利用Google搜索我们想要的信息，需要配合谷歌搜索引擎的一些语法：</strong></font>\n\n## <font color=#00b2c2 size=5 face=宋体><strong>基本搜索：</strong></font>\n\n- <font color=#b0171f size=2 face=宋体><strong>逻辑与：and</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>逻辑或： or</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>逻辑非： -</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>完整匹配：\"关键词\"</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>通配符：* ?</strong></font>\n\n## <font color=#00b2c2 size=5 face=宋体><strong>高级搜索：</strong></font>\n\n**`intext:`**\n\n<font color=#b0171f size=2 face=宋体><strong>寻找正文中含有关键字的网页，例如： **`intext:后台登录`** 将只返回正文中包含 后台登录 的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/NXACjRzpHneSYwQ.webp)\n\n**`intitle:`**\n\n<font color=#b0171f size=2 face=宋体><strong>寻找标题中含有关键字的网页，例如： **`intitle:后台登录`** 将只返回标题中包含 后台登录 的网页，**`intitle:后台登录 密码`** 将返回标题中包含黑客而正文中包含中国的网页</strong></font>\n\n\n\n<img src=\"https://s2.loli.net/2023/11/21/3gvZFKjqV72Odth.webp\" alt=\"img\" style=\"zoom:80%;\" />\n\n**`allintitle:`**\n\n<font color=#b0171f size=2 face=宋体><strong>用法和intitle类似，只不过可以指定多个词，例如： **`alltitle:后台登录 管理员`** 将返回标题中包含黑客 和中国的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/9OmrYuAB7IQkanX.webp)\n\n**`inurl：`**\n\n<font color=#b0171f size=2 face=宋体><strong>将返回url中含有关键词的网页：例如：**`inurl:Login`** 将返回url中含有 Login 的网页</strong></font>\n\n\n\n![img](https://s2.loli.net/2023/11/21/5iV9hNSIz8kXrRj.webp)\n\n<font color=#b0171f size=2 face=宋体><strong>查找管理员登录页面</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/l7qb1jJod4PLUxi.webp)\n\n<font color=#b0171f size=2 face=宋体><strong>查找后台数据库管理页面</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/IpNlc1jhCStTdea.webp)\n\n**`allinurl:`**\n\n<font color=#b0171f size=2 face=宋体><strong>用法和inurl类似，只不过可以指定多个词，例如：**`inurl:Login admin`** 将返回url中含有 Login 和 admin 的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/krHj4pNaDJLI1v3.webp)\n\n**`site:`**\n\n<font color=#b0171f size=2 face=宋体><strong>指定访问的站点，例如： **site:[http://baidu.com](https://link.zhihu.com/?target=http%3A//baidu.com) inurl:Login** 将只在[http://baidu.com](https://link.zhihu.com/?target=http%3A//baidu.com) 中查找url中含有 Login的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/EYzLCaeMoH6h7pF.webp)\n\n**`filetype:`**\n\n<font color=#b0171f size=2 face=宋体><strong>指定访问的文件类型，例如：**`site:baidu.com filetype:pdf`** 将只返回http://baidu.com站点上文件类型为pdf的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/IapXLzVETZdBcb2.webp)\n\n**`link:`**\n\n<font color=#b0171f size=2 face=宋体><strong>指定链接的网页，例如：**`link:http://www.baidu.com`** 将返回所有包含指向 http://www.baidu.com的网页</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/vUMQljuhrH39ICO.webp)\n\n**`related:`**\n\n<font color=#b0171f size=2 face=宋体><strong>相似类型的网页，例如：**`related:http://www.xjtu.edu.cn`** 将返回与 http://www.xjtu.edu.cn相似的页面，相似指的是网页的布局相似</strong></font>\n\n![img](https://s2.loli.net/2023/11/21/ZckzpHesimbP7OS.webp)\n\n**`cache:`**\n\n<font color=#b0171f size=2 face=宋体><strong>网页快照，谷歌将返回给你他存储下来的历史页面，如果你同时制定了其他查询词，将在搜索结果里以高亮显示，例如：**`cache:http://www.hackingspirits.com guest`** ，将返回指定网站的缓存，并且正文中含有guest</strong></font>\n\n\n\n**`info:`**\n\n<font color=#b0171f size=2 face=宋体><strong>返回站点的指定信息，例如：`info:http://www.baidu.com` 将返回百度的一些信息</strong></font>\n\n**`define:`**\n\n<font color=#b0171f size=2 face=宋体><strong>返回某个词语的定义，例如：`define:Hacker`　　将返回关于Hacker的定义</strong></font>\n\n**`phonebook:`**\n\n<font color=#b0171f size=2 face=宋体><strong>电话簿查询美国街道地址和电话号码信息。例如：`phonebook:Lisa+CA` 将返回名字里面包含Lisa并住在加州的人的所有名字</strong></font>\n\n**`查找网站后台`**\n\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com intext:管理`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com inurl:login`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com intitle:后台`</strong></font>\n\n**`查看服务器使用的程序`**\n\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:asp`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:php`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:jsp`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com filetype:aspx`</strong></font>\n\n**`查看上传漏洞`**\n\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com inurl:file`</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>`site:http://xx.com inurl:load`</strong></font>\n\n**`Index of`**\n\n<font color=#b0171f size=2 face=宋体><strong>利用 `Index of`语法去发现允许目录浏览的web网站，就像在本地的普通目录一样。下面是一些有趣的查询：</strong></font>\n\n- `index of /admin`\n- `index of /passwd`\n- `index of /passwd`\n- `index of /mail`\n- `\"index of /\" +passwd`\n- `\"index of /\" +password.txt`\n- `\"index of /\" +.htaccess`\n- `\"index of /root\"`\n- `\"index of /cgi-bin\"`\n- `\"index of /logs\"`\n- `\"index of /config\"`\n\n<font color=#00b2c2 size=5 face=宋体><strong>**`inurl`**</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>而上面这些命令中用的最多的就是 `inurl: `了，利用这个命令，可以查到很多意想不到的东西</strong></font>\n\n- <font color=#b0171f size=2 face=宋体><strong>利用 allinurl:winnt/system32/ 查询：列出的服务器上本来应该受限制的诸如“system32” 等目录，如果你运气足够好，你会发现“system32” 目录里的“cmd.exe” 文件，并能执行他，接下来就是提升权限并攻克了。</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>查询 allinurl:wwwboard/passwd.txt 将列出所有有“WWWBoard Password vulnerability”漏洞的服务器，阅读更多请参见下面链接。</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>查询 inurl:.bash_history 将列出互联网上可以看见 “inurl:.bash_history” 文件的服务器。这是一个命令历史文件，这个文件包含了管理员执行的命令，有时会包含一些敏感信息比如管理员键入的密码。</strong></font>\n- <font color=#b0171f size=2 face=宋体><strong>查询 inurl:config.txt 将看见网上暴露了“inurl:config.txt”文件的服务器，这个文件包含了经过哈希编码的管理员的密码和数据库存取的关键</strong></font>信息。\n\n<font color=#f26522 size=4 face=宋体><strong>还有一些其他一些使用“`inurl:`”和“`allinurl:`”查询组合的例子：</strong></font>\n\n- `inurl:admin filetype:txt`\n- `inurl:admin filetype:db`\n- `inurl:admin filetype:cfg`\n- `inurl:mysql filetype:cfg`\n- `inurl:passwd filetype:txt`\n- `inurl:”wwwroot/*.”`\n- `inurl:adpassword.txt`\n- `inurl:webeditor.php`\n- `inurl:file_upload.php`\n- `inurl:gov filetype:xls “restricted”`\n- `index of ftp +.mdb allinurl:/cgi-bin/ +mailto`\n\n## <font color=#00b2c2 size=5 face=宋体><strong>查找有可能存在SQL注入的网站：</strong></font>\n\n**`inurl:id=1`**\n\n![img](https://s2.loli.net/2023/11/21/LW1ycq9jo4hXItm.webp)\n\n\n\n\n\n","tags":["渗透","hack","谷歌搜索工具"],"categories":["_A6-渗透","搜索工具"]},{"title":"根据主视频，自动设置片头的分辨率、Fps、编码器","url":"/2023/08/15/根据主视频，自动设置片头的分辨率、Fps、编码器/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>根据主视频，自动设置片头的分辨率、Fps、编码器：</strong></font>\n\n<!--more-->\n\n+ <font color=#f26522 size=4 face=宋体><strong>前提：</strong></font>\n  + <font color=#b0171f size=3 face=宋体><strong>安装：ffmpeg</strong></font>\n  + <font color=#b0171f size=3 face=宋体><strong>安装：python库 opencv-python `pip3 install opencv-python`</strong></font>\n\n```python\n  def set_start_video(self, video_path, start_video_path):\n    \"\"\"\n      :param video_path: 原始mp4 绝对路径\n      :param start_video_path:   片头的绝对路径\n      :return: \n    \"\"\"\n      video = cv2.VideoCapture(f\"{video_path}\")\n      # print(height, width)\n      # resolution1 = (int(video.get(cv2.CAP_PROP_FRAME_WIDTH)), int(video.get(cv2.CAP_PROP_FRAME_HEIGHT)))\n      # print(resolution1)\n\n      # 获取高度\n      height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))\n\n      # 获取宽度\n      width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))\n\n      # 获取帧率\n      fps = video.get(cv2.CAP_PROP_FPS)\n\n      # # 向上取整\n      # fps_a = math.ceil(fps)\n\t\t\t\n      # 保留2位小数\n      fps_a = '%.2f' % fps\n      # \"ffmpeg -i a.mp4 -r 30 b.mp4\"\n      # print(fps_a)\n\n      # 退出cv2\n      video.release()\n      cv2.destroyAllWindows()\n      \n\t\t\t# 开始获取编码器 因为我的本地opencv库版本低，尝试获取编码器格式失败，所以这里用另一种方式获取\n      command = f\"ffprobe -v quiet -select_streams v:0 -show_entries stream=codec_name -of default '{video_path}/v1.mp4'\"\n      result = subprocess.run(command, shell=True, stdout=subprocess.PIPE)\n      encoder = result.stdout.decode().strip()\n      new_encoder = re.search(\"codec_name=(?P<codec_name>.*?)\\n\", encoder)\n\t\t\t\n      # 编写执行命令字符串\n      cmd_str = f\"ffmpeg -i {start_video_path} -vf scale={width}:{height} -r {fps_a} -acodec aac -vcodec {new_encoder.group('codec_name')} {video_path}/xxx.ts\"   # 这里的xxx.ts 就是我们根据主视频修改后的片头\n      # 开始执行命令\n      os.system(cmd_str)\n```\n\n","tags":["python","ffmpeg"],"categories":["_A4-FFmpeg","设置片头"]},{"title":"利用m3u8文件机制添加片头","url":"/2023/08/15/利用m3u8文件机制添加片头/","content":"\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>利用m3u8文件机制添加片头：</strong></font>\n\n<!--more-->\n\n```python\ndef set_header(m3u8_file_path, header_path):\n    \"\"\"\n    :param m3u8_file_path:  m3u8文件所在绝对路径\n    :param header_path:     视频片头播放绝对路径\n    :return:   False 片头已经添加， True 片头添加成功\n    \"\"\"\n    with open(m3u8_file_path, \"r\", encoding='utf-8') as f:\n        all_lines = f.readlines()\n        for i, item in enumerate(all_lines):\n            if \"#EXTINF:\" in item:\n                vernier = i\n                break\n        if header_path in all_lines[vernier+1]:\n            print(f\"已经添加了片头，请勿重复添加\")\n            return False\n        print(vernier)\n        all_lines.insert(vernier, \"#EXTINF:5,\\n\")   # 此处的5是时长\n        all_lines.insert(vernier + 1, f\"{header_path}\\n\")\n    with open(m3u8_file_path, \"w\", encoding='utf-8') as w_f:\n        for k_w in all_lines:\n            w_f.write(f\"{k_w}\")\n    return True\nif __name__ == '__main__':\n    set_header('test.m3u8', \"http://xxx.xxx.com/wuxing.ts\")\n\n```\n\n","tags":["python","ffmpeg"],"categories":["_A4-FFmpeg","设置片头"]},{"title":"python完美突破tls/ja3","url":"/2023/08/14/python完美突破tls-ja3/","content":"\n\n\n# python完美突破tls/ja3\n\n<!--more-->\n\n#  声明：\n\n本文搬运自csdn>>> https://blog.csdn.net/y_morph/article/details/129487839\n\n以下只是搬运下我公众号的东西。很早就发过了。原帖地址：\n\n[python完美突破tls/ja3 (qq.com)](https://mp.weixin.qq.com/s/GU2AgushvIEtLHtYR7BQzg)\n\n## 已经发公众号的为什么还发csdn\n\n有的圈内朋友，不经过我的允许，删减摘录我公众号的内容，这里就不提谁了，心里清楚，还能获得一些关注和流量。很无语，所以我还不如自己也发发。【猛男落泪】\n\n# 前言\n\n时隔一个多月我又发文了，我还是只发好文的geekbyte，前几天有朋友跟我说我断更一个多月了，哈哈，这不就来了吗\n\n不多废话，进入正题。\n\n如果你偶尔看到这篇文章，而对tls还一脸懵的朋友，可以先阅读以下文章了解一下\n\n```\nhttps://mp.weixin.qq.com/s/Qx7PjnBgrTR30oCurU6CGw\n\nhttps://mp.weixin.qq.com/s/7VJHCl2ht4pjkgIdcOKc5w\n\nJS逆向之猿人学第十九题突破ja3指纹验证\n\n深度剖析ja3指纹及突破\n\nja3指纹补充说明\n————————————————\n```\n\n距离我上次发 [深度剖析ja3指纹及突破](http://mp.weixin.qq.com/s?__biz=MzU0MjUwMTA2OQ==&mid=2247484649&idx=1&sn=42eb5319db1ca830ca81d75218e4c0e4&chksm=fb18f54bcc6f7c5de60395d03650aa7c6a30e37407989c604c31ffa1076d071a32afcb0556c4&scene=21#wechat_redirect) 已时隔半年多（因为之前删过重新发的），我当时抛出一个问题，就是python由于依赖的[openssl](https://so.csdn.net/so/search?q=openssl&spm=1001.2101.3001.7020)库没法高度自定义，导致针对tls那5个组件没法改动太大。\n\n```undefined\nTLSVersion,Ciphers,Extensions,EllipticCurves,EllipticCurvePointFormats\n```\n\n所以目前有些平台如果有tls认证的话，那对python的爬虫就是降维打击。当时的我确实考虑过看自己去编译一个库，然后解除这个针对python的限制。\n\n这个tls，如果我没搞错的话，在国内的圈子，进入大家视线的是青南大佬，然后是猿人学的练习题，接着再是我的深度剖析，惭愧，我提出来的python被降维打击，我自己想搞定，因为各种原因，我没能去研究，而现在已经有大佬搞定了，而且个人觉得十分完美，所以下面我给一个详细的食用流程吧，也算是给它画上一个句号了。\n\n# 目前我知道的针对tls的方案\n\n## 1.hook tls 组件\n\n目前hook方面，比较成熟的方案就是golang的cycletls，这个cycletls是我偶然找到的go库，也算是能解决大部分的平台。但是据我所知，已经有一些风控强的网站可以识别你hook修改过ja3指纹了\n\n## 2.魔改openssl\n\n用志远大佬的方案，重新编译openssl，在编译过程中，改c源码，使每次发起请求的tls指纹随机\n\n个人觉得，按目前的行情，如果是校验很强的tls话，随机的可能不行\n\n想我还被远哥在群里@夸赞过，嘻嘻~\n\n## 3.魔改socket\n\n这个方案是@3301大佬魔改了一套socket收发包流程，是真的牛逼。\n\n在几个月前我跟他私聊过，说好了一起研究的，因为种种原因我放他鸽子了，唉\n\n不过他已经基本搞定，目前已开源：\n\nhttps://github.com/zero3301/pyrequests/\n\n作者自己说了，暂不支持HTTP2和tls1.3和动态tls指纹，他希望有人能跟他一起开发，感兴趣的可以跟他联系。\n\n## 4.重编译chromium\n\n根据我的研究，发现这个方案在针对tls方面，能改的不是很多，底层还是借助了浏览器，还不如直接rpc或者用selenium之类的\n\n### 5.curl-impersonate+pycurl\n\n**这个方案我自认为是相对来说最完美的方案**\n\n也是我之前想过准备要走的研究方向，可惜因为种种原因，没有继续，理论上的思路跟这个很类似，这里就暂不透漏了。\n\ncurl-impersonate，就是用一个大佬编译好的跟浏览器完全一致的curl魔改版\n\nhttps://github.com/lwthiker/curl-impersonate\n\n其中，curl-impersonate作者自己也写过相关的文章，想了解原理的可以看看，我看完之后真的受益匪浅，对tls的理解更深入了，如果你有意向也想自己编译一个，个人十分建议阅读，反复阅读\n\nhttps://lwthiker.com/\n\npycurl就是借助curl发起请求的库\n\nhttps://github.com/pycurl/pycurl # 官方版\n\nhttps://github.com/ycq0125/pycurl  # 肝总魔改版本\n\n这里我推荐用肝总的版本。\n\n在编译安装pycurl时指定的curl是魔改好的curl-impersonate，这样python就可以发起跟浏览器完全一致的tls，而且支持自定义tls算法套件。\n\n这个方案唯一的缺点就是，**编译过程相对复杂**，没法开箱即用，在不同的系统平台下就会遇到各种各样的问题\n\nok，以下开始我的编译血泪史吧，带着大家一起编译一下curl-impersonate+pycurl。\n\n我选用的环境是在win上用vm虚拟机软件里的linux，这样，即使我有一个步骤错了，可以回到正常的还原点上，节省很多时间。以下用到的图片，由于是我在编译时在每个步骤的截图保留的，所以一会儿是kali界面，一会儿是ubuntu界面，这个不影响，实际你跟着我操作能编译成功即可（其实是真的不想再重新走一遍编译了）\n\n# 编译curl-impersonate\n\n官方教程，里面给了ubuntu、centos、macos的编译过程，当然如果你想快速用上，可以用该作者直接编译好的docker，但是如果你还要编译pycurl的话，那就得自编译了\n\nhttps://github.com/lwthiker/curl-impersonate/blob/main/INSTALL.md\n\n**注意：不建议用kali**\n\n我刚开始使用的是kali linux，为了图方便，直接用的肉师傅的r0env，反正我是没成功（不是说肉师傅的r0env有问题，我咋可能这么冒犯呢，我中途踩坑了很多次，估计装了有冲突的依赖所以导致不行）\n\nkali编译curl-impersonate是没问题的，结果到后面编译pycurl就会有问题：\n\n![img](https://s2.loli.net/2023/08/14/uxwrTRN65IeWoAh.png)\n\n这个问题我查阅了大量代码，反正就是提示源码的这一行有问题，大概意思是说事先没声明使用\n\n![img](https://s2.loli.net/2023/08/14/aTSJs5uveVOdl6Z.png)\n\n各种方法都试了，有的说是openssl和curl版本太老了，但是我的是最新的，基本不是这个问题，所以，没法了，一度让我心态没了，我放弃用kali。\n\n去官网下载的最新的ubuntu22.04lts（18版本也可以），安装在虚拟机里，网络，proxychains啥的基本配置好了。重新来吧\n\n## 1.安装需要的环境依赖\n\n这个步骤跟官方教程一样，但是多了些其他的步骤：\n\n```\nsudo apt install build-essential pkg-config cmake ninja-build curl autoconf automake libtool\n```\n\n安装完之后，还要再输入以下命令安装：\n\n```\n# 多了以下命令\nsudo apt upgrade build-essential pkg-config cmake ninja-build curl autoconf automake libtool\n```\n\n注意，检查下你系统里有没有支持HTTP2的库，要不然还是有问题，curl-impersonate可以编译，pycurl也可以编译，但是不支持HTTP2，然后只要设置HTTP2的就会报如下错：\n\n![img](https://s2.loli.net/2023/08/14/TkyIC5bdsfOqXue.png)\n\n这些坑我都踩过了，一想起编译失败的时候就心里苦，所以提前跟你说好在编译之前的操作\n\n怎么装HTTP2库，先用apt search http2\n\n然后会搜到一堆，这里就不贴上占篇幅了。\n\n我刚开始是安装了这些：\n\n```\nsudo apt-get install nghttp2 libnghttp2-dev\n```\n\n后面实在是不放心，因为真的不想重来了，都记不清楚我重试了多少次了（哭~）\n\n我索性又把自己感觉可能会用到的库都装了\n\n```\nsudo apt-get install  gogottrpc  libghc-http2-prof  libghc-wai-http2-extra-dev libghc-wai-http2-extra-prof libprotocol-http2-perl librust-curl+http2-dev librust-curl-sys+http2-dev librust-curl-sys+http2-dev ruby-protocol-http2\n```\n\n好了，有了以上的操作，再继续执行后续步骤，这个步骤没啥要注意的，直接能装上\n\n```\nsudo apt install python3-pip libnss3\npip install gyp-next\nexport PATH=\"$PATH:~/.local/bin\" # Add gyp to PATH\n# For the Chrome version only\nsudo apt install golang-go unzip\n```\n\n## 2.拉取代码\n\n也没啥要特别注意的\n\n```\ngit clone https://github.com/lwthiker/curl-impersonate.git\ncd curl-impersonate\n```\n\n如果你没装git会报错，这个就不多说了：sudo apt get git\n\n如果提示无法识别github.com的域名，vim /etc/resolv.conf\n\n去里面，把nameserver改为如下，保存退出，其他别改\n\n```\nnameserver 8.8.8.8\nnameserver 114.114.114.114\n```\n\n如果报错：\n\n```\nfatal: unable to access 'https://github.com/lwthiker/curl-impersonate.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated.\n```\n\n终端设置下git的代理：\n\n```\ngit config --global http.https://github.com.proxy http://192.168.18.231:7890\ngit config --global https.https://github.com.proxy https://192.168.18.231:7890\n```\n\n再次执行，即可拉取成功\n\n![img](https://s2.loli.net/2023/08/14/3kpzrnsKBlW7OU4.png)\n\n下面这个步骤必须先后顺序执行：\n\n```\nautoconf\nmkdir build && cd build\n../configure\n```\n\n## 3.开始编译\n\n```\n# Build and install the Firefox version\nmake firefox-build\nsudo make firefox-install\n# Build and install the Chrome version\nmake chrome-build\nsudo make chrome-install\n# You may need to update the linker's cache to find libcurl-impersonate\nsudo ldconfig  # 这个步骤必须要，不然用不了\n```\n\n注意，使用make命令的时候，会去下载需要的文件，如果报错：\n\n```\ncurl: (7) Failed to connect to github.com port 443 after 6 ms: Connection refused\n```\n\n说明你网络不行，可以加上proxychains\n\n```\nproxychains make firefox-build\n```\n\n配置proxychains，先用apt 安装，然后在win电脑开启你的科学软件，\n\n配置，vim /etc/proxychains.conf ，把dns注释掉，到文件最底部，设置你win电脑的ip，科学软件暴露的端口即可\n\n![img](https://s2.loli.net/2023/08/14/86ME9HBUljbm1oz.png)\n\n![img](https://s2.loli.net/2023/08/14/tDPGC7ybScu8fH3.png)\n\n这里就不多介绍了，具体自己查proxychains怎么配置吧\n\n接着再次执行build命令，如果报错：\n\n```\nCMake Error at CMakeLists.txt:486 (message):\n  Unknown processor:[proxychains] DLL init: proxychains-ng 4.14                        \n                                                                                       \n  [proxychains] DLL init: proxychains-ng 4.14                                          \n                                                                                       \n  x86_64   \n```\n\n```\n--   No package 'libunwind-generic' found\n```\n\n执行以下解决：\n\n```\nsudo apt-get update -y\nsudo apt-get install -y libunwind-dev\n```\n\n再次执行build，没报错则构建完毕，接着再执行安装命令：\n\n```\nsudo make firefox-install\n```\n\n![img](https://s2.loli.net/2023/08/14/zTOe3mjMxPNLKUC.png)\n\n![img](https://s2.loli.net/2023/08/14/UP1DsSLlbInhXoj.png)\n\n接着编译chrome，操作同上\n\n```\nmake chrome-build  # 如果太慢加上proxychains\nsudo make chrome-install\n```\n\n如果在build的时候报错：\n\n```\nFAILED: crypto_test_data.cc /root/Desktop/curl-impersonate/build/boringssl/build/crypto_test_data.cc \ncd /root/Desktop/curl-impersonate/build/boringssl && /usr/bin/go run util/embed_test_data.go -file-list /root/Desktop/curl-impersonate/build/boringssl/build/embed_test_data_args.txt > /root/Desktop/curl-impersonate/build/boringssl/build/crypto_test_data.cc\n[proxychains] DLL init: proxychains-ng 4.14\n[proxychains] DLL init: proxychains-ng 4.14\ngo: golang.org/x/crypto@v0.0.0-20210513164829-c07d793c2f9a: Get \"https://proxy.golang.org/golang.org/x/crypto/@v/v0.0.0-20210513164829-c07d793c2f9a.mod\": dial tcp 142.251.42.241:443: i/o timeout\n```\n\n是因为借用了go的库，使用命令：\n\n```\ngo env -w GOPROXY=https://goproxy.cn\n```\n\n继续编译、安装\n\n完成之后再继续执行下面的命令，**注意下面最后一个命令的rm， 如果你只是要编译curl-impersonate，那可以删除，如果你还要编译pycurl，千万别执行删除**\n\n```\nsudo ldconfig \n# Optionally remove all the build files\ncd ../ && rm -Rf build   # 注意了\n```\n\n## 4.编译完成测试\n\n整个过程安装完后，输入curl_  按tab键，有下面的说明编译完成\n\n![img](https://s2.loli.net/2023/08/14/sYXNwUcOzbdmkJD.png)\n\n![img](https://s2.loli.net/2023/08/14/9y61w3lX2hsvHdG.png)\n\n装完了测试：\n\n```\ncurl-impersonate-ff https://ja3er.com/json\ncurl-impersonate-chrome https://ja3er.com/json\n```\n\n![img](https://s2.loli.net/2023/08/14/NwegzJxKLbAkBO6.png)\n\ncurl-impersonate编译完了\n\n如果你执行的时候报错如下：\n\n```\n/usr/local/bin/curl_ff98: line 10: /usr/local/bin/curl-impersonate-ff: No such file or directory\n```\n\n重来吧\n\n\n\n\n# 编译pycurl\n\n\n\n## 1.环境准备\n\n\n\n首先确认你刚才编译的curl-impersonate，是否符合编译pycurl的要求\n\n```undefined\ncurl-impersonate-chrome -V\n```\n\n![img](https://s2.loli.net/2023/08/14/HBfa6tn7kAsRLcU.png)\n\n如果有对应的ssl库和nghttp2，那就可以。这两个缺一个都不行，否则重新编译curl-impersonate吧\n\n## 2.拉取代码\n\n建议不要用官方的那个pycurl，用spike肝总魔改过的\n\n```\ngit clone https://github.com/ycq0125/pycurl\n```\n\n那么肝总魔改了哪些呢？我问过他本人，跟官方的比，他就改了这些，个人建议可以好好读一下他的代码：\n\n```\nhttps://github.com/pycurl/pycurl/commit/d0dbf9569f1440bdfe452000ff3073336061e24f\n```\n\n如果无法正常拉取，按照上面拉取curl-impersonate的方法同样操作即可\n\n## 3.改源码\n\n这个步骤就是为了指定刚才编译的curl-impersonate的\n\n```\ncd pycurl/src\nvi pycurl.h\n```\n\n其他不用动，改下面这里就行，把这个路径改为你实际的路径，也就是刚才编译好的curl-impersonate的build，改之前：\n\n![img](https://s2.loli.net/2023/08/14/mhM4ftYPu9W7c2B.png)\n\n改之后：\n\n![img](https://s2.loli.net/2023/08/14/maU6JGWF1H8s7OV.png)\n\n保存退出\n\n\n\n## 4.开始编译\n\n```\npython3 setup.py install --curl-config={实际的curl路径}/curl-impersonate-chrome-config --openssl-dir={实际的curl路径}/curl-impersonate/build/boringssl/build\n```\n\n比如我的：\n\n```\npython3 setup.py install --curl-config=/home/async/桌面/curl-impersonate-chrome-config --openssl-dir=/home/async/桌面/curl-impersonate/build/boringssl/build\n```\n\n如果报这个错，权限问题\n\n![img](https://s2.loli.net/2023/08/14/3wtsRYygUuAChGN.png)\n\n加上sudo再次执行，以下就是编译完了\n\n![img](https://s2.loli.net/2023/08/14/OtTwck8ugNodA3H.png)\n\n## 5.测试执行\n\n有个地址可以暂时替代ja3官网作为参考（最近发现ja3官网经常崩）\n\n```\nhttps://tls.peet.ws/api/all\n```\n\n先用curl请求：\n\n![img](https://s2.loli.net/2023/08/14/H312JsMORSQCcXe.png)\n\n现在用python请求下，也就是pycurl文件里的那个test.py文件\n\n![img](https://s2.loli.net/2023/08/14/lJ2bYkeWDLsVXv7.png)\n\n执行结果里，如果看不到这个nghttp2，就不支持HTTP2，你又得整个过程重来了\n\n可以看看test.py代码，其实跟之前的python改tls算法区别不大，只是现在用的是编译过的curlAdapter。\n\n![img](https://s2.loli.net/2023/08/14/EsmoA2VaRJCn6hk.png)\n\n光能跑没有用对吧，要看tls真的被改了没有，对比下：\n\n![img](https://s2.loli.net/2023/08/14/7qXICDGJKNVsbAU.png)\n\n一模一样，牛逼了\n\n## 6.实际案例测试\n\n还是那个不可说的地址，先用curl-impersonate看看，能访问哈：\n\n![img](https://s2.loli.net/2023/08/14/icGd5eu7RxUXOTA.png)\n\n用python请求看看：\n\n![img](https://s2.loli.net/2023/08/14/HOzQ8d7PRGNtovT.png)\n\n起飞！！！！\n\n## 7.自定义tls算法\n\n你可以对照着已有的tls算法，自定义了\n\n主要就是改这里：\n\n![img](https://s2.loli.net/2023/08/14/hJ4Ui3zlmYASaBe.png)\n\n```\nhttps://hpbn.co/transport-layer-security-tls/#tls-session-resumption\nhttp://pycurl.io/docs/latest/quickstart.html\nhttps://curl.se/libcurl/c/CURLOPT_HTTP_VERSION.html\n```\n\n反正想怎么改怎么改，你只要别给一个tls不认识的算法就行，起飞吧\n\n后期有空我把我这个编译好的环境，打成docker镜像发出来，你们就不用再走我走过的路了，当然，有时间才行，嘻嘻\n\n![img](https://s2.loli.net/2023/08/14/utcReZIokFrEyqp.jpg)\n\n# 编译其他浏览器\n\n上面的步骤是编译指定curl-chrome的，你可以重新拉下pycurl，然后重新编译，指定为firefox，edage，safari的路径即可，流程也是一样的，这里就不细说了\n\n# 踩坑总结\n\n以下是我安装过程中遇到过的坑，仅供各位朋友参考：\n\n```\n1.fatal: unable to access 'https://github.com/lwthiker/curl-impersonate.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated.\n解决办法：\ngit config --global http.https://github.com.proxy http://192.168.18.231:7890\ngit config --global https.https://github.com.proxy https://192.168.18.231:7890\n```\n\n```\n2.curl: (7) Failed to connect to github.com port 443 after 6 ms: Connection refused\n解决办法：\nproxychains make firefox-build   \n编译的时候虽然会去下载各种库，如果中途报curl的错就不要用proxychains \n```\n\n```\n3.curl: (35) error:0A000126:SSL routines::unexpected eof while reading\n解决办法：\nhttps://blog.csdn.net/u011700186/article/details/109452684\n```\n\n```\n4.install /root/Desktop/curl-impersonate/build/../firefox/curl_ff* /usr/local/bin\nbash: line 1: cd: curl-7.81.0: No such file or directory\n```\n\n```\ncurl_chrome101 https://www.baidu.com\n/usr/local/bin/curl-impersonate-chrome: error while loading shared libraries: libcurl-impersonate-chrome.so.4: cannot open shared object file: No such file or directory\n```\n\n```\n解决办法：\nldconfig\n```\n\n```\n5.CMake Error at CMakeLists.txt:486 (message):\n  Unknown processor:[proxychains] DLL init: proxychains-ng 4.14                        \n                                                                                       \n  [proxychains] DLL init: proxychains-ng 4.14                                          \n                                                                                       \n  x86_64 \n```\n\n```\n--   No package 'libunwind-generic' found\n```\n\n```\n解决办法：\nsudo apt-get update -y\nsudo apt-get install -y libunwind-dev\n```\n\n```\n6.FAILED: crypto_test_data.cc /root/Desktop/curl-impersonate/build/boringssl/build/crypto_test_data.cc \ncd /root/Desktop/curl-impersonate/build/boringssl && /usr/bin/go run util/embed_test_data.go -file-list /root/Desktop/curl-impersonate/build/boringssl/build/embed_test_data_args.txt > /root/Desktop/curl-impersonate/build/boringssl/build/crypto_test_data.cc\n[proxychains] DLL init: proxychains-ng 4.14\n[proxychains] DLL init: proxychains-ng 4.14\ngo: golang.org/x/crypto@v0.0.0-20210513164829-c07d793c2f9a: Get \"https://proxy.golang.org/golang.org/x/crypto/@v/v0.0.0-20210513164829-c07d793c2f9a.mod\": dial tcp 142.251.42.241:443: i/o timeout\n```\n\n```\n解决办法：\ngo env -w GOPROXY=https://goproxy.cn\n```\n\n```\n7./usr/local/bin/curl_ff98: line 10: /usr/local/bin/curl-impersonate-ff: No such file or directory\n```\n\n```\n这是出错了，重来吧\n```\n\n```\n8.src/easyopt.c: In function ‘do_curl_setopt_string_impl’:\nsrc/easyopt.c:215:10: error: ‘CURLOPT_SSL_CERT_COMPRESSION’ undeclared (first use in this function); did you mean ‘CURLOPT_SSH_COMPRESSION’?\n  215 |     case CURLOPT_SSL_CERT_COMPRESSION:\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |          CURLOPT_SSH_COMPRESSION\n```\n\n```\n更新openssl，重新安装\nexport OPENSSL=/usr/local/openssl/bin\n```\n\n```\n不行就重来\n```\n\n```\n9.src/pycurl.h:5:10: fatal error: Python.h: No such file or directory \n```\n\n```\n换ubuntu ,kali不行\n```\n\n```\n10.\nTraceback (most recent call last):\n  File \"/home/async/桌面/pycurl/test2.py\", line 19, in <module>\n    curl.setopt(curl.HTTP_VERSION, curl.CURL_HTTP_VERSION_2_0)\npycurl.error: (1, '')\n```\n\n```\n原因是不支持HTTP2，https://github.com/pycurl/pycurl/issues/477\n```\n\n```\n解决办法：\n需要安装nghttp2 ， 这个在编译curl前就要安装的\nsudo apt-get install libnghttp2-dev\nsudo apt-get install nghttp2\n```\n\n```\nsudo apt-get install  gogottrpc  libghc-http2-prof  libghc-wai-http2-extra-dev libghc-wai-http2-extra-prof libprotocol-http2-perl librust-curl+http2-dev librust-curl-sys+http2-dev librust-curl-sys+http2-dev ruby-protocol-http2\n```\n\n```\n这是某大佬遇到的报错：\n```\n\n![img](https://s2.loli.net/2023/08/14/8EhIrYsDuzS1Fq7.png)\n\n这个是系统问题，换系统镜像吧\n\n目前我知道的可用的镜像：\n\n```\n1.\n No LSB modules are available.\n Distributor ID:  Debian\n Description:  Debian GNU/Linux 10 (buster)\n Release:  10\n Codename:  buster\n \n 2.ubuntu18.04\n \n 3.ubuntu22.04\n```\n\n# 结语\n\n## 1.在编译的时候别慌，遇到问题别乱，一点点排查\n\n如果遇到了我总结的里面没有的坑，多点耐心，多查资料，找原因，解决它\n\n我就为了编译好，设置了这么多还原点，所以你知道我经历了多少吗，从崩溃中重新放平心态重来（期间非常感谢spike肝总帮我排查问题）\n\n![img](https://s2.loli.net/2023/08/14/SpEYioM8GWds1D4.png)\n\n","tags":["python","逆向","tls/ja3","Cloudflare"],"categories":["_A7-逆向","selenium"]},{"title":"sqlite3 增删改查","url":"/2023/07/31/sqlite3-增删改查/","content":"\n# sqlite3 增删改查:\n\n<!--more-->\n\n```python\n## 进入 sqlite3\nsqlite3 /home/kaye/student\n\n## 进入 sqlite3 并保存数据库到指定路径\nsqlite3\n\n## 退出 sqlite3\n.exit\n\n## 创建表\ncreate table student (id integer, name text, age integer);\n\n## 查看表结构\n.schema\n\n## 插入数据\ninsert into student (id, name, age) values (1, \"bb\", 11);\ninsert into student values (2, \"cc\", 33);\n\n## 查询数据\nselect * from student;\n\n## 修改数据\nupdate student set age=25 where id=3;\n\n## 删除数据\ndelete from student where id=1;\n\n## 删除表\ndrop table student;\n```\n\n","tags":["数据库","sqlite3"],"categories":["_9-数据库","Sqlite3"]},{"title":"绕过Cloudflare反爬虫机制的五种方法","url":"/2023/07/16/绕过Cloudflare反爬虫机制的五种方法/","content":"\n\n\n# 绕过Cloudflare反爬虫机制的五种方法\n\n<!--more-->\n\n+ 本文将介绍五种方法，帮助开发者绕过[Cloudflare反爬虫](https://www.cloudbypass.com/)机制，包括使用cloudscraper库、抓取谷歌缓存、使用undetected_chromedriver库、使用付费代理和使用穿云API。\n\n+ 在爬虫开发中，有时候会遇到浏览器正常访问网站，但是代码却无法获取数据，返回403等错误。以下是解决这个问题的五种方法：\n\n![img](https://s2.loli.net/2023/07/16/qOloz5tsmWiBQRj.jpg)\n\n## **方法一：cloudscraper**\n\n对于需要等待的网站（通常等待5秒钟），80%的情况下可以确定使用了5秒盾反爬机制。在Python中，可以使用cloudscraper库绕过等待。\n\n+ 使用方法：\n\n```bash\n# 安装：cloudscraper\npip install cloudscraper\n\n# 更新最新版本：\npip install cloudscraper -U　　\n```\n\n+ 普通使用：\n\n```python\nimport cloudscraper\n\nscraper=cloudscraper.create_scraper()  # 创建实例\nres=scraper.get(url)  # 请求URL\nprint(res.text) # 打印结果\n```\n\n+ 在Scrapy中使用：\n\n```python\nmiddlewares.py\nimport cloudscraper\nclass CloudScraperMiddleware:\n\tdefprocess_response(self,request,response,spider):\n    ifresponse.status == 403:\n      url = request.url\n      req = spider.scraper.get(url,headers={‘referer’:url})\n      return HtmlResponse(url = url,body = req.text, encoding = ”utf-8″, request = request)\n    return response\n\nspider.py\n\nimportcloudscraper\n#启用中间件\ncustom_settings={\n”DOWNLOADER_MIDDLEWARES”:{\n’testspider.middlewares.CloudScraperMiddleware’:520,\n}\n}\ndef__init__(self,**kwargs):\n#创建实例\nself.scraper=cloudscraper.create_scraper()　　\n```\n\n## **方法二：抓取谷歌缓存**\n\n当谷歌抓取网络以索引网页时，会创建一个缓存。大多数受[Cloudflare](https://so.csdn.net/so/search?q=Cloudflare&spm=1001.2101.3001.7020)保护的网站都允许谷歌抓取其网页，因此我们可以抓取这个缓存。\n\n+ 使用方法：\n\n```python\nimport requests\n\nurl = \"https://www.xxx.com/\"\nnew_url = f\"https://webcache.googleusercontent.com/search?q=cache:{url}\"\nresponse = requests.get(new_url)\nprint(response.text)\n#提取所需数据　　\n```\n\n## **方法三：undetected_chromedriver**\n\n如果您使用Selenium抓取网页时被封禁，可以尝试使用undetected_chromedriver库。该库是一个自动化工具，更简单且不容易被封禁，甚至无需下载驱动。\n\n+ 安装方法：\n\n```bash\npip3 install undetected-chromedriver\n```\n\n+ 使用方法：\n\n```python\nimport undetected_chromedriverasuc\nurl = \"https://www.baidu.com/\"\ndriver = uc.Chrome()\ndriver.get(url)\n```\n\n## **方法四：使用付费代理**\n\n目前有很多成熟的代理服务可供使用。通过使用付费代理，可以有效绕过Cloudflare的反爬机制。请选择合适的代理服务商，并根据提供的API密钥设置代理。\n\n+ 使用方法：\n\n```python\nimport requests\n\nurl = \"https://xxxx.com/\"\napi_key = \"一长串密钥\"\nproxy=f\"http://{api_key}:@proxy.zenrows.com:8001\"\nproxies={\"http\": proxy, \"https\": proxy}\nresponse=requests.get(url, proxies=proxies, verify=False)\n#处理响应数据\n```\n\n## **方法五：使用穿云API**\n\n　　穿云API是一个可以绕过Cloudflare的反机器人验证、CAPTCHA验证、WAF和CC防护的解决方案。它提供了HTTPAPI和代理功能，并可设置Referer、浏览器UA和headless状态等浏览器指纹设备特征。\n\n　　使用穿云API可以轻松[绕过Cloudflare验证](https://www.cloudbypass.com/)，即使需要发送大量请求也不必担心被识别为抓取者。\n","tags":["逆向","Cloudflare","记录"],"categories":["_A7-逆向","Cloudflare"]},{"title":"Typora、Qv2ray、Typora、Uninstaller","url":"/2023/07/11/必备工具/","content":"\n\n\n## 必备工具获取、下载\n\n<!--more-->\n\n#### 1、Typora 版本v1.0\n\n+ [`Mac Os`版下载](https://bd.bcebos.com/v1/xly-icafe/typora-0.9.9.34.1-20230711135144-mzvutn.dmg)\n+ [`windows`版下载](https://bd.bcebos.com/v1/xly-icafe/typora-setup-x64-20230711135722-voidbp.exe)\n\n<br>\n\n------\n\n<br>\n\n#### 2、Pycharm专业版+激活\n\n+ 官方渠道下载 IDE： [`点击进入`](https://www.jetbrains.com/pycharm/download/other.html)\n\n+ 亲测可用：`mac2021激活`[点击下载](https://bd.bcebos.com/v1/xly-icafe/macjihuo-20230714173437-xqdtdy.zip)\n\n+ [`linux` zip版下载](https://bd.bcebos.com/v1/xly-icafe/linux-20230711135957-rf7v0e.zip)\n\n+ [`Mac` zip版下载](https://bd.bcebos.com/v1/xly-icafe/mac-20230711140244-5mamhz.zip)\n\n+ [`windows` zip版下载](https://bd.bcebos.com/v1/xly-icafe/windows-20230711140345-2wukes.zip)\n\n+ <font color=#f26522 size=4 face=宋体><strong>**Pycharm激活教程:      [点击进入](https://www.yuque.com/lanchuan-vm6pi/buhvby/irtn6mlnmt1vuzgx?singleDoc)**</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>**二次购买：Pycharm激活教程:      [点击进入]([激活教程-mac版，支持2017-2023所有专业版 (yuque.com)](https://www.yuque.com/ningmengna-6ulrv/pfdno5/qtzl0p93s0icva9d))**</strong></font>\n\n<br>\n\n------\n\n<br>\n\n#### 3、Qv2ray 主程序 + 核心\n\n+ [Qv2ray_简易安装 程序三端](https://bd.bcebos.com/v1/xly-icafe/qv2ray_%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85%20%E7%A8%8B%E5%BA%8F%E4%B8%89%E7%AB%AF-20230711145621-gvow7b.zip)\n\n+ [Qv2ray 主程序下载](https://github.com/Qv2ray/Qv2ray/releases)\n\n+ [QV2ray_核心下载](https://github.com/v2ray/v2ray-core/releases)\n\n+ QV2ray 各类插件下载\n\n  + 插件 ：[Trojan](https://github.com/Qv2ray/QvPlugin-Trojan/releases/tag/v3.0.0-pre3)\n\n  + 插件 ：[SSR](https://github.com/Qv2ray/QvPlugin-SSR/releases/tag/v3.0.0-pre3)\n  + 插件 ：[NaiveProxy](https://github.com/Qv2ray/QvPlugin-NaiveProxy/releases/tag/v3.0.0-pre3)\n  + 插件 ：[Trojan-Go](https://github.com/Qv2ray/QvPlugin-Trojan-Go/releases/tag/v3.0.0-pre3)\n  + 插件 ：[SS](https://github.com/Qv2ray/QvPlugin-SS/releases/tag/v3.0.0-pre3)\n  + 插件 ：[Command](https://github.com/Qv2ray/QvPlugin-Command/releases/tag/v3.0.0-pre3)\n\n<br>\n\n------\n\n<br>\n\n#### 4、mysql安装下载网址\n\n+ [`mysql安装下载网址`](https://downloads.mysql.com/archives/community/)\n\n<br>\n\n------\n\n<br>\n\n#### 5、App Cleaner & Uninstaller for mac(mac应用清理和卸载软件)v8.2.1中文激活版\n\n[`App Cleaner & Uninstaller_激活版下载`](https://bd.bcebos.com/v1/xly-icafe/app%20cleaner%20%26%20uninstaller%20for%20mac%28mac%E5%BA%94%E7%94%A8%E6%B8%85%E7%90%86%E5%92%8C%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6%29v8.2.1%E4%B8%AD%E6%96%87%E6%BF%80%E6%B4%BB%E7%89%88-20230713200358-ylswgj.dmg)\n\n<br>\n\n------\n\n<br>\n\n#### 6、mysql安装下载网址\n\n+ [`mysql安装下载网址`](https://downloads.mysql.com/archives/community/)\n\n<br>\n\n------\n\n<br>\n\n#### 7、fanmugua + HttpCanary(安卓抓包工具)\n\n[`fanmugua + HttpCanary(安卓抓包工具)`](https://bd.bcebos.com/v1/xly-icafe/%E7%95%AA%E6%9C%A8%E7%93%9C%2B%E6%89%8B%E6%9C%BAapk%E6%8A%93%E5%8C%85-20230928122154-gnuj5h.zip)\n\n<br>\n\n------\n\n<br>\n","tags":["必备工具"],"categories":["_A8-工具","其他工具"]},{"title":"python中unicode编码转换为中文","url":"/2023/05/27/python中unicode编码转换为中文/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>python中unicode编码转换为中文：</strong></font>\n\n<!--more-->\n\n<font color=#b0171f size=2 face=宋体><strong>我们使用python中，遇到爬取网站情况，用到unicode编码，我们需要将它转换为中文，unicode编码转换为中文的方法有四种：使用unicode_escape 解码、使用encode()方法转换，再调用bytes.decode()转换为字符串形式、 使用json.loads 解码（为json 格式）、使用eval（遇到Unicode是通过requests在网上爬取的时候）。具体内容请看本文。</strong></font>\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>**方法一：使用unicode_escape 解码：**</strong></font>\n\n```python\nunicode = b'\\\\u4f60\\\\u597d'\nre = unicode.decode(\"unicode_escape\")\nprint(re)\n\n返回：你好\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>**方法二：使用encode()方法转换，再调用bytes.decode()转换为字符串形式：**</strong></font>\n\n```python\ns = r'\\u4f60\\u597d'\nprint(s.encode().decode(\"unicode_escape\"))\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>**方法三： 使用json.loads 解码（为json 格式）：**</strong></font>\n\n```python\nstr = '\\u4eac\\u4e1c\\u653e\\u517b\\u7684\\u722c\\u866b'\n \nprint json.loads('\"%s\"' %str)\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>**方法四：使用eval（遇到Unicode是通过requests在网上爬取的时候）：**</strong></font>\n\n```python\nresponse = requests.get(url,headers=headers)\nre = eval(\"u\"+\"\\'\"+response.text+\"\\'\")\nprint(re)\n```\n\n<br>\n\n<br>\n\n<br>\n\n---\n","tags":["python","编码、解码","unicode"],"categories":["Python","编码、解码"]},{"title":"Ubuntu20.04 idea/pycharm 搜狗中文输入法不跟随光标问题","url":"/2023/05/27/Ubuntu20-04-idea-pycharm-搜狗中文输入法不跟随光标问题/","content":"\n# <font color=#00b2c2 size=6 face=宋体><strong>Ubuntu20.04 idea/pycharm 搜狗中文输入法不跟随光标问题</strong></font>\n\n<!--more-->\n\n![img](https://s2.loli.net/2023/05/27/JoPT7FZjWrh2aku.png)\n\n该文转载自CSDN：https://blog.csdn.net/w710537643/article/details/114386827\n\n### <font color=#00b2c2 size=5 face=宋体><strong>概述：</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>在 linux 平台下使用搜狗输入法在 IDEA/PYCHARM（pycharm2020.3） 中输入中文时，输入法候选框总是静止在 IDEA 的左下角，而不能跟随光标进行移动。虽然不影响输入结果，但很影响输入体验。并且其实网上确实给了一些解决方法，但好多时候，这些解决方法对小白不太友好，因此，此处我尝试站在巨人的肩膀上，对前辈的一些方法进行整合并且给出比较详细的解决步骤。</strong></font>\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>**系统环境：**</strong></font>\n\n```\nKDE Plama Version:5.19.5\nKDE Frameworks Version:5.73.0\nKernel Version:5.8.6-1-MANJARO\n```\n\n+ <font color=#f26522 size=4 face=宋体><strong>**硬件环境：**</strong></font>\n\n```\n处理器：Intel Core i5-8500 cp @3.00GHz\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>问题定位：</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>具体问题官方其实七年前就有了（参考 </strong></font>https://youtrack.jetbrains.com/issue/JBR-2460<font color=#b0171f size=2 face=宋体><strong>），但是比较坑的是官方也一直没有解决这个问题🐶（此处忍不住吐槽一下哈）。简单来说就是 `Idea` 的 `jre` 运行环境一个 bug，导致输入法无法定位到鼠标位置。因此，我们要解决该问题必须要修改 `JetBrainsRuntime` 的运行代码。</strong></font>\n\n\n\n<br>\n\n---\n\n<br>\n\n<font color=#00b2c2 size=5 face=宋体><strong>解决方法：</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>如果只是想快速解决该问题，而对其原理不感兴趣的话，仅仅使用方法 1 即可。</strong></font>\n\n## <font color=red size=6 face=宋体><strong>方法 1：</strong></font>修改 `JetBrainsRuntime`\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、下载已经修改好的 JRE 环境</strong></font>\n  + <font color=#00b2c2 size=3 face=宋体><strong>下载地址 1：</strong></font>[<font color=#b0171f size=3 face=宋体><strong>**`坚果云 点击下载`**</strong></font>](https://www.jianguoyun.com/p/DQDdJs4QtIDzBxj6y9oD)\n  + <font color=#00b2c2 size=3 face=宋体><strong>下载地址 2：</strong></font>[<font color=#b0171f size=3 face=宋体><strong>**`百毒盘 点击下载`**</strong></font>](https://bd.bcebos.com/v1/xly-icafe/java-11.0.7-jetbrain-20230527114819-6o5hbd.zip)\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、下载完成后解压到任意目录，此处我是解压到了 `~/application` 目录下</strong></font>\n\n![](https://s2.loli.net/2023/05/27/MEcCsvoNSyp4bLq.webp)\n\n+ <font color=#f26522 size=4 face=宋体><strong>3、更改 IDEA 的启动环境</strong></font>\n\n修改文件:` home/idea-2020.1/bin/idea.sh (找到你自己的idea的安装路径)` 在开头处添加\n\n`export IDEA_JDK=xport IDEA_JDK=/home/xu/application/java-11.0.7-jetbrain`（改成自己的 JRE 目录）\n\npycharm 修改方式 `export PYCHARM_JDK=/home/xu/application/java-11.0.7-jetbrain `\n\n![](https://s2.loli.net/2023/05/27/Yb1GgIMTAB4XEVf.png)\n\n<br>\n\n<font color=red size=5 face=宋体><strong>重启软件</strong></font>\n\n<br>\n\n---\n\n<br>\n\n<br>\n\n<br>\n\n## <font color=red size=6 face=宋体><strong>方法 2：</strong></font>使用 path 编译 `JetBrainsRuntime`\n\n+ <font color=#f26522 size=4 face=宋体><strong>1、从 Github 下载 JetBrainsRuntime，执行如下代码：</strong></font>\n\n```bash\ngit clone https://github.com/JetBrains/JetBrainsRuntime.git\n1\n```\n\n+ <font color=#f26522 size=4 face=宋体><strong>2、应用 patch</strong></font>\n\npatch 下载地址: https://github.com/prehonor/myJetBrainsRuntime\n\n```bash\n#将Path放到JetBrainsRuntime的根目录下\ncd JetBrainsRuntime\n# 应用Patch\ngit apply idea.patch\n1234\n```\n\n<font color=#f26522 size=4 face=宋体><strong>3、编译(有风险 缺少大量依赖库，建议提前备份系统快照) `JetBrainsRuntime`</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>这个可以参照官方的提供的方式来进行编译：[戳我](https://github.com/JetBrains/JetBrainsRuntime?utm_source=ld246.com)。但就我个人尝试的情况来看，使用 docker 编译或者直接在自己的 Arch linux 中进行编译都会出现错误。最终可行的方式是使用虚拟机虚拟一个 Ububtu 20.0.4 的环境进行编译。但需要主要的是给该虚拟分配的内存空间应该大于 2G，否则可能出现内存不足，编译错误的情况发生。</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>4、参考方法一种的步骤，应该编译好的 JRE 环境。</strong></font>\n","tags":["工具","编译器","错误","pycharm"],"categories":["_A5-安装教程","ubuntu"]},{"title":"逆向_反爬 指纹攻破策略","url":"/2023/05/26/逆向-反爬-指纹攻破策略/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>逆向_反爬 指纹攻破策略：</strong></font>\n\n<!--more-->\n\n关于 cloudflare 出5秒盾规律：\n\n+  开始我以为是所有的网页都会出现5秒盾，但是后面我发现用浏览器打开有些网页，是不触发5秒盾的\n+ 毕竟5秒盾还是影响用户浏览的。\n+ 经过测试，在requests下会发送很多指纹，这些指纹大大的超过了，一个正常浏览器该有的指纹。\n+ cloudflare 是根据给出的指纹检测的 该请求是由浏览器发出，还是由爬虫发出的\n\n\n\n<br>\n\n---\n\n<br>\n\n<font color=red size=6 face=宋体><strong>解决办法：</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>神奇的 python 第三方库 curl_cffi</strong></font>\n+ 库说明  >>> <font color=red size=3 face=宋体><strong>curl_cffi</strong></font> 库封装支持原生模拟浏览器TLS/JA3 指纹的Python 库\n\n```python\npip3 install curl_cffi   # 安装库\n```\n\n\n\n<br>\n\n<font color=#00b2c2 size=5 face=宋体><strong>请求方式：</strong></font>\n\n```python\nfrom curl_cffi import requests  # 导入 curl_cffi 库\n\n# 请求\nr = requests.get(url, impersonate=\"chrome101\", timeout=(5, 10))\n```\n\n","tags":["逆向","记录"],"categories":["_A7-逆向","curl_cffi"]},{"title":"关于GitHub静态文件加速","url":"/2023/05/22/关于GitHub静态文件加速/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>关于GitHub静态文件加速：</strong></font>\n\n<!--more-->\n\n```\nhttps://cdn.jsdelivr.net/gh/T25kevin/static@main/static/lib/init.css\nhttps://cdn.jsdelivr.net/gh/<用户名>/<仓库名>@main<仓库下文件路径>\n```\n\n","tags":["Github加速"],"categories":["_A8-工具","GitHub"]},{"title":"猫耳FM（MissEvan）加密参数破解代码及接口汇总","url":"/2023/05/22/猫耳FM（MissEvan）加密参数破解代码及接口汇总/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>猫耳FM（MissEvan）加密参数破解代码及接口汇总</strong></font>\n\n<!--more-->\n\n这次找了个简单的app来练练手，小众app逆向起来还是简单的，猫耳的app既没有壳有没有native层，仅仅只有一个加密参数，这里就直接上代码了。\n\n\n\n# 通用headers：\n\n```javascript\nheader = {\n  'user-agent': 'MissEvanApp/5.5.0 (Android;5.1.1;Android OPPO R17 Pro shamu)',\n  'channel': 'missevan_huawei',\n  'Content-Type':'application/json; charset=UTF-8',\n  'Accept':'application/json',\n  'cookie': 'token=xxx; equip_id=xxx',// token为账号的标识（没有则去除），equip_id为deviceid\n  'authorization': '',//这个就是加密参数，生成代码看下面\n  'x-m-date': '2021-03-23T16:08:44Z',// 时间，可传空字符串\n  'x-m-nonce': '62271935-318e-4ff1-ba91-685579a9cdbc'// nonce，可传空字符串\n}\n```\n\n\n\n# authorization参数生成代码（python）：\n\n```python\n# 此方法的实参为url，请求方法（GET与POST），请求头与请求体（是GET可不传）\ndef fun(url,method,header,body):\n  data = ''\n  qs = url.split('?')[1] if len(url.split('?')) > 1 else ''\n  url = urllib.parse.quote(url.split('?')[0])\n  equip_id = re.findall(r'equip_id=(\\S+?);',header['cookie'])[0] if re.findall(r'equip_id=(\\S+?);',header['cookie']) else re.findall(r'equip_id=(\\S+?)$codeholder_1#39;,header['cookie'])[0]\n  token = re.findall(r'token=(\\S+?);',header['cookie']) if re.findall(r'token=(\\S+?);',header['cookie']) else re.findall(r'token=(\\S+?)$codeholder_1#39;,header['cookie'])\n  token = token[0] if len(token) else None\n\n  data += method + '\\n'\n  data += url + '\\n'\n  data += qs + '\\n'\n  data += 'equip_id:' + equip_id + '\\n'\n  if token != None:\n    data += 'token:' + token + '\\n'\n  data += 'x-m-date:' + header['x-m-date'] + '\\n'\n  data += 'x-m-nonce:' + header['x-m-nonce'] + '\\n'\n  if method == 'POST':\n    sha = sha256()\n    sha.update(body.encode('utf-8'))\n    body = base64.b64encode(sha.digest()).decode('utf-8')\n    data += body + '\\n'\n\n  signature = base64.b64encode(hmac.new(appsecret.encode('utf-8'), data.encode('utf-8'), digestmod=sha256).digest())\n  # 这里直接将参数传进请求头中\n  header['authorization'] = 'MissEvan '+signature.decode('utf-8')\n```\n\n\n\n# 接口：\n\n1.https://app.missevan.com/sound/sound?sound_id=xxx\n\n获取音频资源地址，sound_id参数为音频的id\n\n\n\n2.https://app.missevan.com/you-might-like/get-recommends?persona_id=xxx\n\n”猜你喜欢“列表，persona_id参数意义不明，不过不同数字返回不同列表\n\n\n\n3.https://app.missevan.com/drama/get-drama-by-sound?sound_id=xxx\n\n音频相关信息，sound_id参数为音频的id\n\n\n\n4.https://app.missevan.com/message/get-comments?order=1&type=1&e_id=xxx&page=1&page_size=20&recommend=1&recommend_page_size=10\n\n音频评论列表，e_id参数为音频的id,page与page_size参数指定列表页数与大小\n\n\n\n5.https://app.missevan.com/sound/recommend?sound_id=1226753\n\n音频相关推荐列表，sound_id参数为音频的id\n\n\n\n6.https://app.missevan.com/member/login\n\n登录，此api为post方法，请求体为如下字符串：\n\naccount=xxx&password=xxx\n\naccount为你的手机号，password为密码，会返回token以及用户信息，将token加入cookie中则可使用账号访问\n\n\n\n7.https://app.missevan.com/person/get-user-info?user_id=5922770\n\n用户信息1，user_id参数为用户id\n\n\n\n8.https://app.missevan.com/person/homepage?user_id=5922770\n\n用户信息2，user_id参数为用户id\n","tags":["逆向","记录"],"categories":["_A7-逆向","app"]},{"title":"逆向app记录","url":"/2023/05/22/逆向app记录/","content":"\n函数入口：\n\n<!--more-->\n\n![image-20230309145137516](https://s2.loli.net/2023/05/26/fsRG6vZlICrO7e8.png)\n\n![image-20230309150703294](https://s2.loli.net/2023/05/26/4HF7qlDZmwr51NM.png)\n\n![image-20230309150720478](https://s2.loli.net/2023/05/26/DW1COxUHVk9vGE8.png)\n\n![image-20230309222050257](https://s2.loli.net/2023/05/26/8ZuoQLAgrEBbOYK.png)\n\n","tags":["逆向","记录"],"categories":["_A7-逆向","app"]},{"title":"VMware_所有版本许可证","url":"/2023/05/22/VMware-所有版本许可证/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**激活密钥许可证**</strong></font>\n\n<!--more-->\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>**VM17 激活许可证**</strong></font>\n\n```\nMC60H-DWHD5-H80U9-6V85M-8280D\n\nJU090-6039P-08409-8J0QH-2YR7F\n\n5Y012-8HL8P-0J8U0-032Q6-93KKF\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>**VM16 激活许可证**</strong></font>\n\n```\nZF3R0-FHED2-M80TY-8QYGC-NPKYF\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>**VM15 激活许可证**</strong></font>\n\n```\nUY758-0RXEQ-M81WP-8ZM7Z-Y3HDA\n\nVF750-4MX5Q-488DQ-9WZE9-ZY2D6\n\nUU54R-FVD91-488PP-7NNGC-ZFAX6\n\nYC74H-FGF92-081VZ-R5QNG-P6RY4\n\nYC34H-6WWDK-085MQ-JYPNX-NZRA2\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>**VM14 激活许可证**</strong></font>\n\n```\nFF31K-AHZD1-H8ETZ-8WWEZ-WUUVA\n\nCV7T2-6WY5Q-48EWP-ZXY7X-QGUWD\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>**VM12 激活许可证**</strong></font>\n\n```\n5A02H-AU243-TZJ49-GTC7K-3C61N\n\nVF5XA-FNDDJ-085GZ-4NXZ9-N20E6\n\nUC5MR-8NE16-H81WY-R7QGV-QG2D8\n\nZG1WH-ATY96-H80QP-X7PEX-Y30V4\n\nAA3E0-0VDE1-0893Z-KGZ59-QGAVF\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>**VM10 激活许可证**</strong></font>\n\n```\n1Z0G9-67285-FZG78-ZL3Q2-234JG\n\n4C4EK-89KDL-5ZFP9-1LA5P-2A0J0\n\nHY086-4T01N-CZ3U0-CV0QM-13DNU\n```\n\n","tags":["错误","虚拟机"],"categories":["_A8-工具","虚拟机"]},{"title":"Ubuntu20.04_VMware_显示内核更新错误","url":"/2023/05/22/Ubuntu20-04-VMware-显示内核更新错误/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Ubuntu20.04_VMware_显示内核更新错误</strong></font>\n\n<!--more-->\n\n<font color=red size=6 face=宋体><strong>说明：</strong></font><font color=#b0171f size=3 face=宋体><strong>unable to install all modules. see log /tmp/vmware</strong></font>\n\n```shell\ngit clone https://github.com/mkubecek/vmware-host-modules\ncd vmware-host-modules\ngit checkout workstation-16.1.1\nsudo make\nsudo make install\n```\n\n","tags":["错误","虚拟机"],"categories":["_A5-安装教程","ubuntu"]},{"title":"ubuntu 20.04安装_Hexo_blog到gitee教程","url":"/2023/05/22/ubuntu-20-04安装-Hexo-blog到gitee教程/","content":"\n#### <font color=#00b2c2 size=5 face=\"宋体\"><strong>系统:ubuntu 20.04：</strong></font>\n\n<!--more-->\n\n```shell\n# 安装nodejs npm\nsudo apt update\nsudo apt install nodejs npm\n\n# 查看版本\nnodejs --version\n```\n\n![image-20230214204218762](https://s2.loli.net/2023/02/14/SZ1iWgvyFUYn9t2.png)\n\n\n\n\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>1、我们将会安装 Node.js 版本 14.x:</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>1）以 sudo 用户身份运行下面的命令，下载并执行 NodeSource 安装脚本：</strong></font>\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\n```\n\n\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>这个脚本将会添加 NodeSource 的签名 key 到你的系统，创建一个 apt 源文件，安装必备的软件包，并且刷新 apt 缓存。</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>如果你需要另外的 Node.js 版本，例如`12.x`，将`setup_14.x`修改为`setup_12.x`</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>2）NodeSource 源启用成功后，安装 Node.js 和 npm:</strong></font>\n\n```bash\nsudo apt install nodejs\n```\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>nodejs 软件包同时包含`node`和`npm`二进制包。</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>3）验证 Node.js 和 npm 是否正确安装。打印它们的版本号：</strong></font>\n\n```bash\nnode --version\n```\n\n![image-20230214204628631](https://s2.loli.net/2023/02/14/WEa4s2cqZ8PVyBu.png)\n\n\n\n\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>**2、运行 Git Bash 并切换淘宝镜像。**</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>如果不需要切换源，则可跳过此步骤：</strong></font>\n\n```bash\n# 全局切换命令：\nnpm config set registry http://registry.npm.taobao.org/\n\n# 查看版本命令：\nnpm get registry\n\n# 切回官方镜像：\nnpm config set registry http://www.npmjs.org\n```\n\n\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>**3、安装HEXO程序**</strong></font>\n\n```bash\nnpm install -g hexo\n\n# 查看版本：\nhexo v\n```\n\n\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>**4、创建 hexo 文件夹**</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>hexo 文件夹，是未来博客运转的目标文件夹，写文、主题安装等等都在这里完成。</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>请在指定路径新建文件夹（英文名），右键空白处，选择 Git Bash here，输入指令：</strong></font>\n\n```bash\nhexo init\n```\n\n\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>**5、安装主题**</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>现在这个是必须过程了，反正自带的主题也没人用不是么？</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>6.1 在 theme 文件夹下，建立你要使用的主题的同名文件夹，比如 theme/next</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>6.2 cd 到 theme 文件夹，或者直接在 theme 文件夹里右键运行 Git Bash。</strong></font>\n\n<font color=#f26522 size=3 face=\"宋体\"><strong>6.3 输入获取主题的命令：</strong></font>\n\n```shell\ngit clone -b theme https://github.com/niemingzhao/niemingzhao.github.io.git themes/default\n```\n\n![](https://s2.loli.net/2023/02/14/vC7O9xZuoVTRJht.png)\n\n\n\n<font color=red size=3 face=\"宋体\"><strong>**注意：在修改模板的时候，除了需要到主配置下添加模板名以外，还需要将主题下的配置文件修改为 _config.yml**</strong></font>\n\n\n\n\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>**6、Hexo 主要命令**</strong></font>\n\n```bash\nhexo clean：清除 public 静态目录\nhexo s：本地启动默认指定 4000 端口预览 (s 是 server 是缩写 也就是启动 hexo 服务)\nhexo g：生成 public 静态目录\nhexo d： 部署\n```\n\n\n\n\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>**7、Hexo 插件安装**</strong></font>\n\n```bash\nnpm install hexo-generator-search --save\n# 评论插件\nnpm i --save gitalk\n\n# RSS插件\nnpm install --save hexo-generator-feed\n\n# 安装 文章转换二维码插件\nnpm install --save hexo-helper-qrcode\n\n# gitee版本插件安装\nnpm install --save gitment\n```\n\n\n\n","tags":["Hexo","blog","linux"],"categories":["_A8-工具","Hexo"]},{"title":"安装nodejs-cnpm","url":"/2023/05/22/安装nodejs-cnpm/","content":"\n<strong><a class=\"wp-editor-md-post-content-link\" href=\"https://nodejs.org\">nodejs官方网址</a></strong>\n\n<!--more-->\n\n**Nodejs v16.13.0：**[**官方版**](https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz)、[直链下载](https://bd.bcebos.com/v1/xly-icafe/node-v16.2.0-linux-x64.tar-20240525034348-plibvg.xz)\n\n**Nodejs v20.0.0：**[**官方版**](https://nodejs.org/dist/v20.2.0/node-v20.2.0-linux-x64.tar.xz)、[直链下载](https://bd.bcebos.com/v1/xly-icafe/node-v20.2.0-linux-x64.tar-20240525034121-bpmrw1.xz)\n\n**Nodejs v22.0.0：**[**官方版**](https://nodejs.org/dist/v22.0.0/node-v22.0.0-linux-x64.tar.xz)、[直链下载](https://bd.bcebos.com/v1/xly-icafe/node-v22.0.0-linux-x64.tar-20240525034203-hmckok.xz)\n\n```python\n# 下载nodejs v22\nwget -O node-v22.0.0-linux-x64.tar.xz https://bd.bcebos.com/v1/xly-icafe/node-v22.0.0-linux-x64.tar-20240525034203-hmckok.xz\n\n# 下载完成之后 使用：tar -xf <文件>  解压 *.tar.xz文件\ntar -xf node-v16.13.0-linux-x64.tar.xz\n# 将文件移动到opt文件夹下\nmv node-v16.13.0-linux-x64 /opt\n# 创建全局变量，使node在任何地方都能使用\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/node /usr/local/bin/node\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/npm /usr/local/bin/npm\n# 到此 node和 npm 就算安装完成了\nnode -v   # 查看node版本信息\nnpm -v   # 查看npm版本信息\n# 接下来，开始安装cnpm\n# cnpm是npm的国内源，其服务器是淘宝的，所以国内比较快\n# cnpm的执行过程是先去淘宝源下找软件，当淘宝源下没有所需要的包，会自动到npm服务器下寻找包\nnpm install -g cnpm --registry=https://registry.npm.taobao.org  # 定义cnpm淘宝源码\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/cnpm /usr/local/bin/cnpm  #   创建全局变量\n```\n","tags":["工具","nodejs","安装"],"categories":["_A5-安装教程","Node"]},{"title":"宝塔面板_历史版本_脱离官方下载","url":"/2023/05/22/宝塔面板-历史版本-脱离官方下载/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>宝塔面板_历史版本_脱离官方下载：</strong></font>\n\n<!--more-->\n\n<h2>1. 历史版本宝塔下载链接（防止官方删除历史版本，自备！觉得别扭的，请绕道）</h2>\n\n<ul>\n<li><strong>宝塔_5.9.1（目前仍然很多人在用的版本）: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-5.9.1-20220110194703-1yjs8u.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.0.1: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.0.1-20220110195051-tayf6k.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.0.2: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.0.2-20220110195123-qyqem3.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.0.3: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.0.3-20220110195157-yssexv.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.1.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.1.0-20220110195229-gknrfv.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.1.1: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.1.1-20220110195255-p3429k.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.2.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.2.0-20220110195320-namkvo.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.3.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.3.0-20220110195346-wymfbj.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.0-20220110195410-3zwqjb.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.2（有pma漏洞）: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.2-20220110195440-s6mdnj.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.3: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.3-20220110195505-kzoodl.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.4.5（会有绑定提醒）: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.4.5-20220110195541-sl6r0j.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.6.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.6.0-20220110211834-kfdtd3.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.7.0: <a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/linuxpanel-7.7.0-20220110211841-kjhxx3.zip\">点击下载</a></strong></li>\n<li><strong>宝塔_7.8.0: <a class=\"wp-editor-md-post-content-link\" href=\"http://download.bt.cn/install/update/LinuxPanel-7.8.0.zip\">点击下载</a></strong></li>\n</ul>\n\n<h2>2. 安装方法</h2>\n\n<ul>\n<li>先使用宝塔官方命令正常安装，之后在进行升级/降级操作</li>\n<li><strong>Centos安装命令：</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">yum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n</code></pre>\n\n<ul>\n<li><strong>Ubuntu/Deepin安装命令：</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && sudo bash install.sh\n</code></pre>\n\n<ul>\n<li><strong>Debian安装命令：</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && bash install.sh\n</code></pre>\n\n<ul>\n<li><strong>Fedora安装命令:</strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">wget -O install.sh http://download.bt.cn/install/install_6.0.sh && bash install.sh\n</code></pre>\n\n<ul>\n<li><strong><em>*Linux面板7.9.0升级命令：*</em></strong></li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">curl https://download.bt.cn/install/update_panel.sh|bash\n</code></pre>\n\n<h2>3. 官方手动升级方法</h2>\n\n<pre><code class=\"language-shell line-numbers\">离线升级步骤：\n1、下载离线升级包\n2、将升级包上传到服务器中的/root目录\n3、解压文件：unzip LinuxPanel-*\n4、切换到升级包目录： cd panel\n5、执行升级脚本：bash update.sh\n6、删除升级包：cd .. && rm -f LinuxPanel-*.zip && rm -rf panel\n</code></pre>\n\n<h2>4. 为了更安全，你可以执行以下内容，避免一些问题<del></del></h2>\n\n<pre><code class=\"language-shell line-numbers\">echo '127.0.0.1 bt.cn' >>/etc/hosts\n</code></pre>\n\n<h2><strong>5. 面板管理常用命令：</strong> https://www.bt.cn/btcode.html</h2>\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n","tags":["系统","运维","宝塔"],"categories":["_A3-linux","宝塔面板"]},{"title":"利用阿里云工单客服系统做免费图床","url":"/2023/05/22/利用阿里云工单客服系统做免费图床/","content":"\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>我自己是不用这个图床的，本人有某度！那个还是很稳定的！所以没必要搞很多个，精力耗不起</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>有需要的可以自行测试，另外根据原作者的意思，key过期了</strong></font>\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>可以去这里浏览原网页：<a class=\"wp-editor-md-post-content-link\" href=\"https://bbs.itzmx.com/thread-96020-1-1.html\">点击浏览</a></strong></font>\n\nhttps://kfupload.alibaba.com/mupload\nPOST 参数        类型        说明\nfile 表单 文件的二进制数据\nname 参数        随机文件名.jpg\nscene 参数        固定为 aeMessageCenterV2ImageRule\n支持 JPG、PNG、GIF 格式\n文件大小限制为 5MB\n无需身份验证\n5MB的GIF效果图：\n<img src=\"https://ae01.alicdn.com/kf/H5fad35d66dca46108a4898efc0c79f7cT.jpg\" alt=\"5MB图片效果\" />\nURL：https://ae01.alicdn.com/kf/H5fad35d66dca46108a4898efc0c79f7cT.jpg\nURL2：https://sc01.alicdn.com/kf/H5fad35d66dca46108a4898efc0c79f7cT.jpg\ngoogle检索了下还有个店铺接口：https://cbu01.alicdn.com/img/ibank/2018/578/980/8997089875_53215101.jpg\n回源限速800KB，CDN缓存后边缘节点不限速，10Gbps可跑满\n\n请求类型：POST\n\nURL：https://kfupload.alibaba.com/mupload\n\n文件表单名称：file\n\n参数：scene，值写aeMessageCenterV2ImageRule\n\n参数：name，值写随机.jpg\n\n响应类型，文本，URL值为：$json:url$\n要导入的话可以直接复制这个剪贴板导入，记得改成自己的Token就能直接用了：\n\n<pre><code class=\"language-shell line-numbers\">{\n  \"Name\": \"kfupload.alibaba.com\",\n  \"DestinationType\": \"ImageUploader, FileUploader\",\n  \"RequestType\": \"POST\",\n  \"RequestURL\": \"https://kfupload.alibaba.com/mupload\",\n  \"FileFormName\": \"file\",\n  \"Arguments\": {\n    \"scene\": \"aeMessageCenterV2ImageRule\",\n    \"name\": \"itzmx.jpg\"\n  },\n  \"ResponseType\": \"Text\",\n  \"URL\": \"$json:url$\"\n}\n</code></pre>\n\n用来搞视频干啥都行\nhttps://jsbin.com/nofapagalo/edit?html,output\n注：没有并发数限制，但是1分钟（可能是10分钟）内上传达到第255个图片会触发ip封禁10分钟，也就是最多只能传254个文件，后面文件就会跳验证码，验证码使用了cookie记录，只需要把cookie拿下来给脚本用就行了\n服务器不接受xff，用xff伪造IP服务器不认，代码可以不用写这块没必要。\n<img src=\"https://s2.loli.net/2022/06/08/TmJEheiAIwS7RYO.png\" alt=\"\" />\n<img src=\"https://s2.loli.net/2022/06/08/w2hMIplreBzGutW.webp\" alt=\"\" />\n有cookie后可以绕过验证码出现，可以用无痕浏览器测试，每次都会跳验证码，因为不存在cookie，通过插件提交cookie后就不会跳验证了，或者脚本上写个限制1分钟最多传254个文件\n<img src=\"https://s2.loli.net/2022/06/08/CLxIqZOGJ3uW6yl.webp\" alt=\"\" />\n\n<pre><code class=\"line-numbers\">cookie: _uab_collina=159561074724936294593423; cna=ewSiFzONtW4CAXW3AF8ObdHU; x5sec=7b22736370726f78793b32223a2266636564636334376266313139313635616439373061346438356230333964344350717337506746454c3644383966596b5a474f6e41453d227d; isg=BImJ5hTjMiNB-s7XjdWWNVEsmLXj1n0It9DhIiv-2HCvcqiEcyRA2RQjtNZEKhVA; l=eBam3Oe7OP5g1GPGBO5ZPurza77taIRb8sPzaNbMiInca6Nl9eaAVNQqIXGBWdtjgt5cyetrA42DhR32Wba38-M5CY3ZqMKvK3J68e1..\n</code></pre>\n\nffmpeg 无损HLS切片参数例如，注意压制时关键帧设置1秒\nffmpeg -y -i rc-24.mkv -c:a copy -c:v copy -hls_time 1 -hls_list_size 0 -hls_key_info_file videokey.info abc.m3u8\n\n用来搞视频的话，建议crf19，峰值码率40000，缓冲区5000，关键帧1秒，这样可以传BD高清无损！\n","tags":["图床"],"categories":["_S9-折腾","白嫖"]},{"title":"浏览器强制跳转https的解决方法","url":"/2023/05/22/浏览器强制跳转https的解决方法/","content":"\n<h1>谷歌浏览器强制跳转到 https 的解决办法</h1>\n\n<!--more-->\n\n<h2>1. 在谷歌浏览器的地址栏输入：chrome://net-internals/#hsts</h2>\n\n<h2>2. 可以看到如下的页面：</h2>\n\n![](https://s2.loli.net/2022/06/08/5ucC8SWv6hEGOZJ.png)\n\n<h2>3. Delete domain 栏的输入框中输入http访问的域名，点击“delete”按钮。</h2>\n\n<h2>4. Query domain 栏中搜索刚才输入的域名，点击“query”按钮后如果提示“Not found”，完成配置。</h2>\n","tags":["浏览器","跳转"],"categories":["_A9-错误解决","浏览器强制跳转到https解决"]},{"title":"秋水版SSR教程","url":"/2023/05/22/秋水版SSR教程/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>秋水版SSR教程：</strong></font>\n\n<!--more-->\n\n<h1><a class=\"wp-editor-md-post-content-link\" href=\"https://www.v2rayssr.com/qiushuissr.html\">秋水版SSR</a></h1>\n\n<pre><code class=\"language-shell line-numbers\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n</code></pre>\n\n<h5>1.1.1.1. 如果上方的脚本无法使用，可以使用下面这一条！</h5>\n\n<pre><code class=\"language-shell line-numbers\">wget --no-check-certificate -O shadowsocks-all.sh https://gitee.com/kanoc/image_data/raw/master/sdsks-all.sh\nchmod +x sdsks-all.sh\n./sdsks-all.sh 2>&1 | tee sdsks-all.log\n</code></pre>\n\n<img src=\"https://s2.loli.net/2022/06/08/KPD8RLf3kTscO4a.png\" alt=\"\" />\n\n<font color=red size=5 face=\"宋体\">SSR命令行</font>\n\n```python\n# 启动SSR：\n/etc/init.d/shadowsocks-r start\n# 退出SSR：\n/etc/init.d/shadowsocks-r stop\n# 重启SSR：\n/etc/init.d/shadowsocks-r restart\n# SSR状态：\n/etc/init.d/shadowsocks-r status\n# 卸载SSR：\n./shadowsocks-all.sh uninstall\n```\n","tags":["梯子","代理"],"categories":["_A8-工具","梯子"]},{"title":"项目接单网站名录","url":"/2023/05/22/项目接单网站名录/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>项目接单网站名录：</strong></font>\n\n<!--more-->\n\n<h2>1. 程序员客栈</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.proginn.com\">程序员客栈官网</a>\n程序员客栈中国非常领先的自由工作平台，为中高端程序员、产品经理和设计师等等互联网相关人员提供稳定的线上工作机会，包括自由工作、远程工作和兼职工作，还支持按需雇佣，工作模式非常多，感兴趣的推荐大家尝试一下。虽然名称叫程序员客栈，但是除了程序员，像产品经理，设计师等等互联网相关人员，都能在上面找到适合自己的项目。感兴趣的可以体验一下。\n\n<h2>2. 码市</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://codemart.com\">码市官方网站</a>\n码市是 Coding 推出的互联网软件外包服务平台,意在连接需求方与广大开发者。让项目的需求方快速的找到合适的开发者,完成项目开发工作。\n\n<h2>3. 猪八戒网</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://luoyang.zbj.com\">猪八戒官网</a>\n猪八戒网创建于2006年，是服务中小微企业的人才共享平台。开创式地为人才与雇主搭建起双边市场，通过线上线下资源整合与大数据服务，实现人才与雇主精准无缝对接。找兼职的地方，主要是入门级项目，不适合专业程序员，只适合新手。\n\n<h2>4. 开源众包</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://zb.oschina.net\">开源众包官网</a>\n开源众包–专业的软件众包平台,350万+ 优质开发者为您提供网站、APP、微信/小程序、企业应用等软件开发服务,有效降低企业 IT 软件开发成本、解决技术资源不足等问题。\n开源中国的众包平台，主要是以众包为主。\n\n<h2>5. 智城外包网</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"http://www.taskcity.com\">智城外包网官方网站</a>\n智城外包网，聚合全国软件团队资源，官方认证，1小时响应，零交易佣金，托管安全保障。十年口碑运营，万家靠谱团队。免费比价，免费一站式外包项目管理工具。平台汇集软件咨询专家，软件技术专家，软件开发专家，软件开发公司，软件外包公司，软件外派公司。在线竞标模式，让IT外包项目和短期IT招聘、人力派遣需求可以获得高性价比的候选。海量资源池包括：网站设计、网站开发、手机应用开发、移动应用开发、安卓应用开发、苹果应用开发、微信应用开发、Java技术、C＃技术、Web前端开发、IT人力外包、IT人力外派、IT人力短期招聘、技术合伙人、通用软件开发，SaaS软件实施，软件运维等服务门类。\n\n<h2>6. 实现网</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://shixian.com\">实现网官网</a>\n北京实现与爱科技有限公司是一个互联网工程师兼职平台。解决创业公司招人难、成本高的问题。\n创业公司通过实现网可以快速预约知名互联网企业的工程师、设计师到自己的团队工作。上午预约工程师，最快晚上即可到班兼职。\n互联网工程师可以在实现网注册成为技术顾问，利用业余时间助力创业公司，并且获得以时薪为单位的报酬。\n目前已有9000+工程师或设计师可在线预约和支付，支付后工程师会到团队里坐班沟通，快速推进创业者的产品开发进度。\n实现网为企业提供BAT等名企背景的、靠谱的开发设计兼职人才和自由职业者，满足企业项目外包、驻场开发、远程兼职、技术咨询等短期人力需求。已服务2000多家企业，包括好未来、方正、人人贷、秒拍等知名企业。\n\n<h2>7. 猿急送</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.yuanjisong.com\">猿急送</a>\n猿急送，一个高级技术共享平台，这里汇聚知名互联网公司的技术、设计、产品大牛，通过实际坐班、远程等方式，一对一为创业公司解决问题，提高创业效率。\n猿急送为您提供兼职程序员，兼职工程师信息，猿急送是一个高级技术共享平台，是优质的程序员兼职网站，这里汇聚BAT等知名互联网公司的技术开发、产品、设计大牛，通过实际坐班等方式，一对一为创业公司解决程序员、工程师等开发、产品设计人力问题。\n\n<h2>8. 人人开发</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"http://rrkf.com\">人人开发官方网站</a>\n人人开发基于可视化快速开发平台\n捷得（Joget）捷得云（Joget Cloud）（PaaS），集众多开发者资源，为企业提供企业管理软件服务。应用市场提供应用产品、插件的在线试用和销售，服务市场以威客众包模式提供管理软件定制开发服务，各类企业级应用开发服务，例如：协同OA产品，ERP，CRM，人事管理，项目管理，资产管理，设备管理等。\n\n<h2>9. 开发邦</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.kaifabang.com\">开发邦官方网站</a>\n\n公司位于北京中关村科技园区核心区海淀园，成立于2010年，专注于为客户提供互联网软件技术开发与咨询服务，致力于利用互联网软件技术为客户提高效率、降低成本、提升效能、优化管理。\n团队核心成员均具有十年以上软件互联网技术开发经验，毕业于工科名校。至今，已成功执行近百个项目，涵盖管理软件、互联网系统、移动APP、前端互动开发等。\n先后为华为公司、商汤科技、工信部中国软件评测中心、神州数码、深鉴科技、中软集团、中国万网、中石油吐哈气举中心、华北电力大学、中科院科技政策与管理研究所、浪潮集团、ADI、世界五百强伊顿中国、北京外国语大学、51talk、勤邦生物、安龙基因等知名企业及机构提供过互联网软件技术开发与技术咨询服务。\n开发邦致力于成为企业业务互联网软件服务与咨询的定制方案提供商。\n\n<h2>10. 电鸭社区</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://eleduck.com\">电鸭社区官方网站</a>\n电鸭社区旨在帮助更多人走上「只工作，不上班」的自由工作之路，我们是一个「分布式组织」，通过分享及行动带来积极的影响，相信点滴的力量能改变潮水的方向。\n\n<h2>11. 快码</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://kuaimacode.com\">快码官方网站</a>\n深圳快码科技成立于2014年11月，是一家创新型的互联网公司，致力于通过创新的开发方式，为软件技术开发行业带来改变，提供更快速、更高性价比的软件定制服务。\n\n<h2>12. 英选</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.yingxuan.io\">英选官方网站</a>\n英选，可信赖的软件外包服务。用优秀的人，做漂亮的产品，写干净的代码。平台以定制开发外包服务为主，也是外包项目平台。\n\n<h2>13. Upwork</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.upwork.com\">官方网站</a>\nUpwork 是全球最大的、最优秀的、最规范的综合类人力外包服务平台，由著名的 Elance 和 oDesk 合并。这里聚集 900 万来自全球各地的自由工作者，你肯定可以在找到适合你的职位。\n\n<h2>14. Freelancer</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.freelance.com\">Freelancer官方网站</a>\nFreelancer 的工作类型覆盖了很多不同的领域，由程序开发到市场营销、广告、会计、法务等一系列的可以远程的工作。\n\n<h2>15. Remoteok</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://remoteok.io/\">Remoteok官方网站</a>\nRemoteok 不仅提供最初的兼职类远程工作，还有全职类，签署合同类和实习类的工作。网站创始人 Pieter Levels 本身就是一名数字游民，他同样是 Nomadlist 的创始人。\n\n<h2>16. Toptal</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.toptal.com\">Toptal官方网站</a>\nToptal 是一个高端一些的自由职业者平台，适合比较有经验和工作尽力的远程工作者。它将企业与全球的软件工程师，设计师和业务顾问联系起来。\n\n<h2>17. AngelList</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://angel.co/remote\">AngelList官方网站</a>\nAngelList 主要是服务于初创公司和天使投资人的平台，这里还有初创公司提供的远程工作的机会，如果对远程加入初创公司感兴趣的，可以尝试一下。\n\n<h2>18. Topcoder</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.topcoder.com\">Topcoder官方网站</a>\nTopcoder 通过算法比赛吸引世界顶级的程序员，他会将一下大型项目分割成很多小模块，通过竞赛的模式交给用户来做，优胜者可以拿到制定模块的奖金。\n","tags":["接单项目"],"categories":["_T1-赚钱","接单项目"]},{"title":"一个软件搞定所有音乐，无视版权","url":"/2023/05/22/一个软件搞定所有音乐，无视版权/","content":"\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>放松心情的时候，往往都想来上一首歌，但是市面上的音乐软件，版权杂乱，往往一个音乐软件是找不到自己所想要听的歌。</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=5 face=\"宋体\">现在老夫来带一款来自github的开源软件 -- </font> <font color=red size=6 face=\"宋体\"><strong>Listen 1</strong></font>\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>来拯救你那无处安放，有骚动的心！软件最大特点：解锁鹅厂、某易云、某我. . .等市面所有音乐软件因版权，而发黑的链接！达到可以直接播放的目的，也就是，以前你听歌需要N歌软件，那么现在，你只需要一个就够了！</strong></font>\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>遗憾的是：软件目前功能稍有BUG，当然，这些bug是对于懂程序的人来所，如果你就单纯的听音乐。你可能无法发现这些bug。所有你可以放心食用</strong></font>\n\n<ul>\n<li><font color=#f26522 size=5 face=\"宋体\"><strong>浏览器插件：</strong></font>\n\n<ul>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Firefox插件：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://addons.mozilla.org/zh-CN/firefox/addon/listen1/\"><font color=#ef5b9c size=4 face=\"宋体\">点击进入Firefox插件中心</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Microsoft Edge插件：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://microsoftedge.microsoft.com/addons/detail/hneiglcmpeedblkmbndhfbeahcpjojjg\"><font color=#ef5b9c size=4 face=\"宋体\">点击进入Microsoft Edge插件中心</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Chrome 插件版 V2.21.6：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/listen1/listen1_chrome_extension/archive/v2.21.6.zip\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n</ul></li>\n<li><font color=#f26522 size=5 face=\"宋体\"><strong>客户端下载：</strong></font>\n\n<ul>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>安卓：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_0.8.2.apk-20211106103255-fxfdwn.zip\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Windows 桌面版安装包：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_win-20211106103217-jkgf2r.exe\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Mac Universal 桌面版：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_mac_universal-20211106103400-rp3ith.dmg\"><font color=#ef5b9c size=4 face=\"宋体\">点击进入下载页面</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Linux 64位桌面版：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_linux_x86_64-20211106103435-yjknbv.appimage\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Windows 桌面绿色版64位：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_win_x64-20211106102449-eofmd6.7z\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong></li>\n<li><font color=#102b6a size=5 face=\"宋体\"><strong>Windows 桌面绿色版32位：</strong></font><strong><a class=\"wp-editor-md-post-content-link\" href=\"https://bd.bcebos.com/v1/xly-icafe/listen1_2.21.6_win_ia32-20211106103130-offfio.7z\"><font color=#ef5b9c size=4 face=\"宋体\">点击下载</font></a></strong>\n界面是这样的：\n<img src=\"https://s2.loli.net/2022/06/08/1Uq6FsgeIQENkrY.png\" alt=\"d9bec25a85627a48\" /></li>\n</ul></li>\n</ul>\n\n<font color=#00b2c2 size=7 face=\"宋体\">    安装：</font>\n\n<ul>\n<li>Chrome插件版\n\n<ul>\n<li>下载Chrome插件版压缩包，并解压缩</li>\n<li>打开 Chrome 扩展页面，勾选右上角「开发者模式」</li>\n<li>选择「加载已解压的扩展程序…」，选择刚刚解压缩的文件夹</li>\n<li>开始使用</li>\n</ul></li>\n<li>Firefox插件版\n\n<ul>\n<li>下载Firefox插件版，并解压缩</li>\n<li>打开 about:config 页面，xpinstall.signatures.required 设置为 false</li>\n<li>选择「附加组件」，齿轮图标，选择从文件安装附加组件，选择下载的xpi文件</li>\n<li>开始使用</li>\n</ul></li>\n<li><p>至于<del>windos和linux 就不说了！linux安装软件不会，你还是用回windos吧！</del></p></li>\n<li><p>至于. . . windos不会的. . .老夫就爱莫能助了！</p></li>\n</ul>\n","tags":["破解","软件"],"categories":["_A8-工具","音乐播放器"]},{"title":"硬件安装版linux下，安装VMware排坑记","url":"/2023/05/22/硬件安装版linux下，安装VMware排坑记/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>硬件安装版linux下，安装VMware排坑记：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>1. 1.linux升级内核</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>查看linux源</strong></font>\n\n```python\n# 查看源码信息\ncat /etc/apt/sources.list\n# 官方源没有5.14.0内核头，所以要修改成阿里源\n# 阿里源\ndeb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\ndeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib\n```\n\n<font color=#f26522 size=4 face=宋体><strong>2. 2.linux升级内核</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>更新系统以及依赖</strong></font>\n\n```python\nsudo -i\n# 输入root密码\napt update\napt upgrade\napt dist-upgrade\nreboot\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>安装内核头文件</strong></font>\n\n```shell\napt-get install Linux-headers-$(uname -r)\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>检车内核头文件是否安装</strong></font>\n\n```shell\ndpkg-query -s linux-headers-$(uname -r)\n```\n\n<font color=#f26522 size=4 face=宋体><strong>3. 安装VMware</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>下载Linux版本VMware虚拟机</strong></font>\n  [点击下载](https://customerconnect.vmware.com/downloads/details?downloadGroup=WKST-1620-LX&productId=1038&rPId=75716)\n  [百度云直下版本](https://bd.bcebos.com/v1/xly-icafe/vmware-workstation-full-16.2.0-18760230.x86_64-20220126040532-c2o1rc.bundle)\n  [百度云直下最16.2.5版本](https://bd.bcebos.com/v1/xly-icafe/vmware-workstation-full-16.2.5-20904516.x86_64-20221223172537-3gywfr.bundle)\n  [阿里云盘下载](https://www.aliyundrive.com/s/NARUSYFXZuR)\n\n```python\n# 下载完成之后赋予文件执行权限\nchmod +x VMware-Workstation-Full-16.2.0-18760230.x86_64.bundle\nsudo ./VMware-Workstation-Full-16.2.0-18760230.x86_64.bundle\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>VMware16 pro 注册码</strong></font>\n\n```python\n# 每一行，为单独的一个祖册吗\nZF3R0-FHED2-M80TY-8QYGC-NPKYF\nYF390-0HF8P-M81RQ-2DXQE-M2UT6\nZF71R-DMX85-08DQY-8YMNC-PPHV8\n```\n\n+ <font color=#b0171f size=2 face=宋体><strong>卸载 VMware</strong></font>\n\n```python\nsudo vmware-installer -u vmware-workstation\n```\n\n","tags":["破解","软件"],"categories":["_A5-安装教程","linux安装VMware"]},{"title":"那些让人惊奇的云项目","url":"/2023/05/22/那些让人惊奇的云项目/","content":"\n<h1>有云服务器时能自建的项目</h1>\n\n<!--more-->\n\n<ul>\n<li>ss：https://github.com/lrinQVQ/script https://github.com/mritd/dockerfile/tree/master/shadowsocks</li>\n<li>网盘\n\n<ul>\n<li>Seafile：国产，C，同步盘，但必须依赖Py2.7</li>\n<li>https://github.com/nextcloud/docker https://docs.nextcloud.com/server/17/user_manual/ ：owncloud的同作者，PHP。https://github.com/e-alfred/ocdownloader 离线下载插件</li>\n<li>Cloudreve：国产，GO，支持OSS</li>\n<li>zFile：国产，Java</li>\n<li>https://github.com/syncthing/syncthing GO</li>\n<li>BTSync</li>\n<li>oneindex</li>\n<li>OLAINDEX：使用OneDrive API</li>\n<li>https://github.com/zhaojun1998/zfile 评测：https://xiaoyou66.com/archives/769</li>\n<li>https://www.directorylister.com/ indexer，PHP</li>\n<li>https://github.com/prasathmani/tinyfilemanager PHP</li>\n<li>sparkleshare</li>\n<li>rclone</li>\n<li>https://freefilesync.org/</li>\n</ul></li>\n<li>文件浏览器：https://larsjung.de/h5ai/ （PHP）、https://github.com/filebrowser/filebrowser （GO）</li>\n<li>gitlab</li>\n<li>爬虫</li>\n<li>论坛：discuz（PHP，维护不快），Flarum（PHP），vanilla (PHP)</li>\n<li>监控程序/API的：https://github.com/ivbeg/awesome-status-pages 合集。https://cachethq.io/ （合集中最活跃的但是PHP）、https://github.com/hunterlong/statping （GO）、https://github.com/bazzite/statusfy （JS）。https://uptimerobot.com/ 不开源，有免费版、https://www.atlassian.com/zh/software/statuspage 有免费版、https://github.com/nicolargo/glances (Py)、https://eheh.org/ 国产、https://www.fundebug.com/</li>\n<li>监控服务器状态：https://github.com/netdata/netdata C+Python，star非常多，有中文翻译。https://github.com/grafana/grafana TS+GO，star数稍少，但commit数和贡献者数非常多。https://github.com/open-falcon/falcon-plus GO，相对而言star数少很多，但是国产的，需要mysql；https://github.com/CokeMine/ServerStatus-Hotaru</li>\n<li>各种可以装的软件的收集：https://github.com/Kickball/awesome-selfhosted 、https://www.softaculous.com/softaculous/apps 、 https://github.com/luong-komorebi/Awesome-Linux-Software 、https://statusfy.co/</li>\n<li>自己挂广告</li>\n<li>图床：https://xiaoyou66.com/archives/774 https://molunerfinn.com/PicGo/ https://github.com/wisp-x/lsky-pro https://github.com/chevereto/Chevereto-Free</li>\n<li>可视化日志：https://goaccess.io</li>\n<li>BT下载：https://github.com/jpillora/cloud-torrent</li>\n<li>创建网页版的Shell：https://github.com/instantbox/instantbox</li>\n<li>jupyter notebook: https://xiaoyou66.com/archives/1095</li>\n<li>OSS: https://github.com/minio/minio https://www.digitalocean.com/community/tutorials/how-to-set-up-an-object-storage-server-using-minio-on-ubuntu-18-04 但协议是最严格的AGPL</li>\n<li>短链接：UOURLS（PHP，需要二次开发）Polr（也是PHP，不过偏向开箱即用）https://github.com/ellisonleao/pyshorteners</li>\n<li>https://apex.sh/up/ 一键部署几种语言的Serverless应用到AWS</li>\n<li>https://github.com/chrislusf/seaweedfs 分布式文件系统，支持S3的API；https://github.com/syncthing/syncthing</li>\n<li>当我有服务器时我做了什么（别人的集合）：https://shanyue.tech/op</li>\n<li>后台控制面板：https://www.jianshu.com/p/3bc7404af887</li>\n<li>搜索引擎：https://github.com/benbusby/whoogle-search https://github.com/milvus-io/milvus</li>\n<li>控制面板：https://github.com/cockpit-project/cockpit</li>\n<li>性能测试：<code>curl -L bench.sh | bash</code></li>\n<li>CMS: https://www.storyblok.com/</li>\n<li>CI\n\n<ul>\n<li>https://www.jetbrains.com/teamcity/</li>\n<li>https://drone.io/</li>\n</ul></li>\n</ul>\n\n<h2>1. 自建Paas</h2>\n\n集合：https://paasfinder.org\n\n<ul>\n<li>https://dokku.com/</li>\n<li>openstack，开源IaaS，机器最好有10G以上的内存</li>\n<li>rancher, openshift, CloudFoundry, flynn</li>\n<li>https://www.rainbond.com/ 国产的</li>\n<li>https://letscoded.com</li>\n<li>https://www.koding.com/</li>\n<li>https://kodcloud.com/ 有使用者表示“每次访问都会采集服务端和客户端的隐私信息，里面流氓脚本一大堆”</li>\n<li>https://github.com/caprover/caprover</li>\n<li>https://convox.com/</li>\n<li>https://nanobox.io/</li>\n<li>https://caprover.com/</li>\n<li>https://rio.io/</li>\n<li>https://github.com/teamhephy/workflow</li>\n<li>https://www.kintohub.com/ 基于k8s</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"那些让人惊奇的云项目(第二弹)","url":"/2023/05/22/那些让人惊奇的云项目-第二弹/","content":"\n<h2>1. 网页</h2>\n\n<!--more-->\n\n<h3>1.1. 域名</h3>\n\n<ul>\n<li>理论上DDNS也会提供，不过不是二级的</li>\n<li>https://my.freenom.com/clientarea.php  tk、ml、ga、cf、gq顶级域名</li>\n<li>https://nic.eu.org/ 欧盟下的，个人免费注册；http会被重置</li>\n<li>https://dns.txizd.cn/ 三级</li>\n<li>https://dns.yzjia.xin/ 三级</li>\n<li>http://cc.1xie.xyz</li>\n<li>https://github.com/fransallen/thedev.id https://github.com/js-org/js.org 要开PR</li>\n<li>https://www.freedomain.pro/ co.nr</li>\n<li>http://www.com.nu/</li>\n<li>https://domainoji.com/ https://www.punycoder.com/ emoji/idn域名转换；https://emojipedia.org/ emoji搜索</li>\n<li>https://nic.ua/en/domains 乌克兰 pp.ua</li>\n<li>https://www.azote.org 法国 asso.st，fr.nf，fr.cr，ze.cx，infos.st</li>\n<li>https://www.nom.za 南非</li>\n<li>https://www.sitelutions.com 纽埃 rr.nu</li>\n<li>https://www.ipq.co 哥伦比亚共和国</li>\n<li>https://fofa.so/ 用来搜索域名的</li>\n</ul>\n\n<h3>1.2. 证书</h3>\n\n<ul>\n<li>https://freessl.cn</li>\n<li>https://freessl.org</li>\n<li>https://allinssl.com/zh/</li>\n<li>https://zerossl.com/</li>\n</ul>\n\n<h3>1.3. DNS</h3>\n\n<ul>\n<li>https://www.dns.la/</li>\n<li>https://www.bajiedns.com/</li>\n<li>https://www.dnsdun.com/</li>\n<li>https://nip.io/ 自动根据域名中的IP返回DNS查询结果。xip.io挂了</li>\n<li>https://dnsmadeeasy.com/</li>\n</ul>\n\n<h3>1.4. <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/ZE3kr/Cloudflare-CNAME-Setup/blob/master/README.zh.md\">Cloudflare CNAME/IP/NS 接入</a></h3>\n\n<ul>\n<li>https://cdn.liang.ke/</li>\n<li>https://cf.tlo.xyz/</li>\n<li>https://dns.porta1.net/</li>\n<li>https://cdn.bnxb.com/</li>\n<li>https://cdn.wzfou.com/</li>\n<li>https://cdn.moeelf.com/</li>\n</ul>\n\n<h3>1.5. CDN</h3>\n\n<ul>\n<li>https://su.baidu.com/product/cdn.html</li>\n<li>http://cdn.meierlian.net/</li>\n<li>https://www.yunaq.com/jsl/ 仅限80端口</li>\n<li>https://www.cdnfine.com/</li>\n<li>https://wangzhan.qianxin.com/ 前身是360网页卫士</li>\n<li>https://www.merlincdn.com/ 注册送$10，不清楚有没有限时，额度有个自选的</li>\n<li>https://github.com/EtherDream/freecdn 自动选择合适的CDN的程序</li>\n</ul>\n\n<h3>1.6. 短网址</h3>\n\n<ul>\n<li>https://1t.click/ 、https://sina.lt/ 新浪的</li>\n<li>https://u.nu/</li>\n<li>http://suo.im/</li>\n<li>https://tinyurl.com/ 无法直接访问</li>\n<li>https://bitly.com/ 无法直接访问</li>\n<li>https://sl.iyong.com/</li>\n<li>https://v.ht 国外的</li>\n</ul>\n\n<h2>2. 国内源/镜像</h2>\n\n<ul>\n<li>https://github.com/china-speed/china-speed.github.io apt/docker/pip/npm收集</li>\n<li>https://www.7ed.net Google Fonts/Libraries、CDNJS、Gravatar、Github RAW、Imgur、SM.MS反代；曾用cdn.staticdn.net cdn.con.sh</li>\n<li>https://cdn.geekzu.org/cached.html Google Fonts/Libraries、Gravatar反代</li>\n<li>https://sb.sb/blog/css-cdn/ loli.net域名，Google Fonts/Libraries、Gravatar反代</li>\n<li>https://npm.taobao.org/mirrors 一部分GitHub开源项目的release</li>\n</ul>\n\n<h3>2.1. GitHub</h3>\n\n<ul>\n<li>jsdelivr、statically：相当于只支持raw</li>\n<li>https://doc.fastgit.org/zh-cn/node.html 主站网页、assets、<del>raw、release</del></li>\n<li>https://gitclone.com/ 支持http clone</li>\n<li>https://github.zhlh6.cn/ 支持ssh</li>\n<li>https://pd.zwc365.com/</li>\n<li>https://github.com/XIU2/UserScript/blob/master/GithubEnhanced-High-Speed-Download.user.js</li>\n<li>http://www.toolzl.com/tools/githubjiasu.html 支持release</li>\n<li>https://github.com/zwc456baby/file-proxy https://pd.zwc365.com/</li>\n<li>https://github.wuyanzheshui.workers.dev/ https://github.rc1844.workers.dev/ 网页版</li>\n<li>https://github.com/nulastudio/mclone 安装后用git mclone即可自动用mirror</li>\n<li>https://shrill-pond-3e81.hunsh.workers.dev/ https://gh.api.99988866.xyz/ https://g.ioiox.com/ (https://github.com/hunshcn/gh-proxy)</li>\n<li>https://github.bajins.com/ 网页版</li>\n<li>https://gh.haval.gq 没处理css和js的网页版</li>\n<li>https://ghproxy.com/</li>\n<li><del>github.com.cnpmjs.org</del> 网页版，触发了滥用检测</li>\n<li><del>https://d.serctl.com/</del> 活着但是日本Linode，IP干扰大，几乎不可访问</li>\n<li><del>zll.us</del></li>\n<li><del>https://githubd.com</del></li>\n<li><del>widora：http://gg.widyun.com http://g.widyun.com/ http://g.widora.cn/ 支持release</del></li>\n<li><del>https://git.best/</del></li>\n<li><del>http://gitd.cc/</del></li>\n<li><del>https://www.toolwa.com/github/</del> 网站本身活着，但线路一是用不了的jsproxy，线路二是fastgit</li>\n</ul>\n\n<h3>2.2. 前端库</h3>\n\n<ul>\n<li>国内的，基本都是同步的cdnjs，否则要么不全要么老；链接格式只有bootcdn.cn的与cdnjs完全相同，其余的都没有ajax/libs/部分，字节的还多一部分\n\n<ul>\n<li>https://www.bootcdn.cn/ 由bootcss网站支持；https://cdn.bootcss.com/ 没公开但能用</li>\n<li>https://www.staticfile.org/ 七牛云。版本默认选的最老的，不知道怎么想的</li>\n<li>https://cdn.baomitu.com/ 360</li>\n<li>https://cdn.bytedance.com/ 字节跳动，直接把所有库按首字母列出来</li>\n<li>https://jshub.com 有点旧，感觉是模仿bootcdn的</li>\n<li>https://cdnjs.net/ 有可能2019年后就没更新了</li>\n<li>https://lib.sinaapp.com/ 新浪，少且旧，jq最新3.1</li>\n<li>http://jscdn.upai.com/ 又拍云，极少且极旧，无https</li>\n<li>https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js 非公开，不更新</li>\n</ul></li>\n<li>国外的\n\n<ul>\n<li>https://www.jsdelivr.com/ 有国内CDN。支持GitHub。https://esm.run 支持ESM</li>\n<li>https://cdnjs.com/ CF自己的，访问慢</li>\n<li>https://unpkg.com/ 用的CF的CDN，实验性支持ESM</li>\n<li>https://statically.io/ 用的Fastly的CDN。只支持GitHub，加min后缀自动压缩，还有图片压缩服务和网页快照截图功能</li>\n<li>https://jspm.org/ 仅ESM</li>\n<li>https://www.skypack.dev/ snowpack团队的，ESM，高度为浏览器优化</li>\n<li>https://esm.sh/ 仅ESM，自动转换的</li>\n<li>https://ajax.aspnetcdn.com 微软的，只有jq相关的很少几个，但路径格式与jq官网相同方便替换</li>\n</ul></li>\n<li>Font Awesome\n\n<ul>\n<li>前面那些前端库仍可用</li>\n<li>https://use.fontawesome.com/releases/v5.15.0/css/all.css 官方的，但注意它其实对应的是min.css</li>\n<li>http://apps.bdimg.com/libs/fontawesome/4.4.0/css/font-awesome.min.css 非公开，不更新</li>\n</ul></li>\n</ul>\n\n<h2>3. 储存</h2>\n\n<h3>3.1. OSS</h3>\n\n<ul>\n<li>https://www.zhihu.com/question/51309695 有哪些优秀且免费的云存储服务？</li>\n<li>https://www.zhihu.com/question/34445630/answer/449868590 网易云，免费50G空间，20G流量</li>\n<li>https://developer.qiniu.com/af/kb/1574/free-credit-information https://www.qiniu.com/events/free 七牛云</li>\n<li>https://www.upyun.com/league 又拍云，10G储存15G流量</li>\n<li>https://www.ucloud.cn/site/product/ufile.html 实名认证用户20GB免费云存储空间和20GB/月免费下载流量</li>\n<li>http://www.cuplayer.com/price/ 酷播云，视频储存</li>\n<li>https://u-file.cn/ 好像需要申请</li>\n<li>https://get.robin.io/ 5GB</li>\n</ul>\n\n<h3>3.2. 网盘</h3>\n\n<ul>\n<li>https://www.quqi.com/ 曲奇云盘，但好像没有电脑端</li>\n<li><del>http://ddl.escience.cn/ 科研在线</del></li>\n<li>https://own-cloud.cn/ 小麦云盘</li>\n<li>https://cowtransfer.com/ 奶牛快传，<del>现在也提供网盘功能</del></li>\n<li>https://www.wenshushu.cn/</li>\n<li>https://www.liupan.net/</li>\n<li>https://teracloud.jp 10G空间，支持 WebDAV；推荐码NDMSQ</li>\n<li>https://www.furk.net/ 很慢，1G/D且5G/W</li>\n<li>https://www.lanzou.com/ 蓝奏云，单个文件限100M</li>\n<li>亿方云</li>\n<li>天翼云盘、沃家云盘、和彩云</li>\n<li>https://www.zoho.com.cn/workdrive/</li>\n<li>超星云盘</li>\n<li>腾讯微云</li>\n<li>https://www.asuswebstorage.com</li>\n<li>https://pan.bitqiu.com/ 比特球云盘</li>\n<li>https://www.90pan.com/ 速度有4M</li>\n<li>https://github.com/xausky/DockerRegisterCloud 把docker registry变成网盘</li>\n<li>https://6pan.cn/ https://2dland.cn/</li>\n<li>https://www.mediafire.com/</li>\n<li>https://github.com/apachecn/CDNDrive</li>\n</ul>\n\n<h3>3.3. Onedrive</h3>\n\n<ul>\n<li>https://products.office.com/en-us/student?tab=students</li>\n<li>https://t.odmail.cn/</li>\n<li>http://od.obagg.com</li>\n<li>http://onedrive.readmail.net/</li>\n<li>http://xkx.me/</li>\n<li>https://xlu.me/</li>\n<li>http://xix.men:3000/</li>\n<li>https://xyxywan.gitee.io/web/ 有桌面office但需审批</li>\n<li>https://get.porta1.net/</li>\n<li>https://zhuanlan.zhihu.com/p/105438817 免费申请office E5开发者订阅，附无限续期+私人网盘教程</li>\n<li>Index：https://github.com/spencerwooo/onedrive-vercel-index https://github.com/vcheckzen/FODI https://github.com/qkqpttgf/OneManager-php</li>\n</ul>\n\n<h3>3.4. 文件分享</h3>\n\n<ul>\n<li>https://catbox.moe/ 上传速度不稳定，快的时候有600K，单次上限200MB</li>\n<li>https://www.zippyshare.com/ 上传速度为0</li>\n<li><del>https://send.firefox.com/ 上传速度能到2M，但有时传到一半会断掉；VPS的下载速度能到21MB/s</del></li>\n<li>https://www.up-4ever.org/ 上传速度不到1M，需要关闭广告过滤扩展才能用，有的后缀不让传，下载等30秒人机验证后倒是能创建出直链，单次上限200MB</li>\n<li>https://transfer.sh/</li>\n<li>https://uguu.se/ 单次上限100MB</li>\n<li>https://anonfiles.com/</li>\n<li>https://letsupload.co/</li>\n<li>https://secufiles.com/</li>\n<li>https://wetransfer.com/</li>\n<li>https://wormhole.app/</li>\n</ul>\n\n<h3>3.5. 离线下载</h3>\n\n<ul>\n<li>https://www.loadbt.com 免费用户2G；曾经有中文且crowdin上翻译完成但现在不提供选项了</li>\n<li>https://zhuanlan.zhihu.com/p/37785481 19款离线下载服务对比</li>\n</ul>\n\n<h3>3.6. 图床</h3>\n\n<ul>\n<li>http://www.zmonster.me/2013/12/06/image-host-service.html 国内外图床及其对比</li>\n<li>https://www.zhihu.com/question/21667151</li>\n<li>https://sm.ms/</li>\n<li>https://moxtu.cc</li>\n<li>https://postimages.org/</li>\n<li>https://imgbox.com/</li>\n<li>https://imgbb.com/</li>\n<li>https://www.freeimagehosting.net/</li>\n<li>https://imgchr.com/</li>\n<li>https://pic.xiaojianjian.net/</li>\n<li>https://imgurl.org/</li>\n<li>https://postimages.org/</li>\n<li>https://img.kuibu.net/</li>\n<li>https://www.superbed.cn/ pic.imgdb.cn</li>\n<li>https://imgs.thankjava.com/</li>\n<li>https://www.moepicx.cc</li>\n<li>https://www.hualigs.cn/</li>\n<li>https://jpg.dog/</li>\n<li>https://www.z4a.net/</li>\n<li>https://moetu.org/</li>\n<li>https://imgbb.com/</li>\n<li>https://www.picgd.com/</li>\n<li>https://tuchuang.richuyun.com/</li>\n<li>http://pan.duiai.cc/</li>\n<li>https://osrpay.com/</li>\n<li>https://233.pictures</li>\n<li>https://images.weserv.nl/ image cache & resize service 相当于图片的CDN</li>\n<li>https://imgtu.com/</li>\n<li>https://img.blueskyxn.com/</li>\n</ul>\n\n<h3>3.7. 下载百度网盘的</h3>\n\n<ul>\n<li>https://xdown.org/baiduyun/</li>\n<li><del>https://www.baiduwp.com/</del> 挂了</li>\n<li>https://github.com/TkzcM/baiduwp</li>\n</ul>\n\n<h3>3.8. BT Trackers</h3>\n\n<ul>\n<li>https://github.com/ngosang/trackerslist</li>\n<li>https://github.com/XIU2/TrackersListCollection</li>\n<li>https://github.com/DeSireFire/animeTrackerList</li>\n</ul>\n\n<h2>4. (盗版)资源</h2>\n\n<ul>\n<li>https://discx.yuntu.io/ 光盘</li>\n</ul>\n\n<h3>4.1. 软件</h3>\n\n<ul>\n<li>https://masuit.com/</li>\n<li>https://www.lanzous.com/u/roustar31cn</li>\n</ul>\n\n<h3>4.2. 书</h3>\n\n<ul>\n<li>https://t.me/ebookdl 亲测确实能搜到</li>\n<li>https://github.com/hoodiearon/w3-goto-world/tree/master/集成实用夹/书籍与文档</li>\n<li>https://smtebooks.com/</li>\n<li>https://foxgreat.com/ 搜不到C#的书</li>\n<li>https://dokumen.pub 网站不是英文的</li>\n<li>https://www.wowebook.org 下载页面为turbobit.net，很慢，而且有的要开会员</li>\n<li>https://www.zhihu.com/question/21202757 有哪些好的电子书下载网站推荐？</li>\n<li>https://zhuanlan.zhihu.com/p/53064677 有了这十几个网站，没有你找不到的电子书！</li>\n<li>https://www.jiumodiary.com/ 鸠摩搜书，也能搜到百度网盘的内容</li>\n<li>https://gist.github.com/baiwfg2/af827b8b75eebf8ab29f5531a0d265ce</li>\n<li><del>https://www.allitebooks.com/</del> 超好但是挂了，不清楚现在的几个是否有关：https://www.allitebooks.in/ https://allitebook.xyz/ https://allitbooks.net/</li>\n<li>https://www.jb51.net/books/ 下载需要关注公众号获取提取码</li>\n<li>https://zh.4lib.org/</li>\n<li>http://sd.blackball.lv/books/</li>\n<li>https://sobooks.cc/ 不是专门计算机的</li>\n<li>http://www.kgbook.com/ 不是专门计算机的</li>\n<li>https://z-lib.org/ 无法直接访问</li>\n<li>https://www.zhihu.com/question/19709630 有哪些网站可以获取免费的国外的原版书籍（电子版）</li>\n<li>https://github.com/EbookFoundation/free-programming-books 免费的</li>\n</ul>\n\n<h3>4.3. 音乐</h3>\n\n<ul>\n<li>https://myfreemp3cc.com/ 好像可以用</li>\n<li>http://tool.liumingye.cn/music/ 新版：https://music.liumingye.cn/ 电影：http://lab.liumingye.cn</li>\n<li>http://tool.yijingying.com/musictools/ 一部分用不了</li>\n<li>https://www.boxpaper.club/musicdownloader/ 未测试</li>\n<li>http://music.moresound.tk/ 暂时所有的都用不了，但是网站还在，不知是否有特殊的方法</li>\n<li>https://www.52pojie.cn/thread-929831-1-1.html 集合</li>\n<li>https://listen1.github.io/listen1/ 只是整合可以直接听的</li>\n<li>https://github.com/lyswhut/lx-music-desktop</li>\n<li>http://www.guqiankun.com/tools/music/</li>\n<li>挂了的：https://music.2333.me/ https://github.com/maicong/music</li>\n</ul>\n\n<h3>4.4. GeoIP2数据库</h3>\n\n<ul>\n<li>https://geolite.clash.dev/</li>\n<li>https://github.com/Dreamacro/maxmind-geoip/releases</li>\n<li>https://static.clash.to/GeoIP2/GeoIP2-Country.tar.gz （RixCloud 公共库）</li>\n<li>https://quantumult.crossutility.com/download/geoip/database/GeoLite2-Country.mmdb</li>\n</ul>\n\n<h3>4.5. 字体</h3>\n\n<ul>\n<li>https://zenozeng.github.io/Free-Chinese-Fonts/</li>\n<li>https://www.webfont.com/onlinefont/index</li>\n<li>https://www.marksimonson.com/fonts</li>\n</ul>\n\n<h2>5. 安全</h2>\n\n<ul>\n<li>https://github.com/euphrat1ca/security_w1k1</li>\n<li>https://github.com/No-Github/1earn</li>\n</ul>\n\n<h3>5.1. 恶意软件分析沙箱</h3>\n\n<ul>\n<li>https://habo.qq.com/ 腾讯哈勃。现在只能分析很少的一部分，详细报告需要高级会员，而申请通道已经关闭了</li>\n<li>https://www.maldun.com/ 魔盾安全。有效，但是貌似速度很慢，我是直接第二天再去看的</li>\n<li>https://s.threatbook.cn/ 微步。貌似出来不久</li>\n<li>https://www.hybrid-analysis.com 国外的</li>\n<li>https://app.sndbox.com</li>\n<li>https://scan.anxinsec.com/</li>\n</ul>\n\n<h3>5.2. 服务器安全软件</h3>\n\n<ul>\n<li>https://www.yunsuo.com.cn/download.html</li>\n<li>https://scanner.baidu.com webshell检测引擎</li>\n</ul>\n\n<h2>6. Git平台</h2>\n\n<ul>\n<li>https://code.aliyun.com</li>\n<li>https://xiaolvyun.baidu.com</li>\n<li>https://opendev.org Ubuntu, Gitea</li>\n<li>https://salsa.debian.org/ GitLab</li>\n</ul>\n\n<h2>7. Paste Bin</h2>\n\n<ul>\n<li>https://pastebin.com/</li>\n<li>https://ghostbin.com/</li>\n<li>https://rentry.co/</li>\n<li>https://hastebin.com/</li>\n<li>https://pastebin.ubuntu.com/</li>\n<li>https://www.cacher.io/ 功能很多</li>\n<li>https://write.as/ 其实是博客</li>\n<li>https://del.dog/</li>\n<li>https://psty.io</li>\n<li>https://telegra.ph RST了</li>\n</ul>\n\n<h2>8. 搜索引擎</h2>\n\n<ul>\n<li>https://goobe.io/ 程序员搜索</li>\n<li>https://fofa.so/ 类似于钟馗之眼的搜索引擎</li>\n<li>http://www.sousuoyinqingtijiao.com 搜索引擎提交入口（但没有Google）</li>\n<li>https://2tool.top/ 聚合搜索引擎网页快照</li>\n<li>https://www.cn-ki.net/ 学术搜索；http://cnki.cn-ki.net/ 知网</li>\n</ul>\n\n<h2>9. Docker平台（非免费）</h2>\n\n<ul>\n<li>https://www.tenxcloud.com/ 时速云</li>\n<li>https://www.daocloud.io/ 有一点点免费测试环境 http://docs.daocloud.io/app-deploy-mgmt/cloud-limited-resources</li>\n<li>https://www.mopaas.com/ 魔泊云</li>\n<li>https://www.alauda.cn/ 灵雀云</li>\n<li>https://canister.io/solo</li>\n<li>https://hostpresto.com/docker-hosting 免费六个月</li>\n</ul>\n\n<h2>10. CI</h2>\n\n<ul>\n<li>https://www.shippable.com/pricing.html</li>\n<li>https://codefresh.io/</li>\n</ul>\n\n<h2>11. 图标</h2>\n\n<ul>\n<li>https://octicons.github.com/</li>\n</ul>\n\n<h2>12. 云办公相关</h2>\n\n<ul>\n<li>https://uzer.me/ 有office，ps，ai，cad，matlab，visio，ff。论坛挂了</li>\n<li>http://www.gleasy.com/ 格子云，到哪都能办公</li>\n<li>http://www.everydo.com/ 文档管理系统</li>\n</ul>\n\n<h2>13. PDF</h2>\n\n<ul>\n<li>https://www.hipdf.com/</li>\n<li>https://smallpdf.com/cn</li>\n</ul>\n\n<h2>14. 爬虫</h2>\n\n<ul>\n<li>https://www.bazhuayu.com/ 八爪鱼；国外版 https://www.octoparse.com/</li>\n<li>http://www.houyicaiji.com/</li>\n<li>http://www.gooseeker.com/</li>\n<li>以下是国外的</li>\n<li>https://www.zyte.com</li>\n<li>https://apify.com/</li>\n<li>https://www.diffbot.com/</li>\n<li>https://www.import.io/</li>\n</ul>\n\n<h2>15. 微信消息推送</h2>\n\n<ul>\n<li>https://sct.ftqq.com/ Server酱</li>\n<li>http://www.xtuis.cn/ 虾推啥</li>\n<li>https://pushplus.hxtrip.com/ push+</li>\n<li>https://qmsg.zendee.cn/ Qmsg酱</li>\n<li>https://wxpusher.zjiecode.com 开源</li>\n<li>https://letserver.run/ Server饭，开源</li>\n<li>https://github.com/songquanpeng/message-pusher 开源</li>\n</ul>\n\n<h2>16. CI</h2>\n\n<ul>\n<li>Circle CI 老牌</li>\n<li>AppVeyor 以Win出名</li>\n<li>https://cloud.drone.io 有人说文档烂</li>\n<li>https://semaphoreci.com/</li>\n<li>https://buildkite.com/</li>\n</ul>\n\n<h2>17. 其它中的其它</h2>\n\n<ul>\n<li>https://img.xjh.me/ 随机图片 https://api.lolicon.app/#/setu 随机色图</li>\n<li>http://shaofan.org/jetbrains-active/ Jetbrains在线激活工具</li>\n<li>https://apiary.io/ API Design Stack，与Oracle合作</li>\n<li>https://www.sap.cn/products/cloud-platform/pricing.html ERP系统；注册Beta版是免费的，但要填姓名公司电话</li>\n<li>https://developer.okta.com/ adds authentication, authorization, and user management to your web or mobile app within minutes.</li>\n<li>https://www.chanzhi.org/dynamic.html https://www.chanzhi.org/book/chanzhieps/5.html https://www.zentao.net/ 蝉知和禅道，前者是CMS，后者是项目管理系统。不过是PHP</li>\n<li>https://www.kancloud.cn/ https://www.yuque.com/ https://www.baklib.com/ MD平台</li>\n<li>http://www.ypppt.com/ ppt</li>\n<li>https://enterprise.glyptodon.com/ 网页版Windows远程桌面</li>\n<li>https://squoosh.app/ 图片压缩，谷歌出的工具</li>\n<li>http://www.freeyun.net/ 软件授权管理一站式解决方案</li>\n<li>https://prerender.io/ 预渲染动态网页</li>\n<li>https://termible.io 还在内测的在线终端，基于Docker</li>\n<li>https://heyterm.com/zh-cn/ WebSSH</li>\n<li>https://www.freepik.com/ 免费psd图像资源</li>\n<li>https://pyup.io/ 监测Python依赖</li>\n<li>https://waifulabs.com/ AI生成二次元头像</li>\n<li>https://appcenter.ms/ 存放release</li>\n<li>https://bell-sw.com/ OpenJDK</li>\n<li>https://dev.to/doobled/listing-the-best-services-for-free-domain-email-addresses-in-2020-3hkb 几个邮箱测评</li>\n<li>https://newrelic.com 遥测？</li>\n<li>https://mailchimp.com/ 群发邮件</li>\n<li>性能测试：<code>wget -qO- 86.re/bench.sh | bash</code></li>\n<li>https://github.com/fangzesheng/free-api 免费的接口</li>\n<li>https://github.com/zhaojh329/rtty web tty</li>\n<li>https://www.plasticscm.com/ 不同于git的版本控制系统，可以玩玩</li>\n<li>https://trinket.io/ Py的Turtles运行环境，谷歌的Blocks，适合小孩子学</li>\n<li>手机原生应用推送：https://www.getui.com/push https://www.jiguang.cn/push</li>\n<li>服务器监控：https://www.oneapm.com https://www.tingyun.com/ https://www.jiankongbao.com/</li>\n<li>https://www.authing.cn/pricing 统一身份验证</li>\n</ul>\n\n<h2>18. 别人的收集</h2>\n\n<ul>\n<li>https://www.freehao123.com/</li>\n<li>https://51.ruyo.net/</li>\n<li>https://github.com/Sicmatr1x/Free-Resource</li>\n<li>https://www.producthunt.com/</li>\n</ul>\n\n<h2>19. 挂了的</h2>\n\n<ul>\n<li>Ohosti “骗人的，去年申请的现在还在Pending中”</li>\n<li>https://vitu.ai</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"那些让人惊奇的云项目(第三弹_网络和ddns)","url":"/2023/05/22/那些让人惊奇的云项目-第三弹-网络和ddns/","content":"\n<hr />\n\nDDNS需要公网IP，基本上就是隔一段时间访问一下接口，连接和传输数据是不会消耗服务商的流量的。\n\n<!--more-->\n\n内网穿透需要消耗服务器的流量。\n还有点对点/内网打洞的技术，但是需要两边都安装软件：xtcp，n2n，moon，zerotier one\n\n<h2>1. frp</h2>\n\n<ul>\n<li>https://www.natfrp.org/ Sakura Frp</li>\n<li>https://bob.kim/frp 博主自己搭的</li>\n<li>https://www.lu8.win/ ngrok、frp、n2n、nps、免费域名</li>\n<li>https://napyy.com/</li>\n<li>https://qydev.com 限速1M</li>\n</ul>\n\n<h2>2. ngrok</h2>\n\n1.x开源但现在已经停止维护了；2.x不开源。\n\n<ul>\n<li>https://ngrok.com/ 官网，服务器在国外</li>\n<li>https://natapp.cn/ 免费的需实名认证</li>\n<li>https://www.ngrok.cc/ Sunny Ngrok，不过官网说也支持frp</li>\n<li>https://www.tunnelnat.com/ 虽然也写了frp，但好像只有ngrok有免费通道</li>\n</ul>\n\n<h2>3. 其它开源的</h2>\n\n<ul>\n<li>https://github.com/ffay/lanproxy Java</li>\n<li>http://wdom.net/ 免费20分钟</li>\n<li>https://github.com/inlets/inlets</li>\n</ul>\n\n<h2>4. 其它不开源的</h2>\n\n<ul>\n<li>https://hsk.oray.com/ 花生壳，注册需要手机号；DDNS和内网穿透都支持？后者免费速度1M。</li>\n<li>https://www.kingdriod.cn/ 神卓，免费速度1M；需要实名认证上传身份证</li>\n<li>http://www.luyouxia.com/ 路由侠</li>\n<li>https://www.notr.tech/ 免费3小时</li>\n<li>https://www.nsloop.com/ 量子互联，写的不限流量</li>\n<li>http://www.mofasuidao.cn/ 魔法隧道，写的是“免费创建账户”</li>\n<li>http://www.youtusoft.com/ 网络通</li>\n<li>https://xiaomy.net/ 网云穿</li>\n<li>https://localhost.run/ 无需注册？</li>\n</ul>\n\n<h2>5. 免费DDNS</h2>\n\n<ul>\n<li>https://dyndnss.net/eng/</li>\n<li>https://freedns.afraid.org/</li>\n<li>https://www.duckdns.org/</li>\n<li>https://www.noip.com/</li>\n<li>https://www.spdyn.de/ 只有德语？</li>\n<li>https://dynv6.com/</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"那些让人惊奇的云项目(第四弹_云)","url":"/2023/05/22/那些让人惊奇的云项目-第四弹-云/","content":"\n<h1>云</h1>\n\n<!--more-->\n\nIaaS指提供系统（可以自己选）或者储存空间之类的硬件，软件要自己手动装；PaaS提供语言环境和框架（可以自己选）；SaaS只能使用开发好的软件（卖软件本身）；BaaS一般类似于非关系数据库，但各家不通用，有时还有一些其它东西。\n\n<h2>1. 其他人的集合</h2>\n\n<ul>\n<li>https://education.github.com/pack GitHub学生包，需用教育邮箱验证。各种福利，可从DigitalOcean上手</li>\n<li>https://github.com/ripienaar/free-for-dev</li>\n<li>https://github.com/AchoArnold/discount-for-student-dev</li>\n<li>https://github.com/ivmm/Student-resources</li>\n<li>https://www.freeforstudents.org/</li>\n<li>https://github.com/255kb/stack-on-a-budget</li>\n<li>https://github.com/Ibexoft/awesome-startup-tools-list</li>\n<li>https://www.cokemine.com/</li>\n</ul>\n\n<h2>2. Paas</h2>\n\n<ul>\n<li>https://www.heroku.com/ java go py docker。国内访问不佳</li>\n<li>https://fly.io/docs/pricing/ py node go 静态，感觉很完美</li>\n<li>https://www.deta.sh/ py3.7 node12 内存128MB，依赖250MB，大概率不支持DBMS，支持定时任务。有类dict数据库和10GB存储且可独立使用</li>\n<li>https://www.pythonanywhere.com/ 限制非常多，几乎就和虚拟主机差不多了，免费账户不允许访问白名单之外的网站。但好歹能提供一个自动https的web app</li>\n<li>https://www.divio.com/ docker</li>\n<li>https://www.clever-cloud.com/en/pricing 看介绍送20€，但应该只会送一次，可以用4个月</li>\n<li>https://cloud.google.com/appengine/docs/ 标准环境有一点储存空间和流量，要求启用API即要求绑卡，柔性环境(.NET)必须启用结算。国内无法访问</li>\n<li>https://clustered.com/pricing 现在只免费14天，永久免费的plan还没出，但至少从2020年11月就是这样了</li>\n<li>https://www.koyeb.com docker node py go，首页被RST</li>\n<li>https://railway.app/ node py go java，用了类似于heroku的buildpacks，RST</li>\n</ul>\n\n<h3>2.1. .net</h3>\n\n<ul>\n<li>https://appharbor.com 看起来比较好，支持3.1。好像不支持5：https://support.appharbor.com/discussions/problems/117063-net-5-support</li>\n<li>https://freeasphosting.net/ 网站说了一大堆学习的东西，不过说支持.NET5</li>\n<li>https://www.gearhost.com/ 看起来比较好，支持3.1。还支持PHP7和node。现在开了CF屏蔽大陆IP</li>\n<li>https://order.aspify.com/en/freehosting/ 100MB硬盘100MB数据库，支持5。但之前不让注册说服务在中国不可用</li>\n<li>https://somee.com/ 被墙了，且IP被封了</li>\n<li>https://www.myasp.net/hosting_plans 免费两个月但好像能免费续期</li>\n</ul>\n\n<h2>3. 云端空间/IDE</h2>\n\n<ul>\n<li>https://cloudstudio.net VSC，服务器在上海，每日限时四小时</li>\n<li>https://www.gitpod.io/ VSC，免费版每月50小时，支持在本地打开；专业版在学生包里免费6个月但要求Primary Email是学校的账户</li>\n<li>GitHub Workspaces：可能收费</li>\n<li>https://workspaces.openshift.com/ 魔改VSC，不支持扩展，国内访问慢；之前是codenvy和che.openshift.io</li>\n<li>https://repl.it/ 有免费版；专业版在学生包里免费3个月</li>\n<li>https://paiza.cloud/en/ 日产，好像还支持SSH连上去</li>\n<li>https://codetasty.com/</li>\n<li>https://www.suishencode.com/ 国内的，code-server，不知道为什么全网都搜不到信息</li>\n<li>https://next.tech/ 学生包中有</li>\n<li>https://ide.goorm.io/pricing 可以建立五个工作区，可以用SSH连上去。好像是自制的，界面完成度蛮高的，有终端，但没有intellisense，只能玩玩</li>\n<li>https://www.tutorialspoint.com/codingground.htm http://codepad.org/ https://ideone.com/ https://coliru.stacked-crooked.com/ https://wandbox.org/ https://tio.run https://code.xueersi.com/ide/code/1 https://jsrun.net/ 无需登录，能执行许多语言，但只能说能运行代码，称不上IDE</li>\n</ul>\n\n<h3>3.1. 前端在线IDE</h3>\n\n<ul>\n<li>https://jsbin.com 简洁，无需注册</li>\n<li>https://codepen.io/ 可不注册</li>\n<li>https://stackblitz.com/</li>\n<li>https://codesandbox.io/</li>\n<li>https://bit.dev/</li>\n<li>https://runkit.com 类似于jupyter notebook，也能创建api，以及把js的codeblock变得可运行</li>\n<li>https://www.codeply.com/</li>\n<li>https://plnkr.co/ 比较简陋</li>\n<li>https://jsfiddle.net/ 我这里打不开，且感觉是他们封的我们</li>\n</ul>\n\n<h3>3.2. Jupyter Notebook/Lab</h3>\n\n<ul>\n<li>https://colab.research.google.com/ 有免费gpu额度，国内无法直接打开。免费版无终端</li>\n<li>https://tianchi.aliyun.com/notebook-ai/home 免费gpu 60小时/年。登录要用阿里云账号，不想记住密码，每次都要用手机扫很麻烦，有时还要短信二次验证</li>\n<li>https://aistudio.baidu.com/aistudio/projectoverview/private 内存8G，磁盘100G，work目录永久保存，实名认证有一些GPU资源；长时间不用无法自动重连</li>\n<li>https://www.kaggle.com 验证电话后有免费gpu和外网，能连续运行9小时，有机器学习的教程</li>\n<li>https://www.heywhale.com/home/project 国产</li>\n<li>https://datalore.jetbrains.com/</li>\n<li>https://cocalc.com/doc/jupyter-notebook.html</li>\n<li>https://jupyter.org/try 官方，资源非常少，有C++；mybinder可以从GitHub仓库建立临时NB</li>\n<li>https://kogence.com/app/landing/pricing</li>\n<li>https://deepnote.com 免费额度750小时，5G空间</li>\n<li>https://www.dclab.run/project_list.html 国产</li>\n<li>https://software.intel.com/content/www/cn/zh/develop/tools/devcloud.html</li>\n</ul>\n\n<h2>4. 数据库</h2>\n\n<ul>\n<li>https://db4free.net/ mysql 200M</li>\n<li>https://www.freemysqlhosting.net/ mysql 5.5，5MB，每周会收到要手动操作来延期的邮件</li>\n<li>https://mlab.com/ https://www.mongodb.com/pricing 500MB；后者学生包中有</li>\n<li>https://app.redislabs.com/ redis，30M</li>\n<li>https://www.elephantsql.com/plans.html pg</li>\n<li>https://remotemysql.com/ mysql 100M</li>\n<li>https://www.elephantsql.com/ pg 20M</li>\n<li>https://www.freesqldatabase.com/ mysql 5MB</li>\n</ul>\n\n<h2>5. BaaS</h2>\n\n<ul>\n<li>https://bmob.cn/</li>\n<li>https://leancloud.cn/pricing/</li>\n<li>https://firebase.google.cn/pricing 用处：https://zhuanlan.zhihu.com/p/95334890</li>\n<li>https://www.zhihu.com/question/34124789/answer/72495188</li>\n<li>https://maxleap.cn/s/web/zh_cn/devcenter-pricing.html</li>\n<li>https://www.8base.com GraphQL</li>\n<li>JSON\n\n<ul>\n<li>https://jsonstores.com/ 100个JSON对象，每个最大2MB</li>\n<li>https://jsonbin.io/</li>\n<li>https://extendsclass.com/json-storage.html</li>\n<li>https://json.psty.io/</li>\n<li>https://www.jsonstorage.net/ 有无需注册的</li>\n<li>https://db.neelr.dev/ 无需注册，打开网页时自动生成一个TOKEN。但国内打不开</li>\n</ul></li>\n</ul>\n\n<h2>6. Managed K8S</h2>\n\n<ul>\n<li>https://www.openshift.com/products/online/ 每60天清除</li>\n<li>https://okteto.com/pricing 免费版2CPU，4G内存，10G储存。刚注册送一个月pro，不付款自动降到免费版。免费版24小时不活动就sleep。原意是为开发者日常开发使用的</li>\n<li>https://usekrucible.com 一个月能用25小时，自己分配</li>\n<li>https://kubernauts.sh/ 宣传免费版有1CPU，1G内存；申请注册后没收到任何邮件，无法登录</li>\n<li>https://labs.play-with-k8s.com/ 好像每天只有四小时；https://labs.play-with-docker.com/</li>\n<li>zarvis.ai staroid.com 网页都用的是Google的服务器，无法直接访问</li>\n<li>https://kubesail.com/ 停止免费版了，不过还是能作为管理平台</li>\n<li>https://loft.sh/ 好像只是客户端或者管理平台</li>\n<li>挂了的：k8spin.cloud tryk8s.com</li>\n</ul>\n\n<h2>7. Serverless/Node Paas（无状态的api）</h2>\n\n<ul>\n<li>https://glitch.com/</li>\n<li>https://workers.cloudflare.com/ ；https://github.com/booster-labs/rocket-booster</li>\n<li>https://vercel.com/ node go py</li>\n<li>https://deno.com/deploy</li>\n<li>https://pipedream.com/</li>\n<li>https://keen.io/</li>\n<li>https://www.openode.io/pricing</li>\n<li>https://www.cloud66.com/node/ 免费一个月</li>\n<li>https://www.jexia.com/</li>\n<li>https://www.openode.io/</li>\n<li>https://encore.dev/ RST</li>\n<li>谷歌的functions有一些免费额度，但一定会产生部署费用，最少$0.03/mo</li>\n<li>国内的云服务厂商一般都有FaaS服务，也有一定的免费额度，但问题是公网流出流量是没有免费额度的</li>\n<li>https://www.slappforge.com/sigma 仅开发平台</li>\n<li>https://catalyst.zoho.com/ 有免费的</li>\n</ul>\n\n<h2>8. 静态网页托管（必须要能自动更新）</h2>\n\n<ul>\n<li>https://surge.sh/</li>\n<li>https://www.netlify.com/</li>\n<li>https://render.com/ 收费版有PaaS，但免费版只能Static</li>\n<li>https://cloudcannon.com</li>\n<li>https://tiiny.host 只能存活7天？</li>\n<li>https://pages.cloudflare.com/</li>\n</ul>\n\n<h2>9. 也许可用的IaaS</h2>\n\n<ul>\n<li>euserv，德国的，只有IPV6，亲测确实可以，但硬盘很慢 https://github.com/YG-tsj/EUserv-warp</li>\n<li>https://open.iot.10086.cn/cloud/introduction/cloud-server OneNET移动的，MQ、对象储存、可视化、CI都有一定的免费额度</li>\n<li>https://activity.xinruiyun.cn/free/ 新睿云，发个广告可以免费用一个月的ECS</li>\n<li>https://www.oracle.com/cn/cloud/free/ 体验文章：https://51.ruyo.net/14138.html 不支持prepaid card；https://www.blueskyxn.com/202109/5232.html</li>\n<li>https://51.ruyo.net/14583.html Azure</li>\n<li>https://www.atlantic.net/ <del>免费12个月</del>现在好像变成免费一个月了，需要信用卡</li>\n<li>谷歌云、Amazon、Azure、Yandex Cloud：注册后都会送一些额度</li>\n</ul>\n\n<h3>9.1. <a class=\"wp-editor-md-post-content-link\" href=\"https://www.ibm.com/cn-zh/cloud/free\">IBM Cloud</a></h3>\n\n<ul>\n<li>Lite(轻量)版无需信用卡，没有到期时间，完全不会变到付费套餐上，额度到了就无法使用，30天不活动自动删除，一共44项服务</li>\n<li>Cloud Foundry：PaaS 256M内存，支持Java Node .NET GO PHP Py。10天不活动就休眠。apic.mybluemix.net和mybluemix.net都被墙了。要用ibmcloud命令行</li>\n<li>对象储存：25GB储存，5GB出站；Cloudant JSON文档数据库：1GB；DB2数据库：200MB，每90天要邮件延期</li>\n<li>机器翻译：但无ja-zh模型，只能和en互转，每月100万字符</li>\n<li>API Gateway：转发一次到另一个endpoint上，能用于静态文件的反代，能设定密钥验证和限制速率，显示调用频率。免费调用100万次但是没写每月，之后限速</li>\n<li>Cloud for Education：持续时间一小时的ECS，能用RDP连上但卡到完全无法使用，好像无外部互联网连接</li>\n<li>机器学习</li>\n<li>Docker Registry：储存0.5GB，流量5GB</li>\n<li>Event Streams：Kafka</li>\n<li>那些“软件”虽然有非常多免费的，但必须部署到k8s上；k8s也有免费套餐，但lite无法创建，因为流量和IP可能要收费</li>\n<li>函数计算：虽然有一点免费额度，但是无lite版</li>\n</ul>\n\n<h3>9.2. <a class=\"wp-editor-md-post-content-link\" href=\"https://cloud.tencent.com/act/free\">腾讯云</a></h3>\n\n<ul>\n<li>对象储存：免费半年</li>\n<li>CDN：免费半年</li>\n<li>Serverless：免费一年</li>\n<li>文件储存：免费10G</li>\n<li>机器翻译：免费500万字符/月，开通免费版必不会收任何费用</li>\n<li>云托管 CloudBase Run：不知道干什么用的</li>\n</ul>\n\n<h3>9.3. <a class=\"wp-editor-md-post-content-link\" href=\"https://free.aliyun.com\">阿里云</a></h3>\n\n<ul>\n<li>ECS：https://www.aliyun.com/daily-act/ecs/free 需要实名认证且未购买过任何产品，有个t6的ECS可以免费试用一年</li>\n<li>MaxCompute大数据计算服务开发者版https://www.aliyun.com/product/odps</li>\n<li>云效DevOps有一些免费额度，包括5GB Maven仓库</li>\n<li>机器翻译通用版：每月100万字符免费额度</li>\n</ul>\n\n<h2>10. 低代码平台/aPaaS</h2>\n\n<ul>\n<li>指不用写很多代码就能设计出软件，有可视化工具</li>\n<li>大部分都是BPM平台，即 表单+工作流审批，适合企业建立业务逻辑在线办公</li>\n<li>往往与平台本身严重绑定，难以复用和维护，切换平台代价大，开发者自身难以提升</li>\n</ul>\n\n<h3>10.1. 国内的</h3>\n\n<ul>\n<li>https://github.com/taowen/awesome-lowcode 收集</li>\n<li>https://www.aliwork.com/ 宜搭，阿里+钉钉</li>\n<li>https://www.apicloud.com/ 云端开发管理类</li>\n<li>https://www.mingdao.com/ 明道云</li>\n<li>https://www.jiandaoyun.com/ 简道云</li>\n<li>https://www.huoban.com/ 伙伴云</li>\n<li>https://qingflow.com/ 轻流</li>\n<li>https://www.steedos.com/pricing/platform/ 华炎魔方，开源，私有部署免费</li>\n<li>https://baidu.gitee.io/amis/docs/index 开源，偏程序员</li>\n<li>https://modao.cc/ 墨刀，原型设计工具</li>\n<li>https://www.imgcook.com/ 淘宝，由设计稿生成界面</li>\n<li>https://www.huaweicloud.com/product/appcube.html 华为云应用魔方，太新</li>\n<li>https://www.informat.cn/ 织信</li>\n<li>https://seatable.cn/ 在线协同表格和信息管理工具，类似于excel，本体不开源但开源了一些组件</li>\n<li>https://www.baishuyun.com/ 百数云</li>\n<li>网页感觉不太好的\n\n<ul>\n<li>https://www.iyunbiao.com/ 云表</li>\n<li>https://www.grapecity.com.cn/solutions/huozige 活字格</li>\n<li>https://www.learun.cn/ 力软敏捷框架</li>\n<li>https://www.ivx.cn 号称零代码开发Web App和小程序，前身是ih5.cn，不是BPM</li>\n<li>https://wuyuan.io/ https://enhancer.io/ 无远开发平台，个人使用免费，商业收费</li>\n<li>https://www.wudaima.com/ 宜创无代码，官网的footer的链接都是废的，一点也不透明</li>\n<li>https://www.bn100.com/ 柏思科技/Workfine</li>\n</ul></li>\n<li>收费的\n\n<ul>\n<li>https://h3yun.com/ 氚云，只免费15天，集成钉钉 https://www.cloudpivot.cn/ 云枢 https://www.h3bpm.com/ 都是“奥哲”公司的</li>\n<li>https://www.newdao.net/ 牛刀，免费两周</li>\n<li>https://www.clickpaas.com/ 不支持个人</li>\n<li>https://www.dadayun.cn/ 搭搭云 没有注册的地方</li>\n</ul></li>\n<li>没有https的： http://www.joget.cn/ 捷得 、http://www.putdb.com/ WebBuilder 、http://www.mf999.com/ 魔方网表(纯表单类)、http://www.delit.cn/ 度量快速开发平台、http://www.jinyunweb.com 进云、http://dev.easydo.cn 易开发、http://www.jepaas.com/ 、</li>\n</ul>\n\n<h3>10.2. 国外的</h3>\n\n<ul>\n<li>https://anvil.works/ py全栈，前端Drag and Drop UI，后端和数据储存用的是该网站的库</li>\n<li>https://www.outsystems.com/pricing-and-editions/ 开发移动应用，是该行的老大；前端组件比较多，后台相对弱一点儿；注册需要姓名，邮箱</li>\n<li>https://www.mendix.com/ 开发移动应用，后台能力比较强（有微流系统）</li>\n<li>https://free.caspio.com/ Database-Powered Apps</li>\n<li>https://thunkable.com 开发移动应用</li>\n<li>https://www.appsheet.com/ 无法直接打开</li>\n<li>https://www.zoho.com/creator/ 网页在我这里打开巨慢。可以一直用免费版只要不使用高级特性</li>\n<li>https://airtable.com/</li>\n<li>https://zenkit.com/ 无法直接打开</li>\n<li>Google的App Maker（G Suite收费）、微软的PowerApps（收费10$/mo）</li>\n<li>https://www.dronahq.com/</li>\n<li>https://zhuanlan.zhihu.com/p/375252561</li>\n<li>https://www.odoo.com/zh_CN/ 开源</li>\n<li>https://bubble.io/ 新出的</li>\n</ul>\n\n<h2>11. 未分类</h2>\n\n<ul>\n<li>https://www.litespeedtech.com/experience-litespeed-for-free 一个月有效？需要姓名，电话，邮箱，地址。好像只有wordpress，还是只有软件？</li>\n<li>https://github-students.educationhost.co.uk/ 免费一年</li>\n<li>有可能与Jupyter有关：\n\n<ul>\n<li>https://www.dataquest.io/plans-pricing/</li>\n<li>https://mode.com/compare-plans/</li>\n<li>https://kyso.io/pricing</li>\n</ul></li>\n<li>https://studio.azureml.net/ 可视化机器学习实验工具，可不登陆使用</li>\n<li>https://quic.cloud/ Wordpress cache cdn</li>\n<li>https://apis.baidu.com/</li>\n<li>https://platform.sh/pricing/ 好像只免费30天</li>\n</ul>\n","tags":["云","免费项目"],"categories":["_S9-折腾","白嫖"]},{"title":"Django_学习笔记","url":"/2023/05/22/Django-学习笔记/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Django_学习笔记：</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=5 face=宋体><strong>1. 安装python(已经安装python跳过，Linux默认已经安装了python)</strong></font>\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n\n\n<font color=red size=4 face=宋体><strong>1. python篇</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>1. 检测是否安装python</strong></font>\n\n```shell\npython -V\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>2. 检测python包安装情况</strong></font>\n\n```shell\npip3 list\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>3. 安装virtualenv</strong></font>\n\n```shell\npip3 install virtualenv\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>4. 创建python环境文件夹</strong></font>\n\n```shell\npython3 -m venv django_venv     # (bash 运行结果，会在当前文件夹创建一个django_venv的文件夹)\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>5. 进入创建的虚拟环境</strong></font>\n\n```shell\n# source /bin/activate\nsource ./django_venv/bin/activate\n# 备注：如果进入虚拟环境成功，在命令行前面会有一个小括号\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>6. 进入成功后，安装django环境</strong></font>\n\n```shell\npip3 install django #国外服务器下载\npip3 install django==2.2     #  指定安装django版本2.2\npip3 install django -i https://pypi.douban.com/simple   #  国内豆瓣源加速连接\n```\n\n<font color=red size=2 face=宋体><strong>python和django版本有兼容问题，具体对应版本如下:</strong></font>\n\n![](https://s2.loli.net/2022/06/08/Xf5MS9YHPajdnWR.png)\n\n\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n<font color=red size=4 face=宋体><strong>2. djiango篇</strong></font>\n\n+ <font color=#f26522 size=4 face=宋体><strong>1. 创建网站项目工程</strong></font>\n\n```shell\n# django-admin startproject <网站工程名>\ndjango-admin startproject mysite\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>2. 开启python—django网站服务</strong></font>\n\n```shell\npython3 manage.py runserver 0.0.0.0:8000\nnohup python3 manage.py runserver 0.0.0.0:8000 > manage.log 2>&1 &\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>3. django 框架中添加子应用</strong></font>\n\n```shell\n# python manage.py startapp <子应用名称>\npython manage.py startapp index  # 创建了一个名叫 的文件夹\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=#f26522 size=4 face=宋体><strong>4. 如果django安装成功 使用python进入之后，使用命令会显示django版本信息</strong></font>\n\n```shell\n>>>import django\n>>>django.__version__\n```\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"django_SQLite_3.9.0_required(found3.7.17)_错误解决方案","url":"/2023/05/22/django-SQLite-3-9-0-required-found3-7-17-错误解决方案/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>django_SQLite_3.9.0_required(found3.7.17)_错误解决方案：</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=5 face=宋体><strong>解决 django—SQLite报错</strong></font>\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>错误信息</strong></font>\n\n```\ndjango.core.exceptions.ImproperlyConfigured: SQLite 3.9.0 or later is required (found 3.7.17).\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>1. 进入你的虚拟环境文件夹</strong></font>\n\n```python\nvim django_venv/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py\n\n找到check_sqlite_version() 函数调用语句  ==> 第66行  注释\n```\n\n<font color=#b0171f size=2 face=宋体><strong>将django_venv/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py 下的check_sqlite_version()函数禁用</strong></font>\n\n![](https://s2.loli.net/2022/06/08/azvcJnsmBe1RWfF.png)\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>2. 出现如下错误，继续处理，否则略过</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>django.db.utils.NotSupportedError: deterministic=True requires SQLite 3.8.3 or higher</strong></font>\n\n```python\n# 将208行的\ndeterministic=True,\n# 改为\ndeterministic=False,\n```\n\n![](https://s2.loli.net/2022/06/08/Wo2rHfMtcFlDBS6.png)\n\n![](https://s2.loli.net/2022/06/08/hq5WjezyHZCfiBv.png)\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n","tags":["django","python","错误"],"categories":["_A9-错误解决","python","SQLite"]},{"title":"Django路由配置","url":"/2023/05/22/Django路由配置/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Django路由配置</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>1. Django路由配置</strong></font>\n\n- <font color=red size=3 face=宋体><strong>**初始化django配置**</strong></font>\n- <font color=red size=3 face=宋体><strong>**主路由**</strong></font>\n\n<br>\n\n---\n\n<br>\n\n- <font color=red size=3 face=宋体><strong>**主路由(不变)**</strong></font>\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls'))           # 绑定到子路由语句\n]\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=red size=3 face=宋体><strong>子路由(带问号访问方式http://192.168.48.182:8000/index/?name=name&age=age)</strong></font>\n\n```python\nfrom django.urls import path\nfrom .views import index\nurlpatterns = [\n    path('index', index.as_view()),\n]\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=red size=3 face=宋体><strong>views配置(带问号访问方式http://192.168.48.182:8000/?name=name&age=age)</strong></font>\n\n```python\nfrom django.shortcuts import render\nfrom django.views.generic import View\nfrom django.http import HttpResponse\n# Create your views here.\nclass index(View):\n    def get(self, request):\n        name = request.GET.get('name', '')\n        age = request.GET.get('age', 10)\n        return HttpResponse(name + age)\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=red size=3 face=宋体><strong>子路由(直接访问http://192.168.48.182:8000/index/name/age)</strong></font>\n\n```python\nfrom django.urls import path\nfrom .views import index\nurlpatterns = [\n    path('index//', index.as_view()),\n]\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=red size=3 face=宋体><strong>views配置(直接访问http://192.168.48.182:8000/index/name/age)</strong></font>\n\n```python\nfrom django.shortcuts import render\nfrom django.views.generic import View\nfrom django.http import HttpResponse\n\n# Create your views here.\nclass index(View):\n    def get(self, request, name, age):\n        return HttpResponse(name + age)\n```\n\n<br>\n\n---\n\n<br>\n\n+ <font color=red size=3 face=宋体><strong>templates创建完成后的settings.py的配置</strong></font>\n\n```python\nfrom pathlib import Path\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5ttic0454bv9_&yj99u3z@7u0x6(h!1@3^2&^fn462znki3q)*'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app'\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'django_02.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'django_02.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = False\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n```\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n\n\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"Django下使用MongoDB数据库教程","url":"/2023/05/22/Django下使用MongoDB数据库教程/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>Django下使用MongoDB数据库教程：</strong></font>\n\n<!--more-->\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>1、安装</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>要在Django下使用mongodb数据库，首先在虚拟环境下安装mongodb包</strong></font>\n\n```shell\npip install pymongo\n```\n\n<br>\n\n---\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>2、配置settings</strong></font>\n\n```\nfrom pymongo import MongoClient   # 导入模块，mongo客户端\n```\n\n![](https://s2.loli.net/2022/06/08/bicEP2eHOylFaxJ.png)\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>3、创建python文件</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>在APP下创建一个mongo_models.py文件</strong></font>\n\n```python\nfrom django.conf import settings\nconn = settings.MONGOCLIENT['user_one']\n\nclass user(object):\n    db = conn['user_one']\n\n    @classmethod\n    def insert(cls, **params):\n        return cls.db.insert(params)\n\n    @classmethod\n    def get(cls, **params):\n        return cls.db.find_one(params)\n    @classmethod\n    def gets(cls, **params):\n        return list(cls.db.find(params))\n    @classmethod\n    def update(cls, _id, **params):\n        return cls.db.update({'_id': _id}, {'$set': params})\n\n```\n\n<br>\n\n---\n\n<br><font color=#f26522 size=4 face=宋体><strong>4、创建python文件_mongo数据库引擎</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>安装mongoengine</strong></font>\n\n```shell\npip install mongoengine\n```\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n","tags":["数据库","django","python","mongodb"],"categories":["_9-数据库","mongodb"]},{"title":"前端 html css属性","url":"/2023/05/18/前端-html-css属性/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>前端 html css属性</strong></font>\n\n<!--more-->\n\n<br>\n\n<br>\n\n------\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>css之文本属性</strong></font>\n\n```python\nfont-size   # 字体大小    单位是px 浏览器默认是16px   设计图常用字号是12px\n\nfont-family    # 字体    当字体是中文字体、英文字体中有空格时，需要加引号；多个字体中间用逗号链接，先解析第1个字体，如果没有，则解析第2个字体，以此类推\n\ncolor    # 颜色      color：red；   color:#ff0;   color:rgb(255,0,0); 0-255\n\nfont-weight     # 加粗 font-weight:bolder(更粗的)、bold(加粗)、normal(常规)、font-weight:100-900;       100-500不加粗   600-900加粗\n\nfont-style   # 倾斜   font-style:italic(倾斜字体)、oblique(倾斜的文字)、normal(常规显示)\n\ntext-align   # 文字水平对齐     text-align:left;    水平靠左      text-align:right;   水平靠右        text-align:center;   水平居中          text-align:justify;  水平两端对齐  但是只对多行起作用\nline-height       # 行高            line-height的数据=height的数据，可以实现单行文本垂直居中\ntext-indent        #  首行缩进      text-indent 可以取负值，    text-indent属性只对第一行起作用   2em  不管字体大小，都是空出两个字体\nletter-spacing       # 字间距   控制文字和文字之间的间距\ntext-decoration       #  文本修饰      none（没有）、 underline（下划线）、overline（上划线）、line-through（删除线）\nfont               # 文字简写         fout-style   font-weight    font-size   line-height  fout-family         fout:italic    顺序不能变，必须同时指定fontsize和font-family属性时才起作用\n```\n\n<br>\n\n<br>\n\n------\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>背景图片</strong></font>\n\n```python\nbackground-size:  图片大小    例如 background-size: 20px 20px     可以是百分比   cover 完全覆盖、contain  宽高放大至当前盒子最大\nbackground-color: 背景颜色;\nbackground-image: 背景图片;    例如 background-image: url();\nbackground-repeat: 背景图片的平铺;     background-repeat: no-repeat(不平铺)、repeat(默认平铺)、repeat-x(x轴平铺)、repeat-y(y轴平铺)\nbackground-position: 背景图片定位;     background-position: 水平位置   锤子位置  可以给负值\nbackground-attachment: 背景图片的固定;   background-attachment: scroll(滚动)、fixed(固定,固定在浏览器的窗口里面)\n```\n\n\n\n![图片属性](https://s2.loli.net/2022/06/08/Mb2xYeqFTdaBuHX.png)\n\n<br>\n\n<br>\n\n------\n\n<br><font color=#f26522 size=4 face=宋体><strong>浮动</strong></font>\n\n```python\n浮动\nfloat:right;    右浮动。\nfloat: left;    左浮动\nfloat: none;    不浮动\n\n第一种 清浮动\n直接写死，让前元素的宽高等于现元素，不常用\n\n第二种 在现元素中使用\nclear: left;   清除左浮动\nclear: right;  清除右浮动\nclear: none;   不清除浮动\nclear: both;   清除前面所有浮动\n\n第三种 在已经使用浮动的父元素中使用空盒子，然后  style=\"clear:both\"\n第四中 在父元素中使用 overflow: hidden style=\"overflow: hidden;\"\n```\n\n<br>\n\n<br>\n\n------\n\n<br><font color=#f26522 size=4 face=宋体><strong>盒子模型——padding属性</strong></font>\n\n```css\npadding: 10px;       一个值   四个方向都是10px\npadding: 10px 20px       两个值    上下10px    左右20px\npadding: 10px   20px  30px         三个值   上10px    左右20px     下30px\npadding:  10px 20px 30px 40px      四个值   逆时针    上  右  下 左 \n```\n\n<br>\n\n<br>\n\n------\n\n<br><font color=#f26522 size=4 face=宋体><strong>盒子模型——边框属性（border）</strong></font>\n\n```css\nborder: 1px  solid red        边框大小为1px       solid(实线)        红色\n\nborder:支持属性    样式>>>   solid(实线)     double(双实线)      dashed(虚线)    dotted(点状线)\n\n可拆分成\nborder-width:    可设置4个值     逆时针    上  右  下 左\nborder-color:     可设置4个值     逆时针    上  右  下 左\nborder-style:     可设置4个值     逆时针    上  右  下 左\n\n\n盒子特性\n上下盒子外边距会取最大的一个值\n左右盒子会相互叠加\n\n\n外边距会作用在父盒子身上\n    解决办法：\n        1、子盒子margin-top ==> 父盒子的padding-top    ,将子盒子的外边距转换成父盒子的内边距，注意高度计算\n        2、给父盒子设置边框  border\n        3、添加浮动效果，子盒子或者父盒子都可以\n        4、overflow: hidden.    BFC构建\n```\n\n<br>\n\n<br>\n\n<br>\n\n------\n\n","tags":["前端","css","html"],"categories":["_A2-前端","html"]},{"title":"Typora快捷键记录","url":"/2023/05/18/Typora快捷键记录/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>Typora快捷键记录： </strong></font>\n\n<!--more-->\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>Typora快捷用法：让你的写作更高效</strong></font>\n\nTypora是一款轻量级的Markdown编辑器，它的快捷用法可以让你的写作更加高效。下面我将介绍一些常用的快捷用法，帮助你更好地使用Typora。\n\n <font color=#f26522 size=4 face=宋体><strong>1. 标题</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Typora支持六级标题，你可以使用快捷键Ctrl+数字键来快速添加标题。例如，Ctrl+1添加一级标题，Ctrl+2添加二级标题，以此类推。</strong></font>\n\n```\nCtrl+数字键   添加标题 1 ~ 6 级标题\n```\n\n<font color=#f26522 size=4 face=宋体><strong>2. 列表</strong></font> \n\n+ <font color=#b0171f size=2 face=宋体><strong>Typora支持有序列表和无序列表。你可以使用快捷键Ctrl+Shift+O来添加有序列表，使用Ctrl+Shift+U来添加无序列表。 </strong></font>\n\n```\nCtrl+Shift+O   有序列表\nCtrl+Shift+U   无序列表\n```\n\n<font color=#f26522 size=4 face=宋体><strong>3. 引用</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>引用是一种常用的写作方式，Typora支持引用。你可以使用快捷键Ctrl+Shift+Q来添加引用。</strong></font>\n\n```\nCtrl+Shift+Q   引用\n```\n\n<font color=#f26522 size=4 face=宋体><strong>4. 加粗和斜体</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>加粗和斜体是常用的文本格式，Typora支持快捷键Ctrl+B来添加加粗，Ctrl+I来添加斜体。</strong></font>\n\n```\nCtrl+B   加粗\n```\n\n<font color=#f26522 size=4 face=宋体><strong>5. 插入图片</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Typora支持插入图片，你可以使用快捷键Ctrl+Shift+I来插入图片。</strong></font>\n\n```\nCtrl+Shift+I    插入图片\n```\n\n<font color=#f26522 size=4 face=宋体><strong>6. 插入链接</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Typora支持插入链接，你可以使用快捷键Ctrl+K来插入链接。</strong></font>\n\n```\nCtrl+K    插入链接\n```\n\n<font color=#f26522 size=4 face=宋体><strong>7. 表格</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Typora支持表格，你可以使用快捷键Ctrl+T来添加表格。</strong></font>\n\n```\nCtrl+T    添加表格\n```\n\n<font color=#f26522 size=4 face=宋体><strong>8. 代码块</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>Typora支持代码块，你可以使用快捷键Ctrl+Shift+K来添加代码块。</strong></font>\n\n```\nCtrl+Shift+K    添加代码块\n```\n\n\n\n<br>\n\n<br>\n\n<font color=#00b2c2 size=3 face=宋体><strong>以上是Typora的一些常用快捷用法，它们可以让你的写作更加高效。如果你想了解更多快捷用法，可以在Typora中按下快捷键Ctrl+/来查看所有快捷键。</strong></font>\n\n<br>\n\n<br>\n\n<br>\n\n---\n\n","tags":["工具","Markdown"],"categories":["_A5-安装教程","Typora"]},{"title":"Django_settings.py配置教程","url":"/2023/05/10/Django-settings-py配置教程/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>settings.py配置教程</strong></font>\n\n<!--more-->\n\n```python\n# ALLOWED_HOSTS（当前网站访问权限）\n    # 配置那些计算机有权限访问当前网站 全部网站为*\n    # 例如： ALLOWED_HOSTS = [“*”]\n\n# INSTALLED_APPS（应用注册）\n\t# 例如：’index’ 注意：必须有引号\n\n# BASE_DIR\n\t# BASE_DIR= ‘ ‘ # 返回一个项目的绝对路径\n\n# SECRET_KEY\n\t数据加密，防止网站被跨域攻击\n\n# DEBUG\n\t# 让网站出于开发模式，如果出错，会返回详细情况，如果开发完成，一定要调成false\n\n# MIDDLEWARE\n\t# 中间件\n\n# ROOT_URLCONF\n\t# 网站入口，根路由配置\n\n# TEMPLATES\n\t# 配置html静态文件的\n\n# WSGI_APPLICATION\n\t# 配置开发服务器的\n\n# DATABASES\n\t# 配置数据库的\n\n# AUTH_PASSWORD_VALIDATORS\n\t#配置用户密码加密的\n\n# LANGUAGE_CODE\n\t# 网站默认语言\n    \n# LANGUAGE_CODE\n\t# 网站默认语言\n    \n# 修改中文 讲en-us  >  zh-hans\n\t# LANGUAGE_CODE = 'zh-hans'\n# TIME_ZONE\n\t# UTC= 国际化时间  Asia/Shanghai > 亚洲上海时间\n\t# TIME_ZONE = 'Asia/Shanghai'\n```\n\n","tags":["django","python"],"categories":["Python","Django"]},{"title":"Sublime Text 4 激活码于汉化教程","url":"/2023/03/20/Sublime-Text-4-激活码于汉化教程/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>Sublime Text 4 激活码于汉化教程：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>2021年5月20日 Sublime Text 4 稳定版终于正式发布了！7月14日 Sublime Text 4 又更新了一版</strong></font>\n\n<font color=red size=4 face=宋体><strong>**1. 大版亮点：**</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>1、许可证更改：Sublime Text License 密钥（注册码）不再与独立的主要版本绑定，而是对购买后 3 年内的所有更新均有效，不过使用更新的版本需要升级 License。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>2、支持多 tab 选项卡：方便分割视图，支持通过界面或内置命令行使用。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>3、支持 Apple Silicon 和 Linux ARM64：Sublime Text for Mac 包含对 Apple Silicon 处理器的原生支持，Linux ARM64 builds 在树莓派等设备中可用。\n4、全新的 UI 界面</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>5、语境感知自动补全：该版本重写了自动补全引擎，使之能够基于项目中的已有代码提供智能补全。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>6、支持 TypeScript、JSX 和 TSX</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>7、语法定义升级：语法高亮引擎全新升级，能够处理非确定性语法、多行语句、lazy embed 和语法继承。此外，内存使用降低，加载速度更快。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>8、GPU 渲染：Sublime Text 4 稳定版在渲染界面时，能够在 Linux、Mac 和 Windows 系统中利用 GPU，从而带来流畅的 UI 界面，分辨率最高可达 8K，且消耗的能源更少。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>9、Python API 升级：Sublime Text 新版本 API 升级至 Python 3.8，同时具备对 Sublime Text 3 软件包的向后兼容性。Python API 新增了许多特性，如允许 LSP 等插件更好地运行。</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>10、兼容性：Sublime Text 4 完全兼容 Sublime Text 3，可以自动接收旧版本的会话和配置。Sublime Text 还支持 3、4 版本的分开运行。</strong></font>\n\n<br>\n\n<font color=#f26522 size=4 face=宋体><strong>官网下载地址：[`点击下载`](https://www.sublimetext.com/download)</strong></font>\n<font color=#f26522 size=4 face=宋体><strong>BDyun-直链下载：</strong></font>\n<font color=#f26522 size=4 face=宋体><strong>版本信息(Sublime Text4)：Build 4126</strong></font>\n\n<font color=#00b2c2 size=4 face=宋体><strong>Mac版：[`点击下载`](https://bd.bcebos.com/v1/xly-icafe/sublime_text_build_4126_mac-20220215070420-foetmn.zip)</strong></font>\n\n<font color=#00b2c2 size=4 face=宋体><strong>Windos版：[`点击下载`](https://bd.bcebos.com/v1/xly-icafe/sublime_text_build_4126_x64_setup-20220215070548-f5atsv.exe)</strong></font>\n\n<font color=#00b2c2 size=4 face=宋体><strong>Linux版：[`X86点击下载`](https://bd.bcebos.com/v1/xly-icafe/sublime_text_build_4126_x64.tar-20220215070629-mdmt8r.xz)、[`ARM64点击下载`](https://bd.bcebos.com/v1/xly-icafe/sublime_text_build_4126_arm64.tar-20220215070654-dgee3e.xz)</strong></font>\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**软件激活：**</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>安装完如果弹窗需要输入授权，直接复制下面注册码粘贴点击 Use License，</strong></font>\n\n<font color=#b0171f size=2 face=宋体><strong>如果没有有弹窗，点击菜单栏的『Help -> Enter License』弹出激活窗口，输入下面的注册码然后点击「Use License」</strong></font>\n\n\n\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>**1.1. 注册码（全部需要复制粘贴）：**</strong></font>\n\n```shell\n—– BEGIN LICENSE —–\n\nMifeng User\n\nSingle User License\n\nEA7E-1184812\n\nC0DAA9CD 6BE825B5 FF935692 1750523A\n\nEDF59D3F A3BD6C96 F8D33866 3F1CCCEA\n\n1C25BE4D 25B1C4CC 5110C20E 5246CC42\n\nD232C83B C99CCC42 0E32890C B6CBF018\n\nB1D4C178 2F9DDB16 ABAA74E5 95304BEF\n\n9D0CCFA9 8AF8F8E2 1E0A955E 4771A576\n\n50737C65 325B6C32 817DCB83 A7394DFA\n\n27B7E747 736A1198 B3865734 0B434AA5\n\n—— END LICENSE ——\n```\n\n![激活码](https://s2.loli.net/2022/06/09/x9pVQDIPgUZ5Wtn.jpg)\n\n---\n\n<br>\n\n<font color=#00b2c2 size=5 face=宋体><strong>**软件汉化：**</strong></font>\n\n+ <font color=#b0171f size=2 face=宋体><strong>1、点击 Tools—Install Package Control，（安装包控件比较慢，并且没有反应，等待数分钟后会有弹窗）</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>2、点击确定按钮</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>3、菜单点击Preferences – Package Control，选择 Install Package</strong></font>\n+ <font color=#b0171f size=2 face=宋体><strong>4、输入 ChineseLocalzations 可见中文包！选中即可安装！</strong></font>\n  ![1630993909-d1be2f8c031ea28](https://s2.loli.net/2022/06/09/M7lZUskgtYI6TQO.jpg)\n","tags":["破解","软件"],"categories":["_A5-安装教程","Sublime Text 4"]},{"title":"Django_templates模版配置","url":"/2023/03/20/Django-templates模版配置/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>Django_templates模版配置：</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=4 face=宋体><strong>**1. djiango篇：**</strong></font>\n\n+ <font color=#f26522 size=3 face=宋体><strong>**1. 进入虚拟环境**</strong></font>\n\n```shell\nsource /bin/activate\n# 例如: source /home/kevin/djiango_venv/bin/activate\n```\n\n- <font color=#f26522 size=3 face=宋体><strong>**2.创建网站项目工程**</strong></font>\n\n```shell\n# django-admin startproject <网站工程名>\n# 创建的工程在当前目录下，而非虚拟环境的目录下\n# 虚拟环境只是一个python_djiango的配置环境，不是整个项目的文件\ndjango-admin startproject mysite\n```\n\n+ <font color=#f26522 size=3 face=宋体><strong>**3.django 框架中添加子应用**</strong></font>\n```shell\n# python manage.py startapp <子应用名称>\npython manage.py startapp index  # 创建了一个名叫 的文件夹\n```\n<font color=#b0171f size=2 face=宋体><strong>**配置完app目录后——settings.py的配置**</strong></font>\n\n\n```python\nALLOWED_HOSTS = [\"*\"]\nINSTALLED_APPS = ['app',]\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\nUSE_TZ = False\n```\n\n- <font color=#f26522 size=3 face=宋体><strong>**4.创建templates（模版文件）**</strong></font>\n\n  - <font color=#b0171f size=2 face=宋体><strong>直接使用命令创建templates</strong></font>\n\n  ```shell\n  # 需要注意这里的templates是要在项目根目录下创建\n  # 也就是在文件夹下有manage.py的文件夹创建\n  mkdir templates\n  ```\n\n  \n\n  \n\n  - <font color=#b0171f size=2 face=宋体><strong>templates创建完成后的settings.py的配置</strong></font>\n\n  ```python\n  TEMPLATES = [\n      {\n          'BACKEND': 'django.template.backends.django.DjangoTemplates',\n          'DIRS': [os.path.join(BASE_DIR, 'templates')],\n          'APP_DIRS': True,\n          'OPTIONS': {\n              'context_processors': [\n                  'django.template.context_processors.debug',\n                  'django.template.context_processors.request',\n                  'django.contrib.auth.context_processors.auth',\n                  'django.contrib.messages.context_processors.messages',\n              ],\n          },\n      },\n  ]\n  ```\n\n  \n\n- <font color=#f26522 size=3 face=宋体><strong>**5. templates下配置与其他模版一样**</strong></font>\n\n  - <font color=#b0171f size=2 face=宋体><strong>只有在views.py下的配置不一样 # 一般配置为HttpResponse ，而….返回的是render</strong></font>\n\n    ```python\n    class index(View):\n    def get(self, request):\n        # print(request)\n        return render(request, 'index.html')\n    ```\n","tags":["django","python","模板"],"categories":["Python","Django"]},{"title":"ThreadPoolExecutor多线程返回值","url":"/2023/03/20/ThreadPoolExecutor多线程返回值/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>ThreadPoolExecutor多线程返回值</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**方法一：使用threading：**</strong></font>\n<font color=#b0171f size=2 face=宋体><strong>在threading中，并没有实现返回值的方法，我们可以用数据库或者是全局变量来实现返回值的获取。这里使用的是全局变量。</strong></font>\n\n```python\ndef thread_function(age):\n    for i in age:\n        i += 1\n        q.put(\n            {\n                'age': i\n             }\n        )\ndef run_threading(target, args, count):\n    \"\"\"\n    :param target: 目标函数\n    :param args: 函数参数\n    :param count: 线程数量\n    \"\"\"\n    ts = []\n    for i in range(count):\n        t = Thread(target=target, args=args)\n        ts.append(t)\n    [i.start() for i in ts]\n    [i.join() for i in ts]\n\nif __name__ == '__main__':\n    ages = [1, 3, 4]\n    # 1111\n    run_threading(thread_function, (ages,), 1)\n    output = []\n    while not q.empty():\n        output.append(q.get())\n    print output\n```\n\n\n\n\n\n<font color=red size=5 face=宋体><strong>**输出：**</strong></font>\n\n```python\n[{'age': 2}, {'age': 4}, {'age': 5}]\n\nProcess finished with exit code 0\n```\n\n\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**方法二：使用ThreadPoolExecutor的submit：**</strong></font>\n\n<font color=red size=2 face=宋体><strong>从3.2开始，标准库为我们提供了`concurrent.futures`模块，它提供了`ThreadPoolExecutor`和`ProcessPoolExecutor`两个类，实现了对`threading`和`multiprocessing`的进一步抽象。这里主要关注线程池，不仅可以帮我们自动调度线程，还可以做到：</strong></font>\n\n+ 1. <font color=#b0171f size=2 face=宋体><strong>主线程可以获取某一个线程（或者任务的）的状态，以及返回值。</strong></font>\n+ 2. <font color=#b0171f size=2 face=宋体><strong>当一个线程完成的时候，主线程能够立即知道。</strong></font>\n+ 3. <font color=#b0171f size=2 face=宋体><strong>让多线程和多进程的编码接口一致。</strong></font>\n\n```python\ndef thread_function(age):\n    return age+1\n\ndef run_thread_pool_sub(target, args, max_work_count=3):\n    with ThreadPoolExecutor(max_workers=max_work_count) as t:\n        res = [t.submit(target, i) for i in args]\n        return res\nif __name__ == '__main__':\n    ages = [1, 3, 4]\n    res = run_thread_pool_sub(thread_function, ages)\n    for future in as_completed(res):\n        data = future.result()\n        print data\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>`as_completed()`方法是一个生成器，在没有任务完成的时候，会阻塞，在有某个任务完成的时候，会yield这个任务，就能执行for循环下面的语句，然后继续阻塞住，循环到所有的任务结束。从结果也可以看出，先完成的任务会先通知主线程</strong></font>\n\n\n\n<font color=red size=5 face=宋体><strong>**输出：**</strong></font>\n\n```python\n4\n2\n5\nProcess finished with exit code 0\n```\n\n\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**这里可以看出submit的返回是无序的**</strong></font>\n<font color=#b0171f size=2 face=宋体><strong>**这里看下源码：**</strong></font>\n\n```python\ndef submit(self, fn, *args, **kwargs):\n    with self._shutdown_lock:\n        if self._shutdown:\n            raise RuntimeError('cannot schedule new futures after shutdown')\n        f = _base.Future()\n        w = _WorkItem(f, fn, args, kwargs)\n        self._work_queue.put(w)\n        self._adjust_thread_count()\n        return f\n    submit.__doc__ = _base.Executor.submit.__doc__\n```\n\n\n\n\n\n<font color=red size=2 face=宋体><strong>**注意的是，它就是执行一个单独的函数，并且返回的是future对象(具体请看官方文档)。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**方法三：使用ThreadPoolExecutor的map：**</strong></font>\n\n```python\ndef thread_function(age):\n    for i in age:\n        yield i+1\n\ndef run_thread_pool(target, args, max_work_count=6):\n    with ThreadPoolExecutor(max_workers=max_work_count) as t:\n        res = t.map(target, args)\n        return res\n\nif __name__ == '__main__':\n    ages = [1, 3, 4]\n    # 2222\n    res = run_thread_pool(target=thread_function, args=(ages,))\n    for j in res:\n        for i in j:\n            print(i)\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**输出：**</strong></font>\n\n```python\n2\n4\n5\n\nProcess finished with exit code 0\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**这里看出map的输出是有序的**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**这里看下map的源码：**</strong></font>\n\n```python\ndef map(self, fn, *iterables, **kwargs):\n    \"\"\"Returns an iterator equivalent to map(fn, iter).\n    Args:\n        fn: A callable that will take as many arguments as there are\n            passed iterables.\n        timeout: The maximum number of seconds to wait. If None, then there\n            is no limit on the wait time.\n    Returns:\n        An iterator equivalent to: map(func, *iterables) but the calls may\n            be evaluated out-of-order.\n    Raises:\n        TimeoutError: If the entire result iterator could not be generated\n            before the given timeout.\n        Exception: If fn(*args) raises for any values.\n    \"\"\"\ntimeout = kwargs.get('timeout')\nif timeout is not None:\n    end_time = timeout + time.time()\n    fs = [self.submit(fn, *args) for args in itertools.izip(*iterables)]\n    # Yield must be hidden in closure so that the futures are submitted\n    # before the first iterator value is required.\n    def result_iterator():\n        try:\n            # reverse to keep finishing order\n            fs.reverse()\n            while fs:\n                # Careful not to keep a reference to the popped future\n                if timeout is None:\n                    yield fs.pop().result()\n                else:\n                    yield fs.pop().result(end_time - time.time())\n        finally:\n            for future in fs:\n                future.cancel()\n        return result_iterator()\n```\n\n\n\n<font color=red size=5 face=宋体><strong>**它的参数是个iterables，所以当参数为列表字典等时，只需要写一个map函数就行了，而且它的返回值也是个iterable。**</strong></font>\n","tags":["python","基础"],"categories":["Python","爬虫"]},{"title":"xmind_2019版_破解版","url":"/2023/03/20/xmind-2019版-破解版/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>xmind_2019版_破解版</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**思维导图软件下载：**</strong></font>\n\n- <font color=#00b2c2 size=4 face=宋体><strong>**xmind(windos)：**</strong></font>\n  - <font color=#b0171f size=3 face=宋体><strong>**2019破解版：**[`点击下载`](https://bd.bcebos.com/v1/xly-icafe/xmind2019思维导图破解版-20211108091111-sjykek.rar)</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**破解教程：**</strong></font>\n\n- <font color=red size=2 face=宋体><strong>如图：你的电脑是32位的，就选32位破解程序，是64的 就选64位破解程序</strong></font>\n- ![img](https://s2.loli.net/2022/06/09/Vsh12aeIzpyRdHm.png)\n- <font color=red size=2 face=宋体><strong>将文件打开得到两个文件，将这两个文件复制到resources目录下，这个目录是你的xmind安装目录下的一个子目录。</strong></font>\n- ![img](https://s2.loli.net/2022/06/09/LD5o8z4TQAcuvXU.png)\n- <font color=red size=2 face=宋体><strong>将文件打开得到两个文件，将这两个文件复制到</strong></font>\n","tags":["破解","软件"],"categories":["_A8-工具","其他工具"]},{"title":"windos 11 镜像下载","url":"/2023/03/20/windos-11-镜像下载/","content":"\n# <font color=red size=7 face=宋体><strong>windos 11 镜像下载：</strong></font>\n\n<!--more-->\n\n<font color=#00b2c2 size=5 face=宋体><strong>**1. Windows 11**</strong></font>\n\n- <font color=#f26522 size=4 face=宋体><strong>**Preview**</strong></font>\n  - <font color=#b0171f size=3 face=宋体><strong>版本号：22454（发布时间：2021-09-11）</strong></font>\n    - Windows 11 Insider Preview (Dev Channel) – Build 22454\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|Windows11_InsiderPreview_Client_x64_zh-cn_22454.iso|4903213056|A4FD6D7058261FCB31D076BA727FAF77|/)、[`BT`](magnet:?xt=urn:btih:72DCA2544C2135412A0725307FB2C7CD97D22261&dn=Windows11_InsiderPreview_Client_x64_zh-cn_22454.iso&xl=4903213056)</strong></font>\n  - <font color=#b0171f size=3 face=宋体><strong>版本号：22000.194（发布时间：2021-09-23）</strong></font>\n    - Windows 11 Insider Preview (Dev Channel) – Build 22454\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|Windows11_InsiderPreview_Client_x64_zh-cn__22000.iso|5517273088|DFD1AE88E36516B87382FC3D3D3F46AD|/)、[`BT`](magnet:?xt=urn:btih:7E45EBE420A55426FE28933B70227279517A1B11&dn=Windows11_InsiderPreview_Client_x64_zh-cn__22000.iso&xl=5517273088)</strong></font>\n  - <font color=#b0171f size=3 face=宋体><strong>版本号：22000.132（发布时间：2021-09-11）</strong></font>\n    - Windows 11 Insider Preview (Dev Channel) – Build 22454\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|Windows11_InsiderPreview_Client_x64_zh-cn_22000.iso|5506693120|0D9E847ABF673C87F60737633AD95675|/)、[`BT`](magnet:?xt=urn:btih:575BBD64A372284C92A304A2492D7E2F7DCE3BFE&dn=Windows11_InsiderPreview_Client_x64_zh-cn_22000.iso&xl=5506693120)</strong></font>\n- <font color=#f26522 size=4 face=宋体><strong>**21H2**</strong></font>\n  - <font color=#b0171f size=3 face=宋体><strong>版本号：Updated October 2021（发布时间：2021-10-19）</strong></font>\n    - Windows 11 (business editions), version 21H2 (updated October 2021) (x64) – DVD (Chinese-Simplified)\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|zh-cn_windows_11_business_editions_version_21h2_updated_october_2021_x64_dvd_a84e149f.iso|5419143168|B0C4BE7271CD65B2173326239D4F8BA2|/)、[`BT`](magnet:?xt=urn:btih:98BB0A1703D5E36ADCE9BAAA1E02D86C29C4DF95&dn=zh-cn_windows_11_business_editions_version_21h2_updated_october_2021_x64_dvd_a84e149f.iso&xl=5419143168)</strong></font>\n    - Windows 11 (consumer editions), version 21H2 (updated October 2021) (x64) – DVD (Chinese-Simplified)\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|zh-cn_windows_11_consumer_editions_version_21h2_updated_october_2021_x64_dvd_47addd14.iso|5523668992|64F5B433CC2A9814DC4D04DC265E4D3B|/)、[`BT`](magnet:?xt=urn:btih:5B3F3DA450784FB27609212721562869AF226263&dn=zh-cn_windows_11_consumer_editions_version_21h2_updated_october_2021_x64_dvd_47addd14.iso&xl=5523668992)</strong></font>\n  - <font color=#b0171f size=3 face=宋体><strong>版本号：Release（发布时间：2021-10-04）</strong></font>\n    - Windows 11 (business editions) (x64) – DVD (Chinese-Simplified)\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|zh-cn_windows_11_business_editions_x64_dvd_f5f6bcbd.iso|5413181440|88CA1AE28F5F8A238647561B5C00E511|/)、[`BT`](magnet:?xt=urn:btih:7D77AF4A99A4C5AEAB1D401755E473BA7EBD7B1C&dn=zh-cn_windows_11_business_editions_x64_dvd_f5f6bcbd.iso&xl=5413181440)</strong></font>\n    - Windows 11 (business editions) (x64) – DVD (Chinese-Simplified)\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|zh-cn_windows_11_consumer_editions_x64_dvd_904f13e4.iso|5517273088|DFD1AE88E36516B87382FC3D3D3F46AD|/)、[`BT`](magnet:?xt=urn:btih:CF0A537944C001AD86B1CA058E8D877F5F022FC6&dn=zh-cn_windows_11_consumer_editions_x64_dvd_904f13e4.iso&xl=5517273088)</strong></font>\n- <font color=#f26522 size=4 face=宋体><strong>**ARM**</strong></font>\n  - <font color=#b0171f size=3 face=宋体><strong>版本号：Release（发布时间：2021-10-05）</strong></font>\n    - Windows 11, version 21H2 (ARM64) – DVD (Chinese-Simplified)\n      - <font color=#f26522 size=2 face=宋体><strong>**下载链接：**[`ED2K`](ed2k://|file|SW_DVD9_Win_Pro_11_21H2_64ARM_ChnSimp_Pro_Ent_EDU_N_MLF_-2_X22-82731.ISO|5608900608|5D3A8B542CBAB917C7AE43BCD17AC28E|/)、[`BT`](magnet:?xt=urn:btih:0DED4238547697570825E651B4D63849A1FBD4AB&dn=SW_DVD9_Win_Pro_11_21H2_64ARM_ChnSimp_Pro_Ent_EDU_N_MLF_-2_X22-82731.ISO&xl=5608900608)</strong></font>\n","tags":["windos11","镜像"],"categories":["_S9-折腾","镜像"]},{"title":"V2ray官方一键安装脚本(2021/10)","url":"/2023/03/20/V2ray官方一键安装脚本-2021-10/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>V2ray官方一键安装脚本(2021/10)</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**v2ray一键安装脚本（21/10新）：**</strong></font>\n\n- <font color=#b0171f size=3 face=宋体><strong>之前一直用SSR，但最近两天发现SSR老是自动掉，然后就重新做了个vmess</strong></font>\n- <font color=#b0171f size=3 face=宋体><strong>记录以下过程，以免以后要用到的时候找不到了</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**执行官方安装脚本：**</strong></font>\n\n```shell\napt-get install -y curl\nbash <(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**编辑配置文件：**</strong></font>\n\n```python\n# 这是我使用的配置文件，你可以拿去做模板，然后自己修改\nwget --no-check-certificate https://teadan.com/all_bash/v2_s.json  -O -> /usr/local/etc/v2ray/config.json\n# 下载的配置文件放在     /usr/local/etc/v2ray/config.json\n# 其中    port：是你客户端连接的端口\n# id：是你客户端连接时用的UUID，这个你网上搜以下，‘‘随机生成UUID’，就可以生成了\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**重启服务：**</strong></font>\n\n```python\n# 设置开机自自动\nsystemctl enable v2ray.service\n# 如果你不想开机自启动了，可以删除\nsystemctl disable v2ray.service\n# 重启v2ray服务\nservice v2ray restart\n\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**常用命令：**</strong></font>\n\n```python\nservice v2ray restart   # 重启\nservice v2ray force-reload  # 强制重启\nservice v2ray start   # 启动\nservice v2ray stop   # 停止\nservice v2ray status  # 状态查看\nservice v2ray reload   # 重装\n```\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**测试V2Ray配置文件：**</strong></font>\n\n```python\n/usr/local/bin/v2ray -test -config /usr/local/etc/v2ray/config.json\n```\n\n\n\n# <font color=#00b2c2 size=5 face=宋体><strong>安装成功：</strong></font>\n\n```python\nwarning: The following are the actual parameters for the v2ray service startup.\nwarning: Please make sure the configuration file path is correctly set.\n~~~~~~~~~~~~~~~~\n[Unit]\nDescription=V2Ray Service\nDocumentation=https://www.v2fly.org/\nAfter=network.target nss-lookup.target\n\n[Service]\nUser=nobody\nCapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nAmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nNoNewPrivileges=true\nExecStart=/usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json\nRestart=on-failure\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target\n# In case you have a good reason to do so, duplicate this file in the same directory and make your customizes there.\n# Or all changes you made will be lost!  # Refer: https://www.freedesktop.org/software/systemd/man/systemd.unit.html\n[Service]\nExecStart=\nExecStart=/usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json\n~~~~~~~~~~~~~~~~\nwarning: The systemd version on the current operating system is too low.\nwarning: Please consider to upgrade the systemd or the operating system.\n```\n\n\n\n\n\n![安装成功示意图](https://s2.loli.net/2022/06/09/1YKf3x6zs9JlaLo.png)\n","tags":["梯子","代理"],"categories":["_A8-工具","梯子"]},{"title":"ubuntu 安装nodejs-cnpm","url":"/2023/03/20/ubuntu-安装nodejs-cnpm/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>安装nodejs-cnpm：</strong></font>\n\n<!--more-->\n\n------\n\n<font color=#f26522 size=4 face=宋体><strong>详情：</strong></font>\n\n+ <font color=#b0171f size=3 face=宋体><strong>`系统 ： `ubuntu 20.04</strong></font>\n+ <font color=#b0171f size=3 face=宋体><strong>`Node 版本 ： `v16.13.0</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**[`nodejs官方网址`](https://nodejs.org/)**</strong></font>\n<font color=#f26522 size=4 face=宋体><strong>**截止2021/10/28最新版本nodejs：[`点击下载`](https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz)**</strong></font>\n\n```shell\n# 下载完成之后 使用：tar -xf <文件>  解压 *.tar.xz文件\ntar -xf node-v16.13.0-linux-x64.tar.xz\n\n# 将文件移动到opt文件夹下\nmv node-v16.13.0-linux-x64 /opt\n\n# 创建全局变量，使node在任何地方都能使用\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/node /usr/local/bin/node\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/npm /usr/local/bin/npm\n\n# 到此 node和 npm 就算安装完成了\nnode -v   # 查看node版本信息\nnpm -v   # 查看npm版本信息\n\n# 接下来，开始安装cnpm\n# cnpm是npm的国内源，其服务器是淘宝的，所以国内比较快\n# cnpm的执行过程是先去淘宝源下找软件，当淘宝源下没有所需要的包，会自动到npm服务器下寻找包\nnpm install -g cnpm --registry=https://registry.npm.taobao.org  # 定义cnpm淘宝源码\nsudo ln -s /opt/node-v16.13.0-linux-x64/bin/cnpm /usr/local/bin/cnpm  #   创建全局变量\n```\n","tags":["linux","nodejs","ubuntu"],"categories":["_A5-安装教程","ubuntu"]},{"title":"python中多层List展平为一层","url":"/2023/03/20/python中多层List展平为一层/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**python中多层List展平为一层：**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**使用Python脚本的过程中,偶尔需要使用list多层转一层,**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**又总是忘记怎么写搜索关键词,所以总是找了很久,现在把各种方法记录下来,方便自己也方便大家.方法很多,现在就简单写8种,后面再对这8种方法做基准测试.**</strong></font>\n\n\n\n<font color=#b0171f size=3 face=宋体><strong>**1.定义减层方法：**</strong></font>\n\n```python\nimport functools\nimport itertools\nimport numpy\nimport operator\nimport perfplot\nfrom collections import Iterable  # or from collections.abc import Iterable\nfrom iteration_utilities import deepflatten\n\n#使用两次for循环\ndef forfor(a):\n    return [item for sublist in a for item in sublist]\n\n#通过sum\ndef sum_brackets(a):\n    return sum(a, [])\n\n#使用functools內建模块\ndef functools_reduce(a):\n    return functools.reduce(operator.concat, a)\n\n#使用itertools內建模块(平常一般用)\ndef itertools_chain(a):\n    return list(itertools.chain.from_iterable(a))\n\n#使用numpy\ndef numpy_flat(a):\n    return list(numpy.array(a).flat)\n\n#使用numpy\ndef numpy_concatenate(a):\n    return list(numpy.concatenate(a))\n\n#自定义函数\ndef flatten(items):\n    \"\"\"Yield items from any nested iterable; see REF.\"\"\"\n    for x in items:\n        if isinstance(x, Iterable) and not isinstance(x, (str, bytes)):\n            yield from flatten(x)\n        else:\n            yield x\n\ndef pylangs_flatten(a):\n    return list(flatten(a))\n\n#使用库iteration_utilities\ndef iteration_utilities_deepflatten(a):\n    return list(deepflatten(a, depth=1))\n```\n\n<font color=#b0171f size=3 face=宋体><strong>**2.测试：**</strong></font>\n\n```python\na=[[1,2,3],[4,5,6],[7,8,9]]\nprint(a)\n\nprint('--------------------------')\n\nprint(forfor(a))\nprint(sum_brackets(a))\nprint(functools_reduce(a))\nprint(itertools_chain(a))\nprint(numpy_flat(a))\nprint(numpy_concatenate(a))\nprint(pylangs_flatten(a))\nprint(iteration_utilities_deepflatten(a))\n```\n\n<font color=#b0171f size=3 face=宋体><strong>**输出：**</strong></font>\n\n```python\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n--------------------------\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n<font color=#b0171f size=3 face=宋体><strong>**2.各种方法的基准测试(消耗时间对比)：**</strong></font>\n\n<font color=#f26522 size=2 face=宋体><strong>**各种方法在小数据上消耗时间差别不大,如果数据很小,没必要为了选择而烦恼,如果数据很大,可以参考下面基准测试的结果来选择减层方法.**</strong></font>\n\n```python\nimport matplotlib.pyplot as plt\nfrom simple_benchmark import benchmark\n\n#基准测试\nb = benchmark(\n    [forfor, sum_brackets, functools_reduce, itertools_chain,numpy_flat, numpy_concatenate, pylangs_flatten,iteration_utilities_deepflatten],\n    arguments={2**i: [[0]*5]*(2**i) for i in range(1, 13)},\n    argument_name='number of inner lists'\n)\n\n#显示测试结果\nplt.subplots(1,1,figsize=(15,10))\nb.plot()\nplt.legend(loc = 'upper left')\nplt.show()\n```\n\n![img](https://s2.loli.net/2022/06/13/Xek5O3vrpCmqIMN.png)\n","tags":["python","基础"],"categories":["Python","爬虫","同步"]},{"title":"关于Jet Brains历史版本获取","url":"/2023/03/20/关于Jet-Brains历史版本获取/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**关于Jet Brains历史版本获取：**</strong></font>\n\n<!--more-->\n\n<font color=#b0171f size=4 face=宋体><strong>**官网给出的下载链接永远是最新的，但是最新的往往是需要收费的，所以以下链接可以直接定位到官网的历史版本下载地址，然后就可以尽情的去嗨皮了：**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**pycharm历史版本下载地址:      [点击下载](https://www.jetbrains.com/zh-cn/pycharm/download/other.html)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**idea历史版本下载地址:     [点击下载]( https://www.jetbrains.com/zh-cn/idea/download/other.html)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**WebStorm历史版本下载地址:      [点击下载](https://www.jetbrains.com/zh-cn/webstorm/download/other.html)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**Pycharm激活教程:      [点击进入](https://www.yuque.com/lanchuan-vm6pi/buhvby/irtn6mlnmt1vuzgx?singleDoc)**</strong></font>\n","tags":["破解","IDEA"],"categories":["_A5-安装教程","Jet Brains历史版本"]},{"title":"shell下链接mongodb加载跟多数据","url":"/2023/03/20/shell下链接mongodb加载跟多数据/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**shell下链接mongodb加载跟多数据**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**mongodb type it for more**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**当使用mongodb shell的时候 ，需要查看更多的数据时候，系统提示 type it for more**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**可以设置系统参数 DBQuery.shellBatchSize = 300**</strong></font>\n\n```\n# 进入mongodb数据库后\nDBQuery.shellBatchSize = 300\n# 则可以查看更多300条数据的数据\n```\n","tags":["数据库","mongodb","错误"],"categories":["_9-数据库","mongodb"]},{"title":"来自程序员的情人节礼物！","url":"/2023/03/20/来自程序员的情人节礼物！/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**来自程序员的情人节礼物！**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**Linux复制:**</strong></font>\n\n```python\npython3 # 点击copy  打开终端 粘贴剪贴板 即可！8秒之后自动关闭\nimport time\nimport os\nprint('\\n'.join([''.join([('love'[(x-y) % len('love')] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ')for x in range(-120, 30)])for y in range(30, -30, -1)]))\ntime.sleep(8)\nexit()\nexit\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**Windos下cmd复制:**</strong></font>\n\n```python\npython &::点击copy  打开终端 粘贴剪贴板 即可！8秒之后自动关闭\nimport time\nimport os\nprint('\\n'.join([''.join([('love'[(x-y) % len('love')] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ')for x in range(-120, 30)])for y in range(30, -30, -1)]))\ntime.sleep(8)\nexit()\nexit\n```\n\n","tags":["礼物"],"categories":["_S9-折腾","代码运行礼物"]},{"title":"在CentOS7下安装部署ffmpeg","url":"/2023/03/20/在CentOS7下安装部署ffmpeg/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**在CentOS7下安装部署ffmpeg：**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**[FFmpeg](https://so.csdn.net/so/search?q=FFmpeg&spm=1001.2101.3001.7020)是一个开源免费的多媒记录、转换数字音频、视频，并能将flv、mov等。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**我们的开发人员在分析视频流数据时，也会经常用到这款工具。比如：**</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>**录制：采集–>编码–>封装—>生成文件**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**段落引用视频裁剪：输入音视频文件—>解复用得到视频流—>视频流解码–>视频帧画面–>图像帧裁剪–>编码—>封装–>生成文件**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**段落引用分辨率修改：输入音视频文件—>解复用得到视频流—>视频流解码–>视频帧画面–>图像帧修改分辨率–>编码—>封装–>生成文件**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**段落引用文件格式转码：输入MP4文件–>解复用封装得到解码数据包–>复用封装格式成FLV—>输出文件**</strong></font>\n![img](https://s2.loli.net/2022/07/27/CuVJHTw6dLsmUfv.jpg)\n\n<font color=#00b2c2 size=5 face=宋体><strong>**今天和大家分享一下如何在CentOS7下安装部署ffmpeg。**</strong></font>\n\n```python\n# 安装epel-release，因为安装需要使用其他的repo源，所以需要epel支持：\nyum install -y epel-release rpm\n\n# 安装Nux-Dextop源：\nrpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm\nyum repolist\n\n# 开始安装\nyum install -y ffmpeg\n```\n\n<font color=red size=5 face=宋体><strong>**这样ffmpeg就正常安装完成了。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**FFmpeg具有非常强大的功能，包括视频采集、视频格式转换、视频抓图、给视频加水印等，同时还能兼容行转换，并使用高质量的多相滤波器动态调整视频大小。**</strong></font>\n","tags":["ffmpeg","centos7"],"categories":["_A5-安装教程","FFmpeg"]},{"title":"django设置debug设为False,前端样式出现错乱或静态文件404问题。","url":"/2023/03/20/django设置debug设为False-前端样式出现错乱或静态文件404问题。/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**django设置debug设为False,前端样式出现错乱或静态文件404问题。**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**django部署到生产环境中遇到的坑大部分都是引用静态文件带来的，**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**setting设置里面debug设为False，**</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>**需要配置如下:**</strong></font>\n\n```python\nALLOWED_HOSTS=[\"服务器ip\"]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n```\n\n<font color=#f26522 size=4 face=宋体><strong>**然后执行python manage.py collectstatic将静态文件全部复制到根目录下static里。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**这时候在开发环境下是不能处理一些静态文件了，需要在运行时强制Django处理静态文件：**</strong></font>\n\n```python\npython manage.py runserver 0.0.0.0:8000 --insecure\n```\n\n","tags":["django","python","错误"],"categories":["_A9-错误解决","python","django"]},{"title":"ubuntu 安装 截图工具","url":"/2023/03/20/ubuntu-安装-截图工具/","content":"\n<font color=#f26522 size=5 face=宋体><strong>**ubuntu 安装 截图工具：**</strong></font>\n\n<!--more-->\n\n```shell\n# 安装火焰截图工具\nsudo apt-get install flameshot\n\n# 添加快捷键命令\nflameshot gui   # 火焰截图\ngnome-screenshot -a   # ubuntu本身系统截图命令\n```\n","tags":["工具","系统"],"categories":["_A5-安装教程","ubuntu"]},{"title":"selenium 无头模式 使用方法：","url":"/2023/03/20/selenium-无头模式-使用方法：/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**selenium 无头模式 使用方法：**</strong></font>\n\n<!--more-->\n\n```python\nfrom selenium import webdriver   # 导入selenium包\nfrom selenium.webdriver.chrome.service import Service    # 无头模式\n\n\ndef get_ck():\n    chromeOptions = webdriver.ChromeOptions()   # 实例化\n    chromeOptions.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36')   # 添加headers头文件\n    chromeOptions.add_argument('--headless')\n    chromeOptions.add_argument('--no-sandbox')\n    chromeOptions.add_argument('--disable-gpu')\n    driver = webdriver.Chrome(service=Service(\"/usr/bin/chromedriver\"), options=chromeOptions)      # 设置文件路径\n\n    # 请求方式\n    drive.get(\"https://www.baidu.com\")\n\n    # 等待selenium加载完成js内容\n    driver.implicitly_wait(3)\n\n    # 获取text文本格式内容\n    driver.page_source\n\n    # 完成之后 退出chrome\n    driver.close()\n    driver.quit()\n```\n\n","tags":["selenium"],"categories":["_A7-逆向","selenium"]},{"title":"requests模块 失败重试 方法记录","url":"/2023/03/20/requests模块-失败重试-方法记录/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**requests模块 失败重试 方法记录**</strong></font>\n\n<!--more-->\n\n```python\nimport requests   # pip install requests\nfrom requests.adapters import HTTPAdapter\n\n\ndef session():\n    session = requests.Session()   # 实例化\n    session.mount('http://', HTTPAdapter(max_retries=5))   # http重试最大5次\n    session.mount('https://', HTTPAdapter(max_retries=5))    # https 重试最大5次\n    session.headers = {\n        'User-Agent': \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36\",\n        # 'User-Agent': 'PostmanRuntime/7.28.4',\n    }\n    return session\n```\n","tags":["requests"],"categories":["Python","爬虫","同步"]},{"title":"天虹小主机 z3735f原装windos8.1 修改装ubuntu","url":"/2023/03/20/天虹小主机-z3735f原装windos8-1-修改装ubuntu/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**天虹小主机 z3735f原装windos8.1 修改装ubuntu**</strong></font>\n\n<!--more-->\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**但如此低的配置，实在是…. 一言难尽！**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**配置如下：**</strong></font>\n\n```\n- 2G 内存 、32G硬盘\n- 因特尔四核 Z3735\n- 这种配置.....它装个linux 系统   它不香么？  为什么非要上windos？\n- 于是. . . . 有了下面一出！\n```\n\n------\n\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>**折腾开始!**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**盒子到手，开机，未激活的Win8.1，瞄了一眼容量，试了试浏览器开个网页，感觉比树莓派强好多。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**于是找出了硬盘里积压多年的ubuntu16.04 server x64，开始了装机。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**半分钟后，它愉快的滚进了Win8.1。**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**没事看来是bios没换，于是进Bios，选MASS Stronger 闪退。**</strong></font>\n\n------\n\n\n<font color=#00b2c2 size=5 face=宋体><strong>**然后. . . .进入正题：**</strong></font>\n\n- 首先准备一个已经制作完成的ubuntu U盘，其他发行版的也行（但Linux的内核版本最好4.00以上）。\n- 拷贝[jfwells/linux-asus-t100ta](https://github.com/jfwells/linux-asus-t100ta/blob/master/boot/bootia32.efi) => **[点击下载](https://github.com/jfwells/linux-asus-t100ta/raw/master/boot/bootia32.efi)** 这个文件到U盘EFI/BOOT目录\n  - 这里有个问题，因为ubuntu写入u盘的时候，是没有办法更改空间大小的，所以我把主意打到了iso镜像文件上。\n  - 首先用UltraISO的读取然后把efi文件拖入 EFI/BOOT 用 UltraISO 保存 然后在写入u盘 然后，就可以直接使用小主机安装ubuntu系统了\n- <font color=#b0171f size=3 face=宋体><strong>接下来插入，就能引导进入grub引导页，完成正常安装步骤</strong></font>\n- <font color=#b0171f size=3 face=宋体><strong>安装完后不要拔掉U盘，第二次继续引导U盘，对第一项按一下C键</strong></font>\n- <font color=#b0171f size=3 face=宋体><strong>将里面的内容修改为（以你自己分区为准，善用TAB键自动补全），下面是我的结果</strong></font>\n\n```\nlinux (hd1,gpt2)/boot/vmlinuz-4.15.0-45-generic root=/dev/mmcblk1p2\ninitrd (hd1,gpt2)/boot/initrd.img-4.15.0-45-generic\n```\n\n- <font color=red size=3 face=宋体><strong>这时就可以进入刚刚安装好的系统，直接sudo su进超级用户</strong></font>\n- 执行下列命令\n\n```shell\napt update\napt-get install grub-efi-ia32-bin\ngrub-install --target=i386-efi --efi-directory=/boot/efi\nupdate-grub\n```\n\n- <font color=#00b2c2 size=3 face=宋体><strong>最后重启，就可以愉快的使用了</strong></font>\n","tags":["系统","ubuntu","DIY"],"categories":["_S9-折腾","DIY"]},{"title":"ubuntu 安装ssh 远程登录","url":"/2023/03/20/ubuntu-安装ssh-远程登录/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**ubuntu 安装ssh 远程登录**</strong></font>\n\n<!--more-->\n\n```shell\nsudo apt-get update\nsudo apt-get install openssh-server\nsudo ps -e |grep ssh\nsudo ifconfig\n```\n","tags":["系统","运维"],"categories":["_A5-安装教程","ubuntu"]},{"title":"安装chrome_ 使用selenium","url":"/2023/03/20/安装chrome-使用selenium/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**安装chrome_ 使用selenium**</strong></font>\n\n<!--more-->\n\n# <font color=#f26522 size=4 face=宋体><strong>**1、查看 chrome 版本**</strong></font>\n\n+ chrome_历史版本下载 => [适用于 Linux 的最新版本 (cypress.io)](https://chromium.cypress.io/linux/)\n+ [CentOS7安装chrome和chromedriver_centos chromedriver-CSDN博客](https://blog.csdn.net/China_hdy/article/details/126739461)\n\n```shell\ngoogle-chrome --version\n\n# centos7  selenium 版本更新\n# 执行 wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm下载最新Linux的chrome\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm\n\n# 下载之后执行sudo yum localinstall google-chrome-stable_current_x86_64.rpm安装本地的rpm包则会替换之前版本的chrome\nsudo yum localinstall google-chrome-stable_current_x86_64.rpm\n```\n\n------\n\n<font color=#f26522 size=4 face=宋体><strong>**2、更新 || 禁止自动更新chrome**</strong></font>\n\n```shell\n# 禁止自动更新\necho 'exclude=google-chrome-stable' >> /etc/yum.conf\n\n# 更新 chrome\nsudo yum update google-chrome-stable\n```\n\n\n\n---\n\n<font color=#f26522 size=4 face=宋体><strong>**3、安装chrome**</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>首先安装google的epel源</strong></font>\n\n```python\nvi /etc/yum.repos.d/google.repo\n\n[google]\nname=Google-x86_64\nbaseurl=http://dl.google.com/linux/rpm/stable/x86_64\nenabled=1\ngpgcheck=0\ngpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub \n\n\nyum update  # 更新\nyum install google-chrome-stable  # 安装\n```\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**4、chromedriver下载**</strong></font>\n\n[淘宝源 下载](https://npm.taobao.org/mirrors/chromedriver/)\n[官方源 下载](http://chromedriver.storage.googleapis.com/index.html)\n\n[chromedriver新版本(116+)](https://googlechromelabs.github.io/chrome-for-testing/)\n\n找到chrome对应的chromedriver 版本，并下载\n\n```shell\nwget https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip\n```\n\n将下载的chromedriver 放到脚本同级目录调用\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**5 、为chromedriver授权**</strong></font>\n\n```shell\nchmod 755 chromedriver\n```\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**6、测试代码 ts.py**</strong></font>\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument('--disable-gpu')\nchrome_options.add_argument('--no-sandbox')    # 禁止沙箱模式，否则肯能会报错遇到chrome异常\nurl=\"https://www.west.cn/login.asp\"\nbrower=webdriver.Chrome(executable_path=\"./chromedriver\", chrome_options=chrome_options)\nbrower.get(url)\nprint(brower.current_url)\nbrower.get(\"https://www.west.cn/Manager/\")\nprint(brower.current_url)\nbrower.quit()\n```\n\n------\n\n\n\n<font color=#f26522 size=4 face=宋体><strong>**7、测试结果**</strong></font>\n\n![img](https://s2.loli.net/2022/10/23/gGApHus5ODlxSTi.png)\n","tags":["反爬"],"categories":["_A7-逆向","selenium"]},{"title":"selenium 破解 cloudflare 5秒验证","url":"/2023/03/20/selenium-破解-cloudflare-5秒验证/","content":"\n# <font color=#00b2c2 size=5 face=宋体><strong>**selenium 破解 cloudflare 5秒验证**</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>**cloudflare 5秒验证破解**</strong></font>\n\n##### <font color=#f26522 size=4 face=宋体><strong>**1、在被cloudflare保护的网站爬取数据的时候，首次请求会出现503**</strong></font>\n\n<font color=red size=3 face=宋体><strong>**不携带COOKIE 即出现503**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**2、cookie 具有时效(具体时效未曾测试)**</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>**3、selenium 无头模式被 cloudflare 拿捏了，**</strong></font>\n\n### 根据 https://zhuanlan.zhihu.com/p/542766089 博文技术讲解，方法测试如下\n\n<font color=#00b2c2 size=5 face=宋体><strong>**Undetected-chromedriver 过 5s验证**</strong></font>\n\n```\nimport undetected_chromedriver as uc\ndriver = uc.Chrome()\ndriver.get('https://nowsecure.nl')\n```\n\n### <font color=red size=4 face=宋体><strong>**实际情况，我发现在首次登录之后，取得 cookie 再次使用 requests 访问时，即可正常获取到数据**</strong></font>\n\n##### 但是 重点来了 ！！！\n\n##### 我们平常都是在服务器上跑 python 代码，而服务器 当然绝大多数是不会使用显示器的， 而 cloudflare 却在 JS 中添加了检测显示器的代码。\n\n##### 然后…. 是不是有一种东西 可以让 python 暂时使用 一个伪造的 显示器环境？\n\n<font color=red size=5 face=宋体><strong>**还真有！！！**</strong></font>\n\n<font color=#00b2c2 size=5 face=宋体><strong>**`centos7`安装 虚拟显示器环境 Xvfb**</strong></font>\n\n```shell\nyum update\nyum install Xvfb\nyum install libXfont\nyum install xorg-x11-fonts*\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>**正常使用代码**</strong></font>\n\n```python\nimport time\nimport undetected_chromedriver as uc   # pip3 install undetected_chromedriver\nfrom pyvirtualdisplay import Display   # pip3 install pyvirtualdisplay\n\n\n# 虚拟显示器设置\ndisplay = Display(visible=0, size=(1024, 768))\ndisplay.start()\n\n# # 无头模式\n# chrome_options = uc.ChromeOptions()\n# chrome_options.add_argument(\"--no-sandbox\")\n# chrome_options.add_argument(\"--disable-dev-shm-usage\")\n# chrome_options.add_argument(\"--start-maximized\")\n# chrome_options.add_argument('--disable-popup-blocking')\n# chrome_options.add_argument('--headless')\n# chrome_options.add_argument('--no-sandbox')\n# chrome_options.add_argument('--disable-gpu')\n# driver = uc.Chrome(options=chrome_options)\n\n# 有头模式\ndriver = uc.Chrome()\ndriver.get('请求网址')\ntime.sleep(5)\n\n# 打印网页源代码\nprint(driver.page_source)\n\n# 打印cookies\nprint(driver.get_cookies())\n\n# 退出浏览器\ndriver.close()\ndriver.quit()\n\n# 停止虚拟显示器\ndisplay.stop()\n```\n","tags":["python","selenium","cloudflare 5秒盾"],"categories":["_A7-逆向","selenium"]},{"title":"非常不错的 404 Error 源码","url":"/2023/03/20/非常不错的-404-Error-源码/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>**非常不错的 404 Error 源码**</strong></font>\n\n<!--more-->\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>404-对不起！您访问的页面不存在</title>\n<style type=\"text/css\">\n.head404{ width:580px; height:234px; margin:50px auto 0 auto; background:url(https://www.daixiaorui.com/Public/images/head404.png) no-repeat; }\n.txtbg404{ width:499px; height:169px; margin:10px auto 0 auto; background:url(https://www.daixiaorui.com/Public/images/txtbg404.png) no-repeat;}\n.txtbg404 .txtbox{ width:390px; position:relative; top:30px; left:60px;color:#eee; font-size:13px;}\n.txtbg404 .txtbox p {margin:5px 0; line-height:18px;}\n.txtbg404 .txtbox .paddingbox { padding-top:15px;}\n.txtbg404 .txtbox p a { color:#eee; text-decoration:none;}\n.txtbg404 .txtbox p a:hover { color:#FC9D1D; text-decoration:underline;}\n</style>\n</head>\n\n<body bgcolor=\"#494949\">\n    <div class=\"head404\"></div>\n    <div class=\"txtbg404\">\n  <div class=\"txtbox\">\n      <p>对不起，您请求的页面不存在、或已被删除、或暂时不可用</p>\n      <p class=\"paddingbox\">请点击以下链接继续浏览网页</p>\n      <p>》<a style=\"cursor:pointer\" onclick=\"history.back()\">返回上一页面</a></p>\n      <p>》<a href=\"https://www.daixiaorui.com\">返回网站首页</a></p>\n    </div>\n  </div>\n</body>\n</html>\n```\n\n![image-20230215210409562](https://s2.loli.net/2023/02/15/fYTaDKZgrhQsvjz.png)\n","tags":["html","源码"],"categories":["_A2-前端","html"]},{"title":"安装opencv-python报错或者卡住解决","url":"/2023/03/20/安装opencv-python报错或者卡住解决/","content":"\n<font color=#00b2c2 size=5 face=宋体><strong>安装opencv-python报错或者卡住解决：</strong></font>\n\n<!--more-->\n\n<font color=#f26522 size=4 face=宋体><strong>错误提示:</strong></font>\n\n```shell\nPackage | 解决 Could not build wheels for opencv-python which use PEP 517 and cannot be installed\n```\n\n\n\n#### <font color=#f26522 size=4 face=宋体><strong>背景：</strong></font>\n\n<font color=#b0171f size=3 face=宋体><strong>在nvidia ngc平台下载docker image，根据实验要求在环境里安装opencv。因为当前实验tensorflow要求版本较低，我下载了比较久远的版本镜</strong></font>\n\n#### <font color=#00b2c2 size=5 face=宋体><strong>问题：</strong></font>\n\n<font color=#f26522 size=4 face=宋体><strong>通过pip安装opencv，指令如下：</strong></font>\n\n```\npip install opencv-python\n```\n\n<font color=#f26522 size=4 face=宋体><strong>安装过程的输出：</strong></font>\n\n```\nCollecting opencv-python\n  Downloading https://files.pythonhosted.org/packages/77/f5/49f034f8d109efcf9b7e98fbc051878b83b2f02a1c73f92bbd37f317288e/opencv-python-4.4.0.42.tar.gz (88.9MB)\n    100% |████████████████████████████████| 88.9MB 919kB/s\n  Installing build dependencies ... done\n  Getting requirements to build wheel ... done\n    Preparing wheel metadata ... done\nRequirement already satisfied: numpy>=1.13.1 in /usr/local/lib/python3.5/dist-packages (from opencv-python) (1.14.5)\nBuilding wheels for collected packages: opencv-python\n  Building wheel for opencv-python (PEP 517) ...\n```\n\n<font color=red size=4 face=宋体><strong>PEP 517信息出现后，过了很长时间，出现报错信息：</strong></font>\n\n```\nConfiguring Project\n    Working directory:\n      /tmp/pip-install-zujf20md/opencv-python/_skbuild/linux-x86_64-3.6/cmake-build\n    Command:\n      cmake /tmp/pip-install-zujf20md/opencv-python/opencv -G 'Unix Makefiles' -DCMAKE_INSTALL_PREFIX:PATH=/tmp/pip-install-zujf20md/opencv-python/_skbuild/linux-x86_64-3.6/cmake-install -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python -DPYTHON_VERSION_STRING:STRING=3.6.8 -DPYTHON_INCLUDE_DIR:PATH=/usr/include/python3.6m -DPYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython3.6m.so -DSKBUILD:INTERNAL=TRUE -DCMAKE_MODULE_PATH:PATH=/tmp/pip-build-env-tr73ewqw/overlay/lib/python3.6/site-packages/skbuild/resources/cmake -DPYTHON3_EXECUTABLE=/usr/bin/python -DPYTHON3_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON3_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so -DBUILD_opencv_python3=ON -DBUILD_opencv_python2=OFF -DBUILD_opencv_java=OFF -DOPENCV_PYTHON3_INSTALL_PATH=python -DINSTALL_CREATE_DISTRIB=ON -DBUILD_opencv_apps=OFF -DBUILD_opencv_freetype=OFF -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF -DCMAKE_BUILD_TYPE:STRING=Release\n\n  Copying files from CMake output\n  Traceback (most recent call last):\n    File \"/usr/local/lib/python3.6/dist-packages/pip/_vendor/pep517/_in_process.py\", line 207, in <module>\n      main()\n    File \"/usr/local/lib/python3.6/dist-packages/pip/_vendor/pep517/_in_process.py\", line 197, in main\n      json_out['return_val'] = hook(**hook_input['kwargs'])\n    File \"/usr/local/lib/python3.6/dist-packages/pip/_vendor/pep517/_in_process.py\", line 141, in build_wheel\n      metadata_directory)\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 209, in build_wheel\n      wheel_directory, config_settings)\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 194, in _build_with_temp_dir\n      self.run_setup()\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 237, in run_setup\n      self).run_setup(setup_script=setup_script)\n    File \"/usr/local/lib/python3.6/dist-packages/setuptools/build_meta.py\", line 142, in run_setup\n      exec(compile(code, __file__, 'exec'), locals())\n    File \"setup.py\", line 496, in <module>\n      main()\n    File \"setup.py\", line 289, in main\n      cmake_source_dir=cmake_source_dir,\n    File \"/tmp/pip-build-env-tr73ewqw/overlay/lib/python3.6/site-packages/skbuild/setuptools_wrap.py\", line 629, in setup\n      cmake_source_dir, skbuild_kw['cmake_install_dir'])\n    File \"setup.py\", line 381, in _classify_installed_files_override\n      with open('scripts/__init__.py', 'r') as custom_init:\n  FileNotFoundError: [Errno 2] No such file or directory: 'scripts/__init__.py'\n  ----------------------------------------\n  ERROR: Failed building wheel for opencv-python\n  Running setup.py clean for opencv-python\nFailed to build opencv-python\nERROR: Could not build wheels for opencv-python which use PEP 517 and cannot be installed directly\n```\n\n# <font color=#00b2c2 size=5 face=宋体><strong>解决方案：</strong></font>\n\n```shell\npip install --upgrade pip setuptools wheel\n```\n\n<font color=#f26522 size=4 face=宋体><strong>重试安装：</strong></font>\n\n```shell\npip install opencv-python\n```\n","tags":["错误","库"],"categories":["_A9-错误解决","python","pip install 错误"]},{"title":"ubuntu搭建hexo博客教程(gitee版本)","url":"/2023/03/19/ubuntu搭建hexo博客教程-gitee版本/","content":"\n#### <font color=#00b2c2 size=5 face=宋体><strong>**系统:ubuntu 20.04：**</strong></font>\n\n<!--more-->\n\n```\n# 安装nodejs npm\nsudo apt update\nsudo apt install nodejs npm\n\n# 查看版本\nnodejs --version\n```\n\n![](https://s2.loli.net/2023/02/14/SZ1iWgvyFUYn9t2.png)\n\n<font color=#00b2c2 size=5 face=宋体><strong>**1、我们将会安装 Node.js 版本 14.x:**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**1）以 sudo 用户身份运行下面的命令，下载并执行 NodeSource 安装脚本：**</strong></font>\n\n```\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -\n```\n\n<font color=#f26522 size=3 face=宋体><strong>**这个脚本将会添加 NodeSource 的签名 key 到你的系统，创建一个 apt 源文件，安装必备的软件包，并且刷新 apt 缓存。**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**如果你需要另外的 Node.js 版本，例如`12.x`，将`setup_14.x`修改为`setup_12.x`**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**2）NodeSource 源启用成功后，安装 Node.js 和 npm:**</strong></font>\n\n```\nsudo apt install nodejs\n```\n\n<font color=#f26522 size=3 face=宋体><strong>**nodejs 软件包同时包含`node`和`npm`二进制包。**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**3）验证 Node.js 和 npm 是否正确安装。打印它们的版本号：**</strong></font>\n\n```\nnode --version\n```\n\n![image-20230214204628631](https://s2.loli.net/2023/02/14/WEa4s2cqZ8PVyBu.png)\n\n<font color=#00b2c2 size=5 face=宋体><strong>**2、运行 Git Bash 并切换淘宝镜像。**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**如果不需要切换源，则可跳过此步骤：**</strong></font>\n\n```\n# 全局切换命令：\nnpm config set registry http://registry.npm.taobao.org/\n\n# 查看版本命令：\nnpm get registry\n\n# 切回官方镜像：\nnpm config set registry http://www.npmjs.org\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>**3、安装HEXO程序**</strong></font>\n\n```\nnpm install -g hexo\n\n# 查看版本：\nhexo v\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>**4、创建 hexo 文件夹**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**hexo 文件夹，是未来博客运转的目标文件夹，写文、主题安装等等都在这里完成。**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**请在指定路径新建文件夹（英文名），右键空白处，选择 Git Bash here，输入指令：**</strong></font>\n\n```\nhexo init\n```\n\n<font color=#00b2c2 size=5 face=宋体><strong>**5、安装主题**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**现在这个是必须过程了，反正自带的主题也没人用不是么？**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**6.1 在 theme 文件夹下，建立你要使用的主题的同名文件夹，比如 theme/next**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**6.2 cd 到 theme 文件夹，或者直接在 theme 文件夹里右键运行 Git Bash。**</strong></font>\n\n<font color=#f26522 size=3 face=宋体><strong>**6.3 输入获取主题的命令：**</strong></font>\n\n```\ngit clone -b theme https://github.com/niemingzhao/niemingzhao.github.io.git themes/default\n```\n\n![img](https://s2.loli.net/2023/02/14/vC7O9xZuoVTRJht.png)\n\n<font color=red size=4 face=宋体><strong>**注意：在修改模板的时候，除了需要到主配置下添加模板名以外，还需要将主题下的配置文件修改为 _config.yml**</strong></font>\n\n<font color=#00b2c2 size=5 face=宋体><strong>**6、Hexo 主要命令**</strong></font>\n\n```\nhexo clean：清除 public 静态目录\nhexo s：本地启动默认指定 4000 端口预览 (s 是 server 是缩写 也就是启动 hexo 服务)\nhexo g：生成 public 静态目录\nhexo d： 部署\n```\n\n<font color=#00b2c2 size=5 face=\"宋体\"><strong>**7、Hexo 插件安装**</strong></font>\n\n```bash\nnpm install hexo-generator-search --save\n# 评论插件\nnpm i --save gitalk\n\n# RSS插件\nnpm install --save hexo-generator-feed\n\n# 安装 文章转换二维码插件\nnpm install --save hexo-helper-qrcode\n\n# gitee版本插件安装\nnpm install --save gitment\n```\n\n8、关于\n\n![image-20230320031831877](https://s2.loli.net/2023/03/20/KEzIYXph6gvs1iN.png)\n","tags":["Hexo","git","教程"],"categories":["_A8-工具","Hexo"]}]