<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://kanoc.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://kanoc.gitee.io/"/>
  <updated>2025-06-10T01:11:53.358Z</updated>
  <id>https://kanoc.gitee.io/</id>
  
  <author>
    <name>Kanoc Ge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>curl_cffi请求指南</title>
    <link href="https://kanoc.gitee.io/2025/05/27/curl-cffi%E8%AF%B7%E6%B1%82%E6%8C%87%E5%8D%97/"/>
    <id>https://kanoc.gitee.io/2025/05/27/curl-cffi%E8%AF%B7%E6%B1%82%E6%8C%87%E5%8D%97/</id>
    <published>2025-05-26T20:36:41.000Z</published>
    <updated>2025-06-10T01:11:53.358Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>curl_cffi请求指南</strong></font></p><span id="more"></span><h3 id="Post方式：multipart-form-data"><a href="#Post方式：multipart-form-data" class="headerlink" title="Post方式：multipart/form-data"></a>Post方式：<code>multipart/form-data</code></h3><p><code>&quot;Content-Type&quot;:&quot;multipart/form-data&quot;</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> curl_cffi <span class="keyword">import</span> requests, CurlMime</span><br><span class="line">mp = CurlMime()  <span class="comment"># 该类是 curl_cffi的上传文件类</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.2.3:8080/upload&quot;</span>  <span class="comment"># 请求地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本内容 json</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;save_path&#x27;</span>: <span class="string">&#x27;/data/mp4_file/test3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;md5&#x27;</span>: <span class="string">&#x27;4b9975069087e0f0f9e13bf4111b7a03&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/Users/kama/水3.mp4&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到 multiple</span></span><br><span class="line">mp.addpart(</span><br><span class="line">    name=<span class="string">&quot;file&quot;</span>,</span><br><span class="line">    content_type=<span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">    filename=<span class="string">&quot;水3.mp4&quot;</span>,</span><br><span class="line">    data=data,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始发送请求</span></span><br><span class="line">response = requests.post(url, data=payload, multipart=mp, impersonate=<span class="string">&quot;chrome120&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;curl_cffi请求指南&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="爬虫" scheme="https://kanoc.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    <category term="Post请求" scheme="https://kanoc.gitee.io/categories/Python/%E7%88%AC%E8%99%AB/Post%E8%AF%B7%E6%B1%82/"/>
    
    
    <category term="request" scheme="https://kanoc.gitee.io/tags/request/"/>
    
    <category term="请求示例" scheme="https://kanoc.gitee.io/tags/%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B/"/>
    
    <category term="指南" scheme="https://kanoc.gitee.io/tags/%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>正在运行的-Docker-容器打包镜像方法</title>
    <link href="https://kanoc.gitee.io/2025/02/28/%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84-Docker-%E5%AE%B9%E5%99%A8%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F%E6%96%B9%E6%B3%95/"/>
    <id>https://kanoc.gitee.io/2025/02/28/%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84-Docker-%E5%AE%B9%E5%99%A8%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F%E6%96%B9%E6%B3%95/</id>
    <published>2025-02-27T17:16:05.000Z</published>
    <updated>2025-06-09T07:28:19.763Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>正在运行的-Docker-容器打包镜像方法</strong></font></p><span id="more"></span><h4 id="‌1-使用-docker-commit-命令直接打包‌"><a href="#‌1-使用-docker-commit-命令直接打包‌" class="headerlink" title="‌1. 使用 docker commit 命令直接打包‌"></a>‌<strong>1. 使用 <code>docker commit</code> 命令直接打包</strong>‌</h4><p>‌<strong>适用场景</strong>‌：快速保存当前容器的运行状态为镜像，适合临时调试或快速迁移。<br>‌<strong>步骤</strong>‌：</p><ol><li><p>‌<strong>获取容器 ID</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps  <span class="comment"># 查看正在运行的容器，记录目标容器的 ID ‌:ml-citation&#123;ref=&quot;1,3&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li><li><p>‌<strong>提交容器为新镜像</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit &lt;容器ID&gt; &lt;新镜像名&gt;:&lt;标签&gt;  <span class="comment"># 例如：docker commit abc123 my-app:v1 ‌:ml-citation&#123;ref=&quot;1,2&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li><li><p>‌<strong>验证镜像是否生成</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images  <span class="comment"># 检查列表中是否包含新镜像 :ml-citation&#123;ref=&quot;2,3&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="‌2-导出镜像为可迁移文件‌"><a href="#‌2-导出镜像为可迁移文件‌" class="headerlink" title="‌2. 导出镜像为可迁移文件‌"></a>‌<strong>2. 导出镜像为可迁移文件</strong>‌</h4><p>‌<strong>适用场景</strong>‌：将镜像保存为 <code>.tar</code> 文件，便于传输或备份。<br>‌<strong>步骤</strong>‌：</p><ol><li><p>‌<strong>导出镜像为 <code>.tar</code> 文件</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o &lt;文件名&gt;.tar &lt;镜像名&gt;:&lt;标签&gt;  <span class="comment"># 例如：docker save -o my-app.tar my-app:v1 ‌:ml-citation&#123;ref=&quot;4,5&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li><li><p>‌<strong>在目标服务器导入镜像</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -i &lt;文件名&gt;.tar  <span class="comment"># 从 `.tar` 文件恢复镜像 :ml-citation&#123;ref=&quot;4,5&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="‌3-其他注意事项‌"><a href="#‌3-其他注意事项‌" class="headerlink" title="‌3. 其他注意事项‌"></a>‌<strong>3. 其他注意事项</strong>‌</h4><ul><li><p>‌**<code>docker commit</code> 的局限性**‌</p><ul><li>此方法生成的镜像缺乏构建过程的透明性，难以追溯修改历史，不推荐用于生产环境 ‌23。</li><li>推荐使用 <code>Dockerfile</code> 构建标准化镜像，确保可重复性和版本控制 ‌23。</li></ul></li><li><p>‌<strong>多镜像打包</strong>‌</p><ul><li><p>若需打包多个镜像到单个文件，可使用 <code>docker save</code> 同时指定多个镜像名：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o all-images.tar image1:v1 image2:v2  <span class="comment"># 合并导出多个镜像 :ml-citation&#123;ref=&quot;7&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="‌操作流程示意图‌"><a href="#‌操作流程示意图‌" class="headerlink" title="‌操作流程示意图‌"></a>‌<strong>操作流程示意图</strong>‌</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运行中容器 → `docker commit` → 新镜像 → `docker save` → .tar 文件 → 传输 → `docker load` → 目标环境  </span><br></pre></td></tr></table></figure><p>通过上述步骤，可快速完成运行中容器的镜像打包与迁移。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;正在运行的-Docker-容器打包镜像方法&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/Docker/"/>
    
    <category term="打包" scheme="https://kanoc.gitee.io/categories/Docker/%E6%89%93%E5%8C%85/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="镜像" scheme="https://kanoc.gitee.io/tags/%E9%95%9C%E5%83%8F/"/>
    
    <category term="打包" scheme="https://kanoc.gitee.io/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>破解cloudflare拦截神器_puppeteer</title>
    <link href="https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/"/>
    <id>https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/</id>
    <published>2025-02-24T18:52:13.000Z</published>
    <updated>2025-06-09T03:57:07.693Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>破解cloudflare拦截神器_puppeteer</strong></font></p><span id="more"></span><h3 id="安装番外：安装node-js环境"><a href="#安装番外：安装node-js环境" class="headerlink" title="安装番外：安装node.js环境"></a>安装番外：安装node.js环境</h3><h4 id="安装nvm管理器"><a href="#安装nvm管理器" class="headerlink" title="安装nvm管理器"></a>安装<code>nvm</code>管理器</h4><ul><li>第1步：mac 安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><ul><li>第2_1步：命令安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第2_2步：国内安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第3步：添加环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、这是本地不存在配置文件的时候提示需要添加的配置</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、这是本地存在配置文件的时候提示需要添加的配置（推荐）</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><ul><li>第4步：加载环境：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>第5步：测试安装是否成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm -v</span><br><span class="line">或</span><br><span class="line">$ nvm use system</span><br></pre></td></tr></table></figure><ul><li>第6步：<code>nvm</code>相关命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install stable</span><br><span class="line">nvm install &lt;version&gt;     <span class="comment"># 安装指定版本 node</span></span><br><span class="line">nvm uninstall &lt;version&gt;   <span class="comment"># 删除指定版本 node</span></span><br><span class="line"></span><br><span class="line">nvm use &lt;version&gt;         <span class="comment"># 切换使用指定的版本 node</span></span><br><span class="line">nvm <span class="built_in">alias</span> default &lt;version&gt;   <span class="comment"># 永久版本 - 所有窗口生效指定版本</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">ls</span>    <span class="comment"># 列出所有安装的版本</span></span><br><span class="line">nvm ls-remote   <span class="comment"># 列出所有远程服务器的版本（官方 node version list）</span></span><br><span class="line">nvm current   <span class="comment"># 显示当前的版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;   <span class="comment"># 给不同的版本号添加别名</span></span><br><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt;   <span class="comment"># 删除已定义的别名</span></span><br><span class="line"></span><br><span class="line">nvm reinstall-packages &lt;version&gt;     <span class="comment"># 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</span></span><br></pre></td></tr></table></figure><h3 id="第一步：安装puppeteer"><a href="#第一步：安装puppeteer" class="headerlink" title="第一步：安装puppeteer"></a>第一步：安装puppeteer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i puppeteer</span><br></pre></td></tr></table></figure><h3 id="第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth"><a href="#第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth" class="headerlink" title="第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth"></a>第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install puppeteer-extra puppeteer-extra-plugin-stealth express</span><br></pre></td></tr></table></figure><h3 id="第三步：使用nodejs获取数据："><a href="#第三步：使用nodejs获取数据：" class="headerlink" title="第三步：使用nodejs获取数据："></a>第三步：使用nodejs获取数据：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StealthPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra-plugin-stealth&#x27;</span>)</span><br><span class="line">puppeteer.<span class="title function_">use</span>(<span class="title class_">StealthPlugin</span>())</span><br><span class="line"><span class="keyword">const</span> &#123;executablePath&#125; = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puppeteer.<span class="title function_">launch</span>(&#123; <span class="attr">headless</span>: <span class="literal">false</span>, <span class="attr">executablePath</span>: <span class="title function_">executablePath</span>() &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> browser =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://xxx.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Promise 来等待</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))  <span class="comment">// 等待 2 秒</span></span><br><span class="line">    <span class="comment">// 获取页面的文本内容</span></span><br><span class="line">    <span class="keyword">const</span> pageContent = <span class="keyword">await</span> page.<span class="title function_">evaluate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span>;  <span class="comment">// 获取页面的所有文本</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印页面文本内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pageContent);</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;cointracker_home.png&#x27;</span>, <span class="attr">fullPage</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步：当然你也可以把他写成接口"><a href="#第四步：当然你也可以把他写成接口" class="headerlink" title="第四步：当然你也可以把他写成接口"></a>第四步：当然你也可以把他写成接口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.....</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;破解cloudflare拦截神器_puppeteer&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A7-逆向" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/"/>
    
    <category term="puppeteer" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/puppeteer/"/>
    
    
    <category term="逆向" scheme="https://kanoc.gitee.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="nodejs" scheme="https://kanoc.gitee.io/tags/nodejs/"/>
    
    <category term="puppeteer" scheme="https://kanoc.gitee.io/tags/puppeteer/"/>
    
    <category term="后端" scheme="https://kanoc.gitee.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一套JS可逆加密算法，基于crypto-js</title>
    <link href="https://kanoc.gitee.io/2025/02/21/%E4%B8%80%E5%A5%97JS%E5%8F%AF%E9%80%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%EF%BC%8C%E5%9F%BA%E4%BA%8Ecrypto-js/"/>
    <id>https://kanoc.gitee.io/2025/02/21/%E4%B8%80%E5%A5%97JS%E5%8F%AF%E9%80%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%EF%BC%8C%E5%9F%BA%E4%BA%8Ecrypto-js/</id>
    <published>2025-02-21T15:16:43.000Z</published>
    <updated>2025-06-09T04:11:48.078Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>一套JS可逆加密算法，基于crypto-js</strong></font></p><span id="more"></span><p>在JavaScript中，你可以使用多种方法来实现可逆加密。<br>这里是一个简单的例子，使用的是<code>crypto-js</code>库的<code>AES</code>加密方法。</p><p>首先，你需要安装<code>crypto-js</code>库。你可以通过<code>npm</code>来安装：</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install crypto-js</span><br></pre></td></tr></table></figure><p>然后，你可以使用以下代码来实现AES加密和解密：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">text, secretKey</span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(secretKey);  </span><br><span class="line">    <span class="keyword">const</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">lib</span>.<span class="property">WordArray</span>.<span class="title function_">create</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>));  </span><br><span class="line">    <span class="keyword">const</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(text), key, &#123; <span class="attr">iv</span>: iv &#125;);  </span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, secretKey</span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(secretKey);  </span><br><span class="line">    <span class="keyword">const</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">lib</span>.<span class="property">WordArray</span>.<span class="title function_">create</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>));  </span><br><span class="line">    <span class="keyword">const</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(ciphertext, key, &#123; <span class="attr">iv</span>: iv &#125;);  </span><br><span class="line">    <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 测试代码  </span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;mySecretKey&#x27;</span>;  </span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;Hello, World!&#x27;</span>;  </span><br><span class="line"><span class="keyword">const</span> encryptedText = <span class="title function_">encrypt</span>(text, secretKey);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Encrypted: &#x27;</span> + encryptedText);  </span><br><span class="line"><span class="keyword">const</span> decryptedText = <span class="title function_">decrypt</span>(encryptedText, secretKey);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decrypted: &#x27;</span> + decryptedText);</span><br></pre></td></tr></table></figure><p>在这个例子中，我们首先导入了<code>crypto-js</code>库。然后，我们定义了两个函数：<code>encrypt</code>和<code>decrypt</code>。<br><code>encrypt</code>函数接收一个文本和一个密钥作为参数，并返回加密后的文本。<br><code>decrypt</code>函数接收一个密文和一个密钥作为参数，并返回解密后的文本。</p><p>注意，这个例子使用了<code>AES</code>加密算法，并且使用了相同的密钥进行加密和解密。<br>在实际应用中，你应该使用一个安全的密钥管理方法来存储和传输密钥。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;一套JS可逆加密算法，基于crypto-js&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A7-逆向" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/"/>
    
    <category term="JavaScript" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/JavaScript/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="逆向" scheme="https://kanoc.gitee.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JavaScript" scheme="https://kanoc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你搭建Docker私有仓库Harbor</title>
    <link href="https://kanoc.gitee.io/2025/02/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93Harbor/"/>
    <id>https://kanoc.gitee.io/2025/02/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93Harbor/</id>
    <published>2025-02-16T11:37:35.000Z</published>
    <updated>2025-06-09T07:39:15.791Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>手把手教你搭建Docker私有仓库Harbor</strong></font></p><p>本文搬运自：<a href="https://www.cnblogs.com/sowler/p/18242819">手把手教你搭建Docker私有仓库Harbor - sowler - 博客园</a></p><span id="more"></span><h4 id="1、什么是Docker私有仓库"><a href="#1、什么是Docker私有仓库" class="headerlink" title="1、什么是Docker私有仓库"></a>1、什么是Docker私有仓库</h4><p>Docker私有仓库是用于存储和管理Docker镜像的私有存储库。Docker默认会有一个公共的仓库Docker Hub，而与Docker Hub不同，私有仓库是受限访问的，只有授权用户才能够上传、下载和管理其中的镜像。这种私有仓库可以部署在本地云环境中，用于组织内部开发、测试和生产环境中的容器镜像管理。保证数据安全性。</p><h4 id="2、Docker有哪些私有仓库"><a href="#2、Docker有哪些私有仓库" class="headerlink" title="2、Docker有哪些私有仓库"></a>2、Docker有哪些私有仓库</h4><p><strong>以下是一些常见的Docker私有仓库：</strong></p><ul><li><strong>Harbor</strong>：作为一个企业级的Docker Registry服务，Harbor提供了安全、可信赖的镜像存储和管理功能。它支持RBAC权限控制、镜像复制、镜像签名、漏洞扫描等功能。</li><li><strong>Docker Trusted Registry (DTR)</strong>：由Docker官方推出的企业级Docker私有仓库服务，与Docker Engine紧密集成，支持高度的安全性和可靠性。</li><li><strong>Portus</strong>：一个开源的Docker镜像管理和认证服务，提供用户管理、团队管理、镜像审核等功能，与Docker Registry兼容。</li><li><strong>Nexus Repository Manager</strong>：虽然主要是用于构建和管理Java组件，但也可以用作Docker私有仓库。它具有强大的存储管理和权限控制功能。</li><li><strong>GitLab Container Registry</strong>：GitLab集成了容器注册表功能，允许您存储、管理和分发Docker镜像。这是GitLab自带的功能，无需额外部署。</li><li><strong>AWS Elastic Container Registry (ECR)</strong>：如果使用AWS云服务，可以考虑使用AWS ECR作为私有仓库。它与AWS的其他服务集成紧密，对AWS用户来说是一个方便的选择。</li></ul><p>本篇使用Harbor搭建Docker私有仓库。</p><h4 id="3、Harbor简介"><a href="#3、Harbor简介" class="headerlink" title="3、Harbor简介"></a>3、Harbor简介</h4><p>Harbor是一个开源的企业级Docker Registry服务，它提供了一个安全、可信赖的仓库来存储和管理Docker镜像。Harbor翻译为中文名称为”庇护；居住;”。可以理解为是Docker镜像的”居住环境”或者是镜像的”庇护所”。Harbor最初由VMware公司开发，旨在解决企业级Docker镜像管理的安全和可信任性问题。VMware于2016年发布，在2017年，VMware将Harbor开源，这使得更广泛的社区和组织可以自由地使用和贡献代码。Harbor是一个成熟、功能丰富且安全可靠的企业级Docker Registry服务，为企业容器化应用的部署和管理提供了强大的支持。</p><p>Harbor官网地址：<a href="https://goharbor.io/">Harbor (goharbor.io)</a></p><p>Github开源地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p><h4 id="4、Harbor下载"><a href="#4、Harbor下载" class="headerlink" title="4、Harbor下载"></a>4、Harbor下载</h4><h5 id="4-1、通过Linux命令下载"><a href="#4-1、通过Linux命令下载" class="headerlink" title="4.1、通过Linux命令下载"></a>4.1、通过Linux命令下载</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz</span><br></pre></td></tr></table></figure><h5 id="4-2、GitHub下载"><a href="#4-2、GitHub下载" class="headerlink" title="4.2、GitHub下载"></a>4.2、GitHub下载</h5><p>下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a> 下载离线版本</p><p><img src="https://s2.loli.net/2025/02/16/meHfNQrXgctVMnx.png" alt="img"></p><p>下载成功后，把包通过 <code>xftp</code> 上传到服务器。</p><h5 id="4-3、解压"><a href="#4-3、解压" class="headerlink" title="4.3、解压"></a>4.3、解压</h5><p>解压文件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v2.10.0.tgz </span><br></pre></td></tr></table></figure><h4 id="5、启动Harbor"><a href="#5、启动Harbor" class="headerlink" title="5、启动Harbor"></a>5、启动Harbor</h4><h5 id="5-1、修改配置文件"><a href="#5-1、修改配置文件" class="headerlink" title="5.1、修改配置文件"></a>5.1、修改配置文件</h5><p>复制<code>harbor.yml.tmpl</code> 文件并重命名为<code>harbor.yml</code>修改此配置文件，需要设置hostname、端口、数据库密码等。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml <span class="comment">#拷贝</span></span><br><span class="line"></span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改hostname的值，如果没有域名就使用本机IP地址</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.42</span><span class="number">.133</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置启动端口号</span></span><br><span class="line"><span class="comment"># http related config </span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有申请证书，需要隐藏https</span></span><br><span class="line"><span class="comment">#https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line"><span class="comment">#  port: 443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line"><span class="comment">#  certificate: /your/certificate/path</span></span><br><span class="line"><span class="comment">#  private_key: /your/private/key/path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动成功后，admin用户登录密码</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">AdminHarbor12345</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/02/16/uflyIABjz3amckh.png" alt="img"></p><h5 id="5-2、启动"><a href="#5-2、启动" class="headerlink" title="5.2、启动"></a>5.2、启动</h5><p>配置文件修改成功后，执行 <code>install.sh</code> 脚本进行安装harbor</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./install.sh </span><br></pre></td></tr></table></figure><p>启动报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Step 0]: checking if docker is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 26.1.3</span><br><span class="line"></span><br><span class="line">[Step 1]: checking docker-compose is installed ...</span><br><span class="line">/opt/harbor/common.sh: line 119: docker-compose: command not found</span><br><span class="line">✖ Failed to parse docker-compose version.</span><br></pre></td></tr></table></figure><p>可以看到，该服务器安装的 <code>docker</code> 没有安装 <code>docker-compose</code> 插件</p><h5 id="5-3、安装docker-compose"><a href="#5-3、安装docker-compose" class="headerlink" title="5.3、安装docker-compose"></a>5.3、安装docker-compose</h5><p>进入<code>docker-compose</code> 官网下载执行文件，地址： <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 下载成功后，把可执行文件加入<code>Linux</code> 系统命令目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> docker-compose-linux-x86_64 /usr/local/bin/</span><br></pre></td></tr></table></figure><p>重命名：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> docker-compose-linux-x86_64 docker-compose</span><br></pre></td></tr></table></figure><p>授权：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>执行命令查看是否安装成功：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果需要卸载，直接删除即可：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h5 id="5-4、再次启动"><a href="#5-4、再次启动" class="headerlink" title="5.4、再次启动"></a>5.4、再次启动</h5><p>再次执行 <code>./install.sh</code></p><p><img src="https://s2.loli.net/2025/02/16/ilOpYecKCy7wGTZ.png" alt="img"></p><p>提示安装成功。接下来就可以访问Harbor了。访问IP+端口：<a href="http://192.168.42.133:5000/">http://192.168.42.133:5000</a><br><img src="https://s2.loli.net/2025/02/16/FrRKhnkacDUV8lG.png" alt="img"></p><p>访问成功，由于Harbor是通过docker管理的，所以启动非常方便。如果首页访问成功说明Docker私有仓库已经部署成功了。</p><h4 id="6、Harbor-Web页面操作说明"><a href="#6、Harbor-Web页面操作说明" class="headerlink" title="6、Harbor Web页面操作说明"></a>6、Harbor Web页面操作说明</h4><p>默认用户名是admin，密码是启动时设置的密码：<code>AdminHarbor12345</code></p><p><img src="https://s2.loli.net/2025/02/16/9SnuUoJsKBzCFpA.png" alt="img"></p><p>登录成功进入主页面了。从系统首页可以看到系统分为三个菜单：项目、日志、系统管理。</p><h5 id="6-1、项目"><a href="#6-1、项目" class="headerlink" title="6.1、项目"></a>6.1、项目</h5><p>项目管理顾名思义就是用来管理项目的。可以为每一个开发项目创建一个私有项目库，然后把Docker镜像存储到指定的项目中，为每个项目实现项目镜像隔离。创建项目的时候，Harbor提供了公开库（public repository）和私有库（private repository）两种类型的镜像存储空间。</p><p><img src="https://s2.loli.net/2025/02/16/F34W9pclPBSkQHa.png" alt="img"></p><p>通过详情信息可以看到：<strong>公开库中的镜像是对所有用户可见和可访问的，任何人都可以查看和拉取其中的镜像。而私有库中的镜像则需要登录才能访问控制，只有被授权的用户或团队才能够查看、拉取和推送镜像。</strong> 可以根据需要创建相关的项目。</p><p><img src="https://s2.loli.net/2025/02/16/l1pfKPiZngO9sXW.png" alt="img"></p><p>项目创建成功后，可以点击进入项目。在里面可以为每个项目单独设置不同的配置信息。可以为每一个项目添加成员信息。</p><p><img src="https://s2.loli.net/2025/02/16/yBMfu4NG6PHYxdX.png" alt="img"></p><p>角色权限说明：</p><ul><li>**项目管理员（Project Administrator）：**拥有项目的最高权限，可以对项目进行全面管理，包括创建和删除项目、管理项目成员和权限、配置项目属性、查看项目日志等。</li><li>**维护人员（Maintainer）：**类似于项目管理员，但权限稍低，通常用于协助管理项目，可以进行项目的部分管理操作，如添加和删除镜像、配置镜像的复制和同步规则等。</li><li>**开发者（Developer）：**具有对项目中镜像仓库的读写权限，可以拉取、推送和删除镜像，以及管理部分项目配置，但不能进行项目管理操作。</li><li>**访客（Guest）：**只具有对项目中镜像仓库的只读权限，可以查看镜像和元数据，但无法对镜像进行修改或删除操作。通常用于分享项目或镜像给外部团队或用户。</li><li>**受限访客（Restricted Guest）：**是一种更加受限的访客角色，通常用于提供给外部用户或系统，具有对项目中镜像仓库的只读权限，但可能会限制访问的部分内容或功能。</li></ul><p>在右上角显示推送命令，可以通过提示命令进行docker镜像推送。</p><p><img src="https://s2.loli.net/2025/02/16/RFEucUsbXL2jYyG.png" alt="img"></p><h5 id="6-2、日志"><a href="#6-2、日志" class="headerlink" title="6.2、日志"></a>6.2、日志</h5><p>日志菜单就是记录用户操作日志信息的。</p><p><img src="https://s2.loli.net/2025/02/16/B7HKfokDjcG4yNE.png" alt="img"></p><h5 id="6-3、系统管理"><a href="#6-3、系统管理" class="headerlink" title="6.3、系统管理"></a>6.3、系统管理</h5><p>系统管理主要用来管理Harbor用户人员信息、镜像仓库的各种配置、权限和系统设置。</p><p><img src="https://s2.loli.net/2025/02/16/KfL2ViA7z8JyWvT.png" alt="img"></p><h4 id="7、Docker命令使用私有仓库"><a href="#7、Docker命令使用私有仓库" class="headerlink" title="7、Docker命令使用私有仓库"></a>7、Docker命令使用私有仓库</h4><h5 id="7-1、登录"><a href="#7-1、登录" class="headerlink" title="7.1、登录"></a>7.1、登录</h5><p>首先登录私有仓库地址：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker login  -u admin -p AdminHarbor12345 http://192.168.42.133:5000</span><br></pre></td></tr></table></figure><p>会报错：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Error response from daemon: Get <span class="string">&quot;https://192.168.42.133:5000/v2/&quot;</span>: proxyconnect tcp: dial tcp 192.168.65.7:3128: connect: connection refused</span><br></pre></td></tr></table></figure><p>docker认为这个地址是不安全的，所以需要在docker守护进程配置文件中把该地址加入安全范围。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://ejes884z.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>:<span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;<span class="string">&quot;max-size&quot;</span>:<span class="string">&quot;1g&quot;</span>, <span class="string">&quot;max-file&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;,</span><br><span class="line">  <span class="string">&quot;live-restore&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.42.133:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># insecure-registries 不安全的注册表配置一些不安全的地址信息，让Docker认为是安全的。多个地址使用 &quot;,&quot; 分割</span></span><br></pre></td></tr></table></figure><p>加入配置成功后，再次登录。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>通过输出发现登录成功。认证信息存储在 <code>~/.docker/config.json</code> 文件中，只要登录信息存在，登录会一直生效不需要每次推送拉取之前都登录。</p><h5 id="7-2、推送"><a href="#7-2、推送" class="headerlink" title="7.2、推送"></a>7.2、推送</h5><p>重新命名镜像名称</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag 94543a6c1aef 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>推送</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>查看Harbor仓库，推送成功。</p><p><img src="https://s2.loli.net/2025/02/16/rejyKzPso7aNGOw.png" alt="img"></p><h5 id="7-3、拉取"><a href="#7-3、拉取" class="headerlink" title="7.3、拉取"></a>7.3、拉取</h5><p>通过另一台服务器，使用 <code>docker pull</code>拉取镜像从私有仓库拉取镜像：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>拉取成功</p><p><img src="https://s2.loli.net/2025/02/16/VQRZWvfTwSmdIbj.png" alt="img"></p><p>查看下载数，发现已经更新了。</p><p><img src="https://s2.loli.net/2025/02/16/kmbMnuydhpYTw5a.png" alt="img"></p><h4 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h4><p>关于使用Harbor搭建Docker私有仓库就介绍完毕了，如果大家有兴趣可以查看一下其他搭建方式，然后在它们之间进行对比一下看看那种方式更适合。本篇为入门级Harbor的基础使用，其他功能可以自行研究。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;手把手教你搭建Docker私有仓库Harbor&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;本文搬运自：&lt;a href=&quot;https://www.cnblogs.com/sowler/p/18242819&quot;&gt;手把手教你搭建Docker私有仓库Harbor - sowler - 博客园&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Docker/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="Harbor" scheme="https://kanoc.gitee.io/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>在苹果Silicon芯片（M1/M2/M3）Mac电脑上使用Docker</title>
    <link href="https://kanoc.gitee.io/2025/02/06/%E5%9C%A8%E8%8B%B9%E6%9E%9CSilicon%E8%8A%AF%E7%89%87%EF%BC%88M1-M2-M3%EF%BC%89Mac%E7%94%B5%E8%84%91%E4%B8%8A%E4%BD%BF%E7%94%A8Docker/"/>
    <id>https://kanoc.gitee.io/2025/02/06/%E5%9C%A8%E8%8B%B9%E6%9E%9CSilicon%E8%8A%AF%E7%89%87%EF%BC%88M1-M2-M3%EF%BC%89Mac%E7%94%B5%E8%84%91%E4%B8%8A%E4%BD%BF%E7%94%A8Docker/</id>
    <published>2025-02-05T20:10:02.000Z</published>
    <updated>2025-06-09T04:17:52.123Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>在苹果Silicon芯片（M1&#x2F;M2&#x2F;M3）Mac电脑上使用Docker</strong></font></p><h6 id="本文搬运自在苹果Silicon芯片（M1-M2-M3）Mac电脑上使用Docker-教程-Tinkink"><a href="#本文搬运自在苹果Silicon芯片（M1-M2-M3）Mac电脑上使用Docker-教程-Tinkink" class="headerlink" title="本文搬运自在苹果Silicon芯片（M1&#x2F;M2&#x2F;M3）Mac电脑上使用Docker | 教程 | Tinkink"></a>本文搬运自<a href="https://tutorials.tinkink.net/zh-hans/mac/how-to-use-docker-on-m1-mac.html">在苹果Silicon芯片（M1&#x2F;M2&#x2F;M3）Mac电脑上使用Docker | 教程 | Tinkink</a></h6><span id="more"></span><h2 id="背景和困难"><a href="#背景和困难" class="headerlink" title="背景和困难"></a>背景和困难</h2><p>苹果于 2020 年正式发布了搭载自研芯片 Apple Silicon 的电脑，随电脑发布的第一款芯片型号为 M1 。这款芯片的架构由经典的 x86 改为了 ARM 架构。</p><p>为了解决 CPU 架构变更带来的软件不兼容问题，苹果在 MacOS 中附带了用了转译 APP 代码的 Rosetta 2 。这个软件可以在运行时将 x86 架构的代码转译为 ARM 架构的代码，从而使得大部分软件无缝地运行在搭载新芯片的 MacOS 上。</p><p>尽管大部分的软件已经可以在 Apple Silicon （M1&#x2F;M2&#x2F;M3）芯片上正常运行，但有一类特殊的软件却一直无法很顺利地运行——虚拟化软件。这包括虚拟机和 Docker 之类的软件。</p><p>经典的虚拟机软件如 VirtualBox 明确表示没有支持计划。而 Parallels Desktop 虽然支持，但价格让人望而生畏。</p><p>因为 Docker 在非 Linux 系统中实际上也依赖于一个虚拟化的 Linux 作为 Host，因此在虚拟机没有完善的解决方法时，Docker 也是没有办法顺畅运行的。</p><h2 id="官方方案"><a href="#官方方案" class="headerlink" title="官方方案"></a>官方方案</h2><p>Docker Desktop For Mac 提供了可以在 Apple Silicon 芯片上运行的版本，它使用了 QEMU 来处理不同架构的虚拟化问题。但是它对有一定规模的公司不再免费。因此如果你在一个稍具规模的公司，可能不会选择使用 Docker Desktop For Mac。如果你是个人使用，那么 Docker Desktop For Mac 仍然是一个非常不错的解决方案。</p><h2 id="Lima"><a href="#Lima" class="headerlink" title="Lima"></a>Lima</h2><p><a href="https://github.com/lima-vm/lima">Lima</a> 是一个免费的开源软件，同样使用 QEMU 来处理不同架构的虚拟化问题。和 Docker Desktop For Mac 不同的是，它的容器软件使用的是 Containerd 而不是 Docker。</p><blockquote><p>在容器的发展历史中，一开始只有 Docker ，但随后社区希望容器可以标准化，因此诞生了 CRI 标准。Containerd 是一个这个标准的一种实现，Docker 也同样遵守这个标准。因此 Containerd 与 Docker 在使用时几乎可以兼容。</p></blockquote><p>按照官方教程，使用 Homebrew 安装 lima 之后就可以使用了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install lima</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">limactl start</span><br></pre></td></tr></table></figure><p>此时就可以使用<code>nerdctl</code>来进行 Containerd 的各种操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lima nerdctl run -d --name nginx -p 80:80 nginx:alpine</span><br></pre></td></tr></table></figure><p>可以看到，<code>lima nerdctl</code>的使用与<code>docker</code>几乎一模一样。使用完成后除了将容器关掉外，还可以将虚拟化环境也关闭，以节约内存：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">limactl stop</span><br></pre></td></tr></table></figure><p>lima 还可以设置非常多虚拟化的细节，也可以设置多个虚拟环境。更多使用细节可查看官方文档：&lt;(<a href="https://github.com/lima-vm/lima%3E">https://github.com/lima-vm/lima&gt;</a></p><h2 id="Colima"><a href="#Colima" class="headerlink" title="Colima"></a>Colima</h2><p><a href="https://github.com/abiosoft/colima">Colima</a> 是一个基于 Lima 的封装，同样是免费的开源软件，但是它的容器软件使用的是 Docker。</p><p>Colima 的安装使用也非常简单：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你没有安装过 docker 客户端，需要先安装</span></span><br><span class="line">brew install docker</span><br><span class="line"><span class="comment"># 安装 colima</span></span><br><span class="line">brew install colima</span><br></pre></td></tr></table></figure><p>使用时，只需要使用 <code>colima</code> 命令即可：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colima start</span><br></pre></td></tr></table></figure><p>待启动完成后，就可以正常使用<code>docker</code>命令了，不需要额外进行其它的设置。</p><p>使用完成后同样可以将虚拟化环境关闭：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">colima stop</span><br></pre></td></tr></table></figure><h2 id="OrbStack"><a href="#OrbStack" class="headerlink" title="OrbStack"></a>OrbStack</h2><p>“OrbStack 是在 macOS 上运行 Docker 容器和 Linux 机器的快速、轻量、简单的方式。您可以将其视为超级 WSL 和 Docker Desktop 的 macOS 版本，所有这些都在一个易于使用的应用程序中。”（来自官方网站。）</p><p>OrbStack 提供了一个 GUI 界面来管理 macOS 上的 Docker 容器和 Linux 机器。以及一个命令行界面。</p><p>您可以从官方网站下载：<a href="https://orbstack.dev/%EF%BC%8C%E6%88%96%E4%BD%BF%E7%94%A8">https://orbstack.dev/，或使用</a> Homebrew 安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask orbstack</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Running `brew update --auto-update`...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">==&gt; Caveats</span><br><span class="line">Open the OrbStack app to finish setup.</span><br><span class="line"></span><br><span class="line">==&gt; Downloading https://cdn-updates.orbstack.dev/arm64/OrbStack_v0.5.1_985_arm64.dmg</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Installing Cask orbstack</span><br><span class="line">==&gt; Moving App <span class="string">&#x27;OrbStack.app&#x27;</span> to <span class="string">&#x27;/Applications/OrbStack.app&#x27;</span></span><br><span class="line">🍺  orbstack was successfully installed!</span><br></pre></td></tr></table></figure><p>只需启动 OrbStack，您现在就可以使用 Docker 了。</p><p><img src="https://tutorials.tinkink.net/assets/01.screenshot-orbstack.a5020e54.png" alt="OrbStack 的截图"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>Apple Silicon 芯片的 Mac 设备使用 Docker 不是很容易</li><li>Docker Desktop For Mac 可用，但是对大中型公司收费</li><li>Lima &amp; Colima 是免费开源的解决方案</li><li>OrbStack 是一个 GUI 解决方案</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;在苹果Silicon芯片（M1&amp;#x2F;M2&amp;#x2F;M3）Mac电脑上使用Docker&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h6 id=&quot;本文搬运自在苹果Silicon芯片（M1-M2-M3）Mac电脑上使用Docker-教程-Tinkink&quot;&gt;&lt;a href=&quot;#本文搬运自在苹果Silicon芯片（M1-M2-M3）Mac电脑上使用Docker-教程-Tinkink&quot; class=&quot;headerlink&quot; title=&quot;本文搬运自在苹果Silicon芯片（M1&amp;#x2F;M2&amp;#x2F;M3）Mac电脑上使用Docker | 教程 | Tinkink&quot;&gt;&lt;/a&gt;本文搬运自&lt;a href=&quot;https://tutorials.tinkink.net/zh-hans/mac/how-to-use-docker-on-m1-mac.html&quot;&gt;在苹果Silicon芯片（M1&amp;#x2F;M2&amp;#x2F;M3）Mac电脑上使用Docker | 教程 | Tinkink&lt;/a&gt;&lt;/h6&gt;</summary>
    
    
    
    <category term="_9-数据库" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mongodb" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="mongodb" scheme="https://kanoc.gitee.io/tags/mongodb/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="Centos7" scheme="https://kanoc.gitee.io/tags/Centos7/"/>
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>alibaba3 使用Python管理器pyenv安装python3.13</title>
    <link href="https://kanoc.gitee.io/2024/12/09/alibaba3%E5%AE%89%E8%A3%85python3-13/"/>
    <id>https://kanoc.gitee.io/2024/12/09/alibaba3%E5%AE%89%E8%A3%85python3-13/</id>
    <published>2024-12-08T22:08:52.000Z</published>
    <updated>2025-06-09T07:46:32.970Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>alibaba3 使用Python管理器pyenv安装python3.13</strong></font></p><span id="more"></span><ul><li><p>使用 <code>pyenv</code> 安装 Python 3.12 是一个灵活且方便的方法，它允许你在同一个系统上管理多个 Python 版本。以下是使用 <code>pyenv</code> 安装 Python 3.12 的详细步骤：</p><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><p>首先，你需要安装一些依赖项，这些依赖项在编译 Python 源代码时是必需的。在 CentOS 7 上，你可以使用 <code>yum</code> 来安装这些依赖项：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y gcc zlib-devel bzip2-devel libffi-devel readline-devel sqlite-devel openssl-devel tk-devel xz-devel libffi-devel</span><br></pre></td></tr></table></figure><h3 id="2-安装-pyenv"><a href="#2-安装-pyenv" class="headerlink" title="2. 安装 pyenv"></a>2. 安装 pyenv</h3><p>接下来，你需要安装 <code>pyenv</code>。<code>pyenv</code> 是一个用 Bash 编写的脚本，它允许你轻松切换和管理多个 Python 版本。你可以通过以下步骤安装 <code>pyenv</code>：</p><ul><li>使用 <code>git</code> 克隆 <code>pyenv</code> 的仓库到你的主目录下（或任何你偏好的位置）：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure><ul><li>将 <code>pyenv</code> 初始化脚本添加到你的 shell 配置文件中（如 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code>）。这将允许你在每个新的 shell 会话中自动加载 <code>pyenv</code>：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init --path)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="3-安装-Python-3-13"><a href="#3-安装-Python-3-13" class="headerlink" title="3. 安装 Python 3.13"></a>3. 安装 Python 3.13</h3><p>现在，你可以使用 <code>pyenv</code> 来安装 Python 3.13 了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.13.x  <span class="comment"># x 表示小版本号，你可以根据需要安装具体的版本，如 3.13.0</span></span><br></pre></td></tr></table></figure><p>这个命令会从互联网上下载 Python 3.13 的源代码，并在你的系统上编译和安装它。这可能需要一些时间，具体取决于你的网络连接和计算机性能。</p><h3 id="4-设置全局或本地-Python-版本"><a href="#4-设置全局或本地-Python-版本" class="headerlink" title="4. 设置全局或本地 Python 版本"></a>4. 设置全局或本地 Python 版本</h3><p>安装完成后，你可以使用以下命令之一来设置全局或本地 Python 版本：</p><ul><li>设置全局 Python 版本：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.13.x</span><br></pre></td></tr></table></figure><p>这将使 Python 3.12 成为你系统上的默认 Python 版本。</p><ul><li>设置当前目录下的 Python 版本（本地版本）：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.13.x</span><br></pre></td></tr></table></figure><p>这将在当前目录及其子目录中设置 Python 3.13 为默认版本。当你进入这些目录时，<code>pyenv</code> 会自动切换到指定的 Python 版本。</p><h3 id="5-验证安装"><a href="#5-验证安装" class="headerlink" title="5. 验证安装"></a>5. 验证安装</h3><p>最后，你可以通过以下命令来验证 Python 3.13 是否已成功安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>或者，如果你想要确保你正在使用的是通过 <code>pyenv</code> 安装的 Python 3.13，你可以使用 <code>pyenv</code> 的 <code>which</code> 命令来找到 Python 解释器的路径：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">which</span> python</span><br></pre></td></tr></table></figure><p>如果一切设置正确，这些命令应该会显示 Python 3.13 的版本号或解释器的路径。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>在使用 <code>pyenv</code> 安装 Python 版本时，确保你的系统已经安装了编译该版本所需的依赖项。</li><li><code>pyenv</code> 会在你的主目录下创建一个 <code>.pyenv</code> 目录来存储不同版本的 Python。这不会干扰系统默认的 Python 版本。</li><li>如果你在使用 <code>pyenv</code> 时遇到任何问题，可以查阅 <code>pyenv</code> 的官方文档或在互联网上搜索相关的解决方案。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;alibaba3 使用Python管理器pyenv安装python3.13&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Python/"/>
    
    
    <category term="pyenv" scheme="https://kanoc.gitee.io/tags/pyenv/"/>
    
    <category term="Python" scheme="https://kanoc.gitee.io/tags/Python/"/>
    
    <category term="python3.13" scheme="https://kanoc.gitee.io/tags/python3-13/"/>
    
  </entry>
  
  <entry>
    <title>Centos7-Docker下安装mongodb</title>
    <link href="https://kanoc.gitee.io/2024/11/11/Centos7-Docker%E4%B8%8B%E5%AE%89%E8%A3%85mongodb/"/>
    <id>https://kanoc.gitee.io/2024/11/11/Centos7-Docker%E4%B8%8B%E5%AE%89%E8%A3%85mongodb/</id>
    <published>2024-11-10T18:19:47.000Z</published>
    <updated>2025-06-09T08:02:09.290Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Centos7-Docker下安装mongodb：</strong></font></p><span id="more"></span><h4 id="Ps：本文参考自：在centos7上使用-docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本）-流走在黑夜深巷的猫-博客园"><a href="#Ps：本文参考自：在centos7上使用-docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本）-流走在黑夜深巷的猫-博客园" class="headerlink" title="Ps：本文参考自：在centos7上使用 docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本） - 流走在黑夜深巷的猫 - 博客园"></a>Ps：本文参考自：<a href="https://www.cnblogs.com/Da-Mao/p/17804525.html">在centos7上使用 docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本） - 流走在黑夜深巷的猫 - 博客园</a></h4><h1 id="在centos7上使用-docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本）"><a href="#在centos7上使用-docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本）" class="headerlink" title="在centos7上使用 docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本）"></a>在centos7上使用 docker安装mongodb挂载宿主机以及创建其数据库的用户名和密码（最新版本）</h1><p>因为博主在使用docker安装mongodb并挂载时，发现在网上搜了好多都是以前版本的mongodb，并且按照他们操作总是在进入mongodb出问题，博主搞了好久终于弄好了，故写下博客，供有需要的的人参考。博主安装和官网有些区别，想看官网快速搭建的——&gt;[Mongodb官网快速指南]&lt;——(<a href="https://www.mongodb.com/docs/manual/tutorial/install-mongodb-community-with-docker/">https://www.mongodb.com/docs/manual/tutorial/install-mongodb-community-with-docker/</a> “Mongodb官网快速指南”)废话不多说开搞！</p><h3 id="一、安装mongodb"><a href="#一、安装mongodb" class="headerlink" title="一、安装mongodb"></a>一、安装mongodb</h3><p>1.1查看版本(不想看版本的，这一步可以跳过)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">search</span> mongo</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/11/n2TSfQMmGd7DAeZ.png" alt="image"><br>1.2拉取mongodb镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认下载最新版本（也就是latest）</span></span><br><span class="line">docker pull mongo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面也可以写成</span></span><br><span class="line">docker pull mongo:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#上面代码不行，提示你没权限，你就按照提示这上面代码前sudo（使用的账户是root权限）</span></span></span><br><span class="line">sudo docker pull mongo</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/11/UVOw2SyX7qxeRh6.png" alt="image"><br>1.3.查看本地已下载镜像，并查看是否下载mongo镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/11/aW1Iephz8SDJxXM.png" alt="image"><br>1.4.在宿主机上挂载并运行</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.4.1首先创建一个要挂载的文件（这里-p后面的文件地址就写你自己想要创建的）</span></span><br><span class="line">mkdir <span class="literal">-p</span> /<span class="keyword">data</span>/docker_volume/mongo/<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.4.2.然后运行容器并挂载</span></span><br><span class="line">    <span class="comment">## 需要验证</span></span><br><span class="line">docker run <span class="literal">-p</span> <span class="number">27017</span>:<span class="number">27017</span> <span class="literal">--name</span> mymongo <span class="literal">-v</span> /<span class="keyword">data</span>/docker_volume/mongo/<span class="keyword">data</span>:/<span class="keyword">data</span>/db <span class="literal">-d</span> mongo <span class="literal">--auth</span></span><br><span class="line">    <span class="comment">##不需要验证</span></span><br><span class="line">docker run <span class="literal">-p</span> <span class="number">27017</span>:<span class="number">27017</span> <span class="literal">--name</span> mymongo <span class="literal">-v</span> /<span class="keyword">data</span>/docker_volume/mongo/<span class="keyword">data</span>:/<span class="keyword">data</span>/db <span class="literal">-d</span> mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不限制log输出大小， 会一直写下去，最后系统崩溃.  该命令限制log输出大小为 5M</span></span><br><span class="line"><span class="comment">#  # 设置日志大小限制为 5MB（5 * 1024 * 1024 字节）</span></span><br><span class="line">docker run <span class="literal">--restart</span>=always <span class="literal">-p</span> <span class="number">27017</span>:<span class="number">27017</span> <span class="literal">--name</span> mymongo <span class="literal">-v</span> /<span class="keyword">data</span>/docker_volume/mongo/<span class="keyword">data</span>:/<span class="keyword">data</span>/db <span class="literal">-e</span> MONGO_LOG_MAX_SIZE=<span class="number">5242880</span> <span class="literal">-d</span> mongo <span class="literal">--auth</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac下部署需要特殊的文件夹权限</span></span><br><span class="line">docker run <span class="literal">--restart</span>=always <span class="literal">-p</span> <span class="number">27017</span>:<span class="number">27017</span> <span class="literal">--name</span> mymongo <span class="literal">-v</span> /Users/kamala/Docker/MongoDB/s1/<span class="keyword">data</span>:/<span class="keyword">data</span>/db <span class="literal">-e</span> MONGO_INITDB_ROOT_USERNAME=admin <span class="literal">-e</span> MONGO_INITDB_ROOT_PASSWORD=admin <span class="literal">-e</span> MONGO_LOG_MAX_SIZE=<span class="number">5242880</span> <span class="literal">--user</span> <span class="number">1000</span>:<span class="number">50</span> <span class="literal">-d</span> mongo <span class="literal">--wiredTigerCacheSizeGB</span> <span class="number">1</span> <span class="literal">--auth</span></span><br><span class="line"><span class="comment">#  1.4.3.查看是否运行</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span></span><br></pre></td></tr></table></figure><p>在上面的命令中，几个命令参数的详细解释如下：<br><code>-p</code> 映射容器服务的 <code>27017</code> 端口到宿主机的 <code>27017</code> 端口。外部可以直接通过 宿主机<code> ip:27017</code> 访问到 <code>mongo</code> 的服务<br><code>-v </code>为设置容器的挂载目录，这里是将本机的“<code>/data/docker_volume/mongo/data</code>”目录挂载到容器中的<code>/data/db</code>中，作为 <code>mongodb</code> 的存储目录<br><code>--name</code> 为设置该容器的名称<br><code>-d</code> 设置容器以守护进程方式运行（后台运行）<br><code>–auth</code> 需要验证就加，不需要验证，就去掉。默认<code>mongodb</code>是不使用用户认证<br><img src="https://s2.loli.net/2024/11/11/BKb3wsrdzVeNmpf.png" alt="image"><br>1.5.设置<code>mongodb</code>随<code>docker</code>自启动（这一步可加可不加，看你个人)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">update</span> mymongo <span class="comment">--restart=always</span></span><br></pre></td></tr></table></figure><p>注意：这里的<code>mymongo</code>是容器的名字（上面1.4.2哪里运行容器<code>--name</code>后起的名字），不是镜像的名字。</p><h3 id="二、创建其数据库的用户名和密码"><a href="#二、创建其数据库的用户名和密码" class="headerlink" title="二、创建其数据库的用户名和密码"></a>二、创建其数据库的用户名和密码</h3><h4 id="①如果你不需要设置用户和密码，下面就不用看了，直接可以连接mongo了（这种就像是裸奔不安全）"><a href="#①如果你不需要设置用户和密码，下面就不用看了，直接可以连接mongo了（这种就像是裸奔不安全）" class="headerlink" title="①如果你不需要设置用户和密码，下面就不用看了，直接可以连接mongo了（这种就像是裸奔不安全）"></a>①如果你不需要设置用户和密码，下面就不用看了，直接可以连接<code>mongo</code>了（这种就像是裸奔不安全）</h4><h4 id="②如果你在上面-容器运行挂载选择需验证方式（在1-4-2处）"><a href="#②如果你在上面-容器运行挂载选择需验证方式（在1-4-2处）" class="headerlink" title="②如果你在上面 容器运行挂载选择需验证方式（在1.4.2处）"></a>②如果你在上面 容器运行挂载选择需验证方式（在1.4.2处）</h4><p>2.2.1 首先 登录<code>mymongo</code>容器，进入<code>admin</code>数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mymongo mongosh admin</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/11/QMvnOdIRasP8ZcC.png" alt="image"><br>2.2.2 然后 按照 2.3.4步骤往下走</p><h4 id="③其余的就往下看"><a href="#③其余的就往下看" class="headerlink" title="③其余的就往下看"></a>③其余的就往下看</h4><p>2.3.1.进入<code>mongo</code>容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mymongo /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/11/l7MfPw48DsjXqB5.png" alt="image"><br>注意：这里的mymongo是容器的名字，不是镜像的名字。（忘记容器名字，可使用docker ps -a 查看容器名）<br><img src="https://s2.loli.net/2024/11/11/kyrz5UoOGif84u7.png" alt="image"><br>2.3.2.进入<code>mongosh</code>中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入mongo shell</span></span><br><span class="line">mongosh</span><br></pre></td></tr></table></figure><p>注：<code>mongosh 6.0</code>版本之后使用，<code>mongo 6.0</code>版本之前使用，博主就是在这里出问题的，博主安装最新<code>mongodb</code>版本，但是使用的是 <code>mongo</code> 所以一直出现问题：<code>bash: mongo: command not found</code><br><img src="https://s2.loli.net/2024/11/11/x7UL5mqQFgT2ICr.png" alt="image"></p><p><img src="https://s2.loli.net/2024/11/11/qYEI7iGAwlKRrBs.png" alt="image"><br>2.3.3.进入<code>admin</code>数据库</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> admin</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/11/PJqHpUT7eV9iX1o.png" alt="image"><br>2.3.4 创建一个用户，<code>mongodb</code>默认没有用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.这里创建用户名为root，密码为mongo2023，角色（该用户的权限）为root，数据库为admin（你们按照你们自己的设置）</span></span><br><span class="line"><span class="comment"># 用户名：root，密码：mongo2023，角色：root，数据库：admin</span></span><br><span class="line"></span><br><span class="line">db.createUser(&#123;user:<span class="string">&#x27;root&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;mongo2023&#x27;</span>,roles:[&#123;role:<span class="string">&#x27;root&#x27;</span>,db:<span class="string">&#x27;admin&#x27;</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.认证登录db.auth(&#x27;用户名&#x27;,&#x27;密码&#x27;)，打印1则代表认证通过</span></span><br><span class="line">db.auth(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;mongo2023&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/11/11/qbLpfzJ9Ue5NWYm.png" alt="image"><br>到这里就完成了创建用户和设置密码，如果要退出 Ctrl+D 或者 exit 退出mongodb</p><h3 id="三、客户端连接mongodb"><a href="#三、客户端连接mongodb" class="headerlink" title="三、客户端连接mongodb"></a>三、客户端连接mongodb</h3><p>如果刚才的安装是在服务器上，想远程连接mongodb还请先查看服务器端口27017放行（对外开放这个端口）<br><img src="https://s2.loli.net/2024/11/11/OgdTXcSE5Ip6YGW.png" alt="image"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Centos7-Docker下安装mongodb：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_9-数据库" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mongodb" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="mongodb" scheme="https://kanoc.gitee.io/tags/mongodb/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="Centos7" scheme="https://kanoc.gitee.io/tags/Centos7/"/>
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>在Django中使用MySQL(mysqlclient版本)作为数据库</title>
    <link href="https://kanoc.gitee.io/2024/10/18/%E5%9C%A8Django%E4%B8%AD%E4%BD%BF%E7%94%A8MySQL(mysqlclient%E7%89%88%E6%9C%AC)%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://kanoc.gitee.io/2024/10/18/%E5%9C%A8Django%E4%B8%AD%E4%BD%BF%E7%94%A8MySQL(mysqlclient%E7%89%88%E6%9C%AC)%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-10-17T16:37:50.000Z</published>
    <updated>2025-06-09T07:24:54.716Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>在Django中使用MySQL(mysqlclient版本)作为数据库</strong></font></p><span id="more"></span><p><font color=#f26522 size=4 face=宋体><strong>1、安装库</strong></font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install mysqlclient</span><br></pre></td></tr></table></figure><p><font color=#b0171f size=2 face=宋体><strong></strong></font></p><p><font color=#f26522 size=4 face=宋体><strong>2、<strong>配置Django的<code>DATABASES</code>设置</strong>：</strong></font><br>在你的Django项目的<code>settings.py</code>文件中，找到<code>DATABASES</code>设置并修改它以使用MySQL。以下是一个示例配置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;  </span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;  </span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;your_database_name&#x27;</span>,  <span class="comment"># 数据库名  </span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;your_mysql_username&#x27;</span>,  <span class="comment"># MySQL用户名  </span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;your_mysql_password&#x27;</span>,  <span class="comment"># MySQL密码  </span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 数据库服务器地址  </span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,  <span class="comment"># 数据库服务器端口（默认是3306）  </span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;  </span><br><span class="line">            <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;utf8mb4&#x27;</span>,  </span><br><span class="line">            <span class="string">&#x27;init_command&#x27;</span>: <span class="string">&quot;SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;&quot;</span>,  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red size=5 face=宋体><strong>Error：安装<code>mysqlclient</code>报错：</strong></font> </p><p>官方指引：<a href="https://pypi.org/project/mysqlclient/#:~:text=Building%EE%80%80%20mysqlclient%EE%80%81">https://pypi.org/project/mysqlclient/#:~:text=Building%EE%80%80%20mysqlclient%EE%80%81</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 说明：缺少必要库，所以安装失败</span></span><br><span class="line"></span><br><span class="line">brew install mysql-client pkg-config</span><br><span class="line">export PKG_CONFIG_PATH=<span class="string">&quot;$(brew --prefix)/opt/mysql-client/lib/pkgconfig&quot;</span></span><br><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/18/9sefPiSWAyQRV8b.png" alt="image-20241018010930611"></p><h4 id="完成安装"><a href="#完成安装" class="headerlink" title="完成安装"></a>完成安装</h4><p><img src="https://s2.loli.net/2024/10/18/5c6oeQdgWvDRCXV.png" alt="image-20241018011119528"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;在Django中使用MySQL(mysqlclient版本)作为数据库&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_9-数据库" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>远程修改-ESXI-8.0-管理ip地址</title>
    <link href="https://kanoc.gitee.io/2024/08/18/%E8%BF%9C%E7%A8%8B%E4%BF%AE%E6%94%B9-ESXI-8-0-%E7%AE%A1%E7%90%86ip%E5%9C%B0%E5%9D%80/"/>
    <id>https://kanoc.gitee.io/2024/08/18/%E8%BF%9C%E7%A8%8B%E4%BF%AE%E6%94%B9-ESXI-8-0-%E7%AE%A1%E7%90%86ip%E5%9C%B0%E5%9D%80/</id>
    <published>2024-08-18T09:29:04.000Z</published>
    <updated>2025-06-09T04:15:50.087Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><strong>远程修改 ESXI 8.0 管理ip地址</strong></strong></font></p><span id="more"></span><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a><strong>场景：</strong></h3><p>适用于不方便在设备边操作而又需要修改管理地址的场景。</p><p>适用于不方便外接显示器的场景。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p>生产环境一定确定好网络配置信息否则可能会因为网络配置不正确导致无法正常访问。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h3><h4 id="1-开启SSH远程访问"><a href="#1-开启SSH远程访问" class="headerlink" title="1.开启SSH远程访问"></a>1.开启SSH远程访问</h4><p>启用安全 <code>Shell</code>（也就是 <code>EXSi</code> 可以被 <code>SSH</code> 访问的功能）</p><p><img src="https://s2.loli.net/2024/08/18/jXvEum9nVrO1aq8.png" alt="img"></p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><ul><li>使用 <code>SecureCRT SSH2</code> 连接 <code>ESXi</code> 主机，现在使用 <code>dcui</code> 并没有任何反应，在 <code>Session</code> 标签栏右键点击 <code>Disconnect</code> 。</li><li>这里我测试用 <code>Finalshell</code> 也是完全没问题的</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The <span class="keyword">time</span> and <span class="built_in">date</span> of this login have been sent to the system logs.</span><br><span class="line"></span><br><span class="line">WARNING:</span><br><span class="line">   All commands run on the ESXi shell are logged and may be included <span class="keyword">in</span></span><br><span class="line">   support bundles. Do not provide passwords directly on the <span class="built_in">command</span> line.</span><br><span class="line">   Most tools can prompt <span class="keyword">for</span> secrets or accept them from standard input.</span><br><span class="line"></span><br><span class="line">VMware offers supported, powerful system administration tools.  Please</span><br><span class="line">see www.vmware.com/go/sysadmintools <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">The ESXi Shell can be disabled by an administrative user. See the</span><br><span class="line">vSphere Security documentation <span class="keyword">for</span> more information.</span><br><span class="line">[root@localhost:~] </span><br><span class="line">[root@localhost:~] dcui </span><br></pre></td></tr></table></figure><h4 id="3-连接到SSH"><a href="#3-连接到SSH" class="headerlink" title="3.连接到SSH"></a>3.连接到SSH</h4><ul><li>如果是使用 <code>Finalshell</code> 则可省略此步骤</li><li>在 <code>Session</code> 标签栏右键点击 <code>Session Option</code> 修改 <code>Terminal</code> 类型为 <code>Xterm</code> 后重新 <code>SSH2</code> 连接</li></ul><p><img src="https://s2.loli.net/2024/08/18/e7AEdlkaJ4ghpPt.png" alt="img"></p><h4 id="4-使用-dcui-工具"><a href="#4-使用-dcui-工具" class="headerlink" title="4.使用 dcui 工具"></a><strong>4.使用 <code>dcui</code> 工具</strong></h4><ul><li>再次使用 <code>dcui</code> 工具，这时已经可以进入 <code>EXSi</code> 的系统管理界面。</li></ul><p><img src="https://s2.loli.net/2024/08/18/MvdVH8r7BLy1Kfs.png" alt="img"></p><h4 id="5-登录到控制中心"><a href="#5-登录到控制中心" class="headerlink" title="5.登录到控制中心"></a>5.登录到控制中心</h4><ul><li>点击 <code>F2</code> 进行 <code>Customize System</code> 输入用户名、密码进入</li></ul><p><img src="https://s2.loli.net/2024/08/18/zO1Ehr7yvmHFgcC.png" alt="img"></p><h4 id="6-修改管理IP地址"><a href="#6-修改管理IP地址" class="headerlink" title="6.修改管理IP地址"></a>6.修改管理IP地址</h4><ul><li>选择 <code>Configure Management Network</code></li></ul><p><img src="https://s2.loli.net/2024/08/18/eyDBxsMbLrXRgHI.png" alt="img"></p><h4 id="7-选择-IPv4-Configuration"><a href="#7-选择-IPv4-Configuration" class="headerlink" title="7.选择 IPv4 Configuration"></a>7.选择 <code>IPv4 Configuration</code></h4><p><img src="https://s2.loli.net/2024/08/18/Z45nGUCewczAKby.png" alt="img"></p><h4 id="8-配置静态IP地址，然后点击回车"><a href="#8-配置静态IP地址，然后点击回车" class="headerlink" title="8.配置静态IP地址，然后点击回车"></a>8.配置静态IP地址，然后点击回车</h4><p><img src="https://s2.loli.net/2024/08/18/2m6uOn3w5T8WjUh.png" alt="img"></p><h4 id="9-点击-Esc-选择-Yes-应用配置并且重启管理网络"><a href="#9-点击-Esc-选择-Yes-应用配置并且重启管理网络" class="headerlink" title="9.点击 Esc 选择 Yes 应用配置并且重启管理网络"></a>9.点击 <code>Esc</code> 选择 <code>Yes</code> 应用配置并且重启管理网络</h4><p><img src="https://s2.loli.net/2024/08/18/8M4Ichq1xCzebUs.png" alt="img"></p><h4 id="10-此时已近可以用修改后的IP地址登录管理ESXi主机"><a href="#10-此时已近可以用修改后的IP地址登录管理ESXi主机" class="headerlink" title="10.此时已近可以用修改后的IP地址登录管理ESXi主机"></a>10.此时已近可以用修改后的IP地址登录管理ESXi主机</h4><p><img src="https://s2.loli.net/2024/08/18/OrPAf7l54TLonhd.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;strong&gt;远程修改 ESXI 8.0 管理ip地址&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="esxi" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/esxi/"/>
    
    
    <category term="esxi" scheme="https://kanoc.gitee.io/tags/esxi/"/>
    
  </entry>
  
  <entry>
    <title>Arm版-ubuntu-安装-Docker教程</title>
    <link href="https://kanoc.gitee.io/2024/08/09/Arm%E7%89%88-ubuntu-%E5%AE%89%E8%A3%85-Docker%E6%95%99%E7%A8%8B/"/>
    <id>https://kanoc.gitee.io/2024/08/09/Arm%E7%89%88-ubuntu-%E5%AE%89%E8%A3%85-Docker%E6%95%99%E7%A8%8B/</id>
    <published>2024-08-09T15:07:42.000Z</published>
    <updated>2025-06-09T07:38:26.469Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Arm版 ubuntu 安装 Docker教程</strong></font></p><span id="more"></span><p>如果你想要使用阿里云的Docker源而不是官方的Docker源，你需要修改<code>add-apt-repository</code>命令中的URL。阿里云的Docker源可能会提供更快的下载速度，特别是对于位于中国的用户。</p><p>以下是使用阿里云Docker源的步骤：</p><ol><li><strong>添加阿里云的Docker GPG密钥</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="built_in">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure><ol><li><strong>设置Docker存储库</strong>：</li></ol><p>这里你需要替换官方的Docker源URL为阿里云的源URL。注意，阿里云的源可能不包含<code>[arch=arm64]</code>这样的架构标识，因为阿里云会根据你访问的源自动提供适合你架构的软件包。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb [arch=arm64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>但是，通常阿里云源会自动处理架构问题，所以你可能不需要指定<code>[arch=arm64]</code>。如果不确定，可以先尝试不加架构标识：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><ol><li><strong>更新软件包索引并安装Docker</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update  </span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><ol><li><strong>启动Docker服务</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker  </span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><ol><li><strong>测试Docker安装</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash复制代码</span><br><span class="line"></span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>确保在运行这些命令之前，你的系统已经是最新的，并且你已经卸载了任何旧版本的Docker。如果你遇到任何问题，检查你的网络连接，以及确保你使用的命令和源URL是最新的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Arm版 ubuntu 安装 Docker教程&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Docker/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/tags/ubuntu/"/>
    
    <category term="arm" scheme="https://kanoc.gitee.io/tags/arm/"/>
    
    <category term="工具" scheme="https://kanoc.gitee.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>内存小于-1G，宝塔面板-9.0.0-无法安装-mysql-解决方法</title>
    <link href="https://kanoc.gitee.io/2024/08/08/%E5%86%85%E5%AD%98%E5%B0%8F%E4%BA%8E-1G%EF%BC%8C%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF-9-0-0-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-mysql-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://kanoc.gitee.io/2024/08/08/%E5%86%85%E5%AD%98%E5%B0%8F%E4%BA%8E-1G%EF%BC%8C%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF-9-0-0-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-mysql-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2024-08-08T04:36:15.000Z</published>
    <updated>2025-06-09T03:53:29.745Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>内存小于 1G，宝塔面板<code>9.0.0</code>无法安装<code>mysql</code>解决方法</strong></font></p><span id="more"></span><p>宝塔官方限制了内存小于<code>1G</code>无法安装<code>mysql</code></p><p><font color=#00b2c2 size=5 face=宋体><strong>解决方法：</strong></font></p><p>找到路径：<code>/www/server/panel/class</code> 下的 <code>panelPlugin.py</code></p><p><img src="https://s2.loli.net/2024/08/09/XxNRyJokGCQa6e9.png" alt="image-20240808124006141"></p><p>定位到&gt;&gt;&gt; 关键字 <code>limit_list</code> 将如下注释掉即可</p><p><img src="https://s2.loli.net/2024/08/08/WutVP8LYhXv9rxN.png" alt="image-20240808123340813"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;内存小于 1G，宝塔面板&lt;code&gt;9.0.0&lt;/code&gt;无法安装&lt;code&gt;mysql&lt;/code&gt;解决方法&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A3-linux" scheme="https://kanoc.gitee.io/categories/A3-linux/"/>
    
    <category term="宝塔面板" scheme="https://kanoc.gitee.io/categories/A3-linux/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    
    
    <category term="系统" scheme="https://kanoc.gitee.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="运维" scheme="https://kanoc.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="宝塔" scheme="https://kanoc.gitee.io/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>在Django中使用MySQL作为数据库</title>
    <link href="https://kanoc.gitee.io/2024/06/26/%E5%9C%A8Django%E4%B8%AD%E4%BD%BF%E7%94%A8MySQL%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://kanoc.gitee.io/2024/06/26/%E5%9C%A8Django%E4%B8%AD%E4%BD%BF%E7%94%A8MySQL%E4%BD%9C%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2024-06-25T16:53:54.000Z</published>
    <updated>2025-06-09T07:25:36.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在Django中使用MySQL作为数据库："><a href="#在Django中使用MySQL作为数据库：" class="headerlink" title="在Django中使用MySQL作为数据库："></a><font color=#00b2c2 size=5 face=宋体><strong>在Django中使用MySQL作为数据库：</strong></font></h2><span id="more"></span><p>在Django中使用MySQL作为数据库，你需要遵循以下步骤来设置你的<code>DATABASES</code>配置：</p><ol><li><p><strong>安装MySQL客户端库</strong>：<br>对于Python，你需要安装一个MySQL客户端库，如<code>mysqlclient</code>或<code>PyMySQL</code>。<code>mysqlclient</code>是Django官方推荐的，但它在某些系统上可能难以安装。<code>PyMySQL</code>是一个纯Python实现的MySQL客户端，可以作为<code>mysqlclient</code>的替代。</p><p>使用pip安装<code>PyMySQL</code>（如果你选择使用它）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure><p>对于<code>mysqlclient</code>，安装方法取决于你的操作系统和Python版本。</p></li><li><p><strong>配置Django的<code>DATABASES</code>设置</strong>：<br>在你的Django项目的<code>settings.py</code>文件中，找到<code>DATABASES</code>设置并修改它以使用MySQL。以下是一个示例配置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;  </span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;  </span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,  </span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;your_database_name&#x27;</span>,  <span class="comment"># 数据库名  </span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;your_mysql_username&#x27;</span>,  <span class="comment"># MySQL用户名  </span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;your_mysql_password&#x27;</span>,  <span class="comment"># MySQL密码  </span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 数据库服务器地址  </span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,  <span class="comment"># 数据库服务器端口（默认是3306）  </span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;  </span><br><span class="line">            <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;utf8mb4&#x27;</span>,  </span><br><span class="line">            <span class="string">&#x27;init_command&#x27;</span>: <span class="string">&quot;SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;&quot;</span>,  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="comment"># 如果你使用的是PyMySQL，你需要添加以下行来告诉Django使用它  </span></span><br><span class="line">        <span class="comment"># &#x27;OPTIONS&#x27;: &#123;  </span></span><br><span class="line">        <span class="comment">#     &#x27;init_command&#x27;: &quot;SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;&quot;,  </span></span><br><span class="line">        <span class="comment">#     &#x27;read_default_file&#x27;: &#x27;/path/to/my.cnf&#x27;,  # 可选，指向你的MySQL配置文件  </span></span><br><span class="line">        <span class="comment">#     &#x27;charset&#x27;: &#x27;utf8mb4&#x27;,  </span></span><br><span class="line">        <span class="comment">#     &#x27;use_unicode&#x27;: True,  </span></span><br><span class="line">        <span class="comment"># &#125;,  </span></span><br><span class="line">        <span class="comment"># &#x27;TEST&#x27;: &#123;  </span></span><br><span class="line">        <span class="comment">#     &#x27;CHARSET&#x27;: &#x27;utf8mb4&#x27;,  </span></span><br><span class="line">        <span class="comment">#     &#x27;COLLATION&#x27;: &#x27;utf8mb4_unicode_ci&#x27;,  </span></span><br><span class="line">        <span class="comment"># &#125;,  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果你选择使用<code>PyMySQL</code>作为客户端，并且Django版本在3.0之前，你可能需要在<code>__init__.py</code>文件中添加一些代码来让Django知道使用<code>PyMySQL</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在你的Django应用的__init__.py文件中  </span></span><br><span class="line"><span class="keyword">import</span> pymysql  </span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>对于Django 3.0及更高版本，Django默认支持<code>PyMySQL</code>，但你可能需要在<code>DATABASES</code>设置中添加一个<code>&#39;NAME&#39;: &#39;mysql.connector.django&#39;</code>来指定使用它（取决于你是否通过第三方包安装了额外的MySQL连接器）。</p></li><li><p><strong>创建数据库</strong>：<br>在MySQL中，你需要手动创建数据库（除非你的Django项目在迁移时设置了自动创建）。你可以使用MySQL命令行工具或图形界面工具（如phpMyAdmin、MySQL Workbench等）来创建数据库。</p></li><li><p><strong>运行迁移</strong>：<br>在Django项目中，使用以下命令来创建和管理数据库表：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations  </span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>这些命令将基于你的模型（在<code>models.py</code>文件中定义）来创建或修改数据库表。</p></li><li><p><strong>测试连接</strong>：<br>在Django shell或视图中尝试查询数据库以确保连接正常。</p></li><li><p><strong>（可选）配置MySQL用户权限</strong>：<br>确保你为Django应用创建的MySQL用户有足够的权限来访问和修改数据库。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;在Django中使用MySQL作为数据库：&quot;&gt;&lt;a href=&quot;#在Django中使用MySQL作为数据库：&quot; class=&quot;headerlink&quot; title=&quot;在Django中使用MySQL作为数据库：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;在Django中使用MySQL作为数据库：&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="_9-数据库" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="https://kanoc.gitee.io/categories/9-%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS-7上安装Go-1.22</title>
    <link href="https://kanoc.gitee.io/2024/06/11/%E5%9C%A8CentOS-7%E4%B8%8A%E5%AE%89%E8%A3%85Go-1-22/"/>
    <id>https://kanoc.gitee.io/2024/06/11/%E5%9C%A8CentOS-7%E4%B8%8A%E5%AE%89%E8%A3%85Go-1-22/</id>
    <published>2024-06-10T20:01:46.000Z</published>
    <updated>2025-06-09T10:41:43.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在CentOS-7上安装Go-1-22："><a href="#在CentOS-7上安装Go-1-22：" class="headerlink" title="在CentOS 7上安装Go 1.22："></a><font color=#00b2c2 size=5 face=宋体><strong>在CentOS 7上安装Go 1.22：</strong></font></h2><span id="more"></span><h3 id="在CentOS-7上安装Go-1-22-2的步骤如下："><a href="#在CentOS-7上安装Go-1-22-2的步骤如下：" class="headerlink" title="在CentOS 7上安装Go 1.22.2的步骤如下："></a>在CentOS 7上安装Go 1.22.2的步骤如下：</h3><h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><ol><li><p>确保你的<code>CentOS 7</code>系统已经更新到最新状态，可以通过以下命令进行更新：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update</span><br></pre></td></tr></table></figure></li><li><p>检查系统是否已安装<code>Go</code>的旧版本，如果有，则先卸载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum remove golang</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、下载并安装Go-1-22-2"><a href="#二、下载并安装Go-1-22-2" class="headerlink" title="二、下载并安装Go 1.22.2"></a>二、下载并安装Go 1.22.2</h4><ol><li><p>访问Go的官方网站或使用提供的下载链接来获取<code>Go 1.22.2</code>的<code>Linux-amd64</code>版本。你可以直接通过<code>wget</code>命令下载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src  </span><br><span class="line">wget https://golang.google.cn/dl/go1.22.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压下载的Go压缩包到<code>/usr/local</code>目录下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf go1.22.2.linux-amd64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>这将把Go的安装文件解压到<code>/usr/local/go</code>目录下。</p></li></ol><h4 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h4><ol><li><p>打开<code>/etc/profile</code>文件，并在文件末尾添加以下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin  </span><br><span class="line"><span class="built_in">export</span> GOPATH=/opt/go  <span class="comment"># 或者你可以设置为其他目录，作为你的工作区  </span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure></li><li><p>应用更改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>或者使用<code>su -</code>命令重新登录shell会话。</p></li></ol><h4 id="四、验证安装"><a href="#四、验证安装" class="headerlink" title="四、验证安装"></a>四、验证安装</h4><ol><li><p>在终端中输入<code>go version</code>来检查Go的版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>如果安装成功，你应该看到类似于<code>go version go1.22.2 linux/amd64</code>的输出。</p></li></ol><h4 id="五、解决依赖下载速度过慢的问题（可选）"><a href="#五、解决依赖下载速度过慢的问题（可选）" class="headerlink" title="五、解决依赖下载速度过慢的问题（可选）"></a>五、解决依赖下载速度过慢的问题（可选）</h4><p>如果你的网络环境中Go依赖包的下载速度过慢，你可以设置<code>GOPROXY</code>环境变量来使用国内的代理服务器，如<code>Goproxy.cn</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on  </span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>这样设置后，Go的依赖包将会从指定的代理服务器下载，通常会有更快的下载速度。</p><p>以上就是在<code>CentOS 7</code>上安装<code>Go 1.22.2</code>的详细步骤。请注意，Go的最新版本可能已经更新，但上述步骤对于安装任何版本的Go都是通用的，只需将版本号替换为你要安装的版本即可。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;在CentOS-7上安装Go-1-22：&quot;&gt;&lt;a href=&quot;#在CentOS-7上安装Go-1-22：&quot; class=&quot;headerlink&quot; title=&quot;在CentOS 7上安装Go 1.22：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;在CentOS 7上安装Go 1.22：&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Golang" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Golang/"/>
    
    
    <category term="教程" scheme="https://kanoc.gitee.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="安装" scheme="https://kanoc.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
    <category term="go" scheme="https://kanoc.gitee.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>centos7-配置连接-OpenVPN教程</title>
    <link href="https://kanoc.gitee.io/2024/06/11/centos7-%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5-OpenVPN%E6%95%99%E7%A8%8B/"/>
    <id>https://kanoc.gitee.io/2024/06/11/centos7-%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5-OpenVPN%E6%95%99%E7%A8%8B/</id>
    <published>2024-06-10T19:52:11.000Z</published>
    <updated>2025-06-09T08:00:23.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）"><a href="#CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）" class="headerlink" title="CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）"></a><font color=#00b2c2 size=5 face=宋体><strong>CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）</strong></font></h2><span id="more"></span><p>一般来说，提供Web服务的Linux服务器是很少需要连接<code>OpenVPN</code>的，但是个人<code>Linux</code>计算机在很多时候就需要连接<code>OpenVPN</code>了。比如以<code>Linux</code>为开发环境，需要连接公司的<code>OpenVPN</code>等等。</p><p>本文将以<code>CentOS</code>系统为例，介绍在终端下连接远程<code>OpenVPN</code>服务的方法。</p><h3 id="1，安装OpenVPN"><a href="#1，安装OpenVPN" class="headerlink" title="1，安装OpenVPN"></a>1，安装<code>OpenVPN</code></h3><p>首先需要安装<code>OpenVPN</code>客户端。一般来说直接使用<code>yum</code>即可（在<code>Debian</code>系中是<code>apt-get</code>）。执行如下命令安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]# yum install openvpn</span><br></pre></td></tr></table></figure><p>稍等片刻将自动安装好<code>openvpn</code>需要的软件包。安装完成后，应该出现<code>/etc/openvpn/</code>文件夹。</p><h3 id="2，配置OpenVPN"><a href="#2，配置OpenVPN" class="headerlink" title="2，配置OpenVPN"></a>2，配置OpenVPN</h3><p>作为客户端，<code>OpenVPN</code>并没有特定的配置文件，而是由服务器提供方给出一个配置文件。</p><p>对于认证，<code>OpenVPN</code>提供了两种认证方法：基于用户名&#x2F;密码的认证与SSL证书认证。用户名&#x2F;密码的认证方法无法（或较难）限制一个账号同时连接多个客户端，而采用证书，则可保证同一证书同一时间只能有一个客户端连接。当然，这些都是由服务器端决定的，不需要客户端进行选择。<br>首先将<code>OpenVPN</code>服务器提供商发给你的配置文件解压，并将所有文件都复制到 <code>/etc/openvpn/</code>中。<br>这些文件中至少包含一个<code>.ovpn</code>文件；如果服务器需要证书认证，则应该还存在另外三个证书文件。</p><p><strong>看懂<code>OpenVPN</code>配置格式。下面是一个<code>.ovpn</code>配置示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">client</span><br><span class="line">dev tap</span><br><span class="line">proto tcp-client</span><br><span class="line">remote 192.168.135.75 1194</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">mute-replay-warnings</span><br><span class="line">redirect-gateway</span><br><span class="line">ca /etc/ca.crt</span><br><span class="line">cert /etc/client.crt</span><br><span class="line">key /etc/client.key</span><br><span class="line">comp-lzo</span><br><span class="line">verb 4</span><br></pre></td></tr></table></figure><p>一般来说，红色的内容可能需要你进行修改。将红色的内容修改成这三个文件的实际位置。然后保存即可。</p><h3 id="3，连接OpenVPN"><a href="#3，连接OpenVPN" class="headerlink" title="3，连接OpenVPN"></a><strong>3，连接OpenVPN</strong></h3><p>在配置好.ovpn文件后，执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openvpn /etc/***.ovpn</span><br></pre></td></tr></table></figure><p>即可连接服务器了。注意，上面的参数应该换成你的配置文件实际位置。<br>此时，终端会回显很多连接日志。如果连接不成功，则可以通过这些日志来确定出错位置。如果要断开，只需要通过<code>Ctrl+C</code>强制终止即可。<br>上面的命令在实际中并不方便，因为它要占用一个独立的终端。在测试成功后，使用以下命令即可在后台连接<code>OpenVPN</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openvpn /etc/***.ovpn &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure><p>值得称赞的是，<code>openvpn</code>非常智能，在连接异常中断、无法连接服务器、断网的情况下，它会自动重连。因此，如果希望开机即自动连接<code>OpenVPN</code>，或者是<code>VPN</code>常年在线，则可将上述命令行加入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/rc.local</span><br></pre></td></tr></table></figure><p>中。注意，命令末尾的&amp;符号不能省略，否则将可能阻塞系统的正常启动。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）&quot;&gt;&lt;a href=&quot;#CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）&quot; class=&quot;headerlink&quot; title=&quot;CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;CentOS连接OpenVPN教程（Linux下OpenVPN客户端配置教程）&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="梯子" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/%E6%A2%AF%E5%AD%90/"/>
    
    
    <category term="梯子" scheme="https://kanoc.gitee.io/tags/%E6%A2%AF%E5%AD%90/"/>
    
    <category term="代理" scheme="https://kanoc.gitee.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Python3和升级SQLite高版本</title>
    <link href="https://kanoc.gitee.io/2024/06/01/Centos7%E5%AE%89%E8%A3%85Python3%E5%92%8C%E5%8D%87%E7%BA%A7SQLite%E9%AB%98%E7%89%88%E6%9C%AC/"/>
    <id>https://kanoc.gitee.io/2024/06/01/Centos7%E5%AE%89%E8%A3%85Python3%E5%92%8C%E5%8D%87%E7%BA%A7SQLite%E9%AB%98%E7%89%88%E6%9C%AC/</id>
    <published>2024-05-31T21:38:49.000Z</published>
    <updated>2025-06-09T08:07:09.621Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>概要：</strong></font></p><span id="more"></span><p>编写此文是因为在Linux上跑Django项目时报错：sqlite3.NotSupportedError: deterministic&#x3D;True requires SQLite 3.8.3 or highe（此时已经安装了python3）。查询之后发现是因为centos上的sqlite3版本过低导致。<br>去验证一下：在centos上进入python，可以看到<code>sqlite3</code>的版本为<code>3.7.17</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Python 3.8.12 (default, Jun 21 2019, 00:36:41)</span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import sqlite3</span><br><span class="line">&gt;&gt;&gt; sqlite3.sqlite_version</span><br><span class="line"><span class="string">&#x27;3.7.17&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure><h3 id="原因已经找到，下面开始执行。"><a href="#原因已经找到，下面开始执行。" class="headerlink" title="原因已经找到，下面开始执行。"></a>原因已经找到，下面开始执行。</h3><p>因为sqlite3是在python3安装时进行连接的，我的云服务器已经安装过了，所以需要卸载，如果还没有安装python3的，可以跳过这一步。</p><p>注：此处仅删除python3，尽量别删除原装的python2.7.5，因为centos7有一些命令是依赖2.7.5的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis python3 |xargs rm -frv   # 此为强制删除，也可以使用yum命令删除</span><br></pre></td></tr></table></figure><h3 id="二、下载、编译、安装新版SQLite"><a href="#二、下载、编译、安装新版SQLite" class="headerlink" title="二、下载、编译、安装新版SQLite"></a>二、下载、编译、安装新版<code>SQLite</code></h3><h4 id="1-下载新版sqlite"><a href="#1-下载新版sqlite" class="headerlink" title="1.下载新版sqlite"></a>1.下载新版sqlite</h4><p>注：此处给两种下载方法，都可以使</p><p>（1）下载前需要建立一个文件夹，用于放置压缩包。此处选择&#x2F;home为主目录，可以根据自身习惯更改下载存储地址。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /root/sqlite3</span><br></pre></td></tr></table></figure><h4 id="2-使用wget下载"><a href="#2-使用wget下载" class="headerlink" title="2.使用wget下载"></a>2.使用wget下载</h4><p>到SQLite官网的下载页面：<a href="https://sqlite.org/download.html">https://sqlite.org/download.html</a> 这里是最新的版本。</p><p><img src="https://s2.loli.net/2024/06/01/cZBAPEHd2DfwgSm.png" alt="在这里插入图片描述"></p><p>源码有两个文件，选择第二个（<code>sqlite-autoconf-3420000.tar.gz</code>），因为这个有配置文件。复制其链接，然后在终端执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/tools/sqlite3  <span class="comment">#切换到下载路径</span></span><br><span class="line">wget https://www.sqlite.org/2024/sqlite-autoconf-3460000.tar.gz  <span class="comment">#执行下载</span></span><br></pre></td></tr></table></figure><p>等待下载完毕即可</p><h3 id="3-本地下载，再上传到云服务器"><a href="#3-本地下载，再上传到云服务器" class="headerlink" title="3.本地下载，再上传到云服务器"></a>3.本地下载，再上传到云服务器</h3><p>还是这个网址：<a href="https://sqlite.org/download.html">https://sqlite.org/download.html</a> ，然后点击（sqlite-autoconf-3420000.tar.gz）直接下载到Windows本地</p><p>然后通过electerm的sftp直接上传到&#x2F;home&#x2F;tools&#x2F;sqlite3</p><p>上传方式不一，自行选择（Xshell或者Winscp都可)</p><h3 id="4-解压"><a href="#4-解压" class="headerlink" title="4.解压"></a>4.解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf sqlite-autoconf-3420000.tar.gz </span><br></pre></td></tr></table></figure><p>解压后可以看到有新的文件夹：sqlite-autoconf-3420000，进入该目录进行sqlite3的编译和安装。</p><p><img src="https://s2.loli.net/2024/06/01/QRNo3wVPsOFUBeq.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> sqlite-autoconf-3420000</span><br></pre></td></tr></table></figure><h3 id="2-编译和安装"><a href="#2-编译和安装" class="headerlink" title="2.编译和安装"></a>2.编译和安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># （1）新建安装目录（根据自己习惯选择安装路径）</span></span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/sqlite3.42</span><br><span class="line"><span class="comment"># （2）编译</span></span><br><span class="line">./configure --prefix=/usr/local/sqlite3.42/</span><br><span class="line"><span class="comment"># 固定语法，‘–prefix’后接安装路径。结束时提示：Complete!即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （3）安装</span></span><br><span class="line">make clean   <span class="comment"># 清除缓存</span></span><br><span class="line">make &amp;&amp; make install  <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure><p>提示：Successfully…即可，否则清除缓存后，重新编译</p><p>以上述方式安装后，会把编译好的二进制文件安装到<code>/usr/local/sqlite3.42/lib</code>， 把头文件<code>sqlite3.h sqlite3ext.h</code>安装到<code>/usr/local/sqlite3.42/include</code>，我们需要知道这两个路径。</p><h4 id="（4）建立软连接（快捷方式）"><a href="#（4）建立软连接（快捷方式）" class="headerlink" title="（4）建立软连接（快捷方式）"></a>（4）建立软连接（快捷方式）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin   <span class="comment"># 切换到bin路径</span></span><br><span class="line"><span class="built_in">ls</span> -la sqlite*  <span class="comment"># 查看sqlite已经存在的软连接</span></span><br><span class="line">若提示：<span class="built_in">ls</span>: cannot access sqlite*: No such file or directory。则还未建立软连接，直接执行下面的代码，建立软连接即可</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/sqlite3.42/bin/sqlite3 /usr/bin/sqlite3</span><br></pre></td></tr></table></figure><p>注：其中<code>/usr/local/sqlite3.42/bin/sqlite3</code>为sqlite3的安装路径下的bin路径中的sqlite3，<code>/usr/bin/sqlite3</code>为固定位置</p><p>若显示</p><p><img src="https://s2.loli.net/2024/06/01/DKIgqOE1vpbc8sk.png" alt="在这里插入图片描述"></p><p>需要先删除该软连接，再新建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf sqlite3   <span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/sqlite3.42/bin/sqlite3 /usr/bin/sqlite3   <span class="comment"># 新建</span></span><br><span class="line"><span class="built_in">ls</span> -la sqlite*  <span class="comment"># 查看软连接</span></span><br><span class="line">sqlite3 --version  <span class="comment"># 查看版本</span></span><br></pre></td></tr></table></figure><p>最终效果为</p><p><img src="https://s2.loli.net/2024/06/01/zeOsb495yZ2nRmH.png" alt="在这里插入图片描述"></p><h5 id="（5）配置系统lib库"><a href="#（5）配置系统lib库" class="headerlink" title="（5）配置系统lib库"></a>（5）配置系统lib库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/local/sqlite3.42/lib&quot;</span> &gt; /etc/ld.so.conf.d/sqlite3.conf</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><h3 id="三、下载、编译和安装Python3"><a href="#三、下载、编译和安装Python3" class="headerlink" title="三、下载、编译和安装Python3"></a>三、下载、编译和安装Python3</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p>下载方法和sqlite3的下载相似。本文安装的python3.8.12版本，官网地址为：<a href="https://www.python.org/ftp/python/3.8.12/">https://www.python.org/ftp/python/3.8.12/</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/tools/python3    <span class="comment"># 新建下载存储路径</span></span><br><span class="line"><span class="built_in">cd</span> /home/tools/python3    <span class="comment"># 切换到存储路径</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tar.xz  <span class="comment"># 使用wget直接下载</span></span><br></pre></td></tr></table></figure><p>同样的，也可以在本地下载之后，通过ftp上传。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.8.12.tgz  <span class="comment"># 解压</span></span><br></pre></td></tr></table></figure><p>解压之后可以看到多了一个文件夹，直接切换过去</p><p><img src="https://s2.loli.net/2024/06/01/XrVREg3cFvqDQLl.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Python-3.8.12/</span><br></pre></td></tr></table></figure><h4 id="2-编译安装"><a href="#2-编译安装" class="headerlink" title="2.编译安装"></a>2.编译安装</h4><h5 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h5><p>编译安装之前建议在&#x2F;usr&#x2F;local路径下建立安装路径（根据自身习惯选择）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/python3</span><br></pre></td></tr></table></figure><p>原本python3的编译为下面的方法，但是，没有加参数的默认安装，python会自动导入原版本的sqlite3.7.17，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/tools/python/Python-3.8.12/   <span class="comment"># 切换到解压后的路径</span></span><br><span class="line">./configure --prefix=/usr/local/python3  <span class="comment"># 编译，‘--prefix’后接安装路径</span></span><br><span class="line">make clean   <span class="comment"># 清除缓存</span></span><br><span class="line">make &amp;&amp; make install   <span class="comment"># 安装 </span></span><br></pre></td></tr></table></figure><p>将上述代码修改为:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/tools/python/Python-3.8.12/   <span class="comment"># 切换到解压后的路径</span></span><br><span class="line"><span class="comment"># 编译，‘--prefix’后接安装路径，其中LD_RUN_PATH和LDFLAGS为sqlite3的二进制文件位置路径，CPPFLAGS是头文件的位置路径。上面安装sqlite3时已经提到。</span></span><br><span class="line">LD_RUN_PATH=/usr/local/sqlite3.42/lib/ ./configure LDFLAGS=<span class="string">&quot;-L/usr/local/sqlite3.42/lib&quot;</span> CPPFLAGS=<span class="string">&quot;-I/usr/local/sqlite3.42/include&quot;</span>  --prefix=/usr/local/python3/ --enable-shared --with-ssl</span><br><span class="line"></span><br><span class="line">LD_RUN_PATH=/usr/local/sqlite3.42/lib/ make  <span class="comment"># 编译时将sqlite3的二进制文件路径添加到动态链接库的搜索路径中</span></span><br><span class="line">make clean   <span class="comment"># 清除缓存</span></span><br><span class="line">make &amp;&amp; make install  <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure><h5 id="（2）建立软连接（快捷方式）"><a href="#（2）建立软连接（快捷方式）" class="headerlink" title="（2）建立软连接（快捷方式）"></a>（2）建立软连接（快捷方式）</h5><p>建立方法与sqlite3的软连接建立方式相同</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la python*   <span class="comment"># 查看python已存在的软连接</span></span><br></pre></td></tr></table></figure><p>一般情况下，如果是新建立的系统，会存在以下三个软连接</p><p><img src="https://s2.loli.net/2024/06/01/2FJ7YEy9gHd56N8.png" alt="在这里插入图片描述"></p><p>以上软连接不做更改（因为很多系统命令会依赖python2.7），直接新建一个python3的软连接即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><p>最终效果</p><p>至此，sqlite3和python3已经安装并且连接好了，可进行如下验证</p><p><img src="https://s2.loli.net/2024/06/01/KkVGCsJPiF1hAwR.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZf8z170cg4zcnds9u2p10Z bin]# python3   <span class="comment"># 进入python3</span></span><br><span class="line">Python 3.8.12 (default, Jun  5 2023, 16:00:05) </span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-44)] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; import sqlite3</span><br><span class="line">&gt;&gt;&gt; sqlite3.sqlite_version</span><br><span class="line"><span class="string">&#x27;3.42.0&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">exit</span>()</span><br></pre></td></tr></table></figure><p>可以看到，其中python版本为3.8.12，并且python3内的sqlite3版本为3.42.0，升级成功</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;概要：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Python/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="SQLite" scheme="https://kanoc.gitee.io/tags/SQLite/"/>
    
    <category term="error" scheme="https://kanoc.gitee.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>【爬虫】巧用-js2py-（附带bug解决）</title>
    <link href="https://kanoc.gitee.io/2024/05/25/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E5%B7%A7%E7%94%A8-js2py-%EF%BC%88%E9%99%84%E5%B8%A6bug%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <id>https://kanoc.gitee.io/2024/05/25/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E5%B7%A7%E7%94%A8-js2py-%EF%BC%88%E9%99%84%E5%B8%A6bug%E8%A7%A3%E5%86%B3%EF%BC%89/</id>
    <published>2024-05-24T16:51:51.000Z</published>
    <updated>2025-06-09T10:06:55.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【爬虫】巧用-js2py-（附带bug解决）："><a href="#【爬虫】巧用-js2py-（附带bug解决）：" class="headerlink" title="【爬虫】巧用-js2py-（附带bug解决）："></a><font color=#00b2c2 size=5 face=宋体><strong>【爬虫】巧用-js2py-（附带bug解决）：</strong></font></h1><span id="more"></span><p>本文搬运自CSDN：<a href="https://blog.csdn.net/sc_lilei/article/details/100122347">传送阵</a></p><p>项目地址： <a href="https://github.com/PiotrDabkowski/Js2Py">https://github.com/PiotrDabkowski/Js2Py</a></p><p>项目介绍：（根据github）此项目完全用Python编写，支持Python2&#x2F;3。可以在Python中执行JS代码，并获取JS对象值。</p><p>目前支持ES5，ES6仍在测试中。</p><p>一句话解释：一个纯Python的JS解释器。</p><p>推荐指数：四颗星  （博主用过其他的库如execjs, pyv8，多多少少都没有这个库的功能完备）</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install js2py</span><br></pre></td></tr></table></figure><p>本文主要介绍js2py的EvalJs对象，因为它是功能最完备的。</p><h2 id="1-执行简单的JS代码"><a href="#1-执行简单的JS代码" class="headerlink" title="1. 执行简单的JS代码"></a>1. 执行简单的JS代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line">js = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    a =1 </span></span><br><span class="line"><span class="string">    b =1</span></span><br><span class="line"><span class="string">    function f(x)&#123;</span></span><br><span class="line"><span class="string">        return x*x</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">ctx = js2py.EvalJs()  <span class="comment"># 初始化context对象</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.a)  <span class="comment"># &gt;&gt;1   获取js变量</span></span><br><span class="line"><span class="built_in">print</span>(ctx.f(<span class="number">9</span>))  <span class="comment"># &gt;&gt;81  执行js函数</span></span><br></pre></td></tr></table></figure><p>说明：EvalJs对象支持在同一个上下文中执行多次多段js代码，并能通过属性的方式获取js变量，非常好用。</p><h2 id="2-Python与JS对象交互"><a href="#2-Python与JS对象交互" class="headerlink" title="2. Python与JS对象交互"></a><strong>2. Python与JS对象交互</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line">js = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function f(arg1, arg2)&#123;</span></span><br><span class="line"><span class="string">        return arg1+arg2</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    end = f(a,b)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">ctx = js2py.EvalJs(context=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)  <span class="comment"># 初始化context对象,通过字典形式传入python对象与js交互</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.end)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="3-在JS代码中引入外部JS库-需要安装nodejs环境"><a href="#3-在JS代码中引入外部JS库-需要安装nodejs环境" class="headerlink" title="3. 在JS代码中引入外部JS库(需要安装nodejs环境)"></a><strong>3. 在JS代码中引入外部JS库(需要安装nodejs环境)</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line">js = <span class="string">&quot;&quot;&quot;var path = require(&#x27;path&#x27;)</span></span><br><span class="line"><span class="string">        p=path.join(&#x27;/foo/bar&#x27;, &#x27;file&#x27;)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">ctx = js2py.EvalJs(enable_require=<span class="literal">True</span>)  <span class="comment"># 开启require功能</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.p)  <span class="comment"># /foo/bar/file</span></span><br><span class="line">js = <span class="string">&quot;&quot;&quot;p = p+p&quot;&quot;&quot;</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.p)  <span class="comment"># /foo/bar/file/foo/bar/file</span></span><br></pre></td></tr></table></figure><p>关于require在js2py中使用有个bug，会在最后说明。</p><h2 id="4-Python与JS混编"><a href="#4-Python与JS混编" class="headerlink" title="4. Python与JS混编"></a><strong>4. Python与JS混编</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CryptoJS = js2py.require(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line">data = [&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">2</span>&#125;]</span><br><span class="line">JSON = js2py.eval_js(<span class="string">&#x27;JSON&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">ciphertext = CryptoJS.AES.encrypt(JSON.stringify(data), <span class="string">&#x27;secret key 123&#x27;</span>)</span><br><span class="line"><span class="built_in">bytes</span> = CryptoJS.AES.decrypt(ciphertext.toString(), <span class="string">&#x27;secret key 123&#x27;</span>)</span><br><span class="line">decryptedData = JSON.parse(<span class="built_in">bytes</span>.toString(CryptoJS.enc.Utf8)).to_list()</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(decryptedData)  <span class="comment"># [&#123;&#x27;id&#x27;:1&#125;, &#123;&#x27;id&#x27;:2&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="5-最后"><a href="#5-最后" class="headerlink" title="5. 最后"></a>5. 最后</h2><p>在对js2py这个库的摸索使用中，发现了不少的问题(bug)，发现作者最后一次处理issue是在2018年11月了，超过20个issue未处理，博主也把遇到的问题提了两个上去，不知道能不能收到回复。</p><p>博主修复的bug：在windows 10 上使用这个库执行带有require语句的JS代码时遇到的错误</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Could <span class="keyword">not</span> link required node_modules</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：经过反复测试与检查，发现是subprocess库在windows上执行shell命令有bug。具体是这样，在Python包安装路径下的js2py&#x2F;node_import.py的17行有以下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> subprocess.call(</span><br><span class="line">        <span class="string">&#x27;cd %s;npm install babel-core babel-cli babel-preset-es2015 babel-polyfill babelify browserify browserify-shim&#x27;</span></span><br><span class="line">        % <span class="built_in">repr</span>(DIRNAME),</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        cwd=DIRNAME) == <span class="number">0</span>, <span class="string">&#x27;Could not link required node_modules&#x27;</span></span><br></pre></td></tr></table></figure><p>其实这里作者的cd命令是多余的，因为cwd参数已经指定了命令的执行路径，无需再cd进入路径。</p><p>除了这里，还要修改这个文件第79行，一样的问题。</p><p>最后友情提醒，如果你的环境不能科学上网，你最好修改一下npm的源：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>避免网络问题导致不必要的麻烦，因为执行的JS代码依赖外部库时，这个库会在后台执行npm install操作(仅一次)。</p><p><strong>其他：</strong></p><p>因为博主也是搞爬虫的，所有有时会用到这样的库，这次就做一下完整的记录，助己助人。</p><p>本博客欢迎留言 :) </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;【爬虫】巧用-js2py-（附带bug解决）：&quot;&gt;&lt;a href=&quot;#【爬虫】巧用-js2py-（附带bug解决）：&quot; class=&quot;headerlink&quot; title=&quot;【爬虫】巧用-js2py-（附带bug解决）：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;【爬虫】巧用-js2py-（附带bug解决）：&lt;/strong&gt;&lt;/font&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="_A7-逆向" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/"/>
    
    <category term="JavaScript" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/JavaScript/"/>
    
    
    <category term="Js" scheme="https://kanoc.gitee.io/tags/Js/"/>
    
    <category term="js2py" scheme="https://kanoc.gitee.io/tags/js2py/"/>
    
  </entry>
  
  <entry>
    <title>网站克隆工具-httrack</title>
    <link href="https://kanoc.gitee.io/2024/05/24/%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86%E5%B7%A5%E5%85%B7-httrack/"/>
    <id>https://kanoc.gitee.io/2024/05/24/%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86%E5%B7%A5%E5%85%B7-httrack/</id>
    <published>2024-05-23T19:36:36.000Z</published>
    <updated>2025-06-09T04:06:35.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站克隆工具-httrack："><a href="#网站克隆工具-httrack：" class="headerlink" title="网站克隆工具-httrack："></a><font color=#00b2c2 size=5 face=宋体><strong>网站克隆工具-httrack：</strong></font></h2><span id="more"></span><p>本文搬运自<a href="https://blog.csdn.net/qq_32393893/article/details/105049728">kali-网站克隆工具-httrack_kali克隆网站-CSDN博客</a></p><p><font color=#f26522 size=4 face=宋体><strong>以下为 kali命令，如果是mac的同学，请自行使用<code>brew</code> 替换 <code>apt-get</code>即可</strong></font></p><p>HTTrack是一款网站克隆工具，主要用户克隆网站。渗透测试人员可以将目标网站克隆到本地进行查看，包含了所有的页面和离线文件，是可以进行社会工程学攻击，是钓鱼网站的利器。</p><h3 id="1，安装"><a href="#1，安装" class="headerlink" title="1，安装"></a>1，安装</h3><p><strong><code>sudo apt-get isntall httarck</code></strong></p><p><img src="https://s2.loli.net/2024/05/24/NputOms3gJha7IB.png"></p><p><font color=#b0171f size=3 face=宋体><strong>（如果已经安装了，就会像上图这样）</strong></font></p><h3 id="2，新建一个文件夹放置下载的网站"><a href="#2，新建一个文件夹放置下载的网站" class="headerlink" title="2，新建一个文件夹放置下载的网站"></a>2，新建一个文件夹放置下载的网站</h3><p><strong><code>mkdir site</code></strong></p><p><img src="https://s2.loli.net/2024/05/24/jcJ4LeKEPmY87bi.png"></p><h3 id="3，切换到新建的文件夹中"><a href="#3，切换到新建的文件夹中" class="headerlink" title="3，切换到新建的文件夹中"></a>3，切换到新建的文件夹中</h3><p><strong><code>cd site</code></strong></p><h3 id="4，启动httrack"><a href="#4，启动httrack" class="headerlink" title="4，启动httrack"></a>4，启动httrack</h3><p><strong><code>httrack</code></strong></p><h3 id="5，进行设置"><a href="#5，进行设置" class="headerlink" title="5，进行设置"></a>5，进行设置</h3><p><img src="https://s2.loli.net/2024/05/24/Phwa4YpE8u32LVJ.png"></p><h3 id="6，已经将网站保存在本地了"><a href="#6，已经将网站保存在本地了" class="headerlink" title="6，已经将网站保存在本地了"></a>6，已经将网站保存在本地了</h3><p><img src="https://s2.loli.net/2024/05/24/CigUqDpQuRf1VvJ.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;网站克隆工具-httrack：&quot;&gt;&lt;a href=&quot;#网站克隆工具-httrack：&quot; class=&quot;headerlink&quot; title=&quot;网站克隆工具-httrack：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;网站克隆工具-httrack：&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="网站克隆工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://kanoc.gitee.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="克隆" scheme="https://kanoc.gitee.io/tags/%E5%85%8B%E9%9A%86/"/>
    
    <category term="网站" scheme="https://kanoc.gitee.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>收藏-常用脚本</title>
    <link href="https://kanoc.gitee.io/2024/05/11/%E6%94%B6%E8%97%8F-%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <id>https://kanoc.gitee.io/2024/05/11/%E6%94%B6%E8%97%8F-%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2024-05-11T05:02:13.000Z</published>
    <updated>2025-06-09T04:02:31.963Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>收藏-常用脚本：</strong></font></p><span id="more"></span><p>[Python、Go 打包运行代码 ](<a href="https://blog.teadan.com/2024/04/02/Python%E3%80%81Go">https://blog.teadan.com/2024/04/02/Python、Go</a> 打包运行代码&#x2F;)</p><p><a href="https://blog.teadan.com/2024/03/20/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%8C%85(requirements.txt)%E7%9A%84%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AE%89%E8%A3%85/">python-虚拟环境包(requirements.txt)的导出与安装 </a></p><p><a href="https://blog.teadan.com/2023/03/20/Nginx%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Nginx跨域解决方案 </a></p><p><a href="https://blog.teadan.com/2023/05/22/Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Django_学习笔记 </a></p><p><a href="https://blog.teadan.com/2023/03/20/%E5%85%B3%E4%BA%8EJet-Brains%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E8%8E%B7%E5%8F%96/">关于Jet Brains历史版本获取 </a></p><p><a href="https://blog.teadan.com/2024/03/20/django-%E8%B7%A8%E5%9F%9F%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE/">django-跨域支持配置 </a></p><p><a href="https://blog.teadan.com/2023/03/20/%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2Django%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4Supervisor/">宝塔部署Django进程守护Supervisor</a></p><p><a href="https://blog.teadan.com/2024/05/01/pip-%E6%9B%B4%E6%8D%A2%E6%BA%90/">pip-更换源 </a></p><p><a href="https://blog.teadan.com/2024/04/24/%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7-%E4%BB%A3%E7%A0%81%E7%B1%BB/">必备工具-代码类 </a></p><p><a href="https://blog.teadan.com/2024/04/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E8%AE%BF%E9%97%AE%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8/">一键搞定多层跳板访问目标机器 </a></p><p><a href="https://blog.teadan.com/2024/01/25/Shadowsocks-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/">Shadowsocks 一键安装脚本（四合一） </a></p><p><a href="https://blog.teadan.com/2023/07/11/%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/">必备工具 </a></p><p><a href="https://blog.teadan.com/2023/06/13/centos%E6%B5%8B%E7%BD%91%E9%80%9F%E8%84%9A%E6%9C%AC/">centos测网速脚本 </a></p><p><a href="https://blog.teadan.com/2023/05/27/python-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BF%94%E5%9B%9E%E5%80%BC/">python 时间格式返回值 </a></p><p><a href="https://blog.teadan.com/2023/03/20/ThreadPoolExecutor%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%94%E5%9B%9E%E5%80%BC/">ThreadPoolExecutor多线程返回值 </a></p><p><a href="https://blog.teadan.com/2023/03/20/V2ray%E5%AE%98%E6%96%B9%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC-2021-10/">V2ray官方一键安装脚本(2021&#x2F;10) </a></p><p><a href="https://blog.teadan.com/2023/03/20/m3u8%E4%B8%8B%E8%BD%BD%E5%8D%8F%E8%AE%AE%E4%B8%8D%E5%9C%A8%E7%99%BD%E5%90%8D%E5%8D%95/">m3u8下载协议不在白名单 </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;收藏-常用脚本：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="常用脚本" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="收藏" scheme="https://kanoc.gitee.io/tags/%E6%94%B6%E8%97%8F/"/>
    
    <category term="常用脚本" scheme="https://kanoc.gitee.io/tags/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>移动光猫-吉比特 H3-1S H3-2S获取超级密码方法(亲测可用！！)</title>
    <link href="https://kanoc.gitee.io/2024/04/15/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%AB-%E5%90%89%E6%AF%94%E7%89%B9-H3-1S-H3-2S%E8%8E%B7%E5%8F%96%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95-%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8%EF%BC%81%EF%BC%81/"/>
    <id>https://kanoc.gitee.io/2024/04/15/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%AB-%E5%90%89%E6%AF%94%E7%89%B9-H3-1S-H3-2S%E8%8E%B7%E5%8F%96%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95-%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8%EF%BC%81%EF%BC%81/</id>
    <published>2024-04-15T11:56:17.000Z</published>
    <updated>2025-06-09T07:41:53.514Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><strong>移动光猫-吉比特 H3-1S H3-2S获取超级密码方法</strong>:</strong></font></p><span id="more"></span><p><font color=#f26522 size=4 face=宋体><strong>1.使用光猫背后的普通用户名登录进光猫，浏览器复制以下链接打开</strong></font></p><p><a href="http://192.168.1.1/usr=CMCCAdmin&psw=aDm8H%MdA&cmd=1&telnet.gch">http://192.168.1.1/usr=CMCCAdmin ... md=1&amp;telnet.gch</a></p><p><font color=#f26522 size=4 face=宋体><strong>2.电脑启用 telnet</strong></font></p><p><img src="https://s2.loli.net/2024/05/09/uKpnNMcji45sfxv.png" alt="开启telnet成功"></p><p><font color=#f26522 size=4 face=宋体><strong>3.通过telnet进入光猫</strong></font></p><p>输入：</p><p><code>telnet 192.168.1.1</code></p><p>用户名、密码如下：<br><code>CMCCAdmin</code><br><code>aDm8H%MdA</code></p><p><font color=red size=3 face=宋体><strong>注意：密码默认不显示 不需要重复输入</strong></font></p><p><img src="https://s2.loli.net/2024/05/09/4riCBgt57fanybh.png" alt="连接状态"><br><font color=#f26522 size=4 face=宋体><strong>4.查看一下登陆信息,可以看到账号密码全部进行了加密</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sidbg 1 DB p DevAuthInfo</span><br></pre></td></tr></table></figure><p>输入上面的命令后将会显示下面的内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Tbl name=<span class="string">&quot;DevAuthInfo&quot;</span> RowCount=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">&lt;Row No=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ViewName&quot;</span> val=<span class="string">&quot;IGD.AU1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Enable&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;IsOnline&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;AppID&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;User&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Pass&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Level&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Extra&quot;</span> val=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ExtraInt&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;/Row&gt;</span><br><span class="line">&lt;Row No=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ViewName&quot;</span> val=<span class="string">&quot;IGD.AU2&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Enable&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;IsOnline&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;AppID&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;User&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Pass&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Level&quot;</span> val=<span class="string">&quot;2&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Extra&quot;</span> val=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ExtraInt&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;/Row&gt;</span><br><span class="line">&lt;/Tbl&gt; </span><br></pre></td></tr></table></figure><p><font color=#f26522 size=4 face=宋体><strong>5.修改CMCCAdmin用户的登录密码</strong></font></p><p>输入下面的命令更改CMCCAdmin的密码：</p><p>sidbg 1 DB set DevAuthInfo 0 Pass admin</p><p>Pass后面是CMCCAdmin的登录密码</p><p>再输入下面的命令保存即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sidbg 1 DB save</span><br></pre></td></tr></table></figure><p>完成后即可使用CMCCAdmin+更改后的密码即可登录光猫后台。</p><p>祝各位使用愉快！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;strong&gt;移动光猫-吉比特 H3-1S H3-2S获取超级密码方法&lt;/strong&gt;:&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_S9-折腾" scheme="https://kanoc.gitee.io/categories/S9-%E6%8A%98%E8%85%BE/"/>
    
    <category term="光猫" scheme="https://kanoc.gitee.io/categories/S9-%E6%8A%98%E8%85%BE/%E5%85%89%E7%8C%AB/"/>
    
    
    <category term="运维" scheme="https://kanoc.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="移动" scheme="https://kanoc.gitee.io/tags/%E7%A7%BB%E5%8A%A8/"/>
    
    <category term="光猫" scheme="https://kanoc.gitee.io/tags/%E5%85%89%E7%8C%AB/"/>
    
    <category term="超级用户" scheme="https://kanoc.gitee.io/tags/%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7/"/>
    
  </entry>
  
</feed>
