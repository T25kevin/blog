<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://kanoc.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://kanoc.gitee.io/"/>
  <updated>2025-06-09T08:37:54.419Z</updated>
  <id>https://kanoc.gitee.io/</id>
  
  <author>
    <name>Kanoc Ge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django配置-channels-WS的ASGI服务器</title>
    <link href="https://kanoc.gitee.io/2025/05/22/Django%E9%85%8D%E7%BD%AE-channels-WS%E7%9A%84ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://kanoc.gitee.io/2025/05/22/Django%E9%85%8D%E7%BD%AE-channels-WS%E7%9A%84ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2025-05-22T01:06:19.000Z</published>
    <updated>2025-06-09T08:37:54.419Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Django配置-channels-WS的ASGI服务器</strong></font></p><span id="more"></span><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>该环境几乎算是目前最新的版本的asgi服务器了</p><ul><li><p>系统环境：MacOS（M系列）</p></li><li><p>Python版本：<code>3.12</code></p></li><li><p>Django版本：<code>5.1.7</code></p></li><li><p>daphne版本：<code>4.2.0</code></p></li><li><p>channels版本：<code>4.2.2</code></p></li><li><p>asgiref版本：<code>3.8.1</code></p></li></ul><p><img src="https://s2.loli.net/2025/05/22/IktHlRLTXoCMpZq.png" alt="image-20250522090858536"></p><h2 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── MyPorject</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── routing.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── apps</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   └── consumers.cpython-312.pyc</span><br><span class="line">│   ├── consumers.py（位于主app下）</span><br><span class="line">│   └── **其他app**</span><br><span class="line">├── manage.py</span><br></pre></td></tr></table></figure><h2 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a>特别说明：</h2><p><font color=red size=4 face=宋体><strong><code>channels</code> 大于 3.0.5 必须配置<code>daphne</code>或者<code>uvicorn</code>使用</strong></font></p><h3 id="第一步：安装带达芙妮的-channels版本，以及其他环境"><a href="#第一步：安装带达芙妮的-channels版本，以及其他环境" class="headerlink" title="第一步：安装带达芙妮的 channels版本，以及其他环境"></a>第一步：安装带<code>达芙妮</code>的 <code>channels</code>版本，以及其他环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install channels[daphne]</span><br><span class="line"><span class="comment"># daphne==4.2.0  channels==4.2.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Django</span></span><br><span class="line">pip install Django==5.1.7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装 asgiref</span></span><br><span class="line">pip install asgiref==3.8.1</span><br></pre></td></tr></table></figure><h3 id="第二步：配置-MyPorject-settings-py"><a href="#第二步：配置-MyPorject-settings-py" class="headerlink" title="第二步：配置 MyPorject__settings.py"></a>第二步：配置 <code>MyPorject__settings.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;daphne&quot;</span>,</span><br><span class="line">    <span class="string">&quot;其他app&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启 ASGI访问</span></span><br><span class="line">WSGI_APPLICATION = <span class="string">&#x27;MyPorject.wsgi.application&#x27;</span></span><br><span class="line"><span class="comment"># 添加 Channels 配置</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">&#x27;MyPorject.asgi.application&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第三步：配置-MyPorject-asgi-py"><a href="#第三步：配置-MyPorject-asgi-py" class="headerlink" title="第三步：配置 MyPorject__asgi.py"></a>第三步：配置 <code>MyPorject__asgi.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> routing</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;MyPorject.settings&#x27;</span>)</span><br><span class="line">django_asgi_app = get_asgi_application()</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: django_asgi_app,</span><br><span class="line">    <span class="string">&quot;websocket&quot;</span>: URLRouter(routing.websocket_urlpatterns)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步：新建-MyPorject-routing-py"><a href="#第四步：新建-MyPorject-routing-py" class="headerlink" title="第四步：新建 MyPorject__routing.py"></a>第四步：新建 <code>MyPorject__routing.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yourapp/routing.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> apps <span class="keyword">import</span> consumers</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">    <span class="comment"># xxxx/ws/x1</span></span><br><span class="line">    path(<span class="string">&#x27;ws&#x27;</span>, consumers.ChatConsumer.as_asgi()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="第五步：新建-MyPorject-apps-consumers-py"><a href="#第五步：新建-MyPorject-apps-consumers-py" class="headerlink" title="第五步：新建 MyPorject__apps__consumers.py"></a>第五步：新建 <code>MyPorject__apps__consumers.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> AsyncWebsocketConsumer</span><br><span class="line"><span class="keyword">from</span> channels.exceptions <span class="keyword">import</span> StopConsumer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatConsumer</span>(<span class="title class_ inherited__">AsyncWebsocketConsumer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.clientData = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.SendDataJsonKeys = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">self</span>.accept()</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, close_code=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">raise</span> StopConsumer()</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">receive</span>(<span class="params">self, text_data=<span class="literal">None</span>, bytes_data=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 传递回来的参数的转换</span></span><br><span class="line">            <span class="variable language_">self</span>.clientData = json.loads(text_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;传递过来参数了&quot;</span>, <span class="variable language_">self</span>.clientData)</span><br><span class="line">            <span class="variable language_">self</span>.SendDataJsonKeys = <span class="variable language_">self</span>.clientData.keys()   <span class="comment"># 获取传递上来的参数</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> text_data == <span class="string">&quot;断开&quot;</span>:</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.send(<span class="string">f&quot;<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.send(<span class="string">&quot;网络连接断开！&quot;</span>)</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Django配置-channels-WS的ASGI服务器&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django_channels" scheme="https://kanoc.gitee.io/categories/Python/Django-channels/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="ASGI服务器" scheme="https://kanoc.gitee.io/tags/ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="异步WEB" scheme="https://kanoc.gitee.io/tags/%E5%BC%82%E6%AD%A5WEB/"/>
    
  </entry>
  
  <entry>
    <title>破解cloudflare拦截神器_puppeteer</title>
    <link href="https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/"/>
    <id>https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/</id>
    <published>2025-02-24T18:52:13.000Z</published>
    <updated>2025-06-09T03:57:07.693Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>破解cloudflare拦截神器_puppeteer</strong></font></p><span id="more"></span><h3 id="安装番外：安装node-js环境"><a href="#安装番外：安装node-js环境" class="headerlink" title="安装番外：安装node.js环境"></a>安装番外：安装node.js环境</h3><h4 id="安装nvm管理器"><a href="#安装nvm管理器" class="headerlink" title="安装nvm管理器"></a>安装<code>nvm</code>管理器</h4><ul><li>第1步：mac 安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><ul><li>第2_1步：命令安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第2_2步：国内安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第3步：添加环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、这是本地不存在配置文件的时候提示需要添加的配置</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、这是本地存在配置文件的时候提示需要添加的配置（推荐）</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><ul><li>第4步：加载环境：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>第5步：测试安装是否成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm -v</span><br><span class="line">或</span><br><span class="line">$ nvm use system</span><br></pre></td></tr></table></figure><ul><li>第6步：<code>nvm</code>相关命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install stable</span><br><span class="line">nvm install &lt;version&gt;     <span class="comment"># 安装指定版本 node</span></span><br><span class="line">nvm uninstall &lt;version&gt;   <span class="comment"># 删除指定版本 node</span></span><br><span class="line"></span><br><span class="line">nvm use &lt;version&gt;         <span class="comment"># 切换使用指定的版本 node</span></span><br><span class="line">nvm <span class="built_in">alias</span> default &lt;version&gt;   <span class="comment"># 永久版本 - 所有窗口生效指定版本</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">ls</span>    <span class="comment"># 列出所有安装的版本</span></span><br><span class="line">nvm ls-remote   <span class="comment"># 列出所有远程服务器的版本（官方 node version list）</span></span><br><span class="line">nvm current   <span class="comment"># 显示当前的版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;   <span class="comment"># 给不同的版本号添加别名</span></span><br><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt;   <span class="comment"># 删除已定义的别名</span></span><br><span class="line"></span><br><span class="line">nvm reinstall-packages &lt;version&gt;     <span class="comment"># 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</span></span><br></pre></td></tr></table></figure><h3 id="第一步：安装puppeteer"><a href="#第一步：安装puppeteer" class="headerlink" title="第一步：安装puppeteer"></a>第一步：安装puppeteer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i puppeteer</span><br></pre></td></tr></table></figure><h3 id="第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth"><a href="#第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth" class="headerlink" title="第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth"></a>第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install puppeteer-extra puppeteer-extra-plugin-stealth express</span><br></pre></td></tr></table></figure><h3 id="第三步：使用nodejs获取数据："><a href="#第三步：使用nodejs获取数据：" class="headerlink" title="第三步：使用nodejs获取数据："></a>第三步：使用nodejs获取数据：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StealthPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra-plugin-stealth&#x27;</span>)</span><br><span class="line">puppeteer.<span class="title function_">use</span>(<span class="title class_">StealthPlugin</span>())</span><br><span class="line"><span class="keyword">const</span> &#123;executablePath&#125; = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puppeteer.<span class="title function_">launch</span>(&#123; <span class="attr">headless</span>: <span class="literal">false</span>, <span class="attr">executablePath</span>: <span class="title function_">executablePath</span>() &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> browser =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://xxx.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Promise 来等待</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))  <span class="comment">// 等待 2 秒</span></span><br><span class="line">    <span class="comment">// 获取页面的文本内容</span></span><br><span class="line">    <span class="keyword">const</span> pageContent = <span class="keyword">await</span> page.<span class="title function_">evaluate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span>;  <span class="comment">// 获取页面的所有文本</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印页面文本内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pageContent);</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;cointracker_home.png&#x27;</span>, <span class="attr">fullPage</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步：当然你也可以把他写成接口"><a href="#第四步：当然你也可以把他写成接口" class="headerlink" title="第四步：当然你也可以把他写成接口"></a>第四步：当然你也可以把他写成接口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.....</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;破解cloudflare拦截神器_puppeteer&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A7-逆向" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/"/>
    
    <category term="puppeteer" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/puppeteer/"/>
    
    
    <category term="nodejs" scheme="https://kanoc.gitee.io/tags/nodejs/"/>
    
    <category term="逆向" scheme="https://kanoc.gitee.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="puppeteer" scheme="https://kanoc.gitee.io/tags/puppeteer/"/>
    
    <category term="后端" scheme="https://kanoc.gitee.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你搭建Docker私有仓库Harbor</title>
    <link href="https://kanoc.gitee.io/2025/02/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93Harbor/"/>
    <id>https://kanoc.gitee.io/2025/02/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93Harbor/</id>
    <published>2025-02-16T11:37:35.000Z</published>
    <updated>2025-06-09T07:39:15.791Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>手把手教你搭建Docker私有仓库Harbor</strong></font></p><p>本文搬运自：<a href="https://www.cnblogs.com/sowler/p/18242819">手把手教你搭建Docker私有仓库Harbor - sowler - 博客园</a></p><span id="more"></span><h4 id="1、什么是Docker私有仓库"><a href="#1、什么是Docker私有仓库" class="headerlink" title="1、什么是Docker私有仓库"></a>1、什么是Docker私有仓库</h4><p>Docker私有仓库是用于存储和管理Docker镜像的私有存储库。Docker默认会有一个公共的仓库Docker Hub，而与Docker Hub不同，私有仓库是受限访问的，只有授权用户才能够上传、下载和管理其中的镜像。这种私有仓库可以部署在本地云环境中，用于组织内部开发、测试和生产环境中的容器镜像管理。保证数据安全性。</p><h4 id="2、Docker有哪些私有仓库"><a href="#2、Docker有哪些私有仓库" class="headerlink" title="2、Docker有哪些私有仓库"></a>2、Docker有哪些私有仓库</h4><p><strong>以下是一些常见的Docker私有仓库：</strong></p><ul><li><strong>Harbor</strong>：作为一个企业级的Docker Registry服务，Harbor提供了安全、可信赖的镜像存储和管理功能。它支持RBAC权限控制、镜像复制、镜像签名、漏洞扫描等功能。</li><li><strong>Docker Trusted Registry (DTR)</strong>：由Docker官方推出的企业级Docker私有仓库服务，与Docker Engine紧密集成，支持高度的安全性和可靠性。</li><li><strong>Portus</strong>：一个开源的Docker镜像管理和认证服务，提供用户管理、团队管理、镜像审核等功能，与Docker Registry兼容。</li><li><strong>Nexus Repository Manager</strong>：虽然主要是用于构建和管理Java组件，但也可以用作Docker私有仓库。它具有强大的存储管理和权限控制功能。</li><li><strong>GitLab Container Registry</strong>：GitLab集成了容器注册表功能，允许您存储、管理和分发Docker镜像。这是GitLab自带的功能，无需额外部署。</li><li><strong>AWS Elastic Container Registry (ECR)</strong>：如果使用AWS云服务，可以考虑使用AWS ECR作为私有仓库。它与AWS的其他服务集成紧密，对AWS用户来说是一个方便的选择。</li></ul><p>本篇使用Harbor搭建Docker私有仓库。</p><h4 id="3、Harbor简介"><a href="#3、Harbor简介" class="headerlink" title="3、Harbor简介"></a>3、Harbor简介</h4><p>Harbor是一个开源的企业级Docker Registry服务，它提供了一个安全、可信赖的仓库来存储和管理Docker镜像。Harbor翻译为中文名称为”庇护；居住;”。可以理解为是Docker镜像的”居住环境”或者是镜像的”庇护所”。Harbor最初由VMware公司开发，旨在解决企业级Docker镜像管理的安全和可信任性问题。VMware于2016年发布，在2017年，VMware将Harbor开源，这使得更广泛的社区和组织可以自由地使用和贡献代码。Harbor是一个成熟、功能丰富且安全可靠的企业级Docker Registry服务，为企业容器化应用的部署和管理提供了强大的支持。</p><p>Harbor官网地址：<a href="https://goharbor.io/">Harbor (goharbor.io)</a></p><p>Github开源地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p><h4 id="4、Harbor下载"><a href="#4、Harbor下载" class="headerlink" title="4、Harbor下载"></a>4、Harbor下载</h4><h5 id="4-1、通过Linux命令下载"><a href="#4-1、通过Linux命令下载" class="headerlink" title="4.1、通过Linux命令下载"></a>4.1、通过Linux命令下载</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz</span><br></pre></td></tr></table></figure><h5 id="4-2、GitHub下载"><a href="#4-2、GitHub下载" class="headerlink" title="4.2、GitHub下载"></a>4.2、GitHub下载</h5><p>下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a> 下载离线版本</p><p><img src="https://s2.loli.net/2025/02/16/meHfNQrXgctVMnx.png" alt="img"></p><p>下载成功后，把包通过 <code>xftp</code> 上传到服务器。</p><h5 id="4-3、解压"><a href="#4-3、解压" class="headerlink" title="4.3、解压"></a>4.3、解压</h5><p>解压文件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v2.10.0.tgz </span><br></pre></td></tr></table></figure><h4 id="5、启动Harbor"><a href="#5、启动Harbor" class="headerlink" title="5、启动Harbor"></a>5、启动Harbor</h4><h5 id="5-1、修改配置文件"><a href="#5-1、修改配置文件" class="headerlink" title="5.1、修改配置文件"></a>5.1、修改配置文件</h5><p>复制<code>harbor.yml.tmpl</code> 文件并重命名为<code>harbor.yml</code>修改此配置文件，需要设置hostname、端口、数据库密码等。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml <span class="comment">#拷贝</span></span><br><span class="line"></span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改hostname的值，如果没有域名就使用本机IP地址</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.42</span><span class="number">.133</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置启动端口号</span></span><br><span class="line"><span class="comment"># http related config </span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有申请证书，需要隐藏https</span></span><br><span class="line"><span class="comment">#https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line"><span class="comment">#  port: 443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line"><span class="comment">#  certificate: /your/certificate/path</span></span><br><span class="line"><span class="comment">#  private_key: /your/private/key/path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动成功后，admin用户登录密码</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">AdminHarbor12345</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/02/16/uflyIABjz3amckh.png" alt="img"></p><h5 id="5-2、启动"><a href="#5-2、启动" class="headerlink" title="5.2、启动"></a>5.2、启动</h5><p>配置文件修改成功后，执行 <code>install.sh</code> 脚本进行安装harbor</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./install.sh </span><br></pre></td></tr></table></figure><p>启动报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Step 0]: checking if docker is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 26.1.3</span><br><span class="line"></span><br><span class="line">[Step 1]: checking docker-compose is installed ...</span><br><span class="line">/opt/harbor/common.sh: line 119: docker-compose: command not found</span><br><span class="line">✖ Failed to parse docker-compose version.</span><br></pre></td></tr></table></figure><p>可以看到，该服务器安装的 <code>docker</code> 没有安装 <code>docker-compose</code> 插件</p><h5 id="5-3、安装docker-compose"><a href="#5-3、安装docker-compose" class="headerlink" title="5.3、安装docker-compose"></a>5.3、安装docker-compose</h5><p>进入<code>docker-compose</code> 官网下载执行文件，地址： <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 下载成功后，把可执行文件加入<code>Linux</code> 系统命令目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> docker-compose-linux-x86_64 /usr/local/bin/</span><br></pre></td></tr></table></figure><p>重命名：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> docker-compose-linux-x86_64 docker-compose</span><br></pre></td></tr></table></figure><p>授权：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>执行命令查看是否安装成功：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果需要卸载，直接删除即可：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h5 id="5-4、再次启动"><a href="#5-4、再次启动" class="headerlink" title="5.4、再次启动"></a>5.4、再次启动</h5><p>再次执行 <code>./install.sh</code></p><p><img src="https://s2.loli.net/2025/02/16/ilOpYecKCy7wGTZ.png" alt="img"></p><p>提示安装成功。接下来就可以访问Harbor了。访问IP+端口：<a href="http://192.168.42.133:5000/">http://192.168.42.133:5000</a><br><img src="https://s2.loli.net/2025/02/16/FrRKhnkacDUV8lG.png" alt="img"></p><p>访问成功，由于Harbor是通过docker管理的，所以启动非常方便。如果首页访问成功说明Docker私有仓库已经部署成功了。</p><h4 id="6、Harbor-Web页面操作说明"><a href="#6、Harbor-Web页面操作说明" class="headerlink" title="6、Harbor Web页面操作说明"></a>6、Harbor Web页面操作说明</h4><p>默认用户名是admin，密码是启动时设置的密码：<code>AdminHarbor12345</code></p><p><img src="https://s2.loli.net/2025/02/16/9SnuUoJsKBzCFpA.png" alt="img"></p><p>登录成功进入主页面了。从系统首页可以看到系统分为三个菜单：项目、日志、系统管理。</p><h5 id="6-1、项目"><a href="#6-1、项目" class="headerlink" title="6.1、项目"></a>6.1、项目</h5><p>项目管理顾名思义就是用来管理项目的。可以为每一个开发项目创建一个私有项目库，然后把Docker镜像存储到指定的项目中，为每个项目实现项目镜像隔离。创建项目的时候，Harbor提供了公开库（public repository）和私有库（private repository）两种类型的镜像存储空间。</p><p><img src="https://s2.loli.net/2025/02/16/F34W9pclPBSkQHa.png" alt="img"></p><p>通过详情信息可以看到：<strong>公开库中的镜像是对所有用户可见和可访问的，任何人都可以查看和拉取其中的镜像。而私有库中的镜像则需要登录才能访问控制，只有被授权的用户或团队才能够查看、拉取和推送镜像。</strong> 可以根据需要创建相关的项目。</p><p><img src="https://s2.loli.net/2025/02/16/l1pfKPiZngO9sXW.png" alt="img"></p><p>项目创建成功后，可以点击进入项目。在里面可以为每个项目单独设置不同的配置信息。可以为每一个项目添加成员信息。</p><p><img src="https://s2.loli.net/2025/02/16/yBMfu4NG6PHYxdX.png" alt="img"></p><p>角色权限说明：</p><ul><li>**项目管理员（Project Administrator）：**拥有项目的最高权限，可以对项目进行全面管理，包括创建和删除项目、管理项目成员和权限、配置项目属性、查看项目日志等。</li><li>**维护人员（Maintainer）：**类似于项目管理员，但权限稍低，通常用于协助管理项目，可以进行项目的部分管理操作，如添加和删除镜像、配置镜像的复制和同步规则等。</li><li>**开发者（Developer）：**具有对项目中镜像仓库的读写权限，可以拉取、推送和删除镜像，以及管理部分项目配置，但不能进行项目管理操作。</li><li>**访客（Guest）：**只具有对项目中镜像仓库的只读权限，可以查看镜像和元数据，但无法对镜像进行修改或删除操作。通常用于分享项目或镜像给外部团队或用户。</li><li>**受限访客（Restricted Guest）：**是一种更加受限的访客角色，通常用于提供给外部用户或系统，具有对项目中镜像仓库的只读权限，但可能会限制访问的部分内容或功能。</li></ul><p>在右上角显示推送命令，可以通过提示命令进行docker镜像推送。</p><p><img src="https://s2.loli.net/2025/02/16/RFEucUsbXL2jYyG.png" alt="img"></p><h5 id="6-2、日志"><a href="#6-2、日志" class="headerlink" title="6.2、日志"></a>6.2、日志</h5><p>日志菜单就是记录用户操作日志信息的。</p><p><img src="https://s2.loli.net/2025/02/16/B7HKfokDjcG4yNE.png" alt="img"></p><h5 id="6-3、系统管理"><a href="#6-3、系统管理" class="headerlink" title="6.3、系统管理"></a>6.3、系统管理</h5><p>系统管理主要用来管理Harbor用户人员信息、镜像仓库的各种配置、权限和系统设置。</p><p><img src="https://s2.loli.net/2025/02/16/KfL2ViA7z8JyWvT.png" alt="img"></p><h4 id="7、Docker命令使用私有仓库"><a href="#7、Docker命令使用私有仓库" class="headerlink" title="7、Docker命令使用私有仓库"></a>7、Docker命令使用私有仓库</h4><h5 id="7-1、登录"><a href="#7-1、登录" class="headerlink" title="7.1、登录"></a>7.1、登录</h5><p>首先登录私有仓库地址：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker login  -u admin -p AdminHarbor12345 http://192.168.42.133:5000</span><br></pre></td></tr></table></figure><p>会报错：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Error response from daemon: Get <span class="string">&quot;https://192.168.42.133:5000/v2/&quot;</span>: proxyconnect tcp: dial tcp 192.168.65.7:3128: connect: connection refused</span><br></pre></td></tr></table></figure><p>docker认为这个地址是不安全的，所以需要在docker守护进程配置文件中把该地址加入安全范围。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://ejes884z.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>:<span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;<span class="string">&quot;max-size&quot;</span>:<span class="string">&quot;1g&quot;</span>, <span class="string">&quot;max-file&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;,</span><br><span class="line">  <span class="string">&quot;live-restore&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.42.133:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># insecure-registries 不安全的注册表配置一些不安全的地址信息，让Docker认为是安全的。多个地址使用 &quot;,&quot; 分割</span></span><br></pre></td></tr></table></figure><p>加入配置成功后，再次登录。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>通过输出发现登录成功。认证信息存储在 <code>~/.docker/config.json</code> 文件中，只要登录信息存在，登录会一直生效不需要每次推送拉取之前都登录。</p><h5 id="7-2、推送"><a href="#7-2、推送" class="headerlink" title="7.2、推送"></a>7.2、推送</h5><p>重新命名镜像名称</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag 94543a6c1aef 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>推送</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>查看Harbor仓库，推送成功。</p><p><img src="https://s2.loli.net/2025/02/16/rejyKzPso7aNGOw.png" alt="img"></p><h5 id="7-3、拉取"><a href="#7-3、拉取" class="headerlink" title="7.3、拉取"></a>7.3、拉取</h5><p>通过另一台服务器，使用 <code>docker pull</code>拉取镜像从私有仓库拉取镜像：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>拉取成功</p><p><img src="https://s2.loli.net/2025/02/16/VQRZWvfTwSmdIbj.png" alt="img"></p><p>查看下载数，发现已经更新了。</p><p><img src="https://s2.loli.net/2025/02/16/kmbMnuydhpYTw5a.png" alt="img"></p><h4 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h4><p>关于使用Harbor搭建Docker私有仓库就介绍完毕了，如果大家有兴趣可以查看一下其他搭建方式，然后在它们之间进行对比一下看看那种方式更适合。本篇为入门级Harbor的基础使用，其他功能可以自行研究。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;手把手教你搭建Docker私有仓库Harbor&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;本文搬运自：&lt;a href=&quot;https://www.cnblogs.com/sowler/p/18242819&quot;&gt;手把手教你搭建Docker私有仓库Harbor - sowler - 博客园&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Docker/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="Harbor" scheme="https://kanoc.gitee.io/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>django配置ASGI服务器教程</title>
    <link href="https://kanoc.gitee.io/2024/12/09/django%E9%85%8D%E7%BD%AEASGI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://kanoc.gitee.io/2024/12/09/django%E9%85%8D%E7%BD%AEASGI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</id>
    <published>2024-12-08T19:08:44.000Z</published>
    <updated>2025-06-09T08:38:17.116Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>django配置ASGI服务器教程</strong></font></p><span id="more"></span><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><ul><li><p>系统环境：Alibaba3</p></li><li><p>Python版本：<code>3.13</code></p></li><li><p>Django版本：<code>5.1.4</code></p></li><li><p>uvicorn版本：<code>0.32.1</code></p></li></ul><h2 id="1、安装-uvicorn-服务器"><a href="#1、安装-uvicorn-服务器" class="headerlink" title="1、安装 uvicorn 服务器"></a>1、安装 <strong>uvicorn</strong> 服务器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django uvicorn</span><br></pre></td></tr></table></figure><h3 id="2、创建ASGI应用程序"><a href="#2、创建ASGI应用程序" class="headerlink" title="2、创建ASGI应用程序"></a>2、创建ASGI应用程序</h3><p>在Django 3.0及更高版本中，Django默认提供了一个<code>asgi.py</code>文件，该文件位于与<code>wsgi.py</code>相同的位置（通常是项目的主目录下）。这个文件包含了一个ASGI应用程序的实例，你可以直接使用它。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;&lt;your_project_name&gt;.settings&#x27;</span>)  <span class="comment"># &lt;your_project_name&gt; 替换成你的项目</span></span><br><span class="line">application = get_asgi_application()</span><br></pre></td></tr></table></figure><h2 id="3、设置settings-py"><a href="#3、设置settings-py" class="headerlink" title="3、设置settings.py"></a>3、设置settings.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WSGI_APPLICATION = &#x27;&lt;your_project_name&gt;.wsgi.application&#x27;   # 同步请求 直接注销掉 我们不需要</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">&#x27;&lt;your_project_name&gt;.asgi.application&#x27;</span>   <span class="comment"># 异步项目  将 &lt;your_project_name&gt; 替换成你的项目</span></span><br></pre></td></tr></table></figure><h3 id="4、-安装并运行ASGI服务器"><a href="#4、-安装并运行ASGI服务器" class="headerlink" title="4、 安装并运行ASGI服务器"></a>4、 安装并运行ASGI服务器</h3><p>要运行ASGI应用，你需要安装一个<code>ASGI</code>服务器，如<code>Uvicorn</code>、<code>Daphne</code>或<code>Hypercorn</code>。然后，你可以使用这些服务器来启动你的<code>Django</code>应用。例如，使用<code>Uvicorn</code>启动<code>Django</code>应用的命令可能看起来像这样</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uvicorn your_project_name.asgi:application   # 默认启动  访问地址为  http://127.0.0.1:8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以自己指定端口</span></span><br><span class="line">uvicorn your_project_name.asgi:application --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --port <span class="number">8035</span>    <span class="comment"># 指定所有ip可访问 项目运行端口为 8035</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;django配置ASGI服务器教程&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="ASGI服务器" scheme="https://kanoc.gitee.io/tags/ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="异步WEB" scheme="https://kanoc.gitee.io/tags/%E5%BC%82%E6%AD%A5WEB/"/>
    
  </entry>
  
  <entry>
    <title>远程修改-ESXI-8.0-管理ip地址</title>
    <link href="https://kanoc.gitee.io/2024/08/18/%E8%BF%9C%E7%A8%8B%E4%BF%AE%E6%94%B9-ESXI-8-0-%E7%AE%A1%E7%90%86ip%E5%9C%B0%E5%9D%80/"/>
    <id>https://kanoc.gitee.io/2024/08/18/%E8%BF%9C%E7%A8%8B%E4%BF%AE%E6%94%B9-ESXI-8-0-%E7%AE%A1%E7%90%86ip%E5%9C%B0%E5%9D%80/</id>
    <published>2024-08-18T09:29:04.000Z</published>
    <updated>2025-06-09T04:15:50.087Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><strong>远程修改 ESXI 8.0 管理ip地址</strong></strong></font></p><span id="more"></span><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a><strong>场景：</strong></h3><p>适用于不方便在设备边操作而又需要修改管理地址的场景。</p><p>适用于不方便外接显示器的场景。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p>生产环境一定确定好网络配置信息否则可能会因为网络配置不正确导致无法正常访问。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h3><h4 id="1-开启SSH远程访问"><a href="#1-开启SSH远程访问" class="headerlink" title="1.开启SSH远程访问"></a>1.开启SSH远程访问</h4><p>启用安全 <code>Shell</code>（也就是 <code>EXSi</code> 可以被 <code>SSH</code> 访问的功能）</p><p><img src="https://s2.loli.net/2024/08/18/jXvEum9nVrO1aq8.png" alt="img"></p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><ul><li>使用 <code>SecureCRT SSH2</code> 连接 <code>ESXi</code> 主机，现在使用 <code>dcui</code> 并没有任何反应，在 <code>Session</code> 标签栏右键点击 <code>Disconnect</code> 。</li><li>这里我测试用 <code>Finalshell</code> 也是完全没问题的</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The <span class="keyword">time</span> and <span class="built_in">date</span> of this login have been sent to the system logs.</span><br><span class="line"></span><br><span class="line">WARNING:</span><br><span class="line">   All commands run on the ESXi shell are logged and may be included <span class="keyword">in</span></span><br><span class="line">   support bundles. Do not provide passwords directly on the <span class="built_in">command</span> line.</span><br><span class="line">   Most tools can prompt <span class="keyword">for</span> secrets or accept them from standard input.</span><br><span class="line"></span><br><span class="line">VMware offers supported, powerful system administration tools.  Please</span><br><span class="line">see www.vmware.com/go/sysadmintools <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">The ESXi Shell can be disabled by an administrative user. See the</span><br><span class="line">vSphere Security documentation <span class="keyword">for</span> more information.</span><br><span class="line">[root@localhost:~] </span><br><span class="line">[root@localhost:~] dcui </span><br></pre></td></tr></table></figure><h4 id="3-连接到SSH"><a href="#3-连接到SSH" class="headerlink" title="3.连接到SSH"></a>3.连接到SSH</h4><ul><li>如果是使用 <code>Finalshell</code> 则可省略此步骤</li><li>在 <code>Session</code> 标签栏右键点击 <code>Session Option</code> 修改 <code>Terminal</code> 类型为 <code>Xterm</code> 后重新 <code>SSH2</code> 连接</li></ul><p><img src="https://s2.loli.net/2024/08/18/e7AEdlkaJ4ghpPt.png" alt="img"></p><h4 id="4-使用-dcui-工具"><a href="#4-使用-dcui-工具" class="headerlink" title="4.使用 dcui 工具"></a><strong>4.使用 <code>dcui</code> 工具</strong></h4><ul><li>再次使用 <code>dcui</code> 工具，这时已经可以进入 <code>EXSi</code> 的系统管理界面。</li></ul><p><img src="https://s2.loli.net/2024/08/18/MvdVH8r7BLy1Kfs.png" alt="img"></p><h4 id="5-登录到控制中心"><a href="#5-登录到控制中心" class="headerlink" title="5.登录到控制中心"></a>5.登录到控制中心</h4><ul><li>点击 <code>F2</code> 进行 <code>Customize System</code> 输入用户名、密码进入</li></ul><p><img src="https://s2.loli.net/2024/08/18/zO1Ehr7yvmHFgcC.png" alt="img"></p><h4 id="6-修改管理IP地址"><a href="#6-修改管理IP地址" class="headerlink" title="6.修改管理IP地址"></a>6.修改管理IP地址</h4><ul><li>选择 <code>Configure Management Network</code></li></ul><p><img src="https://s2.loli.net/2024/08/18/eyDBxsMbLrXRgHI.png" alt="img"></p><h4 id="7-选择-IPv4-Configuration"><a href="#7-选择-IPv4-Configuration" class="headerlink" title="7.选择 IPv4 Configuration"></a>7.选择 <code>IPv4 Configuration</code></h4><p><img src="https://s2.loli.net/2024/08/18/Z45nGUCewczAKby.png" alt="img"></p><h4 id="8-配置静态IP地址，然后点击回车"><a href="#8-配置静态IP地址，然后点击回车" class="headerlink" title="8.配置静态IP地址，然后点击回车"></a>8.配置静态IP地址，然后点击回车</h4><p><img src="https://s2.loli.net/2024/08/18/2m6uOn3w5T8WjUh.png" alt="img"></p><h4 id="9-点击-Esc-选择-Yes-应用配置并且重启管理网络"><a href="#9-点击-Esc-选择-Yes-应用配置并且重启管理网络" class="headerlink" title="9.点击 Esc 选择 Yes 应用配置并且重启管理网络"></a>9.点击 <code>Esc</code> 选择 <code>Yes</code> 应用配置并且重启管理网络</h4><p><img src="https://s2.loli.net/2024/08/18/8M4Ichq1xCzebUs.png" alt="img"></p><h4 id="10-此时已近可以用修改后的IP地址登录管理ESXi主机"><a href="#10-此时已近可以用修改后的IP地址登录管理ESXi主机" class="headerlink" title="10.此时已近可以用修改后的IP地址登录管理ESXi主机"></a>10.此时已近可以用修改后的IP地址登录管理ESXi主机</h4><p><img src="https://s2.loli.net/2024/08/18/OrPAf7l54TLonhd.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;strong&gt;远程修改 ESXI 8.0 管理ip地址&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="esxi" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/esxi/"/>
    
    
    <category term="esxi" scheme="https://kanoc.gitee.io/tags/esxi/"/>
    
  </entry>
  
  <entry>
    <title>内存小于-1G，宝塔面板-9.0.0-无法安装-mysql-解决方法</title>
    <link href="https://kanoc.gitee.io/2024/08/08/%E5%86%85%E5%AD%98%E5%B0%8F%E4%BA%8E-1G%EF%BC%8C%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF-9-0-0-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-mysql-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://kanoc.gitee.io/2024/08/08/%E5%86%85%E5%AD%98%E5%B0%8F%E4%BA%8E-1G%EF%BC%8C%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF-9-0-0-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-mysql-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2024-08-08T04:36:15.000Z</published>
    <updated>2025-06-09T03:53:29.745Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>内存小于 1G，宝塔面板<code>9.0.0</code>无法安装<code>mysql</code>解决方法</strong></font></p><span id="more"></span><p>宝塔官方限制了内存小于<code>1G</code>无法安装<code>mysql</code></p><p><font color=#00b2c2 size=5 face=宋体><strong>解决方法：</strong></font></p><p>找到路径：<code>/www/server/panel/class</code> 下的 <code>panelPlugin.py</code></p><p><img src="https://s2.loli.net/2024/08/09/XxNRyJokGCQa6e9.png" alt="image-20240808124006141"></p><p>定位到&gt;&gt;&gt; 关键字 <code>limit_list</code> 将如下注释掉即可</p><p><img src="https://s2.loli.net/2024/08/08/WutVP8LYhXv9rxN.png" alt="image-20240808123340813"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;内存小于 1G，宝塔面板&lt;code&gt;9.0.0&lt;/code&gt;无法安装&lt;code&gt;mysql&lt;/code&gt;解决方法&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A3-linux" scheme="https://kanoc.gitee.io/categories/A3-linux/"/>
    
    <category term="宝塔面板" scheme="https://kanoc.gitee.io/categories/A3-linux/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    
    
    <category term="运维" scheme="https://kanoc.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="系统" scheme="https://kanoc.gitee.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="宝塔" scheme="https://kanoc.gitee.io/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>Django-ORM-存储JSON数据</title>
    <link href="https://kanoc.gitee.io/2024/06/26/Django-ORM-%E5%AD%98%E5%82%A8JSON%E6%95%B0%E6%8D%AE/"/>
    <id>https://kanoc.gitee.io/2024/06/26/Django-ORM-%E5%AD%98%E5%82%A8JSON%E6%95%B0%E6%8D%AE/</id>
    <published>2024-06-25T19:51:28.000Z</published>
    <updated>2025-06-09T08:33:19.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-ORM-存储JSON数据"><a href="#Django-ORM-存储JSON数据" class="headerlink" title="Django ORM 存储JSON数据"></a><font color=#00b2c2 size=5 face=宋体><strong>Django ORM 存储JSON数据</strong></font></h2><span id="more"></span><p>在<code>Django</code>模型中，如果你想要一个字段能够接受一个列表（例如，一个图片URL的列表），你需要考虑数据库的设计如何能够支持这种结构。数据库通常不支持直接存储Python列表这样的复杂数据类型，但你可以使用几种方法来模拟这种行为。</p><p><code>以下是一些方法，你可以根据你的需求来选择：</code></p><h3 id="使用JSONField（Django-3-1-）"><a href="#使用JSONField（Django-3-1-）" class="headerlink" title="使用JSONField（Django 3.1+）"></a><strong>使用JSONField</strong>（Django 3.1+）</h3><p>如果你的Django版本是3.1或更高，你可以使用<code>JSONField</code>来存储JSON数据，包括列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models  </span><br><span class="line"><span class="keyword">from</span> django.contrib.postgres.fields <span class="keyword">import</span> JSONField  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(models.Model):  </span><br><span class="line">    list_image = JSONField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)  <span class="comment"># 假设你想存储图片URL的列表</span></span><br></pre></td></tr></table></figure><p>然后你可以这样使用它：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">instance = MyModel.objects.create(list_image=[<span class="string">&#x27;url1.com&#x27;</span>, <span class="string">&#x27;url2.com&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="使用CharField或TextField并手动序列化-反序列化"><a href="#使用CharField或TextField并手动序列化-反序列化" class="headerlink" title="使用CharField或TextField并手动序列化&#x2F;反序列化"></a><strong>使用CharField或TextField并手动序列化&#x2F;反序列化</strong></h3><p>如果你不想使用<code>JSONField</code>，或者你的Django版本较旧，你可以将列表转换为JSON字符串（使用<code>json.dumps</code>），然后将其存储在<code>CharField</code>或<code>TextField</code>中。读取时，你需要使用<code>json.loads</code>将其转换回Python列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(models.Model):  </span><br><span class="line">    list_image = models.TextField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)  <span class="comment"># 假设你想存储图片URL的列表的JSON字符串  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_image_list</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.list_image:  </span><br><span class="line">            <span class="keyword">return</span> json.loads(<span class="variable language_">self</span>.list_image)  </span><br><span class="line">        <span class="keyword">return</span> []  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_image_list</span>(<span class="params">self, image_list</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.list_image = json.dumps(image_list)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用时  </span></span><br><span class="line">instance = MyModel()  </span><br><span class="line">instance.set_image_list([<span class="string">&#x27;url1.com&#x27;</span>, <span class="string">&#x27;url2.com&#x27;</span>])  </span><br><span class="line">instance.save()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取时  </span></span><br><span class="line">image_list = instance.get_image_list()</span><br></pre></td></tr></table></figure><h3 id="使用关联模型"><a href="#使用关联模型" class="headerlink" title="使用关联模型"></a><strong>使用关联模型</strong></h3><p>如果你想要建立更复杂的关联（例如，每个图片都有自己的元数据），你可以创建一个关联模型来表示这种关系。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span>(models.Model):  </span><br><span class="line">    url = models.URLField()  </span><br><span class="line">    <span class="comment"># 其他字段，如标题、描述等  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(models.Model):  </span><br><span class="line">    images = models.ManyToManyField(Image)</span><br></pre></td></tr></table></figure><p>这样，你可以将多个<code>Image</code>对象与<code>MyModel</code>对象关联起来，并使用Django的ORM来查询和管理这些关联。</p><p><font color=red size=3 face=宋体><strong>根据你的具体需求，选择最适合你的方法。如果你只是想简单地存储一个图片URL的列表，并且不需要复杂的查询或关系，那么使用<code>JSONField</code>或手动序列化&#x2F;反序列化可能是最简单的选择。如果你需要更复杂的关联或查询功能，那么使用关联模型可能是更好的选择。</strong></font></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Django-ORM-存储JSON数据&quot;&gt;&lt;a href=&quot;#Django-ORM-存储JSON数据&quot; class=&quot;headerlink&quot; title=&quot;Django ORM 存储JSON数据&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Django ORM 存储JSON数据&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django_ORM" scheme="https://kanoc.gitee.io/categories/Python/Django-ORM/"/>
    
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS-7上安装Go-1.22</title>
    <link href="https://kanoc.gitee.io/2024/06/11/%E5%9C%A8CentOS-7%E4%B8%8A%E5%AE%89%E8%A3%85Go-1-22/"/>
    <id>https://kanoc.gitee.io/2024/06/11/%E5%9C%A8CentOS-7%E4%B8%8A%E5%AE%89%E8%A3%85Go-1-22/</id>
    <published>2024-06-10T20:01:46.000Z</published>
    <updated>2025-06-09T10:41:43.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在CentOS-7上安装Go-1-22："><a href="#在CentOS-7上安装Go-1-22：" class="headerlink" title="在CentOS 7上安装Go 1.22："></a><font color=#00b2c2 size=5 face=宋体><strong>在CentOS 7上安装Go 1.22：</strong></font></h2><span id="more"></span><h3 id="在CentOS-7上安装Go-1-22-2的步骤如下："><a href="#在CentOS-7上安装Go-1-22-2的步骤如下：" class="headerlink" title="在CentOS 7上安装Go 1.22.2的步骤如下："></a>在CentOS 7上安装Go 1.22.2的步骤如下：</h3><h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><ol><li><p>确保你的<code>CentOS 7</code>系统已经更新到最新状态，可以通过以下命令进行更新：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update</span><br></pre></td></tr></table></figure></li><li><p>检查系统是否已安装<code>Go</code>的旧版本，如果有，则先卸载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum remove golang</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、下载并安装Go-1-22-2"><a href="#二、下载并安装Go-1-22-2" class="headerlink" title="二、下载并安装Go 1.22.2"></a>二、下载并安装Go 1.22.2</h4><ol><li><p>访问Go的官方网站或使用提供的下载链接来获取<code>Go 1.22.2</code>的<code>Linux-amd64</code>版本。你可以直接通过<code>wget</code>命令下载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src  </span><br><span class="line">wget https://golang.google.cn/dl/go1.22.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压下载的Go压缩包到<code>/usr/local</code>目录下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf go1.22.2.linux-amd64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>这将把Go的安装文件解压到<code>/usr/local/go</code>目录下。</p></li></ol><h4 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h4><ol><li><p>打开<code>/etc/profile</code>文件，并在文件末尾添加以下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin  </span><br><span class="line"><span class="built_in">export</span> GOPATH=/opt/go  <span class="comment"># 或者你可以设置为其他目录，作为你的工作区  </span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure></li><li><p>应用更改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>或者使用<code>su -</code>命令重新登录shell会话。</p></li></ol><h4 id="四、验证安装"><a href="#四、验证安装" class="headerlink" title="四、验证安装"></a>四、验证安装</h4><ol><li><p>在终端中输入<code>go version</code>来检查Go的版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>如果安装成功，你应该看到类似于<code>go version go1.22.2 linux/amd64</code>的输出。</p></li></ol><h4 id="五、解决依赖下载速度过慢的问题（可选）"><a href="#五、解决依赖下载速度过慢的问题（可选）" class="headerlink" title="五、解决依赖下载速度过慢的问题（可选）"></a>五、解决依赖下载速度过慢的问题（可选）</h4><p>如果你的网络环境中Go依赖包的下载速度过慢，你可以设置<code>GOPROXY</code>环境变量来使用国内的代理服务器，如<code>Goproxy.cn</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on  </span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>这样设置后，Go的依赖包将会从指定的代理服务器下载，通常会有更快的下载速度。</p><p>以上就是在<code>CentOS 7</code>上安装<code>Go 1.22.2</code>的详细步骤。请注意，Go的最新版本可能已经更新，但上述步骤对于安装任何版本的Go都是通用的，只需将版本号替换为你要安装的版本即可。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;在CentOS-7上安装Go-1-22：&quot;&gt;&lt;a href=&quot;#在CentOS-7上安装Go-1-22：&quot; class=&quot;headerlink&quot; title=&quot;在CentOS 7上安装Go 1.22：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;在CentOS 7上安装Go 1.22：&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Golang" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Golang/"/>
    
    
    <category term="教程" scheme="https://kanoc.gitee.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="go" scheme="https://kanoc.gitee.io/tags/go/"/>
    
    <category term="安装" scheme="https://kanoc.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>django获取请求进来的ip</title>
    <link href="https://kanoc.gitee.io/2024/05/31/django%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E8%BF%9B%E6%9D%A5%E7%9A%84ip/"/>
    <id>https://kanoc.gitee.io/2024/05/31/django%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E8%BF%9B%E6%9D%A5%E7%9A%84ip/</id>
    <published>2024-05-30T22:03:46.000Z</published>
    <updated>2025-06-09T08:36:40.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django获取请求进来的IP"><a href="#django获取请求进来的IP" class="headerlink" title="django获取请求进来的IP"></a><font color=#00b2c2 size=5 face=宋体><strong>django获取请求进来的IP</strong></font></h2><span id="more"></span><p>你可以创建一个中间件来检查请求的IP地址是否在白名单中。如果不在，就拒绝访问。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseForbidden  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WhiteListMiddleware</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.get_response = get_response  </span><br><span class="line">        <span class="comment"># 这里设置你的白名单IP地址  </span></span><br><span class="line">        <span class="variable language_">self</span>.white_list = [<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;192.168.1.100&#x27;</span>]  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):  </span><br><span class="line">        <span class="keyword">if</span> request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.white_list:  </span><br><span class="line">            <span class="keyword">return</span> HttpResponseForbidden(<span class="string">&#x27;Access Forbidden&#x27;</span>)  </span><br><span class="line">        response = <span class="variable language_">self</span>.get_response(request)  </span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>然后，在<code>settings.py</code>中添加这个中间件：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [  </span><br><span class="line">    <span class="comment"># ... 其他中间件 ...  </span></span><br><span class="line">    <span class="string">&#x27;path.to.your.WhiteListMiddleware&#x27;</span>,  <span class="comment"># 替换为中间件的实际路径  </span></span><br><span class="line">    <span class="comment"># ... 可能还有其他中间件 ...  </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;django获取请求进来的IP&quot;&gt;&lt;a href=&quot;#django获取请求进来的IP&quot; class=&quot;headerlink&quot; title=&quot;django获取请求进来的IP&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;django获取请求进来的IP&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="请求" scheme="https://kanoc.gitee.io/tags/%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>django-后台管理模板-simpleui-的配置教程</title>
    <link href="https://kanoc.gitee.io/2024/05/25/django-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%A8%A1%E6%9D%BF-simpleui-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <id>https://kanoc.gitee.io/2024/05/25/django-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%A8%A1%E6%9D%BF-simpleui-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</id>
    <published>2024-05-24T21:43:56.000Z</published>
    <updated>2025-06-09T08:30:18.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django-后台管理模板-simpleui-的配置教程"><a href="#django-后台管理模板-simpleui-的配置教程" class="headerlink" title="django 后台管理模板 simpleui 的配置教程"></a><font color=#00b2c2 size=5 face=宋体><strong>django 后台管理模板 simpleui 的配置教程</strong></font></h1><span id="more"></span><h2 id="1、将静态资源文件夹克隆到本地"><a href="#1、将静态资源文件夹克隆到本地" class="headerlink" title="1、将静态资源文件夹克隆到本地"></a>1、将静态资源文件夹克隆到本地</h2><p>项目根目录下的 setting配置</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os   <span class="comment"># 导入os包，</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>)   <span class="comment"># 设置static根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行克隆到本地 资源命令</span></span><br><span class="line">python3 manage.py collectstatic  <span class="comment"># bash命令</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;django-后台管理模板-simpleui-的配置教程&quot;&gt;&lt;a href=&quot;#django-后台管理模板-simpleui-的配置教程&quot; class=&quot;headerlink&quot; title=&quot;django 后台管理模板 simpleui 的配置教程&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;django 后台管理模板 simpleui 的配置教程&lt;/strong&gt;&lt;/font&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="simpleui" scheme="https://kanoc.gitee.io/tags/simpleui/"/>
    
    <category term="后台" scheme="https://kanoc.gitee.io/tags/%E5%90%8E%E5%8F%B0/"/>
    
    <category term="模版" scheme="https://kanoc.gitee.io/tags/%E6%A8%A1%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>【爬虫】巧用-js2py-（附带bug解决）</title>
    <link href="https://kanoc.gitee.io/2024/05/25/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E5%B7%A7%E7%94%A8-js2py-%EF%BC%88%E9%99%84%E5%B8%A6bug%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <id>https://kanoc.gitee.io/2024/05/25/%E3%80%90%E7%88%AC%E8%99%AB%E3%80%91%E5%B7%A7%E7%94%A8-js2py-%EF%BC%88%E9%99%84%E5%B8%A6bug%E8%A7%A3%E5%86%B3%EF%BC%89/</id>
    <published>2024-05-24T16:51:51.000Z</published>
    <updated>2025-06-09T10:06:55.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【爬虫】巧用-js2py-（附带bug解决）："><a href="#【爬虫】巧用-js2py-（附带bug解决）：" class="headerlink" title="【爬虫】巧用-js2py-（附带bug解决）："></a><font color=#00b2c2 size=5 face=宋体><strong>【爬虫】巧用-js2py-（附带bug解决）：</strong></font></h1><span id="more"></span><p>本文搬运自CSDN：<a href="https://blog.csdn.net/sc_lilei/article/details/100122347">传送阵</a></p><p>项目地址： <a href="https://github.com/PiotrDabkowski/Js2Py">https://github.com/PiotrDabkowski/Js2Py</a></p><p>项目介绍：（根据github）此项目完全用Python编写，支持Python2&#x2F;3。可以在Python中执行JS代码，并获取JS对象值。</p><p>目前支持ES5，ES6仍在测试中。</p><p>一句话解释：一个纯Python的JS解释器。</p><p>推荐指数：四颗星  （博主用过其他的库如execjs, pyv8，多多少少都没有这个库的功能完备）</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install js2py</span><br></pre></td></tr></table></figure><p>本文主要介绍js2py的EvalJs对象，因为它是功能最完备的。</p><h2 id="1-执行简单的JS代码"><a href="#1-执行简单的JS代码" class="headerlink" title="1. 执行简单的JS代码"></a>1. 执行简单的JS代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line">js = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    a =1 </span></span><br><span class="line"><span class="string">    b =1</span></span><br><span class="line"><span class="string">    function f(x)&#123;</span></span><br><span class="line"><span class="string">        return x*x</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">ctx = js2py.EvalJs()  <span class="comment"># 初始化context对象</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.a)  <span class="comment"># &gt;&gt;1   获取js变量</span></span><br><span class="line"><span class="built_in">print</span>(ctx.f(<span class="number">9</span>))  <span class="comment"># &gt;&gt;81  执行js函数</span></span><br></pre></td></tr></table></figure><p>说明：EvalJs对象支持在同一个上下文中执行多次多段js代码，并能通过属性的方式获取js变量，非常好用。</p><h2 id="2-Python与JS对象交互"><a href="#2-Python与JS对象交互" class="headerlink" title="2. Python与JS对象交互"></a><strong>2. Python与JS对象交互</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line">js = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function f(arg1, arg2)&#123;</span></span><br><span class="line"><span class="string">        return arg1+arg2</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    end = f(a,b)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">ctx = js2py.EvalJs(context=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;)  <span class="comment"># 初始化context对象,通过字典形式传入python对象与js交互</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.end)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="3-在JS代码中引入外部JS库-需要安装nodejs环境"><a href="#3-在JS代码中引入外部JS库-需要安装nodejs环境" class="headerlink" title="3. 在JS代码中引入外部JS库(需要安装nodejs环境)"></a><strong>3. 在JS代码中引入外部JS库(需要安装nodejs环境)</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line">js = <span class="string">&quot;&quot;&quot;var path = require(&#x27;path&#x27;)</span></span><br><span class="line"><span class="string">        p=path.join(&#x27;/foo/bar&#x27;, &#x27;file&#x27;)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">ctx = js2py.EvalJs(enable_require=<span class="literal">True</span>)  <span class="comment"># 开启require功能</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.p)  <span class="comment"># /foo/bar/file</span></span><br><span class="line">js = <span class="string">&quot;&quot;&quot;p = p+p&quot;&quot;&quot;</span></span><br><span class="line">ctx.execute(js)  <span class="comment"># 执行js</span></span><br><span class="line"><span class="built_in">print</span>(ctx.p)  <span class="comment"># /foo/bar/file/foo/bar/file</span></span><br></pre></td></tr></table></figure><p>关于require在js2py中使用有个bug，会在最后说明。</p><h2 id="4-Python与JS混编"><a href="#4-Python与JS混编" class="headerlink" title="4. Python与JS混编"></a><strong>4. Python与JS混编</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CryptoJS = js2py.require(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line">data = [&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>&#125;, &#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">2</span>&#125;]</span><br><span class="line">JSON = js2py.eval_js(<span class="string">&#x27;JSON&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">ciphertext = CryptoJS.AES.encrypt(JSON.stringify(data), <span class="string">&#x27;secret key 123&#x27;</span>)</span><br><span class="line"><span class="built_in">bytes</span> = CryptoJS.AES.decrypt(ciphertext.toString(), <span class="string">&#x27;secret key 123&#x27;</span>)</span><br><span class="line">decryptedData = JSON.parse(<span class="built_in">bytes</span>.toString(CryptoJS.enc.Utf8)).to_list()</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(decryptedData)  <span class="comment"># [&#123;&#x27;id&#x27;:1&#125;, &#123;&#x27;id&#x27;:2&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="5-最后"><a href="#5-最后" class="headerlink" title="5. 最后"></a>5. 最后</h2><p>在对js2py这个库的摸索使用中，发现了不少的问题(bug)，发现作者最后一次处理issue是在2018年11月了，超过20个issue未处理，博主也把遇到的问题提了两个上去，不知道能不能收到回复。</p><p>博主修复的bug：在windows 10 上使用这个库执行带有require语句的JS代码时遇到的错误</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Could <span class="keyword">not</span> link required node_modules</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：经过反复测试与检查，发现是subprocess库在windows上执行shell命令有bug。具体是这样，在Python包安装路径下的js2py&#x2F;node_import.py的17行有以下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> subprocess.call(</span><br><span class="line">        <span class="string">&#x27;cd %s;npm install babel-core babel-cli babel-preset-es2015 babel-polyfill babelify browserify browserify-shim&#x27;</span></span><br><span class="line">        % <span class="built_in">repr</span>(DIRNAME),</span><br><span class="line">        shell=<span class="literal">True</span>,</span><br><span class="line">        cwd=DIRNAME) == <span class="number">0</span>, <span class="string">&#x27;Could not link required node_modules&#x27;</span></span><br></pre></td></tr></table></figure><p>其实这里作者的cd命令是多余的，因为cwd参数已经指定了命令的执行路径，无需再cd进入路径。</p><p>除了这里，还要修改这个文件第79行，一样的问题。</p><p>最后友情提醒，如果你的环境不能科学上网，你最好修改一下npm的源：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>避免网络问题导致不必要的麻烦，因为执行的JS代码依赖外部库时，这个库会在后台执行npm install操作(仅一次)。</p><p><strong>其他：</strong></p><p>因为博主也是搞爬虫的，所有有时会用到这样的库，这次就做一下完整的记录，助己助人。</p><p>本博客欢迎留言 :) </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;【爬虫】巧用-js2py-（附带bug解决）：&quot;&gt;&lt;a href=&quot;#【爬虫】巧用-js2py-（附带bug解决）：&quot; class=&quot;headerlink&quot; title=&quot;【爬虫】巧用-js2py-（附带bug解决）：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;【爬虫】巧用-js2py-（附带bug解决）：&lt;/strong&gt;&lt;/font&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="_A7-逆向" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/"/>
    
    <category term="JavaScript" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/JavaScript/"/>
    
    
    <category term="Js" scheme="https://kanoc.gitee.io/tags/Js/"/>
    
    <category term="js2py" scheme="https://kanoc.gitee.io/tags/js2py/"/>
    
  </entry>
  
  <entry>
    <title>网站克隆工具-httrack</title>
    <link href="https://kanoc.gitee.io/2024/05/24/%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86%E5%B7%A5%E5%85%B7-httrack/"/>
    <id>https://kanoc.gitee.io/2024/05/24/%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86%E5%B7%A5%E5%85%B7-httrack/</id>
    <published>2024-05-23T19:36:36.000Z</published>
    <updated>2025-06-09T04:06:35.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站克隆工具-httrack："><a href="#网站克隆工具-httrack：" class="headerlink" title="网站克隆工具-httrack："></a><font color=#00b2c2 size=5 face=宋体><strong>网站克隆工具-httrack：</strong></font></h2><span id="more"></span><p>本文搬运自<a href="https://blog.csdn.net/qq_32393893/article/details/105049728">kali-网站克隆工具-httrack_kali克隆网站-CSDN博客</a></p><p><font color=#f26522 size=4 face=宋体><strong>以下为 kali命令，如果是mac的同学，请自行使用<code>brew</code> 替换 <code>apt-get</code>即可</strong></font></p><p>HTTrack是一款网站克隆工具，主要用户克隆网站。渗透测试人员可以将目标网站克隆到本地进行查看，包含了所有的页面和离线文件，是可以进行社会工程学攻击，是钓鱼网站的利器。</p><h3 id="1，安装"><a href="#1，安装" class="headerlink" title="1，安装"></a>1，安装</h3><p><strong><code>sudo apt-get isntall httarck</code></strong></p><p><img src="https://s2.loli.net/2024/05/24/NputOms3gJha7IB.png"></p><p><font color=#b0171f size=3 face=宋体><strong>（如果已经安装了，就会像上图这样）</strong></font></p><h3 id="2，新建一个文件夹放置下载的网站"><a href="#2，新建一个文件夹放置下载的网站" class="headerlink" title="2，新建一个文件夹放置下载的网站"></a>2，新建一个文件夹放置下载的网站</h3><p><strong><code>mkdir site</code></strong></p><p><img src="https://s2.loli.net/2024/05/24/jcJ4LeKEPmY87bi.png"></p><h3 id="3，切换到新建的文件夹中"><a href="#3，切换到新建的文件夹中" class="headerlink" title="3，切换到新建的文件夹中"></a>3，切换到新建的文件夹中</h3><p><strong><code>cd site</code></strong></p><h3 id="4，启动httrack"><a href="#4，启动httrack" class="headerlink" title="4，启动httrack"></a>4，启动httrack</h3><p><strong><code>httrack</code></strong></p><h3 id="5，进行设置"><a href="#5，进行设置" class="headerlink" title="5，进行设置"></a>5，进行设置</h3><p><img src="https://s2.loli.net/2024/05/24/Phwa4YpE8u32LVJ.png"></p><h3 id="6，已经将网站保存在本地了"><a href="#6，已经将网站保存在本地了" class="headerlink" title="6，已经将网站保存在本地了"></a>6，已经将网站保存在本地了</h3><p><img src="https://s2.loli.net/2024/05/24/CigUqDpQuRf1VvJ.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;网站克隆工具-httrack：&quot;&gt;&lt;a href=&quot;#网站克隆工具-httrack：&quot; class=&quot;headerlink&quot; title=&quot;网站克隆工具-httrack：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;网站克隆工具-httrack：&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="网站克隆工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://kanoc.gitee.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="克隆" scheme="https://kanoc.gitee.io/tags/%E5%85%8B%E9%9A%86/"/>
    
    <category term="网站" scheme="https://kanoc.gitee.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>django-Session的配置与使用</title>
    <link href="https://kanoc.gitee.io/2024/05/16/django-Session%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://kanoc.gitee.io/2024/05/16/django-Session%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2024-05-15T17:42:14.000Z</published>
    <updated>2025-06-09T08:33:44.544Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>django Session的配置与使用</strong></font></p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有的 session 默认配置是在源码中的 conf/global_settings.py</span></span><br><span class="line"><span class="comment">############</span></span><br><span class="line"><span class="comment"># SESSIONS #</span></span><br><span class="line"><span class="comment">############</span></span><br><span class="line"></span><br><span class="line">以下内容存储位置，任选其一即可：即 SESSION_ENGINE 的配置只能选一个</span><br><span class="line"><span class="comment"># # session 相关数据存储位置 ： 数据库</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.db&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># session 相关数据存储位置 ： 文件</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.file&quot;</span></span><br><span class="line">SESSION_FILE_PATH = <span class="string">&quot;None&quot;</span>   <span class="comment"># 如果要存储到文件中，需要先创建文件夹 相对路径(也可以绝对路径)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 存储到缓存</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.cache&quot;</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&quot;default&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 存储到 缓存 + 数据库</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.cached_db&quot;</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&quot;default&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果存储到 cookie中，需要配置下面所有项目</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">&quot;sessionid&quot;</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">2</span>  <span class="comment"># 生存时间</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span>  <span class="comment"># 域名</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span></span><br><span class="line">SESSION_COOKIE_PATH = <span class="string">&quot;/&quot;</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span></span><br><span class="line">SESSION_COOKIE_SAMESITE = <span class="string">&quot;Lax&quot;</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列号 session信息</span></span><br><span class="line">SESSION_SERIALIZER = <span class="string">&quot;django.contrib.sessions.serializers.JSONSerializer&quot;</span></span><br></pre></td></tr></table></figure><ul><li>路由：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#    path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    path(<span class="string">&#x27;x1/&#x27;</span>, x1, name=<span class="string">&quot;x1&quot;</span>),</span><br><span class="line">    path(<span class="string">&#x27;x2/&#x27;</span>, x2, name=<span class="string">&quot;x2&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> apps.app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 /x1 设置session 属性</span></span><br><span class="line"><span class="comment"># session 的设置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    request.session[<span class="string">&#x27;id&#x27;</span>] = <span class="number">999</span></span><br><span class="line">    request.session[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;wupeiqi&quot;</span></span><br><span class="line">    request.session[<span class="string">&quot;age&quot;</span>] = <span class="number">25</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;x1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 x2 校验 session</span></span><br><span class="line"><span class="comment"># session的读取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.session.get(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(request.session.get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(request.session.get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># del request.session[&quot;id&quot;]   # 删除 session 相关信息  &gt;&gt;&gt; 如果二次访问，浏览器会报错  推荐下面方法使用</span></span><br><span class="line">    request.session.clear()   <span class="comment"># 清除session 相关数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;x2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由关系</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;x1/&#x27;</span>, x1, name=<span class="string">&quot;x1&quot;</span>),</span><br><span class="line">    path(<span class="string">&#x27;x2/&#x27;</span>, x2, name=<span class="string">&quot;x2&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;django Session的配置与使用&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django-Cookie的配置与使用</title>
    <link href="https://kanoc.gitee.io/2024/05/16/django-Cookie%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://kanoc.gitee.io/2024/05/16/django-Cookie%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2024-05-15T16:42:14.000Z</published>
    <updated>2025-06-09T08:32:29.747Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>django Cookie的配置与使用</strong></font></p><span id="more"></span><p><img src="https://s2.loli.net/2024/05/16/x6nONyUZvAWq9c7.png" alt="image-20240516012934469"></p><ul><li>路由：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#    path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    path(<span class="string">&#x27;x1/&#x27;</span>, x1, name=<span class="string">&quot;x1&quot;</span>),</span><br><span class="line">    path(<span class="string">&#x27;x2/&lt;int:v1&gt;/&#x27;</span>, x2, name=<span class="string">&quot;x2&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    obj = HttpResponse(<span class="string">&quot;x1&quot;</span>, status=<span class="number">201</span>, reason=<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">    obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;xiao zhu pei qi&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 cookie</span></span><br><span class="line">    obj.set_cookie(<span class="string">&quot;v1&quot;</span>, <span class="string">&quot;hello world&quot;</span>)   <span class="comment"># 会在set_cookie 中跟一个字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置cookie 过期时间 一：</span></span><br><span class="line">     obj.set_cookie(<span class="string">&quot;v2&quot;</span>, <span class="string">&quot;user&quot;</span>, max_age=<span class="number">10</span>)  <span class="comment"># 当前cookie v2=user 在10秒过期</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment"># 设置cookie 过期时间 二：</span></span><br><span class="line">    ctime = datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">10</span>)   <span class="comment"># 设置时间戳 加减</span></span><br><span class="line">    obj.set_cookie(<span class="string">&quot;v3&quot;</span>, <span class="string">&quot;root&quot;</span>, expires=ctime)  <span class="comment"># 当前cookie v3=root 在10秒过期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/16/5BzWNUVlPk3h7uo.png" alt="image-20240516005846278"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">x2</span>(<span class="params">request, v1</span>):</span><br><span class="line">    <span class="comment"># 获取cookie视图函数</span></span><br><span class="line">    <span class="built_in">print</span>(request.COOKIES)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;x2&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/16/ncOxQNVTfrBUuY4.png" alt="image-20240516010145709"></p><p><font color=#00b2c2 size=5 face=宋体><strong>django 独有的签名与校验：</strong></font></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    obj = HttpResponse(<span class="string">&quot;x1&quot;</span>, status=<span class="number">201</span>, reason=<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">    obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;xiao zhu pei qi&quot;</span></span><br><span class="line">    obj.set_signed_cookie(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;xiaoguang&quot;</span>)  <span class="comment"># django 独有签名算法，防止请求被人修改</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x2</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取cookie视图函数</span></span><br><span class="line">    <span class="built_in">print</span>(request.COOKIES)</span><br><span class="line">    xx = request.get_signed_cookie(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;x2&quot;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;x1/&#x27;</span>, x1, name=<span class="string">&quot;x1&quot;</span>),</span><br><span class="line">    path(<span class="string">&#x27;x2/&#x27;</span>, x2, name=<span class="string">&quot;x2&quot;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>校验与签名字符比对</strong></p><p><img src="https://s2.loli.net/2024/05/16/k9NWcslPfen4vrY.png" alt="校验与签名字符比对"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;django Cookie的配置与使用&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django-中间件的配置与使用</title>
    <link href="https://kanoc.gitee.io/2024/05/15/django-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://kanoc.gitee.io/2024/05/15/django-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2024-05-15T04:18:51.000Z</published>
    <updated>2025-06-09T08:32:10.472Z</updated>
    
    <content type="html"><![CDATA[<p> <font color=#00b2c2 size=5 face=宋体><strong>中间件的运行流程图：</strong></font></p><span id="more"></span><p><img src="https://s2.loli.net/2024/05/15/Gre7voNmpj3wb1u.png" alt="image-20230716091532551"></p><h4 id="1-编写类"><a href="#1-编写类" class="headerlink" title="1.编写类"></a>1.编写类</h4><p>1.1 在项目根目录创建 <code>utils</code></p><p><img src="https://s2.loli.net/2024/05/15/LRYxDcgPUG5lTK2.png" alt="image-20240515182654186"></p><p>1.2 在<code>utils</code> 下的 <code>md.py</code> 中创建类。可以写在任意的目录：自定义的类、继承一个类**（推荐）**</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># request是请求相关所有的数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># request是请求相关所有的数据； view是试图函数； 路由参数*args, **kwargs</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="comment"># request是请求相关所有的数据</span></span><br><span class="line">        <span class="comment"># response是试图函数返回的那个对象（封装了要返回到用户浏览器的所有数据）</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h4 id="2-注册"><a href="#2-注册" class="headerlink" title="2.注册"></a>2.注册</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;utils.md.KeLaMiddleware&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 动态导入 + 反射</span></span><br></pre></td></tr></table></figure><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;KeLa.process_request&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;KeLa.process_view&quot;</span>,view, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;KeLa.process_response&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;x1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x2</span>(<span class="params">request, v1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x2&quot;</span>, v1)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;x2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;x1/&#x27;</span>, x1),</span><br><span class="line">    path(<span class="string">&#x27;x2/&lt;int:v1&gt;/&#x27;</span>, x2),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;utils.md.KeLaMiddleware&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="4-问题"><a href="#4-问题" class="headerlink" title="4.问题"></a>4.问题</h4><ul><li><p>中间件的功能好像有点像装饰器【底层源码闭包】</p></li><li><p>基于中间件可以做什么？</p><ul><li><p>根据请求周期，对 request 进行赋值，后续方便进行调用。</p></li><li><p>根据请求周期，对业务逻辑代码进行自定义，决定是否可以继续向后</p><ul><li><p>return None，继续向后走</p></li><li><p>return HttpResponse对象</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return HttpResponse(&quot;...&quot;)</span><br><span class="line">return render(&quot;...&quot;)        -&gt;   HttpResponse(&quot;...&quot;)</span><br><span class="line">return JsonReponse(&quot;...&quot;)   -&gt;   HttpResponse(&quot;...&quot;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>根据请求周期，对返回给用户浏览器的数据进行自定义：删除内容、增加、cookie、响应头…</p></li></ul></li><li><p>这个中间件和nginx  apache这样的<strong>中间件</strong>概念一样吗？比如做前置代理，做https</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Django中间件  /  拦截器  / RequestHanler</span><br></pre></td></tr></table></figure></li><li><p>中间件可以跨语言调用吗？比如别人不是用python 写的，但是可以给我们的django 项目用？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Django中间件</span><br><span class="line">...</span><br><span class="line">架构中间件：</span><br><span class="line">Django + redis（C语言）</span><br></pre></td></tr></table></figure></li><li><p>中间件只要两层,不要中间那个process.riew行不行,是不是有些特定场合需要返回最后一层</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>那Django内置的中间件完成了些什么功能？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1-2-“不正常”"><a href="#1-1-2-“不正常”" class="headerlink" title="1.1.2 “不正常”"></a>1.1.2 “不正常”</h3><p><img src="https://s2.loli.net/2024/05/16/m93EMl6sKOvVNJ1.png" alt="image-20230716091818839"></p><p>如果用户向我的网站请求时，如果访问URL：</p><ul><li>&#x2F;x1&#x2F;</li><li>&#x2F;x2&#x2F;</li><li>&#x2F;x3&#x2F; ，比如携带凭证token，有凭证继续，无凭证返回无权访问。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/x2/12/</span><br><span class="line">http://127.0.0.1:8000/x2/12/?xxx=123</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8000/x3/?token=12938791923981723123</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># request.path_info</span></span><br><span class="line">        <span class="comment"># print(request.path_info,&quot;KeLa.process_request&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> request.path_info == <span class="string">&quot;/x3/&quot;</span>:</span><br><span class="line">            token = request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> token == <span class="string">&quot;12938791923981723123&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;无权访问&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果用户向我的网站请求时，如果访问URL：</p><ul><li><p>&#x2F;x1&#x2F;</p></li><li><p>&#x2F;x2&#x2F;  ，比如携带凭证token，有凭证继续，无凭证返回无权访问。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x2/&lt;int:v1&gt;/&#x27;, x2</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8000/x1/10/</span><br><span class="line">http://127.0.0.1:8000/x1/20/</span><br><span class="line">http://127.0.0.1:8000/x1/11/</span><br></pre></td></tr></table></figure></li><li><p>&#x2F;x3&#x2F;</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># request.path_info</span></span><br><span class="line">        <span class="comment"># print(request.path_info,&quot;KeLa.process_request&quot;)</span></span><br><span class="line">        <span class="comment"># 以x2开头 或 正则   /x2/1111/   /x2/10/</span></span><br><span class="line">        <span class="comment"># if request.path_info == &quot;/x2/&quot;:</span></span><br><span class="line">        <span class="keyword">if</span> request.path_info.startswith(<span class="string">&quot;/x2/&quot;</span>):    <span class="comment"># 判断是不是以 /x2/开头</span></span><br><span class="line">            token = request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> token == <span class="string">&quot;12938791923981723123&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;无权访问&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_view</span>(<span class="params">self, request, view, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># request.path_info</span></span><br><span class="line">        <span class="comment"># print(request.path_info,&quot;KeLa.process_request&quot;)</span></span><br><span class="line">        url_name = request.resolver_match.url_name</span><br><span class="line">        <span class="keyword">if</span> url_name == <span class="string">&quot;x2&quot;</span>:</span><br><span class="line">            token = request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> token == <span class="string">&quot;12938791923981723123&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;无权访问&quot;</span>)</span><br></pre></td></tr></table></figure><p>关于自定义prcess_response，一般用于对请求要返回的数据进行修改。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        response[<span class="string">&quot;xx&quot;</span>] = <span class="string">&quot;wupeiqi&quot;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="1-2-使用（几乎不用）"><a href="#1-2-使用（几乎不用）" class="headerlink" title="1.2 使用（几乎不用）"></a>1.2 使用（几乎不用）</h2><ul><li><p>编写类，在类型定义：process_request、process_view、process_response、process_exception、process_template_response</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process_exception，视图函数有异常，处理出现异常时</span><br><span class="line">process_template_response，对于视图函数返回内容渲染扩展。</span><br><span class="line">- 在视图函数中如果返回的对象内部有一个render方法且可以被调用执行</span><br><span class="line">- process_template_response返回response参数（返回值）</span><br><span class="line">- 在自定义的MyReponse的render方法中必须返回HttpRespose</span><br></pre></td></tr></table></figure></li><li><p>中间件注册，在settings中的配置。</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="built_in">print</span>(request)</span><br><span class="line">        <span class="built_in">print</span>(exception, <span class="built_in">type</span>(exception))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;错误了&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;x1&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHttpResponse</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, body</span>):</span><br><span class="line">        <span class="variable language_">self</span>.body = body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="variable language_">self</span>.body)  <span class="comment"># 真正的返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> MyHttpResponse(<span class="string">&quot;x1&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_template_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;源代码-x1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x2</span>(<span class="params">request, v1</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;源代码-x2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x3</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;源代码-x3&quot;</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyHttpResponse</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, body</span>):</span><br><span class="line">        <span class="variable language_">self</span>.body = body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="variable language_">self</span>.body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x1</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;视图.x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> MyHttpResponse(<span class="string">&quot;x1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x2</span>(<span class="params">request, v1</span>):</span><br><span class="line">    <span class="keyword">return</span> MyHttpResponse(<span class="string">&quot;x2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x3</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> MyHttpResponse(<span class="string">&quot;x3&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">KeLaMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_template_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        response.body = <span class="string">f&quot;源代码-<span class="subst">&#123;response.body&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="1-3-源码"><a href="#1-3-源码" class="headerlink" title="1.3 源码"></a>1.3 源码</h2><h3 id="1-关于请求"><a href="#1-关于请求" class="headerlink" title="1.关于请求"></a>1.关于请求</h3><p><img src="https://s2.loli.net/2024/05/16/yoCPvtDnTzM9Wxr.png" alt="image-20230716111119343"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_server</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="comment"># 只要请求到来，就会走这里的代码</span></span><br><span class="line">    <span class="comment"># 1.根据请求 environ 进行后续业务处理</span></span><br><span class="line">    <span class="comment"># 2.返回内容。。。</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">bytes</span>(<span class="string">&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>), ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    httpd = make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>, run_server)  <span class="comment"># # 有请求到来时，执行  obj(environ, start_response)</span></span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 做一些初始化动作</span></span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;wupeiqi&quot;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,environ, start_response</span>):</span><br><span class="line">        <span class="comment"># 根据初始化的动作，去执行...</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">bytes</span>(<span class="string">&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>), ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj = Handler() <span class="comment"># 执行 </span></span><br><span class="line">    httpd = make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>, obj)  <span class="comment"># 有请求到来时，执行 obj(environ, start_response)</span></span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/16/RmezGMnuCr9qySw.png" alt="image-20230716112505648"></p><h3 id="2-启动Django项目WSGIHandler-init"><a href="#2-启动Django项目WSGIHandler-init" class="headerlink" title="2.启动Django项目WSGIHandler.__init__"></a>2.启动Django项目<code>WSGIHandler.__init__</code></h3><p><img src="https://s2.loli.net/2024/05/16/w9fpduBPR5yjJ1s.png" alt="image-20230716121612821"></p><p><img src="https://s2.loli.net/2024/05/16/vDkNrwV5Hu4sQoT.png" alt="image-20230716121637108"></p><h3 id="3-请求到来WSGIHandler-call"><a href="#3-请求到来WSGIHandler-call" class="headerlink" title="3.请求到来WSGIHandler.__call__"></a>3.请求到来<code>WSGIHandler.__call__</code></h3><p>流程：中间件的执行、路由匹配、视图函数的执行。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>1.7.x源码，底层实现，是基于好几个列表。</p></li><li><p>4.x源码，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数的作用域 + 闭包 + 装饰器</span><br><span class="line">面向对象 + __call__方法</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 核心</span><br><span class="line"># handler = SecurityMiddleware对象</span><br><span class="line">#             __call__</span><br><span class="line">#                process_request</span><br><span class="line">#                get_reponse = SessionMiddleware对象</span><br><span class="line">#                process_response </span><br><span class="line">#                              __call__</span><br><span class="line">#                                   process_request </span><br><span class="line">#                                   get_reponse = CommonMiddleware对象</span><br><span class="line">#                                   process_response</span><br><span class="line">#                                                 __call__</span><br><span class="line">#                                                     process_request</span><br><span class="line">#                                                     get_reponse = KeLaMiddleware对象</span><br><span class="line">#                                                     process_response</span><br></pre></td></tr></table></figure></li></ul><h3 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h3><ul><li>没悟透，不需要吾、只需要懂【不需要背+建立】</li><li>有些难<ul><li>入门，听懂+能用（全家桶）</li><li>文档，用法没有源码。</li><li>源码，到底是怎么实现的功能（不修改、扩展）【*】</li></ul></li><li>感觉听懂了，但又不清楚，这是不是<strong>学源码</strong>的正常情况，看B站视频写程序都很简单，也容易懂</li><li>课下还是得自己分析分析，一定会忘记</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt; &lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;中间件的运行流程图：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="中间件" scheme="https://kanoc.gitee.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Django-的国际化与本地化详解</title>
    <link href="https://kanoc.gitee.io/2024/05/13/Django-%E7%9A%84%E5%9B%BD%E9%99%85%E5%8C%96%E4%B8%8E%E6%9C%AC%E5%9C%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
    <id>https://kanoc.gitee.io/2024/05/13/Django-%E7%9A%84%E5%9B%BD%E9%99%85%E5%8C%96%E4%B8%8E%E6%9C%AC%E5%9C%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-05-13T15:48:04.000Z</published>
    <updated>2025-06-09T08:29:55.189Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Django 的国际化与本地化详解</strong></font></p><span id="more"></span><p>概要<br>随着全球化的发展，为 Web 应用提供多语言支持变得日益重要。Django 作为一个功能强大的 Web 框架，提供了一套完整的国际化（i18n）和本地化（l10n）工具，使得开发多语言应用变得简单。本文将详细介绍 Django 中的国际化和本地化机制，并通过丰富的示例来展示如何实现。</p><hr><h4 id="1-国际化与本地化基础"><a href="#1-国际化与本地化基础" class="headerlink" title="1. 国际化与本地化基础"></a>1. 国际化与本地化基础</h4><ul><li><strong>国际化（i18n）</strong>：指的是设计软件产品以便轻松适配不同语言和地区，而无需进行重大的改动。</li><li><strong>本地化（l10n）</strong>：指的是根据特定语言和地区的需要，将国际化的产品进行具体适配的过程。</li></ul><h4 id="2-配置-Django-项目进行国际化和本地化"><a href="#2-配置-Django-项目进行国际化和本地化" class="headerlink" title="2. 配置 Django 项目进行国际化和本地化"></a>2. 配置 Django 项目进行国际化和本地化</h4><p>首先，需要在 Django 项目的 <code>settings.py</code> 文件中启用国际化和本地化相关的设置。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="comment"># 启用国际化</span></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 启用本地化</span></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置默认语言</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;en-us&#x27;</span></span><br><span class="line"><span class="comment"># 设置支持的语言</span></span><br><span class="line">LANGUAGES = [</span><br><span class="line">    (<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;English&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;zh-hans&#x27;</span>, <span class="string">&#x27;Simplified Chinese&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 设置国际化翻译文件的路径</span></span><br><span class="line">LOCALE_PATHS = [os.path.join(BASE_DIR, <span class="string">&#x27;locale&#x27;</span>)]</span><br></pre></td></tr></table></figure><h4 id="3-创建和编译翻译文件"><a href="#3-创建和编译翻译文件" class="headerlink" title="3. 创建和编译翻译文件"></a>3. 创建和编译翻译文件</h4><p>Django 使用 GNU gettext 工具管理翻译。首先，需要创建翻译文件：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django-admin makemessages -l zh_hans</span><br></pre></td></tr></table></figure><p>这将为简体中文创建一个翻译文件。然后，可以在生成的 <code>.po</code> 文件中添加翻译。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># locale/zh_hans/LC_MESSAGES/django.po</span></span><br><span class="line"> </span><br><span class="line">msgid <span class="string">&quot;Welcome&quot;</span></span><br><span class="line">msgstr <span class="string">&quot;欢迎&quot;</span></span><br></pre></td></tr></table></figure><p>编译翻译文件：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django-admin compilemessages</span><br></pre></td></tr></table></figure><h4 id="4-在模板中使用国际化"><a href="#4-在模板中使用国际化" class="headerlink" title="4. 在模板中使用国际化"></a>4. 在模板中使用国际化</h4><p>在 Django 模板中，使用 <code>&#123;% trans %&#125;</code> 标签来标记需要翻译的字符串。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- templates/my_template.html --&gt;</span></span><br><span class="line"> </span><br><span class="line">&#123;% load i18n %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;% trans &quot;Welcome&quot; %&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-在-Python-代码中使用国际化"><a href="#5-在-Python-代码中使用国际化" class="headerlink" title="5. 在 Python 代码中使用国际化"></a>5. 在 Python 代码中使用国际化</h4><p>在 Python 代码中，使用 <code>gettext</code> 函数来标记和翻译字符串。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext <span class="keyword">as</span> _</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">request</span>):</span><br><span class="line">    message = _(<span class="string">&quot;Welcome&quot;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h4 id="6-本地化日期和时间"><a href="#6-本地化日期和时间" class="headerlink" title="6. 本地化日期和时间"></a>6. 本地化日期和时间</h4><p>Django 还提供了本地化日期和时间的功能。在模板中，可以使用 <code>&#123;% localize %&#125;</code> 标签。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load l10n %&#125;</span><br><span class="line"> </span><br><span class="line">&#123;% localize on %&#125;</span><br><span class="line">    &#123;&#123; my_date &#125;&#125;</span><br><span class="line">&#123;% endlocalize %&#125;</span><br></pre></td></tr></table></figure><h4 id="7-中间件和-URL-配置"><a href="#7-中间件和-URL-配置" class="headerlink" title="7. 中间件和 URL 配置"></a>7. 中间件和 URL 配置</h4><p>为了根据用户的语言偏好动态切换语言，可以使用 Django 的 <code>LocaleMiddleware</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"> </span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.locale.LocaleMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>同时，可以在 URL 中添加语言前缀来支持不同语言的页面。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.conf.urls.i18n <span class="keyword">import</span> i18n_patterns</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"> </span><br><span class="line">urlpatterns = i18n_patterns(</span><br><span class="line">    path(<span class="string">&#x27;welcome/&#x27;</span>, views.welcome, name=<span class="string">&#x27;welcome&#x27;</span>),</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="8-测试多语言功能"><a href="#8-测试多语言功能" class="headerlink" title="8. 测试多语言功能"></a>8. 测试多语言功能</h4><p>在开发过程中，需要确保各种语言的正确显示和切换。可以通过修改浏览器的语言设置来测试不同语言环境下的显示效果。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>通过 Django 的国际化和本地化功能，可以有效地为应用添加多语言支持，满足不同地区用户的需求。虽然这个过程可能涉及到复杂的配置和大量的翻译工作，但 Django 提供的工具和框架使这一过程变得更加可管理和高效。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Django 的国际化与本地化详解&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django的创建与配置</title>
    <link href="https://kanoc.gitee.io/2024/05/13/django%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://kanoc.gitee.io/2024/05/13/django%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2024-05-13T15:27:06.000Z</published>
    <updated>2025-06-09T08:36:22.975Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Django 纯净版的创建：</strong></font></p><span id="more"></span><p><font color=#f26522 size=5 face=宋体><strong>使用Django admin路径：</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py createsuperuser   <span class="comment"># 创建admin账户密码</span></span><br></pre></td></tr></table></figure><p><font color=#f26522 size=5 face=宋体><strong>安装Django环境：</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装virtualenv</span></span><br><span class="line">pip3 install virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建python环境文件夹</span></span><br><span class="line">python3 -m venv django_venv     <span class="comment"># (bash 运行结果，会在当前文件夹创建一个django_venv的文件夹)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># source /bin/activate</span></span><br><span class="line"><span class="built_in">source</span> ./django_venv/bin/activate</span><br><span class="line"><span class="comment"># 备注：如果进入虚拟环境成功，在命令行前面会有一个小括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入成功后，安装django环境</span></span><br><span class="line">pip3 install django <span class="comment">#国外服务器下载</span></span><br><span class="line">pip3 install django==2.2     <span class="comment">#  指定安装django版本2.2</span></span><br><span class="line">pip3 install django -i https://pypi.douban.com/simple   <span class="comment">#  国内豆瓣源加速连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网站项目工程</span></span><br><span class="line"><span class="comment"># django-admin startproject &lt;网站工程名&gt;</span></span><br><span class="line">django-admin startproject mysite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启python—django网站服务</span></span><br><span class="line">python3 manage.py runserver   <span class="comment"># 以默认的方式启动django服务</span></span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000  <span class="comment"># 命令行模式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> python3 manage.py runserver 0.0.0.0:8000 &gt; manage.log 2&gt;&amp;1 &amp;   <span class="comment"># 进程模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python manage.py startapp &lt;子应用名称&gt;</span></span><br><span class="line">python manage.py startapp index  <span class="comment"># 创建了一个名叫 的文件夹</span></span><br></pre></td></tr></table></figure><p><font color=#f26522 size=5 face=宋体><strong>settings：配置</strong></font></p><ul><li>如果使用默认的sqlite数据库：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在虚拟环境下使用：</span></span><br><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">BASE_DIR = Path(__file__).resolve().parent.parent</span><br><span class="line">SECRET_KEY = <span class="string">&#x27;django-insecure-p5t$3q2@12loakok_!**=^+c2h+fpgw#ca=zl$@in)(^=tcv^f&#x27;</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># &#x27;django.contrib.admin&#x27;,     #  纯净版django  # django 内置后台管理，简单数据库的增删改查</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.auth&#x27;,      #  纯净版django 剔除  # 用户登录和认证权限</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.contenttypes&#x27;,   #  纯净版django 剔除  # 复杂表结构关系</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.sessions&#x27;,    #  纯净版django 剔除  # 如果项目中有登录成功 让用户可以访问</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.messages&#x27;,    #  纯净版django 剔除  # 消息展示，依赖Session</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,   <span class="comment"># 静态资源处理，图片、css、js等</span></span><br><span class="line">]</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,   # 纯净版django 剔除</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,   # 纯净版django 剔除</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,   # 纯净版django 剔除</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">ROOT_URLCONF = <span class="string">&#x27;Dome_Datou.urls&#x27;</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="comment"># &#x27;django.contrib.auth.context_processors.auth&#x27;,   # 纯净版django 剔除</span></span><br><span class="line">                <span class="comment"># &#x27;django.contrib.messages.context_processors.messages&#x27;,    # 纯净版django 剔除</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line">WSGI_APPLICATION = <span class="string">&#x27;Dome_Datou.wsgi.application&#x27;</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  python3 manage.py makemigrations</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt;  python3 manage.py migrate</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: BASE_DIR / <span class="string">&#x27;db.sqlite3&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># LANGUAGE_CODE = &#x27;en-us&#x27;    # 设置 英文</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span>    <span class="comment"># 设置中文</span></span><br><span class="line"><span class="comment"># TIME_ZONE = &#x27;UTC&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span>  <span class="comment"># 亚洲上海</span></span><br><span class="line"><span class="comment"># 启用国际化</span></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 启用本地化</span></span><br><span class="line"><span class="comment"># USE_L10N = True</span></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;static/&#x27;</span></span><br><span class="line">DEFAULT_AUTO_FIELD = <span class="string">&#x27;django.db.models.BigAutoField&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=#00b2c2 size=5 face=宋体><strong>urls：配置</strong></font></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=#00b2c2 size=5 face=宋体><strong>Django 多App的创建：</strong></font></p><ul><li><p>1、在根目录下创建目录：<code>apps</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建apps</span></span><br><span class="line"><span class="comment"># 以下命令 在项目根目录下运行 就是在有 manage.py文件的那个路径</span></span><br><span class="line"><span class="built_in">mkdir</span> apps  <span class="comment"># 创建apps文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建即将创建的 app名称文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> apps/app01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app01</span></span><br><span class="line">python3 manage.py startapp app01 apps/app01   <span class="comment"># 在apps/app01 中创建app01程序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建即将创建的 app名称文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> apps/www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app01</span></span><br><span class="line">python3 manage.py startapp www apps/www   <span class="comment"># 在apps/www 中创建www程序</span></span><br></pre></td></tr></table></figure></li><li><p>修改app下面 apps.py中的配置文件</p></li></ul><p><img src="https://s2.loli.net/2024/05/14/jGvOfcRNmyKuEnk.png" alt="修改apps中的配置"></p><ul><li><p>在settings中组册app</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># &#x27;django.contrib.admin&#x27;,     #  纯净版django  # django 内置后台管理，简单数据库的增删改查</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.auth&#x27;,      #  纯净版django 剔除  # 用户登录和认证权限</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.contenttypes&#x27;,   #  纯净版django 剔除  # 复杂表结构关系</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.sessions&#x27;,    #  纯净版django 剔除  # 如果项目中有登录成功 让用户可以访问</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.messages&#x27;,    #  纯净版django 剔除  # 消息展示，依赖Session</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,   <span class="comment"># 静态资源处理，图片、css、js等</span></span><br><span class="line">    <span class="string">&#x27;apps.app01.apps.App01Config&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/05/14/goejlnG4syaN6ri.png" alt="image-20240514014804221"></p></li></ul><p><font color=#00b2c2 size=5 face=宋体><strong>路由：配置</strong></font></p><ul><li><p>路由分发配置：</p><ul><li><p>访问url：<a href="http://127.0.0.1:8000/web/user/">http://127.0.0.1:8000/web/user/</a></p></li><li><p>主路由：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;web/&quot;</span>, include(<span class="string">&quot;apps.www.urls&quot;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>子路由（apps&#x2F;www）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> apps.www <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;user/&quot;</span>, views.user)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>视图配置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;创建用户名成功 &gt;&gt;&gt; &quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>路由中 <code>name</code>的使用 &#x3D;&gt; 反向生成网址，登录成功 &#x3D;&gt; 跳转页面：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apps.app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 自定义请求 添加模块</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> URLPattern, ResolverMatch</span><br><span class="line"><span class="keyword">from</span> django.urls.resolvers <span class="keyword">import</span> RoutePattern, RegexPattern     <span class="comment"># RoutePattern：普通路由， 正则路由： RegexPattern</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyURLPattern</span>(<span class="title class_ inherited__">URLPattern</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolve</span>(<span class="params">self, path</span>):</span><br><span class="line">        <span class="keyword">match</span> = <span class="variable language_">self</span>.pattern.<span class="keyword">match</span>(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            new_path, args, captured_kwargs = <span class="keyword">match</span></span><br><span class="line">            <span class="comment"># Pass any default args as **kwargs.</span></span><br><span class="line">            kwargs = &#123;**captured_kwargs, **<span class="variable language_">self</span>.default_args&#125;</span><br><span class="line">            <span class="keyword">return</span> ResolverMatch(</span><br><span class="line">                <span class="variable language_">self</span>.callback,</span><br><span class="line">                args,</span><br><span class="line">                kwargs,</span><br><span class="line">                <span class="variable language_">self</span>.pattern.name,</span><br><span class="line">                route=<span class="built_in">str</span>(<span class="variable language_">self</span>.pattern),</span><br><span class="line">                captured_kwargs=captured_kwargs,</span><br><span class="line">                extra_kwargs=<span class="variable language_">self</span>.default_args,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRoutePattern</span>(<span class="title class_ inherited__">RoutePattern</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">self, path</span>):</span><br><span class="line">        <span class="keyword">match</span> = <span class="variable language_">self</span>.regex.search(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="comment"># RoutePattern doesn&#x27;t allow non-named groups so args are ignored.</span></span><br><span class="line">            kwargs = <span class="keyword">match</span>.groupdict()</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">                converter = <span class="variable language_">self</span>.converters[key]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    kwargs[key] = converter.to_python(value)</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> path[<span class="keyword">match</span>.end():], (), kwargs</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">  MyURLPattern(MyRoutePattern(<span class="string">&quot;login/&lt;str:v1&gt;&quot;</span>, name=<span class="string">&quot;n1&quot;</span>, is_endpoint=<span class="literal">True</span>), views.login, <span class="literal">None</span>, <span class="string">&quot;n1&quot;</span>),   <span class="comment"># 等价于 path(&#x27;login/&#x27;, views.login, name=&quot;n1&quot;),</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request, v1</span>):</span><br><span class="line">  url = reverse(<span class="string">&#x27;n1&#x27;</span>, kwargs=&#123;<span class="string">&quot;v1&quot;</span>: v1&#125;)   <span class="comment"># kwargs=&#123;&quot;&lt;路由中的键&gt;&quot;: &lt;用户传递进来的v1&gt;&#125;</span></span><br><span class="line">    <span class="built_in">print</span>(url) <span class="comment"># /login/sdad</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;欢迎登录！&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>urls.py</code> 配置:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> apps.app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义请求 添加模块</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> URLPattern, ResolverMatch</span><br><span class="line"><span class="keyword">from</span> django.urls.resolvers <span class="keyword">import</span> RoutePattern, RegexPattern     <span class="comment"># RoutePattern：普通路由， 正则路由： RegexPattern</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写 URLPattern</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyURLPattern</span>(<span class="title class_ inherited__">URLPattern</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolve</span>(<span class="params">self, path</span>):</span><br><span class="line">        <span class="keyword">match</span> = <span class="variable language_">self</span>.pattern.<span class="keyword">match</span>(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            new_path, args, captured_kwargs = <span class="keyword">match</span></span><br><span class="line">            <span class="comment"># Pass any default args as **kwargs.</span></span><br><span class="line">            kwargs = &#123;**captured_kwargs, **<span class="variable language_">self</span>.default_args&#125;</span><br><span class="line">            <span class="keyword">return</span> ResolverMatch(</span><br><span class="line">                <span class="variable language_">self</span>.callback,</span><br><span class="line">                args,</span><br><span class="line">                kwargs,</span><br><span class="line">                <span class="variable language_">self</span>.pattern.name,</span><br><span class="line">                route=<span class="built_in">str</span>(<span class="variable language_">self</span>.pattern),</span><br><span class="line">                captured_kwargs=captured_kwargs,</span><br><span class="line">                extra_kwargs=<span class="variable language_">self</span>.default_args,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写 RoutePattern</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRoutePattern</span>(<span class="title class_ inherited__">RoutePattern</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">self, path</span>):</span><br><span class="line">        <span class="keyword">match</span> = <span class="variable language_">self</span>.regex.search(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            <span class="comment"># RoutePattern doesn&#x27;t allow non-named groups so args are ignored.</span></span><br><span class="line">            kwargs = <span class="keyword">match</span>.groupdict()</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">                converter = <span class="variable language_">self</span>.converters[key]</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    kwargs[key] = converter.to_python(value)</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> path[<span class="keyword">match</span>.end():], (), kwargs</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 默认后台登录页面， 一般不用(自己重写)</span></span><br><span class="line">    <span class="comment"># path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/login/    # 默认地址 无传参</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/login/?a1=1&amp;a2=2   # 默认传递两个参数 ： a1=1   a2=2</span></span><br><span class="line">    MyURLPattern(MyRoutePattern(<span class="string">&quot;login/&quot;</span>, name=<span class="literal">None</span>, is_endpoint=<span class="literal">True</span>), views.login, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line">    <span class="comment"># path(&#x27;login/&#x27;, views.login),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/info/2222/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/info/2222/?a1=1&amp;a2=2</span></span><br><span class="line">    <span class="comment"># path(&quot;info/&lt;int:v1&gt;/&quot;, views.info),</span></span><br><span class="line">    MyURLPattern(MyRoutePattern(<span class="string">&quot;info/&lt;int:v1&gt;/&quot;</span>, name=<span class="literal">None</span>, is_endpoint=<span class="literal">True</span>), views.info, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/info/2222/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/info/2222/?a1=1&amp;a2=2</span></span><br><span class="line">    <span class="comment"># path(&quot;xx/&lt;path:v2&gt;/&quot;, views.s_path),</span></span><br><span class="line">    MyURLPattern(MyRoutePattern(<span class="string">&quot;xx/&lt;path:v2&gt;/&quot;</span>, name=<span class="literal">None</span>, is_endpoint=<span class="literal">True</span>), views.s_path, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # http://127.0.0.1:8000/xx/f9aa6e73-c310-8aab-a36c-e9758d8c4a1d/</span></span><br><span class="line">    <span class="comment"># path(&quot;xx/&lt;uuid:v3&gt;/&quot;, views.uuid),</span></span><br><span class="line">    MyURLPattern(MyRoutePattern(<span class="string">&quot;xx/&lt;uuid:v3&gt;/&quot;</span>, name=<span class="literal">None</span>, is_endpoint=<span class="literal">True</span>), views.uuid, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # http://127.0.0.1:8000/other/11/kanoc/</span></span><br><span class="line">    <span class="comment"># path(&quot;other/&lt;int:v1&gt;/&lt;str:v2&gt;/&quot;, views.other),</span></span><br><span class="line">    MyURLPattern(MyRoutePattern(<span class="string">&quot;other/&lt;int:v1&gt;/&lt;str:v2&gt;/&quot;</span>, name=<span class="literal">None</span>, is_endpoint=<span class="literal">True</span>), views.other, <span class="literal">None</span>, <span class="literal">None</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 要使用 re_path 要引入文件  from django.urls import path, re_path</span></span><br><span class="line">    <span class="comment"># # http://127.0.0.1:8000/yy/2024-05-14/</span></span><br><span class="line">    <span class="comment"># re_path(r&#x27;yy/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&#x27;, views.yy),</span></span><br><span class="line">    MyURLPattern(RegexPattern(<span class="string">r&#x27;yy/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&#x27;</span>, name=<span class="literal">None</span>, is_endpoint=<span class="literal">True</span>), views.yy, <span class="literal">None</span>, <span class="literal">None</span>),</span><br></pre></td></tr></table></figure></li><li><p><code>views.py</code> 配置:</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># path(&#x27;login/&#x27;, views.login),</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    <span class="comment"># # 如果 http://127.0.0.1:8000/login/?a1=1&amp;a2=2</span></span><br><span class="line">    <span class="comment"># # 则：</span></span><br><span class="line">    <span class="comment"># a1 = request.GET.get(&#x27;a1&#x27;)   # 获取 a1的值</span></span><br><span class="line">    <span class="comment"># a2 = request.GET.get(&#x27;a2&#x27;)   # 获取 a2的值</span></span><br><span class="line">    <span class="comment"># print(a1)</span></span><br><span class="line">    <span class="comment"># print(a2)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;欢迎登录！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># path(&quot;info/&lt;int:v1&gt;/&quot;, views.info)</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/info/2222/</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">request, v1</span>):</span><br><span class="line">    <span class="built_in">print</span>(v1)  <span class="comment"># 结果 ：2222</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;欢迎登录！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># path(&quot;xx/&lt;path:v2&gt;/&quot;, views.s_path),</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/xx/user/ps/ja/</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s_path</span>(<span class="params">request, v2</span>):</span><br><span class="line">    <span class="built_in">print</span>(v2)  <span class="comment"># 结果 ：user/ps/ja</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;欢迎登录！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># path(&quot;xx/&lt;uuid:v3&gt;/&quot;, views.uuid)</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/xx/f9aa6e73-c310-8aab-a36c-e9758d8c4a1d/</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uuid</span>(<span class="params">request, v3</span>):</span><br><span class="line">    <span class="built_in">print</span>(v3)  <span class="comment"># 结果 ：f9aa6e73-c310-8aab-a36c-e9758d8c4a1d</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;欢迎登录！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># path(&quot;other/&lt;int:v1&gt;/&lt;str:v2&gt;/&quot;, views.uuid),</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/other/11/kanoc/</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">other</span>(<span class="params">request, v1, v2</span>):</span><br><span class="line">    <span class="built_in">print</span>(v1, v2)  <span class="comment"># 结果 ：11    kanoc</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;欢迎登录！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此路由 为正则匹配路由， 要使用则正匹配路由 需要在路由配置文件中 引入模块 from django.urls import path, re_path</span></span><br><span class="line"><span class="comment"># re_path(r&#x27;yy/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&#x27;, views.other)</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/yy/2024-05-14/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yy</span>(<span class="params">request, v1, v2, v3</span>):</span><br><span class="line">    <span class="built_in">print</span>(v1, v2, v3)  <span class="comment"># 结果 ：2024 05 14</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;欢迎登录！&quot;</span>)</span><br></pre></td></tr></table></figure><p><font color=#00b2c2 size=5 face=宋体><strong> URL-CBV：写法</strong></font></p><ul><li>cbv写法 django会自动定位到 请求到方法，不用自己单独的去判断<code>post</code> 、<code>get</code>…</li></ul><p><img src="https://s2.loli.net/2024/05/14/M7szuLmA42P1Kkw.png" alt="image-20240514215331327"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> apps.CBV <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;cbv/&quot;</span>, views.CBV.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBV</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;The CBV get&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;The CBV post&quot;</span>)</span><br></pre></td></tr></table></figure><p><font color=#00b2c2 size=5 face=宋体><strong> URL-CBV：取值</strong></font></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> apps.CBV <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;cbv/&lt;int:v1&gt;&quot;</span>, views.CBV.as_view()),    <span class="comment"># 传递的 v1 会放到 self.kwargs</span></span><br><span class="line">    re_path(<span class="string">&quot;cbv/(\d+)/&quot;</span>, views.CBV.as_view()),    <span class="comment"># 传递的 参数 会放到 self.args</span></span><br><span class="line">    re_path(<span class="string">&quot;cbv/(?P&lt;v1&gt;\d+)/&quot;</span>, views.CBV.as_view())    <span class="comment"># 传递的 参数 会放到 self.kwargs</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CBV</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, v1</span>):</span><br><span class="line">       <span class="comment"># 非命名的方式 传递的参数，会放到 self.args 命名的参数，会放到self.kwargs</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.request, <span class="variable language_">self</span>.args, <span class="variable language_">self</span>.kwargs) </span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;The CBV get&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;The CBV post&quot;</span>)</span><br></pre></td></tr></table></figure><p><font color=#00b2c2 size=5 face=宋体><strong>ORM：配置</strong></font></p><ul><li>新建app：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py startapp app01 <span class="comment"># 在当前目录下 创建一个叫 app01的文件夹</span></span><br></pre></td></tr></table></figure><ul><li>settings 中组册app目录：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># &#x27;django.contrib.admin&#x27;,     #  纯净版django  # django 内置后台管理，简单数据库的增删改查</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.auth&#x27;,      #  纯净版django 剔除  # 用户登录和认证权限</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.contenttypes&#x27;,   #  纯净版django 剔除  # 复杂表结构关系</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.sessions&#x27;,    #  纯净版django 剔除  # 如果项目中有登录成功 让用户可以访问</span></span><br><span class="line">    <span class="comment"># &#x27;django.contrib.messages&#x27;,    #  纯净版django 剔除  # 消息展示，依赖Session</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,   <span class="comment"># 静态资源处理，图片、css、js等</span></span><br><span class="line">    <span class="string">&#x27;app01.apps.App01Config&#x27;</span>    <span class="comment"># 添加app</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>models.py 配置:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):</span><br><span class="line">    username = models.CharField(verbose_name=<span class="string">&quot;用户名&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(verbose_name=<span class="string">&quot;密码&quot;</span>, max_length=<span class="number">64</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>读取models 生成相应本地配置：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、&gt;&gt;&gt; python3 manage.py makemigrations   <span class="comment"># 生成配置  </span></span><br><span class="line"><span class="number">2</span>、&gt;&gt;&gt; python3 manage.py migrate  <span class="comment"># 载入配置</span></span><br></pre></td></tr></table></figure><p><font color=#00b2c2 size=5 face=宋体><strong>返回数据：</strong></font></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;The CBV get&quot;</span>)   <span class="comment"># 返回字符串</span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;status&quot;</span>: <span class="literal">True</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;小蘑菇&quot;</span>&#125;, json_dumps_params=&#123;<span class="string">&quot;ensure_ascii&quot;</span>: <span class="literal">False</span>&#125;)   <span class="comment"># 返回中文 而非 ascii 码</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">&quot;demo.html&quot;</span>)   <span class="comment"># 返回html 页面</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&quot;https://www.baidu.com&quot;</span>, permanent=<span class="literal">False</span>)   <span class="comment"># 返回 302 临时重定向</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&quot;https://www.baidu.com&quot;</span>, permanent=<span class="literal">True</span>)  <span class="comment"># 返回 301 永久重定向</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Django 纯净版的创建：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>收藏-常用脚本</title>
    <link href="https://kanoc.gitee.io/2024/05/11/%E6%94%B6%E8%97%8F-%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    <id>https://kanoc.gitee.io/2024/05/11/%E6%94%B6%E8%97%8F-%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2024-05-11T05:02:13.000Z</published>
    <updated>2025-06-09T04:02:31.963Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>收藏-常用脚本：</strong></font></p><span id="more"></span><p>[Python、Go 打包运行代码 ](<a href="https://blog.teadan.com/2024/04/02/Python%E3%80%81Go">https://blog.teadan.com/2024/04/02/Python、Go</a> 打包运行代码&#x2F;)</p><p><a href="https://blog.teadan.com/2024/03/20/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%8C%85(requirements.txt)%E7%9A%84%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AE%89%E8%A3%85/">python-虚拟环境包(requirements.txt)的导出与安装 </a></p><p><a href="https://blog.teadan.com/2023/03/20/Nginx%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Nginx跨域解决方案 </a></p><p><a href="https://blog.teadan.com/2023/05/22/Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Django_学习笔记 </a></p><p><a href="https://blog.teadan.com/2023/03/20/%E5%85%B3%E4%BA%8EJet-Brains%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E8%8E%B7%E5%8F%96/">关于Jet Brains历史版本获取 </a></p><p><a href="https://blog.teadan.com/2024/03/20/django-%E8%B7%A8%E5%9F%9F%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE/">django-跨域支持配置 </a></p><p><a href="https://blog.teadan.com/2023/03/20/%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2Django%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4Supervisor/">宝塔部署Django进程守护Supervisor</a></p><p><a href="https://blog.teadan.com/2024/05/01/pip-%E6%9B%B4%E6%8D%A2%E6%BA%90/">pip-更换源 </a></p><p><a href="https://blog.teadan.com/2024/04/24/%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7-%E4%BB%A3%E7%A0%81%E7%B1%BB/">必备工具-代码类 </a></p><p><a href="https://blog.teadan.com/2024/04/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E8%AE%BF%E9%97%AE%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8/">一键搞定多层跳板访问目标机器 </a></p><p><a href="https://blog.teadan.com/2024/01/25/Shadowsocks-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89/">Shadowsocks 一键安装脚本（四合一） </a></p><p><a href="https://blog.teadan.com/2023/07/11/%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/">必备工具 </a></p><p><a href="https://blog.teadan.com/2023/06/13/centos%E6%B5%8B%E7%BD%91%E9%80%9F%E8%84%9A%E6%9C%AC/">centos测网速脚本 </a></p><p><a href="https://blog.teadan.com/2023/05/27/python-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BF%94%E5%9B%9E%E5%80%BC/">python 时间格式返回值 </a></p><p><a href="https://blog.teadan.com/2023/03/20/ThreadPoolExecutor%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%94%E5%9B%9E%E5%80%BC/">ThreadPoolExecutor多线程返回值 </a></p><p><a href="https://blog.teadan.com/2023/03/20/V2ray%E5%AE%98%E6%96%B9%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC-2021-10/">V2ray官方一键安装脚本(2021&#x2F;10) </a></p><p><a href="https://blog.teadan.com/2023/03/20/m3u8%E4%B8%8B%E8%BD%BD%E5%8D%8F%E8%AE%AE%E4%B8%8D%E5%9C%A8%E7%99%BD%E5%90%8D%E5%8D%95/">m3u8下载协议不在白名单 </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;收藏-常用脚本：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="常用脚本" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="收藏" scheme="https://kanoc.gitee.io/tags/%E6%94%B6%E8%97%8F/"/>
    
    <category term="常用脚本" scheme="https://kanoc.gitee.io/tags/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>移动光猫-吉比特 H3-1S H3-2S获取超级密码方法(亲测可用！！)</title>
    <link href="https://kanoc.gitee.io/2024/04/15/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%AB-%E5%90%89%E6%AF%94%E7%89%B9-H3-1S-H3-2S%E8%8E%B7%E5%8F%96%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95-%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8%EF%BC%81%EF%BC%81/"/>
    <id>https://kanoc.gitee.io/2024/04/15/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%AB-%E5%90%89%E6%AF%94%E7%89%B9-H3-1S-H3-2S%E8%8E%B7%E5%8F%96%E8%B6%85%E7%BA%A7%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95-%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8%EF%BC%81%EF%BC%81/</id>
    <published>2024-04-15T11:56:17.000Z</published>
    <updated>2025-06-09T07:41:53.514Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><strong>移动光猫-吉比特 H3-1S H3-2S获取超级密码方法</strong>:</strong></font></p><span id="more"></span><p><font color=#f26522 size=4 face=宋体><strong>1.使用光猫背后的普通用户名登录进光猫，浏览器复制以下链接打开</strong></font></p><p><a href="http://192.168.1.1/usr=CMCCAdmin&psw=aDm8H%MdA&cmd=1&telnet.gch">http://192.168.1.1/usr=CMCCAdmin ... md=1&amp;telnet.gch</a></p><p><font color=#f26522 size=4 face=宋体><strong>2.电脑启用 telnet</strong></font></p><p><img src="https://s2.loli.net/2024/05/09/uKpnNMcji45sfxv.png" alt="开启telnet成功"></p><p><font color=#f26522 size=4 face=宋体><strong>3.通过telnet进入光猫</strong></font></p><p>输入：</p><p><code>telnet 192.168.1.1</code></p><p>用户名、密码如下：<br><code>CMCCAdmin</code><br><code>aDm8H%MdA</code></p><p><font color=red size=3 face=宋体><strong>注意：密码默认不显示 不需要重复输入</strong></font></p><p><img src="https://s2.loli.net/2024/05/09/4riCBgt57fanybh.png" alt="连接状态"><br><font color=#f26522 size=4 face=宋体><strong>4.查看一下登陆信息,可以看到账号密码全部进行了加密</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sidbg 1 DB p DevAuthInfo</span><br></pre></td></tr></table></figure><p>输入上面的命令后将会显示下面的内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Tbl name=<span class="string">&quot;DevAuthInfo&quot;</span> RowCount=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">&lt;Row No=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ViewName&quot;</span> val=<span class="string">&quot;IGD.AU1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Enable&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;IsOnline&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;AppID&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;User&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Pass&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Level&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Extra&quot;</span> val=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ExtraInt&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;/Row&gt;</span><br><span class="line">&lt;Row No=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ViewName&quot;</span> val=<span class="string">&quot;IGD.AU2&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Enable&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;IsOnline&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;AppID&quot;</span> val=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;User&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Pass&quot;</span> val=<span class="string">&quot;******&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Level&quot;</span> val=<span class="string">&quot;2&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;Extra&quot;</span> val=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">&lt;DM name=<span class="string">&quot;ExtraInt&quot;</span> val=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;/Row&gt;</span><br><span class="line">&lt;/Tbl&gt; </span><br></pre></td></tr></table></figure><p><font color=#f26522 size=4 face=宋体><strong>5.修改CMCCAdmin用户的登录密码</strong></font></p><p>输入下面的命令更改CMCCAdmin的密码：</p><p>sidbg 1 DB set DevAuthInfo 0 Pass admin</p><p>Pass后面是CMCCAdmin的登录密码</p><p>再输入下面的命令保存即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sidbg 1 DB save</span><br></pre></td></tr></table></figure><p>完成后即可使用CMCCAdmin+更改后的密码即可登录光猫后台。</p><p>祝各位使用愉快！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;strong&gt;移动光猫-吉比特 H3-1S H3-2S获取超级密码方法&lt;/strong&gt;:&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_S9-折腾" scheme="https://kanoc.gitee.io/categories/S9-%E6%8A%98%E8%85%BE/"/>
    
    <category term="光猫" scheme="https://kanoc.gitee.io/categories/S9-%E6%8A%98%E8%85%BE/%E5%85%89%E7%8C%AB/"/>
    
    
    <category term="运维" scheme="https://kanoc.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="移动" scheme="https://kanoc.gitee.io/tags/%E7%A7%BB%E5%8A%A8/"/>
    
    <category term="光猫" scheme="https://kanoc.gitee.io/tags/%E5%85%89%E7%8C%AB/"/>
    
    <category term="超级用户" scheme="https://kanoc.gitee.io/tags/%E8%B6%85%E7%BA%A7%E7%94%A8%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>一键搞定多层跳板访问目标机器</title>
    <link href="https://kanoc.gitee.io/2024/04/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E8%AE%BF%E9%97%AE%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8/"/>
    <id>https://kanoc.gitee.io/2024/04/13/%E4%B8%80%E9%94%AE%E6%90%9E%E5%AE%9A%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E8%AE%BF%E9%97%AE%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8/</id>
    <published>2024-04-13T06:47:07.000Z</published>
    <updated>2025-06-09T07:58:48.542Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>一、免密码登录ssh</strong></font></p><span id="more"></span><ul><li><p><font color=#f26522 size=4 face=宋体><strong>1、生成钥匙对</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成key，但首先你得安装ssh</span></span><br><span class="line">ssh-keygen -t rsa -b 2048</span><br><span class="line"><span class="comment"># 一路按回车换行，终端输出大概是这样</span></span><br><span class="line"><span class="comment"># Generating public/private rsa key pair.</span></span><br><span class="line"><span class="comment"># Enter file in which to save the key (/home/username/.ssh/id_rsa): </span></span><br><span class="line"><span class="comment"># Enter passphrase (empty for no passphrase): </span></span><br><span class="line"><span class="comment"># Enter same passphrase again: </span></span><br><span class="line"><span class="comment"># Your identification has been saved in /home/username/.ssh/id_rsa.</span></span><br><span class="line"><span class="comment"># Your public key has been saved in /home/username/.ssh/id_rsa.pub.</span></span><br></pre></td></tr></table></figure></li><li><p><font color=#f26522 size=4 face=宋体><strong>2、将共钥传输给远端主机</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># id@server 是你的用户名和远端主机地址喔</span></span><br><span class="line">ssh-copy-id <span class="built_in">id</span>@server</span><br><span class="line"><span class="comment"># 按规定输入远端主机密码后，成功的话能看到终端输出</span></span><br><span class="line"><span class="comment"># Number of key(s) added:        1</span></span><br></pre></td></tr></table></figure></li></ul><p><font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>公钥储存在远端主机这个文件里：.ssh&#x2F;authorized_keys，现在当你重新再通过SSH连接到远端主机时，已经不再需要密码啦！</strong></font></p><p><font color=#00b2c2 size=5 face=宋体><strong>二、使用<code>跳板</code>连接到<code>目标机器</code>(ProxyJump)</strong></font></p><p> 本节内容参考自：<a href="https://link.zhihu.com/?target=https://woodenrobot.me/2019/07/18/ssh-proxyjump/">SSH 通过跳板机直接访问内网机器</a>、<a href="https://atomlab.org/posts/code/ssh-trick/">SSH使用技巧-免密码&#x2F;自动代理</a></p><p><font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>需要 <code>OpenSSH 7.3</code> 以上版本才可以使用 <code>ProxyJump</code>, 使用下列命令查看<code>OpenSSH</code> 版本：</strong></font></p><ul><li><p><font color=#f26522 size=4 face=宋体><strong>1、直接命令<code>临时使用</code>：</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -J [email protected]:port1,[email protected]:port2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接使用上述命令通过跳板机直接登录内网机器，比如：</span></span><br><span class="line"><span class="comment"># ssh username@目标机器IP -p 22 -J username@跳板机IP:22</span></span><br><span class="line"><span class="comment"># 如果需要通过多个跳板机则以 , 分割：</span></span><br><span class="line"><span class="comment"># ssh username@目标机器IP -p 22 -J username1@跳板机IP1:22,username2@跳板机IP2:22</span></span><br></pre></td></tr></table></figure></li><li><p><font color=#f26522 size=4 face=宋体><strong>2、长期使用<code>配置文件</code>||<code>~\.ssh\config</code>：</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host tiaoban1    <span class="comment"># 代表跳板机 1</span></span><br><span class="line">    HostName 跳板机 1 的 IP</span><br><span class="line">    Port 22    <span class="comment"># ssh 连接端口</span></span><br><span class="line">    User username1    <span class="comment"># 跳板机 1 的用户名</span></span><br><span class="line"></span><br><span class="line">Host tiaoban2    <span class="comment"># 代表跳板机 2</span></span><br><span class="line">    HostName 跳板机 2 的 IP</span><br><span class="line">    Port 22    <span class="comment"># ssh 连接端口</span></span><br><span class="line">    User username2    <span class="comment"># 跳板机 2 的用户名</span></span><br><span class="line"></span><br><span class="line">Host target    <span class="comment"># 代表目标机器的名字</span></span><br><span class="line">    HostName 目标机器 IP    <span class="comment"># 这个是目标机器的 IP</span></span><br><span class="line">    Port 22    <span class="comment"># 目标机器 ssh 的端口</span></span><br><span class="line">    User username_target    <span class="comment"># 目标机器的用户名</span></span><br><span class="line">    ProxyJump tiaoban1,tiaoban2</span><br><span class="line"></span><br><span class="line">Host 10.10.0.*    <span class="comment"># 使用通配符 * 代表 10.10.0.1 - 10.10.0.255</span></span><br><span class="line">    Port 22    <span class="comment"># 服务器端口</span></span><br><span class="line">    User username    <span class="comment"># 服务器用户名</span></span><br><span class="line">    ProxyJump tiaoban1,tiaoban2</span><br></pre></td></tr></table></figure></li><li><p><font color=#f26522 size=4 face=宋体><strong>3、使用方法：</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh tiaoban1   <span class="comment"># 连接到跳板机 1</span></span><br><span class="line"></span><br><span class="line">ssh target   <span class="comment"># 连接到目标机器</span></span><br></pre></td></tr></table></figure></li></ul><p><font color=#00b2c2 size=5 face=宋体><strong>三、安装<code>expect</code>交互</strong></font></p><p> 本节内容参考自：<a href="https://blog.csdn.net/zhangjikuan/article/details/51105166">Shell脚本交互之：自动输入密码</a></p><p><font color=red size=4 face=宋体><strong>PS：</strong></font><font color=#b0171f size=3 face=宋体><strong>用于与控制台交互，如果上面的内容无法 免密登录服务器，可以用这种方法</strong></font></p><ul><li><p><font color=#f26522 size=4 face=宋体><strong>1、安装 <code>expect</code>：</strong></font></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ubuntu or debian</span></span><br><span class="line">sudo apt-get install expect</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7</span></span><br><span class="line">yum install expect</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mac os  // 没有brew 去搜一下，怎么安装 brew</span></span><br><span class="line">brew install expect</span><br></pre></td></tr></table></figure></li><li><p><font color=#f26522 size=4 face=宋体><strong>2、语法：</strong></font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="comment"># #!/bin/expect   //原文此处是错误，导致 no such file or directory  正确的写法是 #!/usr/bin/expect -f</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">timeout</span> 30</span><br><span class="line">spawn ssh -l jikuan.zjk 10.125.25.189</span><br><span class="line">expect <span class="string">&quot;password:&quot;</span></span><br><span class="line">send <span class="string">&quot;zjk123\r&quot;</span></span><br><span class="line">interact</span><br></pre></td></tr></table></figure></li><li><p><font color=#f26522 size=4 face=宋体><strong>3、说明：</strong></font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在运行脚本时候要expect  file，不能sh file了</span><br><span class="line">上面语句第一句是设定超时时间为30s，spawn是expect的语句，执行命令前都要加这句</span><br><span class="line">expect &quot;password：&quot;这句意思是交互获取是否返回password：关键字，因为在执行ssh时会返回输入password的提示：jikuan.zjk@10.125.25.189&#x27;s password:</span><br><span class="line">send就是将密码zjk123发送过去</span><br><span class="line">interact代表执行完留在远程控制台，不加这句执行完后返回本地控制台</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;一、免密码登录ssh&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="SSH" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/SSH/"/>
    
    
    <category term="跳板" scheme="https://kanoc.gitee.io/tags/%E8%B7%B3%E6%9D%BF/"/>
    
    <category term="ssh" scheme="https://kanoc.gitee.io/tags/ssh/"/>
    
    <category term="运维" scheme="https://kanoc.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
