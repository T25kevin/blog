<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://kanoc.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://kanoc.gitee.io/"/>
  <updated>2025-06-10T01:06:07.985Z</updated>
  <id>https://kanoc.gitee.io/</id>
  
  <author>
    <name>Kanoc Ge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu-apt安装ffmpeg最新版-ffmpeg6-or-ffmpeg7</title>
    <link href="https://kanoc.gitee.io/2025/06/04/Ubuntu-apt%E5%AE%89%E8%A3%85ffmpeg%E6%9C%80%E6%96%B0%E7%89%88-ffmpeg6-or-ffmpeg7/"/>
    <id>https://kanoc.gitee.io/2025/06/04/Ubuntu-apt%E5%AE%89%E8%A3%85ffmpeg%E6%9C%80%E6%96%B0%E7%89%88-ffmpeg6-or-ffmpeg7/</id>
    <published>2025-06-04T12:37:25.000Z</published>
    <updated>2025-06-10T01:06:07.985Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Ubuntu使用<code>apt</code>安装最新版本<code>FFmpeg</code></strong></font></p><span id="more"></span><h3 id="第一步：添加ppa源"><a href="#第一步：添加ppa源" class="headerlink" title="第一步：添加ppa源"></a>第一步：添加<code>ppa</code>源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二选一，重复使用会出现覆盖</span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:ubuntuhandbook1/ffmpeg7   <span class="comment"># ffmpeg7版本源</span></span><br><span class="line"><span class="comment"># sudo add-apt-repository ppa:ubuntuhandbook1/ffmpeg6   # ffmpeg6版本源</span></span><br></pre></td></tr></table></figure><h3 id="第二步：更新apt缓存"><a href="#第二步：更新apt缓存" class="headerlink" title="第二步：更新apt缓存"></a>第二步：更新<code>apt</code>缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="第三步：安装ffmpeg"><a href="#第三步：安装ffmpeg" class="headerlink" title="第三步：安装ffmpeg"></a>第三步：安装<code>ffmpeg</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ffmpeg</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 如果之前安装过 ：更新ffmpeg</span></span><br><span class="line"><span class="comment"># sudo apt upgrade ffmpeg    # 更新命令</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/06/04/kLrnaDMZRFsJQ75.jpg" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Ubuntu使用&lt;code&gt;apt&lt;/code&gt;安装最新版本&lt;code&gt;FFmpeg&lt;/code&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu配置安装GPU转码</title>
    <link href="https://kanoc.gitee.io/2025/05/26/Ubuntu%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85GPU%E8%BD%AC%E7%A0%81/"/>
    <id>https://kanoc.gitee.io/2025/05/26/Ubuntu%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85GPU%E8%BD%AC%E7%A0%81/</id>
    <published>2025-05-26T14:07:58.000Z</published>
    <updated>2025-06-10T01:07:50.100Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Ubuntu配置安装GPU转码</strong></font></p><span id="more"></span><h2 id="ubuntu-测试使用-GPU-ffmpeg-转码视频"><a href="#ubuntu-测试使用-GPU-ffmpeg-转码视频" class="headerlink" title="ubuntu 测试使用 GPU-ffmpeg 转码视频"></a>ubuntu 测试使用 GPU-ffmpeg 转码视频</h2><h3 id="额外命令："><a href="#额外命令：" class="headerlink" title="额外命令："></a>额外命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a   <span class="comment"># 查看发行版本及代号</span></span><br><span class="line">lspci | grep -i vga   <span class="comment"># 查看是否存在gpu</span></span><br></pre></td></tr></table></figure><h3 id="第一步：安装ffmpeg"><a href="#第一步：安装ffmpeg" class="headerlink" title="第一步：安装ffmpeg"></a>第一步：安装ffmpeg</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install ffmpeg</span><br></pre></td></tr></table></figure><h3 id="第二步：1-安装-NVIDIA-驱动"><a href="#第二步：1-安装-NVIDIA-驱动" class="headerlink" title="第二步：1. 安装 NVIDIA 驱动"></a>第二步：<strong>1. 安装 NVIDIA 驱动</strong></h3><h4 id="1-添加官方驱动仓库并更新"><a href="#1-添加官方驱动仓库并更新" class="headerlink" title="(1) 添加官方驱动仓库并更新"></a>(1) 添加官方驱动仓库并更新</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><h4 id="2-查看推荐驱动版本"><a href="#2-查看推荐驱动版本" class="headerlink" title="(2) 查看推荐驱动版本"></a>(2) 查看推荐驱动版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">== /sys/devices/pci0000:00/0000:00:02.0/0000:03:00.0 ==</span><br><span class="line">modalias : pci:v000010DEd00001C82sv000010DEsd00001C82bc03sc00i00</span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line">model    : GP107 [GeForce GTX 1050 Ti]</span><br><span class="line">driver   : nvidia-driver-570-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-550 - distro non-free</span><br><span class="line">driver   : nvidia-driver-418-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-570 - distro non-free recommended</span><br><span class="line">driver   : nvidia-driver-545 - distro non-free</span><br><span class="line">driver   : nvidia-driver-535-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-535 - distro non-free</span><br><span class="line">driver   : nvidia-driver-450-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-390 - distro non-free</span><br><span class="line">driver   : nvidia-driver-470 - distro non-free</span><br><span class="line">driver   : nvidia-driver-470-server - distro non-free</span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free <span class="built_in">builtin</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-安装推荐的驱动（如-570-版本）"><a href="#3-安装推荐的驱动（如-570-版本）" class="headerlink" title="(3) 安装推荐的驱动（如 570 版本）"></a>(3) 安装推荐的驱动（如 570 版本）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nvidia-driver-570</span><br></pre></td></tr></table></figure><h4 id="4-重启系统"><a href="#4-重启系统" class="headerlink" title="(4) 重启系统"></a>(4) 重启系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure><h4 id="5-验证驱动"><a href="#5-验证驱动" class="headerlink" title="(5) 验证驱动"></a>(5) 验证驱动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>正常输出应显示 GPU 状态：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 535.161.07   Driver Version: 535.161.07   CUDA Version: 12.2     |</span><br><span class="line">|-----------------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|=========================================+======================+======================|</span><br><span class="line">|   0  NVIDIA GeForce GTX 1050 Ti    Off  | 00000000:03:00.0 Off |                  N/A |</span><br><span class="line">| 30%   35C    P8              N/A /  75W |      0MiB /  4096MiB |      0%      Default |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br></pre></td></tr></table></figure><hr><h3 id="第三步：-安装-CUDA-工具包（可选）"><a href="#第三步：-安装-CUDA-工具包（可选）" class="headerlink" title="第三步： 安装 CUDA 工具包（可选）"></a><strong>第三步： 安装 CUDA 工具包（可选）</strong></h3><p>如果需开发 GPU 计算应用（如 AI、深度学习），安装 CUDA：</p><h4 id="1-访问-CUDA-Toolkit-Archive-选择版本（推荐-CUDA-11-8-或-12-x）"><a href="#1-访问-CUDA-Toolkit-Archive-选择版本（推荐-CUDA-11-8-或-12-x）" class="headerlink" title="(1) 访问 CUDA Toolkit Archive 选择版本（推荐 CUDA 11.8 或 12.x）"></a>(1) 访问 <a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive</a> 选择版本（推荐 CUDA 11.8 或 12.x）</h4><h4 id="2-通过命令行安装（以-CUDA-12-2-为例）"><a href="#2-通过命令行安装（以-CUDA-12-2-为例）" class="headerlink" title="(2) 通过命令行安装（以 CUDA 12.2 为例）"></a>(2) 通过命令行安装（以 CUDA 12.2 为例）</h4><ul><li>该命令需要去英伟达官网实时生成：<a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_local">CUDA Toolkit 12.9 Downloads | NVIDIA Developer</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin</span><br><span class="line">sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/12.9.0/local_installers/cuda-repo-ubuntu2204-12-9-local_12.9.0-575.51.03-1_amd64.deb</span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu2204-12-9-local_12.9.0-575.51.03-1_amd64.deb</span><br><span class="line">sudo cp /var/cuda-repo-ubuntu2204-12-9-local/cuda-*-keyring.gpg /usr/share/keyrings/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cuda-toolkit-12-9</span><br></pre></td></tr></table></figure><h4 id="3-添加变量"><a href="#3-添加变量" class="headerlink" title="(3) 添加变量"></a>(3) 添加变量</h4><p>虽然系统显示 <code>cuda-toolkit-12-9</code> 已安装，但 <code>nvcc</code> 的路径未添加到系统环境变量中。此时需要手动将 CUDA 的二进制目录加入 <code>PATH</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="4-验证-CUDA"><a href="#4-验证-CUDA" class="headerlink" title="(4) 验证 CUDA"></a>(4) 验证 CUDA</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure><p>正常输出应显示 CUDA 版本。</p><h3 id="第四步：-验证-GPU-加速是否生效"><a href="#第四步：-验证-GPU-加速是否生效" class="headerlink" title="第四步： 验证 GPU 加速是否生效"></a><strong>第四步： 验证 GPU 加速是否生效</strong></h3><h4 id="1、检查编码器"><a href="#1、检查编码器" class="headerlink" title="1、检查编码器"></a>1、检查编码器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -encoders | grep nvenc</span><br><span class="line"><span class="comment"># 应输出包含 h264_nvenc 的行</span></span><br></pre></td></tr></table></figure><p>正常输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@R7-13:~# ffmpeg -encoders | grep nvenc</span><br><span class="line">ffmpeg version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2000-2021 the FFmpeg developers</span><br><span class="line">  built with gcc 11 (Ubuntu 11.2.0-19ubuntu1)</span><br><span class="line">  configuration: --prefix=/usr --extra-version=0ubuntu0.22.04.1 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --<span class="built_in">arch</span>=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared</span><br><span class="line">  libavutil      56. 70.100 / 56. 70.100</span><br><span class="line">  libavcodec     58.134.100 / 58.134.100</span><br><span class="line">  libavformat    58. 76.100 / 58. 76.100</span><br><span class="line">  libavdevice    58. 13.100 / 58. 13.100</span><br><span class="line">  libavfilter     7.110.100 /  7.110.100</span><br><span class="line">  libswscale      5.  9.100 /  5.  9.100</span><br><span class="line">  libswresample   3.  9.100 /  3.  9.100</span><br><span class="line">  libpostproc    55.  9.100 / 55.  9.100</span><br><span class="line"> V....D h264_nvenc           NVIDIA NVENC H.264 encoder (codec h264)</span><br><span class="line"> V..... nvenc                NVIDIA NVENC H.264 encoder (codec h264)</span><br><span class="line"> V..... nvenc_h264           NVIDIA NVENC H.264 encoder (codec h264)</span><br><span class="line"> V..... nvenc_hevc           NVIDIA NVENC hevc encoder (codec hevc)</span><br><span class="line"> V....D hevc_nvenc           NVIDIA NVENC hevc encoder (codec hevc)</span><br></pre></td></tr></table></figure><h4 id="2、监控-GPU-使用情况"><a href="#2、监控-GPU-使用情况" class="headerlink" title="2、监控 GPU 使用情况"></a>2、监控 GPU 使用情况</h4><h5 id="2-1、nvidia-smi-watch-组合命令"><a href="#2-1、nvidia-smi-watch-组合命令" class="headerlink" title="2.1、nvidia-smi + watch 组合命令*"></a>2.1、<code>nvidia-smi</code> + <code>watch</code> 组合命令*</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每秒刷新一次 GPU 状态，适合快速查看核心利用率、显存占用和温度</span></span><br><span class="line">watch -n 1 nvidia-smi  <span class="comment"># Linux/macOS</span></span><br></pre></td></tr></table></figure><p>windows 方案：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="variable">$true</span>) &#123; nvidia-smi; Start-Sleep -Milliseconds 500 &#125;</span><br></pre></td></tr></table></figure><h5 id="2-2、nvtop（类-htop-工具）"><a href="#2-2、nvtop（类-htop-工具）" class="headerlink" title="2.2、nvtop（类 htop 工具）"></a>2.2、<strong><code>nvtop</code>（类 htop 工具）</strong></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 支持交互式操作和动态排序，适合多 GPU 服务器</span></span><br><span class="line"><span class="built_in">sudo</span> apt install nvtop  <span class="comment"># Ubuntu/Debian</span></span><br><span class="line">nvtop</span><br></pre></td></tr></table></figure><h2 id="第四步：使用GPU转码"><a href="#第四步：使用GPU转码" class="headerlink" title="第四步：使用GPU转码"></a>第四步：使用GPU转码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地文件转码</span></span><br><span class="line">ffmpeg -nostats -loglevel warning -hwaccel cuda -i ace.mp4 -vf <span class="string">&quot;scale=720:1270,setsar=1/1&quot;</span> -c:v h264_nvenc -preset p3 -rc vbr -b:v 0 -cq 23 -multipass fullres -tune hq -c:a aac -r 30 -y 3.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带请求头</span></span><br><span class="line">ffmpeg -nostats -loglevel warning -hwaccel cuda -headers <span class="string">&quot;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\r\nReferer: https://exx.tv/\r\n&quot;</span> -i <span class="string">&quot;https://xxx.m3u8&quot;</span> -vf <span class="string">&quot;scale=720:1270,setsar=1/1&quot;</span> -c:v h264_nvenc -preset p3 -rc vbr -b:v 0 -cq 23 -multipass fullres -tune hq -c:a aac -r 30 -y 3.mp4</span><br></pre></td></tr></table></figure><h4 id="命令详解："><a href="#命令详解：" class="headerlink" title="命令详解："></a>命令详解：</h4><h5 id="基础参数"><a href="#基础参数" class="headerlink" title="基础参数"></a><strong>基础参数</strong></h5><ol><li><strong><code>-nostats</code></strong><ul><li><strong>功能</strong>：禁用编码统计信息的输出。</li><li><strong>说明</strong>：默认情况下，FFmpeg 会实时显示比特率、帧数等统计信息，此参数可减少输出干扰。</li></ul></li><li><strong><code>-loglevel warning</code></strong><ul><li><strong>功能</strong>：设置日志级别为 <code>warning</code>。</li><li><strong>说明</strong>：仅显示警告和错误信息，抑制冗余日志，使输出更简洁。</li></ul></li><li><strong><code>-hwaccel cuda</code></strong><ul><li><strong>功能</strong>：启用 NVIDIA CUDA 硬件加速解码。</li><li><strong>说明</strong>：利用 GPU 加速视频解码流程，提升处理速度。</li></ul></li><li><strong><code>-i ace.mp4</code></strong><ul><li><strong>功能</strong>：指定输入文件为 <code>ace.mp4</code>。</li></ul></li></ol><hr><h5 id="视频处理参数"><a href="#视频处理参数" class="headerlink" title="视频处理参数"></a><strong>视频处理参数</strong></h5><ol><li><strong><code>-vf &quot;scale=720:1270,setsar=1/1&quot;</code></strong><ul><li><strong>功能</strong>：应用视频滤镜链。<ul><li><strong><code>scale=720:1270</code></strong>：将视频缩放至 <code>720x1270</code> 分辨率（注意宽高比可能被改变）。</li><li><strong><code>setsar=1/1</code></strong>：设置像素宽高比（Sample Aspect Ratio）为 1:1，确保方形像素显示。</li></ul></li><li><strong>说明</strong>：调整分辨率后需修正宽高比，避免播放时变形。</li></ul></li></ol><hr><h5 id="视频编码参数"><a href="#视频编码参数" class="headerlink" title="视频编码参数"></a><strong>视频编码参数</strong></h5><ol><li><strong><code>-c:v h264_nvenc</code></strong><ul><li><strong>功能</strong>：使用 NVIDIA NVENC 硬件编码器生成 H.264 视频流。</li><li><strong>说明</strong>：相比 CPU 编码（如 <code>libx264</code>），硬件编码速度更快，但压缩效率略低。</li></ul></li><li><strong><code>-preset p3</code></strong><ul><li><strong>功能</strong>：设置编码器预设为 <code>p3</code>。</li><li><strong>说明</strong>：NVENC 预设范围 <code>p1</code>（最快）到 <code>p7</code>（最慢但质量更好），<code>p3</code> 平衡速度与质量。</li></ul></li><li><strong><code>-rc vbr</code></strong><ul><li><strong>功能</strong>：使用可变比特率（Variable Bitrate）控制模式。</li><li><strong>说明</strong>：VBR 根据内容复杂度动态分配码率，相比 CBR（恒定码率）更节省存储。</li></ul></li><li><strong><code>-b:v 0</code></strong><ul><li><strong>功能</strong>：将视频目标比特率设为 <code>0</code>。</li><li><strong>说明</strong>：在 <code>-rc vbr</code> + <code>-cq</code> 模式下，此参数表示由质量参数（<code>-cq</code>）主导码率分配。</li></ul></li><li><strong><code>-cq 23</code></strong><ul><li><strong>功能</strong>：设置恒定质量模式的质量值为 <code>23</code>。</li><li><strong>说明</strong>：NVENC 的 <code>cq</code> 范围通常为 <code>0</code>（无损）到 <code>51</code>（最差），<code>23</code> 是常见高质量选择。</li></ul></li><li><strong><code>-multipass fullres</code></strong><ul><li><strong>功能</strong>：启用两趟编码（Two-Pass Encoding），使用全分辨率分析。</li><li><strong>说明</strong>：首趟分析视频内容，次趟优化码率分配，提升压缩效率（需更高计算资源）。</li></ul></li><li><strong><code>-tune hq</code></strong><ul><li><strong>功能</strong>：优化编码参数以追求高质量。</li><li><strong>说明</strong>：适用于对画质要求较高的场景，可能牺牲部分编码速度。</li></ul></li></ol><hr><h5 id="音频与帧率参数"><a href="#音频与帧率参数" class="headerlink" title="音频与帧率参数"></a><strong>音频与帧率参数</strong></h5><ol><li><strong><code>-c:a aac</code></strong><ul><li><strong>功能</strong>：使用 AAC 编码器压缩音频流。</li><li><strong>说明</strong>：AAC 是通用音频格式，平衡音质与文件大小。</li></ul></li><li><strong><code>-r 30</code></strong><ul><li><strong>功能</strong>：强制输出视频帧率为 <code>30 FPS</code>。</li><li><strong>说明</strong>：若输入帧率不一致，FFmpeg 会通过丢帧或插帧适配。</li></ul></li></ol><hr><h5 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a><strong>其他参数</strong></h5><ol><li><strong><code>-y</code></strong><ul><li><strong>功能</strong>：自动覆盖输出文件（<code>3.mp4</code>），无需用户确认。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Ubuntu配置安装GPU转码&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="转码" scheme="https://kanoc.gitee.io/tags/%E8%BD%AC%E7%A0%81/"/>
    
    <category term="gpu" scheme="https://kanoc.gitee.io/tags/gpu/"/>
    
    <category term="NVIDIA" scheme="https://kanoc.gitee.io/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>Django配置-channels-WS的ASGI服务器</title>
    <link href="https://kanoc.gitee.io/2025/05/22/Django%E9%85%8D%E7%BD%AE-channels-WS%E7%9A%84ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://kanoc.gitee.io/2025/05/22/Django%E9%85%8D%E7%BD%AE-channels-WS%E7%9A%84ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2025-05-22T01:06:19.000Z</published>
    <updated>2025-06-09T08:37:54.419Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Django配置-channels-WS的ASGI服务器</strong></font></p><span id="more"></span><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>该环境几乎算是目前最新的版本的asgi服务器了</p><ul><li><p>系统环境：MacOS（M系列）</p></li><li><p>Python版本：<code>3.12</code></p></li><li><p>Django版本：<code>5.1.7</code></p></li><li><p>daphne版本：<code>4.2.0</code></p></li><li><p>channels版本：<code>4.2.2</code></p></li><li><p>asgiref版本：<code>3.8.1</code></p></li></ul><p><img src="https://s2.loli.net/2025/05/22/IktHlRLTXoCMpZq.png" alt="image-20250522090858536"></p><h2 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── MyPorject</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── routing.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── apps</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   └── consumers.cpython-312.pyc</span><br><span class="line">│   ├── consumers.py（位于主app下）</span><br><span class="line">│   └── **其他app**</span><br><span class="line">├── manage.py</span><br></pre></td></tr></table></figure><h2 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a>特别说明：</h2><p><font color=red size=4 face=宋体><strong><code>channels</code> 大于 3.0.5 必须配置<code>daphne</code>或者<code>uvicorn</code>使用</strong></font></p><h3 id="第一步：安装带达芙妮的-channels版本，以及其他环境"><a href="#第一步：安装带达芙妮的-channels版本，以及其他环境" class="headerlink" title="第一步：安装带达芙妮的 channels版本，以及其他环境"></a>第一步：安装带<code>达芙妮</code>的 <code>channels</code>版本，以及其他环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install channels[daphne]</span><br><span class="line"><span class="comment"># daphne==4.2.0  channels==4.2.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Django</span></span><br><span class="line">pip install Django==5.1.7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装 asgiref</span></span><br><span class="line">pip install asgiref==3.8.1</span><br></pre></td></tr></table></figure><h3 id="第二步：配置-MyPorject-settings-py"><a href="#第二步：配置-MyPorject-settings-py" class="headerlink" title="第二步：配置 MyPorject__settings.py"></a>第二步：配置 <code>MyPorject__settings.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;daphne&quot;</span>,</span><br><span class="line">    <span class="string">&quot;其他app&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启 ASGI访问</span></span><br><span class="line">WSGI_APPLICATION = <span class="string">&#x27;MyPorject.wsgi.application&#x27;</span></span><br><span class="line"><span class="comment"># 添加 Channels 配置</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">&#x27;MyPorject.asgi.application&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第三步：配置-MyPorject-asgi-py"><a href="#第三步：配置-MyPorject-asgi-py" class="headerlink" title="第三步：配置 MyPorject__asgi.py"></a>第三步：配置 <code>MyPorject__asgi.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> routing</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;MyPorject.settings&#x27;</span>)</span><br><span class="line">django_asgi_app = get_asgi_application()</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: django_asgi_app,</span><br><span class="line">    <span class="string">&quot;websocket&quot;</span>: URLRouter(routing.websocket_urlpatterns)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步：新建-MyPorject-routing-py"><a href="#第四步：新建-MyPorject-routing-py" class="headerlink" title="第四步：新建 MyPorject__routing.py"></a>第四步：新建 <code>MyPorject__routing.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yourapp/routing.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> apps <span class="keyword">import</span> consumers</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">    <span class="comment"># xxxx/ws/x1</span></span><br><span class="line">    path(<span class="string">&#x27;ws&#x27;</span>, consumers.ChatConsumer.as_asgi()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="第五步：新建-MyPorject-apps-consumers-py"><a href="#第五步：新建-MyPorject-apps-consumers-py" class="headerlink" title="第五步：新建 MyPorject__apps__consumers.py"></a>第五步：新建 <code>MyPorject__apps__consumers.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> AsyncWebsocketConsumer</span><br><span class="line"><span class="keyword">from</span> channels.exceptions <span class="keyword">import</span> StopConsumer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatConsumer</span>(<span class="title class_ inherited__">AsyncWebsocketConsumer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.clientData = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.SendDataJsonKeys = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">self</span>.accept()</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, close_code=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">raise</span> StopConsumer()</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">receive</span>(<span class="params">self, text_data=<span class="literal">None</span>, bytes_data=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 传递回来的参数的转换</span></span><br><span class="line">            <span class="variable language_">self</span>.clientData = json.loads(text_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;传递过来参数了&quot;</span>, <span class="variable language_">self</span>.clientData)</span><br><span class="line">            <span class="variable language_">self</span>.SendDataJsonKeys = <span class="variable language_">self</span>.clientData.keys()   <span class="comment"># 获取传递上来的参数</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> text_data == <span class="string">&quot;断开&quot;</span>:</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.send(<span class="string">f&quot;<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.send(<span class="string">&quot;网络连接断开！&quot;</span>)</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Django配置-channels-WS的ASGI服务器&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django_channels" scheme="https://kanoc.gitee.io/categories/Python/Django-channels/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="ASGI服务器" scheme="https://kanoc.gitee.io/tags/ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="异步WEB" scheme="https://kanoc.gitee.io/tags/%E5%BC%82%E6%AD%A5WEB/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu22安装uv管理python</title>
    <link href="https://kanoc.gitee.io/2025/05/21/ubuntu22%E5%AE%89%E8%A3%85uv%E7%AE%A1%E7%90%86python/"/>
    <id>https://kanoc.gitee.io/2025/05/21/ubuntu22%E5%AE%89%E8%A3%85uv%E7%AE%A1%E7%90%86python/</id>
    <published>2025-05-20T16:13:25.000Z</published>
    <updated>2025-06-10T01:07:15.388Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ubuntu22安装uv管理器</strong></font></p><span id="more"></span><p>本文参考自：1、<a href="https://blog.csdn.net/muxuen/article/details/147544307">【Python】使用uv管理python虚拟环境_uv环境python-CSDN博客</a></p><p>本文参考自：2、<a href="https://blog.csdn.net/qq_41472205/article/details/145686414">uv 简易安装与更换国内镜像源_uv 国内源-CSDN博客</a></p><h3 id="1、安装uv管理器"><a href="#1、安装uv管理器" class="headerlink" title="1、安装uv管理器"></a>1、安装uv管理器</h3><ul><li>Mac || Linux安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><ul><li>Windows安装：</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1: 在 Windows 上：使用 Astral.sh 提供的安装脚本</span></span><br><span class="line">powershell <span class="literal">-ExecutionPolicy</span> ByPass <span class="literal">-c</span> <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2: 在 Windows 上：使用 scoop 安装 uv</span></span><br><span class="line">scoop install uv</span><br></pre></td></tr></table></figure><ul><li>pip安装方式：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure><ul><li>验证是否安装成功：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证安装是否成功</span></span><br><span class="line">uv --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看uv版本</span></span><br><span class="line">uv --version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/05/21/iSowqNnKdsv9CbB.jpg" alt="img"></p><h3 id="2、卸载uv："><a href="#2、卸载uv：" class="headerlink" title="2、卸载uv："></a>2、卸载uv：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv cache clean</span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv python dir)</span>&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv tool dir)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mac/linux</span></span><br><span class="line"><span class="built_in">rm</span> ~/.local/bin/uv ~/.local/bin/uvx</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uv.exe</span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uvx.exe</span><br></pre></td></tr></table></figure><h3 id="3、python管理："><a href="#3、python管理：" class="headerlink" title="3、python管理："></a>3、python管理：</h3><ul><li>查看python可用版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><ul><li>安装python3.13</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准安装方式</span></span><br><span class="line">uv python install 3.13</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他安装Python的方式实现，比如PyPy实现的python</span></span><br><span class="line">uv python install pypy@3.13</span><br></pre></td></tr></table></figure><ul><li>查找某个python版本的路径</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python find 3.10</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span></span><br></pre></td></tr></table></figure><ul><li>选用python版本（在具体的某个项目中，进入项目目录，使用如下命令指定选用的python版本）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python pin 版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令会在指定目录下创建一个 `.python-version` 文件，内容如下</span></span><br><span class="line"></span><br><span class="line">uv python pin 3.10</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Pinned `.python-version` to `3.10`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> .python-version</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 3.10</span></span><br></pre></td></tr></table></figure><h3 id="4、创建虚拟环境（项目）"><a href="#4、创建虚拟环境（项目）" class="headerlink" title="4、创建虚拟环境（项目）"></a>4、创建虚拟环境（项目）</h3><ul><li>方式1：创建项目有两种方式，第一种方式，先创建好项目目录，然后设置python版本并初始化uv虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python pin 3.10</span><br><span class="line">uv init <span class="comment"># 初始化</span></span><br></pre></td></tr></table></figure><ul><li>执行了uv init之后，会在当前目录下创建几个文件，同时也会在当前目录下执行git init创建出一个新的git仓库来</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv python pin 3.13</span><br><span class="line">Pinned `.python-version` to `3.13`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv init           </span><br><span class="line">Initialized project `test-code`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ <span class="built_in">ls</span></span><br><span class="line">README.md      main.py        pyproject.toml</span><br></pre></td></tr></table></figure><ul><li>方式2：另外一个方式是在init之后添加一个项目名，会自动创建项目文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uv init 项目名</span><br></pre></td></tr></table></figure><h3 id="5、添加依赖"><a href="#5、添加依赖" class="headerlink" title="5、添加依赖"></a>5、添加依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv add 依赖项</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如添加requests库</span></span><br><span class="line">uv add requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以指定具体版本</span></span><br><span class="line">uv add requests==版本号</span><br></pre></td></tr></table></figure><p>执行了这个命令后，会在当前目录下创建.venv虚拟环境目录（在vscode里面可以选择这个目录作为虚拟环境，否则代码解析会有问题），并添加我们要的依赖项，同时会新增一个uv.lock文件，用于存放依赖项版本相关的信息。pyproject.toml文件中的dependencies字段也会包含需要的依赖项。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ uv add requests</span><br><span class="line">Using CPython 3.13.1 interpreter at: /opt/homebrew/opt/python@3.13/bin/python3.13</span><br><span class="line">Creating virtual environment at: .venv</span><br><span class="line">Resolved 6 packages <span class="keyword">in</span> 13.85s</span><br><span class="line">Prepared 5 packages <span class="keyword">in</span> 5.55s</span><br><span class="line">Installed 5 packages <span class="keyword">in</span> 13ms</span><br><span class="line"> + certifi==2025.1.31</span><br><span class="line"> + charset-normalizer==3.4.1</span><br><span class="line"> + idna==3.10</span><br><span class="line"> + requests==2.32.3</span><br><span class="line"> + urllib3==2.4.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而且，从这个输出中也能看到，它自动使用了<code>.python-version</code>指定的3.13版本的python，和当前我们全局目录下的python3指向什么版本没有关系（我的全局python3指向的是3.10版本）</p><h3 id="6、运行程序"><a href="#6、运行程序" class="headerlink" title="6、运行程序"></a>6、运行程序</h3><p>依赖添加好后，就可以使用uv来运行python程序了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv run 程序文件名 [命令行参数]</span><br></pre></td></tr></table></figure><p>uv会自动按照我们的配置来运行程序，无序我们手动维护依赖项，也不需要手动去source各式各样的虚拟环境了。</p><h3 id="7、uvx命令"><a href="#7、uvx命令" class="headerlink" title="7、uvx命令"></a>7、uvx命令</h3><p>随着uv下载的还有一个uvx命令，uvx命令本质上是uv tool run命令的别名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uvx python main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv run main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv tool run main.py</span><br></pre></td></tr></table></figure><p>实际例子，如下这两个命令是等价的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ uvx --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line">    </span><br><span class="line">❯ uv tool run --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、设置下载包的镜像源"><a href="#8、设置下载包的镜像源" class="headerlink" title="8、设置下载包的镜像源"></a>8、设置下载包的镜像源</h3><p>uv下载第三方库本质上也是通过pypi源下载的，所以在国内网络环境中默认链接速度会很慢，可以在项目目录的<code>pyproject.toml</code>中添加如下内容来使用清华源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[tool.uv.index]]</span><br><span class="line">url = <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span><br><span class="line">default = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>运行uv add命令的时候也可以指定镜像源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv add --default-index https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br></pre></td></tr></table></figure><p>uv也提供了全局的配置项，可以通过环境变量<code>UV_DEFAULT_INDEX</code>配置镜像源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> UV_DEFAULT_INDEX=https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>全局的配置项优先级低于<code>pyproject.toml</code>中配置的镜像源。如果<code>pyproject.toml</code>里面配置了镜像源，则会使用<code>pyproject.toml</code>的配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ubuntu22安装uv管理器&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="pyenv" scheme="https://kanoc.gitee.io/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>windows安装配置pyenv</title>
    <link href="https://kanoc.gitee.io/2025/05/03/windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpyenv/"/>
    <id>https://kanoc.gitee.io/2025/05/03/windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpyenv/</id>
    <published>2025-05-03T05:44:09.000Z</published>
    <updated>2025-06-10T01:09:30.152Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>windows安装配置pyenv</strong></font></p><span id="more"></span><p>根据官方文档的命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-WebRequest -UseBasicParsing -Uri &quot;https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1&quot; -OutFile &quot;./install-pyenv-win.ps1&quot;; &amp;&quot;./install-pyenv-win.ps1&quot;</span><br></pre></td></tr></table></figure><p>直接执行该命令可能会出现错误。我们可以使用下面的方法：</p><ul><li>进入<a href="https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1">pyenv-win配置文件</a>的下载地址 ，将该名为<code>install-pyenv-win.ps1</code>的配置文件下载至电脑某目录(如<code>D:\pyenv</code>)</li><li>将脚本文件下载完成后，在终端(<code>PowerShell</code>) 中，使用cd命令切换到保存该脚本文件的目录，然后运行以下命令来执行脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./install-pyenv-win.ps1</span><br></pre></td></tr></table></figure><ul><li>执行完成后，运行下面的命令确认是否安装成功：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv --version</span><br></pre></td></tr></table></figure><p>显示以下画面，说明安装成功：</p><p><img src="https://s2.loli.net/2025/05/03/kTM8bmwgpzqLl9Q.webp" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;windows安装配置pyenv&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="windows" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/windows/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-部署Pyenv-并使用不同环境</title>
    <link href="https://kanoc.gitee.io/2025/04/28/ubuntu-%E9%83%A8%E7%BD%B2Pyenv-%E5%B9%B6%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83/"/>
    <id>https://kanoc.gitee.io/2025/04/28/ubuntu-%E9%83%A8%E7%BD%B2Pyenv-%E5%B9%B6%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83/</id>
    <published>2025-04-28T13:07:42.000Z</published>
    <updated>2025-06-10T01:05:50.370Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ubuntu 部署Pyenv 并使用不同环境</strong></font></p><span id="more"></span><h1 id="Pyenv版本优先级：Shell-Local-Global"><a href="#Pyenv版本优先级：Shell-Local-Global" class="headerlink" title="Pyenv版本优先级：Shell &gt; Local &gt; Global"></a>Pyenv版本优先级：Shell &gt; Local &gt; Global</h1><h3 id="Step-1-Update-Your-System"><a href="#Step-1-Update-Your-System" class="headerlink" title="Step 1: Update Your System"></a>Step 1: Update Your System</h3><p>首先，你需要确保你的 Ubuntu 系统是最新的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure><h3 id="Step-2-Install-Prerequisites"><a href="#Step-2-Install-Prerequisites" class="headerlink" title="Step 2: Install Prerequisites"></a>Step 2: Install Prerequisites</h3><p>PyENV 需要一些依赖项才能正常工作，运行以下命令安装它们。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libbz2-dev libncurses5-dev libncursesw5-dev libffi-dev libreadline-dev libssl-dev libsqlite3-dev liblzma-dev zlib1g-dev wget curl llvm libncurses-dev xz-utils git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Step-3-Install-PyENV"><a href="#Step-3-Install-PyENV" class="headerlink" title="Step 3: Install PyENV"></a>Step 3: Install PyENV</h3><p>执行以下命令，安装 PyENV</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/04/28/A6ftuGO3xJBviVI.png" alt="Installing PyENV on Ubuntu"></p><h3 id="Step-4-Update-Your-Shell-Configuration"><a href="#Step-4-Update-Your-Shell-Configuration" class="headerlink" title="Step 4: Update Your Shell Configuration"></a>Step 4: Update Your Shell Configuration</h3><p>安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 <strong>~&#x2F;.bashrc</strong> 文件，添加以下行，以便每次打开终端时它都会加载。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init --path)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>使用 source 命令，使更改生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Step-4-Update-Your-Shell-Configuration-root用户安装方式"><a href="#Step-4-Update-Your-Shell-Configuration-root用户安装方式" class="headerlink" title="Step 4: Update Your Shell Configuration(root用户安装方式)"></a>Step 4: Update Your Shell Configuration(root用户安装方式)</h3><p>安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 <strong>~&#x2F;.bashrc</strong> 文件，添加以下行，以便每次打开终端时它都会加载。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑全局环境变量文件（影响所有用户）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;/root/.pyenv&quot;&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br></pre></td></tr></table></figure><p>使用 source 命令，使更改生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使配置立即生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/pyenv.sh</span><br></pre></td></tr></table></figure><h3 id="Step-5-Install-Python-Versions"><a href="#Step-5-Install-Python-Versions" class="headerlink" title="Step 5: Install Python Versions"></a>Step 5: Install Python Versions</h3><p>现在您可以安装所需的任何版本的 Python。例如，要安装 Python 3.12</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install 3.12</span><br></pre></td></tr></table></figure><p>或者您可能需要安装 Python 2.7 等旧版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install 2.7</span><br></pre></td></tr></table></figure><p>列出系统上安装的所有 Python 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure><h3 id="Step-6-Set-a-Global-Python-Version"><a href="#Step-6-Set-a-Global-Python-Version" class="headerlink" title="Step 6: Set a Global Python Version"></a>Step 6: Set a Global Python Version</h3><p>您可以设置默认使用的全局 Python 版本，比如将 Python 3.12 设置为全局版本。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv global 3.12</span><br></pre></td></tr></table></figure><p>查看当前全局 Python 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/04/28/aWyE9BJAwHVMdmT.png" alt="PyENV Set Default Python Version"></p><h3 id="Step-7-设置其他版本"><a href="#Step-7-设置其他版本" class="headerlink" title="Step 7: 设置其他版本"></a>Step 7: 设置其他版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入你的项目目录</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置该目录的 Python 版本为 3.8</span></span><br><span class="line">pyenv local 3.8.12   # 假设已安装 3.8.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这会生成一个隐藏文件 `.python-version`，记录版本号</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 验证</span></span></span><br><span class="line">pyenv shell 3.8.12   # 临时设置</span><br><span class="line">python --version      # 应显示 3.8.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出临时模式（恢复全局或本地设置）</span></span><br><span class="line">pyenv shell --unset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全局版本</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">rm .python-version   # 删除版本标记文件</span><br></pre></td></tr></table></figure><h3 id="Step-8-使用虚拟环境隔离项目（推荐）"><a href="#Step-8-使用虚拟环境隔离项目（推荐）" class="headerlink" title="Step 8: 使用虚拟环境隔离项目（推荐）"></a>Step 8: 使用虚拟环境隔离项目（推荐）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建虚拟环境（基于 Python 3.8）</span></span><br><span class="line">pyenv virtualenv 3.8.12 my-legacy-env</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录并激活虚拟环境</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">pyenv local my-legacy-env  # 自动激活</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">python --version  # 显示 3.8.12，且环境独立</span><br><span class="line">pip list          # 显示该环境独立的包</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出虚拟环境</span></span><br><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure><h3 id="Step-9-验证版本切换"><a href="#Step-9-验证版本切换" class="headerlink" title="Step 9: 验证版本切换"></a>Step 9: 验证版本切换</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~  # 退出项目目录</span><br><span class="line">python --version  # 应显示全局版本 3.13.0</span><br><span class="line"></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">python --version  # 应显示本地版本 3.8.12 或虚拟环境</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ubuntu 部署Pyenv 并使用不同环境&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="pyenv" scheme="https://kanoc.gitee.io/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>破解cloudflare拦截神器_puppeteer</title>
    <link href="https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/"/>
    <id>https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/</id>
    <published>2025-02-24T18:52:13.000Z</published>
    <updated>2025-06-09T03:57:07.693Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>破解cloudflare拦截神器_puppeteer</strong></font></p><span id="more"></span><h3 id="安装番外：安装node-js环境"><a href="#安装番外：安装node-js环境" class="headerlink" title="安装番外：安装node.js环境"></a>安装番外：安装node.js环境</h3><h4 id="安装nvm管理器"><a href="#安装nvm管理器" class="headerlink" title="安装nvm管理器"></a>安装<code>nvm</code>管理器</h4><ul><li>第1步：mac 安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><ul><li>第2_1步：命令安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第2_2步：国内安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第3步：添加环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、这是本地不存在配置文件的时候提示需要添加的配置</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、这是本地存在配置文件的时候提示需要添加的配置（推荐）</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><ul><li>第4步：加载环境：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>第5步：测试安装是否成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm -v</span><br><span class="line">或</span><br><span class="line">$ nvm use system</span><br></pre></td></tr></table></figure><ul><li>第6步：<code>nvm</code>相关命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install stable</span><br><span class="line">nvm install &lt;version&gt;     <span class="comment"># 安装指定版本 node</span></span><br><span class="line">nvm uninstall &lt;version&gt;   <span class="comment"># 删除指定版本 node</span></span><br><span class="line"></span><br><span class="line">nvm use &lt;version&gt;         <span class="comment"># 切换使用指定的版本 node</span></span><br><span class="line">nvm <span class="built_in">alias</span> default &lt;version&gt;   <span class="comment"># 永久版本 - 所有窗口生效指定版本</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">ls</span>    <span class="comment"># 列出所有安装的版本</span></span><br><span class="line">nvm ls-remote   <span class="comment"># 列出所有远程服务器的版本（官方 node version list）</span></span><br><span class="line">nvm current   <span class="comment"># 显示当前的版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;   <span class="comment"># 给不同的版本号添加别名</span></span><br><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt;   <span class="comment"># 删除已定义的别名</span></span><br><span class="line"></span><br><span class="line">nvm reinstall-packages &lt;version&gt;     <span class="comment"># 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</span></span><br></pre></td></tr></table></figure><h3 id="第一步：安装puppeteer"><a href="#第一步：安装puppeteer" class="headerlink" title="第一步：安装puppeteer"></a>第一步：安装puppeteer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i puppeteer</span><br></pre></td></tr></table></figure><h3 id="第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth"><a href="#第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth" class="headerlink" title="第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth"></a>第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install puppeteer-extra puppeteer-extra-plugin-stealth express</span><br></pre></td></tr></table></figure><h3 id="第三步：使用nodejs获取数据："><a href="#第三步：使用nodejs获取数据：" class="headerlink" title="第三步：使用nodejs获取数据："></a>第三步：使用nodejs获取数据：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StealthPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra-plugin-stealth&#x27;</span>)</span><br><span class="line">puppeteer.<span class="title function_">use</span>(<span class="title class_">StealthPlugin</span>())</span><br><span class="line"><span class="keyword">const</span> &#123;executablePath&#125; = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puppeteer.<span class="title function_">launch</span>(&#123; <span class="attr">headless</span>: <span class="literal">false</span>, <span class="attr">executablePath</span>: <span class="title function_">executablePath</span>() &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> browser =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://xxx.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Promise 来等待</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))  <span class="comment">// 等待 2 秒</span></span><br><span class="line">    <span class="comment">// 获取页面的文本内容</span></span><br><span class="line">    <span class="keyword">const</span> pageContent = <span class="keyword">await</span> page.<span class="title function_">evaluate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span>;  <span class="comment">// 获取页面的所有文本</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印页面文本内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pageContent);</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;cointracker_home.png&#x27;</span>, <span class="attr">fullPage</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步：当然你也可以把他写成接口"><a href="#第四步：当然你也可以把他写成接口" class="headerlink" title="第四步：当然你也可以把他写成接口"></a>第四步：当然你也可以把他写成接口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.....</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;破解cloudflare拦截神器_puppeteer&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A7-逆向" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/"/>
    
    <category term="puppeteer" scheme="https://kanoc.gitee.io/categories/A7-%E9%80%86%E5%90%91/puppeteer/"/>
    
    
    <category term="逆向" scheme="https://kanoc.gitee.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="nodejs" scheme="https://kanoc.gitee.io/tags/nodejs/"/>
    
    <category term="puppeteer" scheme="https://kanoc.gitee.io/tags/puppeteer/"/>
    
    <category term="后端" scheme="https://kanoc.gitee.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-设置swap交换空间</title>
    <link href="https://kanoc.gitee.io/2025/02/17/ubuntu-%E8%AE%BE%E7%BD%AEswap%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/"/>
    <id>https://kanoc.gitee.io/2025/02/17/ubuntu-%E8%AE%BE%E7%BD%AEswap%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/</id>
    <published>2025-02-17T01:23:10.000Z</published>
    <updated>2025-06-10T01:05:39.505Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><code>ubuntu</code> 设置<code>swap</code>交换空间</strong></font></p><span id="more"></span><p>在 <code>Ubuntu</code> 上设置交换空间（<code>Swap Space</code>）可以帮助系统在物理内存不足时使用硬盘空间来存储临时数据。以下是设置交换空间的步骤：</p><h3 id="步骤-1-检查当前交换空间"><a href="#步骤-1-检查当前交换空间" class="headerlink" title="步骤 1: 检查当前交换空间"></a>步骤 1: 检查当前交换空间</h3><p>首先，检查当前的交换空间是否已启用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure><p>如果没有输出，表示当前没有启用的交换空间。</p><h3 id="步骤-2-创建交换文件"><a href="#步骤-2-创建交换文件" class="headerlink" title="步骤 2: 创建交换文件"></a>步骤 2: 创建交换文件</h3><ol><li>选择交换文件的大小：决定你想要创建的交换文件的大小。例如，假设你想创建一个 <code>2GB</code> 的交换文件。</li><li>创建交换文件：使用 <code>fallocate</code> 命令创建交换文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 2G /swapfile</span><br></pre></td></tr></table></figure><p>如果 fallocate 不可用，可以使用 <code>dd</code> 命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dd if=/dev/zero of=/swapfile bs=1G count=2  </span><br></pre></td></tr></table></figure><h3 id="步骤-3-设置交换文件权限"><a href="#步骤-3-设置交换文件权限" class="headerlink" title="步骤 3: 设置交换文件权限"></a>步骤 3: 设置交换文件权限</h3><p>为了安全起见，设置交换文件的权限，使其只能由 <code>root</code> 用户访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure><h3 id="步骤-4-将文件设置为交换空间"><a href="#步骤-4-将文件设置为交换空间" class="headerlink" title="步骤 4: 将文件设置为交换空间"></a>步骤 4: 将文件设置为交换空间</h3><p>使用以下命令将文件设置为交换空间：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure><h3 id="步骤-5-启用交换空间"><a href="#步骤-5-启用交换空间" class="headerlink" title="步骤 5: 启用交换空间"></a>步骤 5: 启用交换空间</h3><p>启用交换空间：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure><h3 id="步骤-6-验证交换空间"><a href="#步骤-6-验证交换空间" class="headerlink" title="步骤 6: 验证交换空间"></a>步骤 6: 验证交换空间</h3><p>再次检查交换空间是否已启用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure><p>你应该能看到 <code>/swapfile</code> 列在输出中。</p><h3 id="步骤-7-设置开机自动挂载"><a href="#步骤-7-设置开机自动挂载" class="headerlink" title="步骤 7: 设置开机自动挂载"></a>步骤 7: 设置开机自动挂载</h3><p>为了在系统重启后自动启用交换空间，需要将其添加到 <code>/etc/fstab</code> 文件中：</p><ol><li>打开 <code>/etc/fstab</code> 文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure><ol start="2"><li>在文件末尾添加以下行：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/swapfile none swap sw 0 0</span><br></pre></td></tr></table></figure><p>保存并退出编辑器（在 <code>nano</code> 中，按 <code>CTRL + X</code>，然后按 <code>Y</code> 确认保存）。</p><h3 id="步骤-8-调整交换空间使用策略（可选）"><a href="#步骤-8-调整交换空间使用策略（可选）" class="headerlink" title="步骤 8: 调整交换空间使用策略（可选）"></a>步骤 8: 调整交换空间使用策略（可选）</h3><p>你可以调整系统使用交换空间的策略。默认情况下，<code>Linux</code> 系统会在物理内存使用到一定程度后才会使用交换空间。你可以通过调整<code> vm.swappiness</code> 参数来改变这一行为：</p><p>查看当前的 <code>swappiness</code> 值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure><p>临时设置 <code>swappiness</code> 值（范围 <code>0-100</code>，值越低，越不倾向于使用交换空间）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=10</span><br></pre></td></tr></table></figure><p>要永久更改 <code>swappiness</code> 值，可以编辑 <code>/etc/sysctl.conf</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在文件中添加或修改以下行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.swappiness=10</span><br></pre></td></tr></table></figure><p>保存并退出编辑器。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，你可以在 <code>Ubuntu</code> 上成功设置和启用交换空间。这将有助于在物理内存不足时提高系统的稳定性和性能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;code&gt;ubuntu&lt;/code&gt; 设置&lt;code&gt;swap&lt;/code&gt;交换空间&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/tags/ubuntu/"/>
    
    <category term="swap" scheme="https://kanoc.gitee.io/tags/swap/"/>
    
    <category term="交换空间" scheme="https://kanoc.gitee.io/tags/%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你搭建Docker私有仓库Harbor</title>
    <link href="https://kanoc.gitee.io/2025/02/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93Harbor/"/>
    <id>https://kanoc.gitee.io/2025/02/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BADocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93Harbor/</id>
    <published>2025-02-16T11:37:35.000Z</published>
    <updated>2025-06-09T07:39:15.791Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>手把手教你搭建Docker私有仓库Harbor</strong></font></p><p>本文搬运自：<a href="https://www.cnblogs.com/sowler/p/18242819">手把手教你搭建Docker私有仓库Harbor - sowler - 博客园</a></p><span id="more"></span><h4 id="1、什么是Docker私有仓库"><a href="#1、什么是Docker私有仓库" class="headerlink" title="1、什么是Docker私有仓库"></a>1、什么是Docker私有仓库</h4><p>Docker私有仓库是用于存储和管理Docker镜像的私有存储库。Docker默认会有一个公共的仓库Docker Hub，而与Docker Hub不同，私有仓库是受限访问的，只有授权用户才能够上传、下载和管理其中的镜像。这种私有仓库可以部署在本地云环境中，用于组织内部开发、测试和生产环境中的容器镜像管理。保证数据安全性。</p><h4 id="2、Docker有哪些私有仓库"><a href="#2、Docker有哪些私有仓库" class="headerlink" title="2、Docker有哪些私有仓库"></a>2、Docker有哪些私有仓库</h4><p><strong>以下是一些常见的Docker私有仓库：</strong></p><ul><li><strong>Harbor</strong>：作为一个企业级的Docker Registry服务，Harbor提供了安全、可信赖的镜像存储和管理功能。它支持RBAC权限控制、镜像复制、镜像签名、漏洞扫描等功能。</li><li><strong>Docker Trusted Registry (DTR)</strong>：由Docker官方推出的企业级Docker私有仓库服务，与Docker Engine紧密集成，支持高度的安全性和可靠性。</li><li><strong>Portus</strong>：一个开源的Docker镜像管理和认证服务，提供用户管理、团队管理、镜像审核等功能，与Docker Registry兼容。</li><li><strong>Nexus Repository Manager</strong>：虽然主要是用于构建和管理Java组件，但也可以用作Docker私有仓库。它具有强大的存储管理和权限控制功能。</li><li><strong>GitLab Container Registry</strong>：GitLab集成了容器注册表功能，允许您存储、管理和分发Docker镜像。这是GitLab自带的功能，无需额外部署。</li><li><strong>AWS Elastic Container Registry (ECR)</strong>：如果使用AWS云服务，可以考虑使用AWS ECR作为私有仓库。它与AWS的其他服务集成紧密，对AWS用户来说是一个方便的选择。</li></ul><p>本篇使用Harbor搭建Docker私有仓库。</p><h4 id="3、Harbor简介"><a href="#3、Harbor简介" class="headerlink" title="3、Harbor简介"></a>3、Harbor简介</h4><p>Harbor是一个开源的企业级Docker Registry服务，它提供了一个安全、可信赖的仓库来存储和管理Docker镜像。Harbor翻译为中文名称为”庇护；居住;”。可以理解为是Docker镜像的”居住环境”或者是镜像的”庇护所”。Harbor最初由VMware公司开发，旨在解决企业级Docker镜像管理的安全和可信任性问题。VMware于2016年发布，在2017年，VMware将Harbor开源，这使得更广泛的社区和组织可以自由地使用和贡献代码。Harbor是一个成熟、功能丰富且安全可靠的企业级Docker Registry服务，为企业容器化应用的部署和管理提供了强大的支持。</p><p>Harbor官网地址：<a href="https://goharbor.io/">Harbor (goharbor.io)</a></p><p>Github开源地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p><h4 id="4、Harbor下载"><a href="#4、Harbor下载" class="headerlink" title="4、Harbor下载"></a>4、Harbor下载</h4><h5 id="4-1、通过Linux命令下载"><a href="#4-1、通过Linux命令下载" class="headerlink" title="4.1、通过Linux命令下载"></a>4.1、通过Linux命令下载</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz</span><br></pre></td></tr></table></figure><h5 id="4-2、GitHub下载"><a href="#4-2、GitHub下载" class="headerlink" title="4.2、GitHub下载"></a>4.2、GitHub下载</h5><p>下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a> 下载离线版本</p><p><img src="https://s2.loli.net/2025/02/16/meHfNQrXgctVMnx.png" alt="img"></p><p>下载成功后，把包通过 <code>xftp</code> 上传到服务器。</p><h5 id="4-3、解压"><a href="#4-3、解压" class="headerlink" title="4.3、解压"></a>4.3、解压</h5><p>解压文件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v2.10.0.tgz </span><br></pre></td></tr></table></figure><h4 id="5、启动Harbor"><a href="#5、启动Harbor" class="headerlink" title="5、启动Harbor"></a>5、启动Harbor</h4><h5 id="5-1、修改配置文件"><a href="#5-1、修改配置文件" class="headerlink" title="5.1、修改配置文件"></a>5.1、修改配置文件</h5><p>复制<code>harbor.yml.tmpl</code> 文件并重命名为<code>harbor.yml</code>修改此配置文件，需要设置hostname、端口、数据库密码等。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> harbor.yml.tmpl harbor.yml <span class="comment">#拷贝</span></span><br><span class="line"></span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改hostname的值，如果没有域名就使用本机IP地址</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.42</span><span class="number">.133</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置启动端口号</span></span><br><span class="line"><span class="comment"># http related config </span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有申请证书，需要隐藏https</span></span><br><span class="line"><span class="comment">#https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line"><span class="comment">#  port: 443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line"><span class="comment">#  certificate: /your/certificate/path</span></span><br><span class="line"><span class="comment">#  private_key: /your/private/key/path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动成功后，admin用户登录密码</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">AdminHarbor12345</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/02/16/uflyIABjz3amckh.png" alt="img"></p><h5 id="5-2、启动"><a href="#5-2、启动" class="headerlink" title="5.2、启动"></a>5.2、启动</h5><p>配置文件修改成功后，执行 <code>install.sh</code> 脚本进行安装harbor</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./install.sh </span><br></pre></td></tr></table></figure><p>启动报错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Step 0]: checking if docker is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 26.1.3</span><br><span class="line"></span><br><span class="line">[Step 1]: checking docker-compose is installed ...</span><br><span class="line">/opt/harbor/common.sh: line 119: docker-compose: command not found</span><br><span class="line">✖ Failed to parse docker-compose version.</span><br></pre></td></tr></table></figure><p>可以看到，该服务器安装的 <code>docker</code> 没有安装 <code>docker-compose</code> 插件</p><h5 id="5-3、安装docker-compose"><a href="#5-3、安装docker-compose" class="headerlink" title="5.3、安装docker-compose"></a>5.3、安装docker-compose</h5><p>进入<code>docker-compose</code> 官网下载执行文件，地址： <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 下载成功后，把可执行文件加入<code>Linux</code> 系统命令目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> docker-compose-linux-x86_64 /usr/local/bin/</span><br></pre></td></tr></table></figure><p>重命名：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> docker-compose-linux-x86_64 docker-compose</span><br></pre></td></tr></table></figure><p>授权：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>执行命令查看是否安装成功：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>如果需要卸载，直接删除即可：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h5 id="5-4、再次启动"><a href="#5-4、再次启动" class="headerlink" title="5.4、再次启动"></a>5.4、再次启动</h5><p>再次执行 <code>./install.sh</code></p><p><img src="https://s2.loli.net/2025/02/16/ilOpYecKCy7wGTZ.png" alt="img"></p><p>提示安装成功。接下来就可以访问Harbor了。访问IP+端口：<a href="http://192.168.42.133:5000/">http://192.168.42.133:5000</a><br><img src="https://s2.loli.net/2025/02/16/FrRKhnkacDUV8lG.png" alt="img"></p><p>访问成功，由于Harbor是通过docker管理的，所以启动非常方便。如果首页访问成功说明Docker私有仓库已经部署成功了。</p><h4 id="6、Harbor-Web页面操作说明"><a href="#6、Harbor-Web页面操作说明" class="headerlink" title="6、Harbor Web页面操作说明"></a>6、Harbor Web页面操作说明</h4><p>默认用户名是admin，密码是启动时设置的密码：<code>AdminHarbor12345</code></p><p><img src="https://s2.loli.net/2025/02/16/9SnuUoJsKBzCFpA.png" alt="img"></p><p>登录成功进入主页面了。从系统首页可以看到系统分为三个菜单：项目、日志、系统管理。</p><h5 id="6-1、项目"><a href="#6-1、项目" class="headerlink" title="6.1、项目"></a>6.1、项目</h5><p>项目管理顾名思义就是用来管理项目的。可以为每一个开发项目创建一个私有项目库，然后把Docker镜像存储到指定的项目中，为每个项目实现项目镜像隔离。创建项目的时候，Harbor提供了公开库（public repository）和私有库（private repository）两种类型的镜像存储空间。</p><p><img src="https://s2.loli.net/2025/02/16/F34W9pclPBSkQHa.png" alt="img"></p><p>通过详情信息可以看到：<strong>公开库中的镜像是对所有用户可见和可访问的，任何人都可以查看和拉取其中的镜像。而私有库中的镜像则需要登录才能访问控制，只有被授权的用户或团队才能够查看、拉取和推送镜像。</strong> 可以根据需要创建相关的项目。</p><p><img src="https://s2.loli.net/2025/02/16/l1pfKPiZngO9sXW.png" alt="img"></p><p>项目创建成功后，可以点击进入项目。在里面可以为每个项目单独设置不同的配置信息。可以为每一个项目添加成员信息。</p><p><img src="https://s2.loli.net/2025/02/16/yBMfu4NG6PHYxdX.png" alt="img"></p><p>角色权限说明：</p><ul><li>**项目管理员（Project Administrator）：**拥有项目的最高权限，可以对项目进行全面管理，包括创建和删除项目、管理项目成员和权限、配置项目属性、查看项目日志等。</li><li>**维护人员（Maintainer）：**类似于项目管理员，但权限稍低，通常用于协助管理项目，可以进行项目的部分管理操作，如添加和删除镜像、配置镜像的复制和同步规则等。</li><li>**开发者（Developer）：**具有对项目中镜像仓库的读写权限，可以拉取、推送和删除镜像，以及管理部分项目配置，但不能进行项目管理操作。</li><li>**访客（Guest）：**只具有对项目中镜像仓库的只读权限，可以查看镜像和元数据，但无法对镜像进行修改或删除操作。通常用于分享项目或镜像给外部团队或用户。</li><li>**受限访客（Restricted Guest）：**是一种更加受限的访客角色，通常用于提供给外部用户或系统，具有对项目中镜像仓库的只读权限，但可能会限制访问的部分内容或功能。</li></ul><p>在右上角显示推送命令，可以通过提示命令进行docker镜像推送。</p><p><img src="https://s2.loli.net/2025/02/16/RFEucUsbXL2jYyG.png" alt="img"></p><h5 id="6-2、日志"><a href="#6-2、日志" class="headerlink" title="6.2、日志"></a>6.2、日志</h5><p>日志菜单就是记录用户操作日志信息的。</p><p><img src="https://s2.loli.net/2025/02/16/B7HKfokDjcG4yNE.png" alt="img"></p><h5 id="6-3、系统管理"><a href="#6-3、系统管理" class="headerlink" title="6.3、系统管理"></a>6.3、系统管理</h5><p>系统管理主要用来管理Harbor用户人员信息、镜像仓库的各种配置、权限和系统设置。</p><p><img src="https://s2.loli.net/2025/02/16/KfL2ViA7z8JyWvT.png" alt="img"></p><h4 id="7、Docker命令使用私有仓库"><a href="#7、Docker命令使用私有仓库" class="headerlink" title="7、Docker命令使用私有仓库"></a>7、Docker命令使用私有仓库</h4><h5 id="7-1、登录"><a href="#7-1、登录" class="headerlink" title="7.1、登录"></a>7.1、登录</h5><p>首先登录私有仓库地址：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker login  -u admin -p AdminHarbor12345 http://192.168.42.133:5000</span><br></pre></td></tr></table></figure><p>会报错：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">Error response from daemon: Get <span class="string">&quot;https://192.168.42.133:5000/v2/&quot;</span>: proxyconnect tcp: dial tcp 192.168.65.7:3128: connect: connection refused</span><br></pre></td></tr></table></figure><p>docker认为这个地址是不安全的，所以需要在docker守护进程配置文件中把该地址加入安全范围。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://ejes884z.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>:<span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;<span class="string">&quot;max-size&quot;</span>:<span class="string">&quot;1g&quot;</span>, <span class="string">&quot;max-file&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;,</span><br><span class="line">  <span class="string">&quot;live-restore&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.42.133:5000&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># insecure-registries 不安全的注册表配置一些不安全的地址信息，让Docker认为是安全的。多个地址使用 &quot;,&quot; 分割</span></span><br></pre></td></tr></table></figure><p>加入配置成功后，再次登录。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>通过输出发现登录成功。认证信息存储在 <code>~/.docker/config.json</code> 文件中，只要登录信息存在，登录会一直生效不需要每次推送拉取之前都登录。</p><h5 id="7-2、推送"><a href="#7-2、推送" class="headerlink" title="7.2、推送"></a>7.2、推送</h5><p>重新命名镜像名称</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag 94543a6c1aef 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>推送</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>查看Harbor仓库，推送成功。</p><p><img src="https://s2.loli.net/2025/02/16/rejyKzPso7aNGOw.png" alt="img"></p><h5 id="7-3、拉取"><a href="#7-3、拉取" class="headerlink" title="7.3、拉取"></a>7.3、拉取</h5><p>通过另一台服务器，使用 <code>docker pull</code>拉取镜像从私有仓库拉取镜像：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.42.133:5000/blog_project/nginx:1.26.0</span><br></pre></td></tr></table></figure><p>拉取成功</p><p><img src="https://s2.loli.net/2025/02/16/VQRZWvfTwSmdIbj.png" alt="img"></p><p>查看下载数，发现已经更新了。</p><p><img src="https://s2.loli.net/2025/02/16/kmbMnuydhpYTw5a.png" alt="img"></p><h4 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h4><p>关于使用Harbor搭建Docker私有仓库就介绍完毕了，如果大家有兴趣可以查看一下其他搭建方式，然后在它们之间进行对比一下看看那种方式更适合。本篇为入门级Harbor的基础使用，其他功能可以自行研究。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;手把手教你搭建Docker私有仓库Harbor&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;本文搬运自：&lt;a href=&quot;https://www.cnblogs.com/sowler/p/18242819&quot;&gt;手把手教你搭建Docker私有仓库Harbor - sowler - 博客园&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Docker/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="Harbor" scheme="https://kanoc.gitee.io/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-强制修改密码为简单密码</title>
    <link href="https://kanoc.gitee.io/2025/02/15/ubuntu-%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E4%B8%BA%E7%AE%80%E5%8D%95%E5%AF%86%E7%A0%81/"/>
    <id>https://kanoc.gitee.io/2025/02/15/ubuntu-%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E4%B8%BA%E7%AE%80%E5%8D%95%E5%AF%86%E7%A0%81/</id>
    <published>2025-02-14T23:49:19.000Z</published>
    <updated>2025-06-10T01:05:43.745Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ubuntu 强制修改密码为简单密码</strong></font></p><span id="more"></span><p>在 <code>Ubuntu</code> 中，出于安全考虑，系统通常会强制要求密码满足一定的复杂性和长度要求。默认情况下，root 密码必须至少包含 8 个字符。但是我们本地测试环境，不需要那么复杂的密码。越简单的密码越容易使用。</p><p>这个时候我们可以 使用 临时禁用密码复杂性检查来修改</p><h3 id="1-修改-PAM-配置"><a href="#1-修改-PAM-配置" class="headerlink" title="1. 修改 PAM 配置"></a>1. 修改 PAM 配置</h3><ol><li>打开终端。</li><li>编辑 PAM 密码策略配置：</li></ol><p>使用以下命令打开 common-password 文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/pam.d/common-password</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># passwordrequisitepam_pwquality.so retry=3  此为修改前的内容</span></span><br><span class="line">password requisite pam_unix.so nullok obscure min=0 max=8  <span class="comment"># 此为修改后的内容</span></span><br><span class="line">password[success=2 default=ignore]pam_unix.so obscure use_authtok try_first_pass yescrypt</span><br><span class="line">passwordsufficientpam_sss.so use_authtok</span><br><span class="line">passwordrequisitepam_deny.so</span><br><span class="line">passwordrequiredpam_permit.so</span><br><span class="line">passwordoptionalpam_gnome_keyring.so </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ubuntu 强制修改密码为简单密码&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="root" scheme="https://kanoc.gitee.io/tags/root/"/>
    
    <category term="密码" scheme="https://kanoc.gitee.io/tags/%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装配置docker</title>
    <link href="https://kanoc.gitee.io/2025/02/15/ubuntu%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEdocker/"/>
    <id>https://kanoc.gitee.io/2025/02/15/ubuntu%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEdocker/</id>
    <published>2025-02-14T23:18:23.000Z</published>
    <updated>2025-06-10T01:07:19.943Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ubuntu安装配置docker</strong></font></p><span id="more"></span><h3 id="1-更新系统"><a href="#1-更新系统" class="headerlink" title="1. 更新系统"></a>1. 更新系统</h3><p>在 Ubuntu 中打开终端，更新系统：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure><h3 id="2-安装-Snap"><a href="#2-安装-Snap" class="headerlink" title="2.  安装 Snap"></a>2.  安装 Snap</h3><p>如果你的系统尚未安装 Snap，可以使用以下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install snapd</span><br></pre></td></tr></table></figure><h3 id="3-使用-Snap-安装-Docker"><a href="#3-使用-Snap-安装-Docker" class="headerlink" title="3. 使用 Snap 安装 Docker"></a>3. 使用 Snap 安装 Docker</h3><p>使用以下命令通过 Snap 安装 Docker：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap install docker</span><br></pre></td></tr></table></figure><h3 id="4-启动-Docker-服务"><a href="#4-启动-Docker-服务" class="headerlink" title="4. 启动 Docker 服务"></a>4. 启动 Docker 服务</h3><p>安装完成后，Docker 服务应该会自动启动。你可以使用以下命令检查 Docker 服务的状态：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status snap.docker.dockerd</span><br></pre></td></tr></table></figure><p>如果服务没有运行，可以使用以下命令启动它：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start snap.docker.dockerd</span><br></pre></td></tr></table></figure><h3 id="4-配置国内镜像加速器-国外服务器忽略"><a href="#4-配置国内镜像加速器-国外服务器忽略" class="headerlink" title="4. 配置国内镜像加速器(国外服务器忽略)"></a>4. 配置国内镜像加速器(国外服务器忽略)</h3><ul><li><code>vim /etc/docker/daemon.json</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line"><span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://docker.mirrors.tuna.tsinghua.edu.cn&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://www.daocloud.io/mirror&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://hub-mirror.c.163.com&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-重启-docker服务"><a href="#5-重启-docker服务" class="headerlink" title="5. 重启 docker服务"></a>5. 重启 docker服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="6-验证-Docker-安装"><a href="#6-验证-Docker-安装" class="headerlink" title="6. 验证 Docker 安装"></a>6. 验证 Docker 安装</h3><p>运行以下命令以验证 Docker 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker --version</span><br></pre></td></tr></table></figure><h3 id="7-运行-Docker-Hello-World-示例"><a href="#7-运行-Docker-Hello-World-示例" class="headerlink" title="7. 运行 Docker Hello World 示例"></a>7. 运行 Docker Hello World 示例</h3><p>为了确保 Docker 正常工作，可以运行一个简单的 Hello World 容器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run hello-world</span><br></pre></td></tr></table></figure><p>如果一切正常，你将看到一条消息，表明 Docker 已成功安装并运行。</p><h3 id="8-（可选）将用户添加到-Docker-组"><a href="#8-（可选）将用户添加到-Docker-组" class="headerlink" title="8. （可选）将用户添加到 Docker 组"></a>8. （可选）将用户添加到 Docker 组</h3><p>如果你希望在不使用 sudo 的情况下运行 Docker 命令，可以将你的用户添加到 Docker 组：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>添加后，注销并重新登录，或者重启系统以使更改生效。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过 Snap 安装 Docker 是一种简单的方法，适合在 Ubuntu 上快速部署 Docker。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ubuntu安装配置docker&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="安装" scheme="https://kanoc.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-共享文件夹_samba</title>
    <link href="https://kanoc.gitee.io/2025/02/15/ubuntu-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9-samba/"/>
    <id>https://kanoc.gitee.io/2025/02/15/ubuntu-%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9-samba/</id>
    <published>2025-02-14T23:08:39.000Z</published>
    <updated>2025-06-10T01:05:46.218Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ubuntu 共享文件夹 For samba</strong></font></p><span id="more"></span><p>在 Ubuntu 中共享文件夹可以通过多种方式实现，最常见的方法是使用 Samba（适用于 Windows 和 Linux 之间的共享）或 NFS（适用于 Linux 之间的共享）。以下是这两种方法的详细步骤。</p><h3 id="方法-1：使用-Samba-共享文件夹"><a href="#方法-1：使用-Samba-共享文件夹" class="headerlink" title="方法 1：使用 Samba 共享文件夹"></a>方法 1：使用 Samba 共享文件夹</h3><h4 id="1-安装-Samba"><a href="#1-安装-Samba" class="headerlink" title="1. 安装 Samba"></a>1. 安装 Samba</h4><p>首先，确保你的系统已安装 Samba。打开终端并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install samba</span><br></pre></td></tr></table></figure><h4 id="2-创建共享文件夹"><a href="#2-创建共享文件夹" class="headerlink" title="2. 创建共享文件夹"></a>2. 创建共享文件夹</h4><p>选择一个目录作为共享文件夹，或者创建一个新的文件夹。例如，创建一个名为 shared 的文件夹：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/shared</span><br></pre></td></tr></table></figure><h4 id="3-配置-Samba"><a href="#3-配置-Samba" class="headerlink" title="3. 配置 Samba"></a>3. 配置 Samba</h4><p>编辑 Samba 配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p>在文件的末尾添加以下内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 [global] 部分中，添加或修改以下设置：  开启全速</span></span><br><span class="line"> [global]</span><br><span class="line">   max connections = 100  <span class="comment"># 增加并发性能</span></span><br><span class="line">   max open files = 10000  <span class="comment"># 增加并发性能</span></span><br><span class="line">   <span class="comment"># 性能优化设置</span></span><br><span class="line">   socket options = TCP_NODELAY SO_RCVBUF=8192 SO_SNDBUF=8192</span><br><span class="line">   max protocol = SMB3</span><br><span class="line">   min protocol = SMB2</span><br><span class="line">   </span><br><span class="line">[MyFiles]</span><br><span class="line">   path = /home/kate/SambaFiles</span><br><span class="line">   available = <span class="built_in">yes</span></span><br><span class="line">   valid <span class="built_in">users</span> = root</span><br><span class="line">   <span class="built_in">read</span> only = no</span><br><span class="line">   browsable = <span class="built_in">yes</span></span><br><span class="line">   public = <span class="built_in">yes</span></span><br><span class="line">   writable = <span class="built_in">yes</span></span><br><span class="line">   create mask = 0755</span><br><span class="line">   directory mask = 0755</span><br></pre></td></tr></table></figure><p>请将 your_username 替换为你的实际用户名。</p><h4 id="4-设置-Samba-用户"><a href="#4-设置-Samba-用户" class="headerlink" title="4. 设置 Samba 用户"></a>4. 设置 Samba 用户</h4><p>为 Samba 设置用户密码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> smbpasswd -a your_username</span><br></pre></td></tr></table></figure><h4 id="5-重启-Samba-服务"><a href="#5-重启-Samba-服务" class="headerlink" title="5. 重启 Samba 服务"></a>5. 重启 Samba 服务</h4><p>重启 Samba 服务以使更改生效：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smbd</span><br></pre></td></tr></table></figure><h4 id="6-访问共享文件夹"><a href="#6-访问共享文件夹" class="headerlink" title="6. 访问共享文件夹"></a>6. 访问共享文件夹</h4><p>在 Windows 系统中，你可以通过以下方式访问共享文件夹：</p><ol><li>打开文件资源管理器。</li></ol><p>在地址栏中输入 \your_ubuntu_ip\SharedFolder，将 your_ubuntu_ip 替换为 Ubuntu 机器的 IP 地址。</p><p>输入 Samba 用户名和密码进行访问。</p><h3 id="方法-2：使用-NFS-共享文件夹"><a href="#方法-2：使用-NFS-共享文件夹" class="headerlink" title="方法 2：使用 NFS 共享文件夹"></a>方法 2：使用 NFS 共享文件夹</h3><p>NFS（网络文件系统）适用于 Linux 之间的共享。</p><h4 id="1-安装-NFS"><a href="#1-安装-NFS" class="headerlink" title="1. 安装 NFS"></a>1. 安装 NFS</h4><p>首先，确保你的系统已安装 NFS：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install nfs-kernel-server</span><br></pre></td></tr></table></figure><h4 id="2-创建共享文件夹-1"><a href="#2-创建共享文件夹-1" class="headerlink" title="2. 创建共享文件夹"></a>2. 创建共享文件夹</h4><p>选择一个目录作为共享文件夹，或者创建一个新的文件夹。例如，创建一个名为 shared 的文件夹：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/shared</span><br></pre></td></tr></table></figure><h4 id="3-配置-NFS"><a href="#3-配置-NFS" class="headerlink" title="3. 配置 NFS"></a>3. 配置 NFS</h4><p>编辑 NFS 配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/exports</span><br></pre></td></tr></table></figure><p>在文件中添加以下行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/your_username/shared *(rw,<span class="built_in">sync</span>,no_subtree_check)</span><br></pre></td></tr></table></figure><p>请将 your_username 替换为你的实际用户名。</p><h4 id="4-重启-NFS-服务"><a href="#4-重启-NFS-服务" class="headerlink" title="4. 重启 NFS 服务"></a>4. 重启 NFS 服务</h4><p>重启 NFS 服务以使更改生效：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> exportfs -a</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure><h4 id="5-访问共享文件夹"><a href="#5-访问共享文件夹" class="headerlink" title="5. 访问共享文件夹"></a>5. 访问共享文件夹</h4><p>在另一台 Linux 机器上，你可以通过以下命令挂载 NFS 共享：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount your_ubuntu_ip:/home/your_username/shared /mnt</span><br></pre></td></tr></table></figure><p>将 your_ubuntu_ip 替换为 Ubuntu 机器的 IP 地址，&#x2F;mnt 是你希望挂载的本地目录。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，你可以在 Ubuntu 中共享文件夹。选择 Samba 或 NFS 取决于你的需求和网络环境。如果在配置或使用过程中遇到任何问题，请提供具体的错误信息，以便进一步排查。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ubuntu 共享文件夹 For samba&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/ubuntu/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="文件夹共享" scheme="https://kanoc.gitee.io/tags/%E6%96%87%E4%BB%B6%E5%A4%B9%E5%85%B1%E4%BA%AB/"/>
    
    <category term="挂载" scheme="https://kanoc.gitee.io/tags/%E6%8C%82%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>django配置ASGI服务器教程</title>
    <link href="https://kanoc.gitee.io/2024/12/09/django%E9%85%8D%E7%BD%AEASGI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://kanoc.gitee.io/2024/12/09/django%E9%85%8D%E7%BD%AEASGI%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B/</id>
    <published>2024-12-08T19:08:44.000Z</published>
    <updated>2025-06-09T08:38:17.116Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>django配置ASGI服务器教程</strong></font></p><span id="more"></span><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><ul><li><p>系统环境：Alibaba3</p></li><li><p>Python版本：<code>3.13</code></p></li><li><p>Django版本：<code>5.1.4</code></p></li><li><p>uvicorn版本：<code>0.32.1</code></p></li></ul><h2 id="1、安装-uvicorn-服务器"><a href="#1、安装-uvicorn-服务器" class="headerlink" title="1、安装 uvicorn 服务器"></a>1、安装 <strong>uvicorn</strong> 服务器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django uvicorn</span><br></pre></td></tr></table></figure><h3 id="2、创建ASGI应用程序"><a href="#2、创建ASGI应用程序" class="headerlink" title="2、创建ASGI应用程序"></a>2、创建ASGI应用程序</h3><p>在Django 3.0及更高版本中，Django默认提供了一个<code>asgi.py</code>文件，该文件位于与<code>wsgi.py</code>相同的位置（通常是项目的主目录下）。这个文件包含了一个ASGI应用程序的实例，你可以直接使用它。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;&lt;your_project_name&gt;.settings&#x27;</span>)  <span class="comment"># &lt;your_project_name&gt; 替换成你的项目</span></span><br><span class="line">application = get_asgi_application()</span><br></pre></td></tr></table></figure><h2 id="3、设置settings-py"><a href="#3、设置settings-py" class="headerlink" title="3、设置settings.py"></a>3、设置settings.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WSGI_APPLICATION = &#x27;&lt;your_project_name&gt;.wsgi.application&#x27;   # 同步请求 直接注销掉 我们不需要</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">&#x27;&lt;your_project_name&gt;.asgi.application&#x27;</span>   <span class="comment"># 异步项目  将 &lt;your_project_name&gt; 替换成你的项目</span></span><br></pre></td></tr></table></figure><h3 id="4、-安装并运行ASGI服务器"><a href="#4、-安装并运行ASGI服务器" class="headerlink" title="4、 安装并运行ASGI服务器"></a>4、 安装并运行ASGI服务器</h3><p>要运行ASGI应用，你需要安装一个<code>ASGI</code>服务器，如<code>Uvicorn</code>、<code>Daphne</code>或<code>Hypercorn</code>。然后，你可以使用这些服务器来启动你的<code>Django</code>应用。例如，使用<code>Uvicorn</code>启动<code>Django</code>应用的命令可能看起来像这样</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uvicorn your_project_name.asgi:application   # 默认启动  访问地址为  http://127.0.0.1:8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以自己指定端口</span></span><br><span class="line">uvicorn your_project_name.asgi:application --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --port <span class="number">8035</span>    <span class="comment"># 指定所有ip可访问 项目运行端口为 8035</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;django配置ASGI服务器教程&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="ASGI服务器" scheme="https://kanoc.gitee.io/tags/ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="异步WEB" scheme="https://kanoc.gitee.io/tags/%E5%BC%82%E6%AD%A5WEB/"/>
    
  </entry>
  
  <entry>
    <title>远程修改-ESXI-8.0-管理ip地址</title>
    <link href="https://kanoc.gitee.io/2024/08/18/%E8%BF%9C%E7%A8%8B%E4%BF%AE%E6%94%B9-ESXI-8-0-%E7%AE%A1%E7%90%86ip%E5%9C%B0%E5%9D%80/"/>
    <id>https://kanoc.gitee.io/2024/08/18/%E8%BF%9C%E7%A8%8B%E4%BF%AE%E6%94%B9-ESXI-8-0-%E7%AE%A1%E7%90%86ip%E5%9C%B0%E5%9D%80/</id>
    <published>2024-08-18T09:29:04.000Z</published>
    <updated>2025-06-09T04:15:50.087Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><strong>远程修改 ESXI 8.0 管理ip地址</strong></strong></font></p><span id="more"></span><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a><strong>场景：</strong></h3><p>适用于不方便在设备边操作而又需要修改管理地址的场景。</p><p>适用于不方便外接显示器的场景。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p>生产环境一定确定好网络配置信息否则可能会因为网络配置不正确导致无法正常访问。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h3><h4 id="1-开启SSH远程访问"><a href="#1-开启SSH远程访问" class="headerlink" title="1.开启SSH远程访问"></a>1.开启SSH远程访问</h4><p>启用安全 <code>Shell</code>（也就是 <code>EXSi</code> 可以被 <code>SSH</code> 访问的功能）</p><p><img src="https://s2.loli.net/2024/08/18/jXvEum9nVrO1aq8.png" alt="img"></p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><ul><li>使用 <code>SecureCRT SSH2</code> 连接 <code>ESXi</code> 主机，现在使用 <code>dcui</code> 并没有任何反应，在 <code>Session</code> 标签栏右键点击 <code>Disconnect</code> 。</li><li>这里我测试用 <code>Finalshell</code> 也是完全没问题的</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The <span class="keyword">time</span> and <span class="built_in">date</span> of this login have been sent to the system logs.</span><br><span class="line"></span><br><span class="line">WARNING:</span><br><span class="line">   All commands run on the ESXi shell are logged and may be included <span class="keyword">in</span></span><br><span class="line">   support bundles. Do not provide passwords directly on the <span class="built_in">command</span> line.</span><br><span class="line">   Most tools can prompt <span class="keyword">for</span> secrets or accept them from standard input.</span><br><span class="line"></span><br><span class="line">VMware offers supported, powerful system administration tools.  Please</span><br><span class="line">see www.vmware.com/go/sysadmintools <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">The ESXi Shell can be disabled by an administrative user. See the</span><br><span class="line">vSphere Security documentation <span class="keyword">for</span> more information.</span><br><span class="line">[root@localhost:~] </span><br><span class="line">[root@localhost:~] dcui </span><br></pre></td></tr></table></figure><h4 id="3-连接到SSH"><a href="#3-连接到SSH" class="headerlink" title="3.连接到SSH"></a>3.连接到SSH</h4><ul><li>如果是使用 <code>Finalshell</code> 则可省略此步骤</li><li>在 <code>Session</code> 标签栏右键点击 <code>Session Option</code> 修改 <code>Terminal</code> 类型为 <code>Xterm</code> 后重新 <code>SSH2</code> 连接</li></ul><p><img src="https://s2.loli.net/2024/08/18/e7AEdlkaJ4ghpPt.png" alt="img"></p><h4 id="4-使用-dcui-工具"><a href="#4-使用-dcui-工具" class="headerlink" title="4.使用 dcui 工具"></a><strong>4.使用 <code>dcui</code> 工具</strong></h4><ul><li>再次使用 <code>dcui</code> 工具，这时已经可以进入 <code>EXSi</code> 的系统管理界面。</li></ul><p><img src="https://s2.loli.net/2024/08/18/MvdVH8r7BLy1Kfs.png" alt="img"></p><h4 id="5-登录到控制中心"><a href="#5-登录到控制中心" class="headerlink" title="5.登录到控制中心"></a>5.登录到控制中心</h4><ul><li>点击 <code>F2</code> 进行 <code>Customize System</code> 输入用户名、密码进入</li></ul><p><img src="https://s2.loli.net/2024/08/18/zO1Ehr7yvmHFgcC.png" alt="img"></p><h4 id="6-修改管理IP地址"><a href="#6-修改管理IP地址" class="headerlink" title="6.修改管理IP地址"></a>6.修改管理IP地址</h4><ul><li>选择 <code>Configure Management Network</code></li></ul><p><img src="https://s2.loli.net/2024/08/18/eyDBxsMbLrXRgHI.png" alt="img"></p><h4 id="7-选择-IPv4-Configuration"><a href="#7-选择-IPv4-Configuration" class="headerlink" title="7.选择 IPv4 Configuration"></a>7.选择 <code>IPv4 Configuration</code></h4><p><img src="https://s2.loli.net/2024/08/18/Z45nGUCewczAKby.png" alt="img"></p><h4 id="8-配置静态IP地址，然后点击回车"><a href="#8-配置静态IP地址，然后点击回车" class="headerlink" title="8.配置静态IP地址，然后点击回车"></a>8.配置静态IP地址，然后点击回车</h4><p><img src="https://s2.loli.net/2024/08/18/2m6uOn3w5T8WjUh.png" alt="img"></p><h4 id="9-点击-Esc-选择-Yes-应用配置并且重启管理网络"><a href="#9-点击-Esc-选择-Yes-应用配置并且重启管理网络" class="headerlink" title="9.点击 Esc 选择 Yes 应用配置并且重启管理网络"></a>9.点击 <code>Esc</code> 选择 <code>Yes</code> 应用配置并且重启管理网络</h4><p><img src="https://s2.loli.net/2024/08/18/8M4Ichq1xCzebUs.png" alt="img"></p><h4 id="10-此时已近可以用修改后的IP地址登录管理ESXi主机"><a href="#10-此时已近可以用修改后的IP地址登录管理ESXi主机" class="headerlink" title="10.此时已近可以用修改后的IP地址登录管理ESXi主机"></a>10.此时已近可以用修改后的IP地址登录管理ESXi主机</h4><p><img src="https://s2.loli.net/2024/08/18/OrPAf7l54TLonhd.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;strong&gt;远程修改 ESXI 8.0 管理ip地址&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="esxi" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/esxi/"/>
    
    
    <category term="esxi" scheme="https://kanoc.gitee.io/tags/esxi/"/>
    
  </entry>
  
  <entry>
    <title>VMware-ESXI-8.0.2-部署教程</title>
    <link href="https://kanoc.gitee.io/2024/08/18/VMware-ESXI-8-0-2-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
    <id>https://kanoc.gitee.io/2024/08/18/VMware-ESXI-8-0-2-%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</id>
    <published>2024-08-17T16:57:17.000Z</published>
    <updated>2025-06-10T01:08:53.667Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ESXi 8.0虚拟机必备知识与保姆级安装过程</strong></font></p><span id="more"></span><p>今天我们开始进入软路由的安装，本篇先介绍如何安装ESXi 8.0虚拟机。iKuai 和 openWrt 的内容放在下一篇。参考了不少大佬的经验，综合下来，打造软路由的话 ESXi 和 PVE 用的比较多，ESXi 稳定性更好，PVE 硬件兼容性好些。</p><blockquote><ul><li>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。在实体计算机中能够完成的工作在虚拟机中都能够实现。通过将多台虚拟机放置在一台计算机上，可以仅在一台物理<code>服务器</code>或 “主机” 上运行多个操作系统和应用。</li><li>ESXi，是 VMWare vSphere Hypervisor 套件之下重要组件。是一款一款优秀的 <code>服务器</code> 级别的虚拟机。前身是 ESX，依赖 Linux 源码，后来抛弃 Linux 源码做成了 ESXi。整个产品商用气息浓重，界面清晰易用，但硬件兼容性较差（主要面向服务器），没什么扩展性，ESXi 不依赖于任何操作系统，直接安装在裸机上，它本身就可以看作一个操作系统，然后可以在它上面安装其他系统。</li><li>PVE，全称 Proxmox Virtual Environment，是基于 Debian 的 Linux 系统，虚拟机内核为 KVM。硬件兼容性优秀。界面功能不强，很多操作要靠命令行，但扩展能力几乎是无限的。</li></ul></blockquote><p>楼主决定在工控主机内安装ESXi 8.0虚拟机，然后再虚拟机内安装iKuai作为主路由，OpenWrt 作为旁路由，说实话，楼主没有多拨和流控的需求，这样做主要是为了将网络隔离开，iKuai只负责PPOE拨号DHCP功能，其他的都交给openWrt。大家都知道openWrt插件丰富，平时折腾的比较多，经常会出现断网的情况，这样就可以放心折腾了。</p><h3 id="1-网络拓扑"><a href="#1-网络拓扑" class="headerlink" title="1.网络拓扑"></a>1.网络拓扑</h3><p>首先先大致规划一下家里的网络拓扑，因为家里原来用的是华硕的AC88U，像NAS、打印机这些静态IP地址的配置都是192.168.50.XX，这次折腾就懒得改了，索性直接以这个IP段，后面就不用再去重新配置了。大家也可以将50换成其他自己常用的。</p><blockquote><ul><li>iKuai ：192.168.50.1账号:admin</li><li>OpenWrt：192.168.50.2 账号:root</li><li>ESXi：192.168.50.3 账号:root</li></ul></blockquote><p><img src="https://s2.loli.net/2024/08/18/ezEgCaiTGR9MF7O.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="一、制作ventoy镜像安装工具"><a href="#一、制作ventoy镜像安装工具" class="headerlink" title="一、制作ventoy镜像安装工具"></a>一、制作ventoy镜像安装工具</h2><h3 id="1-下载Ventoy启动盘制作工具"><a href="#1-下载Ventoy启动盘制作工具" class="headerlink" title="1.下载Ventoy启动盘制作工具"></a>1.下载<a href="https://www.ventoy.net/cn/download.html">Ventoy</a>启动盘制作工具</h3><p>首先准备一个空闲的U盘，用Ventoy 一键制作USB启动盘。打开<a href="https://www.ventoy.net/cn/download.html">ventoy</a>下载安装， Ventoy 是开源软件，下载使用都是免费的，直接去官网或者 GitHub 页面下载即可。</p><p><img src="https://s2.loli.net/2024/08/18/SDo6ZdRtqrGhsLK.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>在PC上安装，并运行Ventoy 软件，程序会自动检测当前 USB 设备。如果插入了多个U盘注意识别，别搞错了，造成数据丢失。点击安装开始制作：</p><p><img src="https://s2.loli.net/2024/08/18/9ZzPNC3DuoXp1nd.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>可以看到 U 盘已经被重命名为 Ventoy。</p><p><img src="https://s2.loli.net/2024/08/18/S43jzeL1iwXh2kU.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>打开磁盘管理，可以看到 U 盘被细分为 2 个大分区，Ventoy 分区为活动分区，exFAT 文件系统，用于存放 ISO 文件，exFAT 文件系统也能更好的跨平台使用。</p><p><img src="https://s2.loli.net/2024/08/18/rKlfvE2Dz5j8Mkn.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>Ventoy 的系统分区里其实还有一个只有 1MB 的空间，存有 Legacy BIOS 模式下的启动文件，可见对于老旧设备来说，Ventoy 一样兼容。</p><img src="https://s2.loli.net/2024/08/18/a3bKdMACDoVXlwI.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程" style="zoom:50%;" /><p>格式化未NTFS，用于存放 ISO 文件的分区 ，支持 exFAT、FAT32、NTFS、UDF、XFS、Ext2、Ext3、Ext4。</p><p><img src="https://s2.loli.net/2024/08/18/VmsEYBK7Or9nqL2.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>直接下载需要安装的系统镜像放到 U 盘里就可以了。如果U盘够大的话，一些常用的镜像和工具都可以放到里面，以后各个系统装机都可以使用。不管是各版本的 Windows 系统还是 PE 系统甚至是 ubuntu 系统，只要想加载就直接将镜像文件拖入到Ventoy文件夹内即可。</p><p><img src="https://s2.loli.net/2024/08/18/QwWfCriepYRgDhB.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="二、下载-ESXi-8-0"><a href="#二、下载-ESXi-8-0" class="headerlink" title="二、下载 ESXi 8.0"></a>二、下载 ESXi 8.0</h2><h3 id="1-直链下载镜像"><a href="#1-直链下载镜像" class="headerlink" title="1. 直链下载镜像"></a>1. 直链下载镜像</h3><p><code>VMWare</code> 被博通收购后，私人已经无法像原来一样轻松的下载了，这里是我传到网盘的镜像，如果觉得不安全，可以自己去找其他的镜像。</p><p><code>ESXi 8.0</code>下载传送门：<a href="https://bd.bcebos.com/v1/xly-icafe/vmware-vmvisor-installer-8.0u3-24022510.x86_64-20240818021845-hszvto.iso">点击下载</a>  <font color=red size=3 face=宋体><strong>不支持螃蟹网卡</strong></font></p><p><code>ESXi 6.7</code>下载传送门：<a href="https://bd.bcebos.com/v1/xly-icafe/vmware-esxi-6.7.0-20191204001-rtl8111-20240824033216-q1ikk9.iso">点击下载</a>  <font color=red size=3 face=宋体><strong>已经封装螃蟹网卡<code>RTL8111</code>系列</strong></font></p><h3 id="2-下载镜像"><a href="#2-下载镜像" class="headerlink" title="2.下载镜像"></a>2.下载镜像</h3><p>去<a href="https://customerconnect.vmware.com/evalcenter?p=vsphere-eval-8">官网下载</a>，下载前，先注册一个 VMWare 的 customer connect 账号，注册登录完毕后，就可以下载 60 天试用版的 ESXI8.0 了，后面使用密钥激活一下即可，网上神秘代码很多，一搜一堆，这个就不多说了。</p><p><img src="https://s2.loli.net/2024/08/18/d83LvRzqSxi7FCM.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>下载镜像文件，目前最新的版本是8.0-20513097</p><p><img src="https://s2.loli.net/2024/08/18/MUbAl4dumzVXH6B.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="2-查询网卡驱动"><a href="#2-查询网卡驱动" class="headerlink" title="2.查询网卡驱动"></a>2.查询网卡驱动</h2><p>趁着下载的功夫，我们现在<a href="https://www.vmware.com/resources/compatibility/search.php?deviceCategory=io&details=1&partner=46&releases=589&keyword=226&deviceTypes=6&page=1&display_interval=10&sortColumn=Partner&sortOrder=Asc">vmware硬件支持（VMware Compatibility Guide)</a>，查询一下网卡的驱动情况，Intel Corporation i226&#x2F; i225网卡都是支持免驱的。</p><p><img src="https://s2.loli.net/2024/08/18/XmJeNf46poAwjbE.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>如果网卡不支持，可以去<a href="https://flings.vmware.com/community-networking-driver-for-esxi#requirements">【ESXi 的社区网络驱动程序】</a>下载网卡驱动。</p><p><img src="https://s2.loli.net/2024/08/18/8ks5QmDqduPrSEK.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>将下载好的镜像拷入Ventoy，ventoy镜像安装工具制作完成。</p><p><img src="https://s2.loli.net/2024/08/18/OKziTC38BWLjr2P.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="三、安装ESXi8-0"><a href="#三、安装ESXi8-0" class="headerlink" title="三、安装ESXi8.0"></a>三、安装ESXi8.0</h2><p>将工控机连接好<code>显示器</code>、键盘、鼠标。鼠标和键盘最好是有线的，插上 U 盘，准备开机。</p><p><img src="https://s2.loli.net/2024/08/18/37IldGvqAFh1VSr.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="1-主板设置"><a href="#1-主板设置" class="headerlink" title="1.主板设置"></a>1.主板设置</h3><p>开机按 del&#x2F;esc 进入BIOS设置，进入 BIOS 后，首先打开处理器的虚拟化（即 VT-x）。</p><p>VT-x是 intel 运用 Virtualization 虚拟化技术中的一个指令集。提供 X86 平台的硬件辅助虚拟化解决方案。能够将单台电脑软件环境分割为多个独立分区，每个分区均可以按照需要模拟电脑的一项技术。将多种系统整合到一台服务器或电脑中，使同一个物理平台能够同时运行多个同类或不同类的操作系统，以分别作为不同业务和应用的支撑平台。</p><p><img src="https://s2.loli.net/2024/08/18/j94TUgxhfQMA5mD.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h4 id="①打开VT-d："><a href="#①打开VT-d：" class="headerlink" title="①打开VT-d："></a>①打开VT-d：</h4><p>英特尔定向 I&#x2F;O 虚拟化技术 (VT-d) 是英特尔虚拟化技术 (VT) 的扩展，它向硬件提供虚拟化解决方案协助。英特尔 VT-d 能帮助用户提高系统的安全性和可靠性，并改善 I&#x2F;O 设备在虚拟化环境中的性能。这些都从本质上帮助 IT 管理人员通过减少潜在的停机时间而降低总拥有成本；并通过更充分地利用数据中心资源而增大生产性吞吐量。</p><p><img src="https://s2.loli.net/2024/08/18/rEDcuVwaGo7gLNh.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h4 id="②打开AES："><a href="#②打开AES：" class="headerlink" title="②打开AES："></a>②打开AES：</h4><p>**AES 指令集：**高级加密标准指令集（英特尔高级加密标准新指令，简称 AES-NI）是一个 x86 指令集架构的扩展，用于 Intel 和 AMD 微处理器，由 Intel 在 2008 年 3 月提出。该指令集的目的是改进应用程序使用 高级加密标准（AES）执行加密和解密的速度，可以提高出国留学的速度。</p><p><img src="https://s2.loli.net/2024/08/18/WnuyfaMBZqvLCH6.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h4 id="④开启睿频加速技术"><a href="#④开启睿频加速技术" class="headerlink" title="④开启睿频加速技术"></a>④开启睿频加速技术</h4><p>在 CPU 技术设置选项中，找到 “Intel Turbo Mode Tech” 选项，有的主板可能会显示 “Intel Turbo Boost Tech”。至于 C-STATE就先不开了。</p><p><img src="https://s2.loli.net/2024/08/18/KoWrmX9pyfSUGik.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>C-STATE 是 CPU 的电源管理功能，它会根据 CPU 的负载来管理 CPU 的能耗，和睿频加速技术结合，在运行单线程应用时，C-STATE 会关闭或降低其他核心的能耗，把这些能源加到执行程序的核心上提高CPU的执行效率。</p><p>C-STATE的模式从 C0 开始，C0 表示 “正常” 的 CPU 运行模式（CPU 已 100% 激活）。C 后的数字越大，表示 CPU 进入休眠模式的程度越深。换言之，关闭的电路和时钟信号越多，完全唤醒 CPU 进入 C0 模式需要的时间越长。</p><table><thead><tr><th>Mode（模式）</th><th>姓名</th><th>作用</th><th>CPU</th></tr></thead><tbody><tr><td>C0</td><td>操作状态</td><td>CPU 完全打开</td><td>所有 CPU</td></tr><tr><td>C1</td><td>停止</td><td>通过软件停止 CPU 内部主时钟；总线接口单元和 APIC 仍然保持全速运行</td><td>486DX4 及以上</td></tr><tr><td>C1E</td><td>增强型停止</td><td>通过软件停止 CPU 内部主时钟并降低 CPU 电压；总线接口单元和 APIC 仍然保持全速运行</td><td>所有 socket 775 CPU</td></tr><tr><td>C1E</td><td>—</td><td>停止所有 CPU 内部时钟</td><td>Turion 64、65-nm Athlon X2 和 Phenom CPU</td></tr><tr><td>C2</td><td>停止授予</td><td>通过硬件停止 CPU 内部主时钟；总线接口单元和 APIC 仍然保持全速运行</td><td>486DX4 及以上</td></tr><tr><td>C2</td><td>停止时钟</td><td>通过硬件停止 CPU 内部和外部时钟</td><td>仅限 486DX4、Pentium、Pentium MMX、K5、K6、K6-2、K6-III</td></tr><tr><td>C2E</td><td>扩展的停止授予</td><td>通过硬件停止 CPU 内部主时钟并降低 CPU 电压；总线接口单元和 APIC 仍然保持全速运行</td><td>Core 2 Duo 和更高版本（仅限 Intel）</td></tr><tr><td>C3</td><td>睡眠</td><td>停止所有 CPU 内部时钟</td><td>Pentium II、Athlon 以上支持，但 Core 2 Duo E4000 和 E6000 上不支持</td></tr><tr><td>C3</td><td>深度睡眠</td><td>停止所有 CPU 内部和外部时钟</td><td>Pentium II 以上支持，但 Core 2 Duo E4000、E6000 和 Turion 64 上不支持</td></tr><tr><td>C3</td><td>AltVID</td><td>停止所有 CPU 内部时钟和降低 CPU 电压</td><td>AMD Turion 64</td></tr><tr><td>C4</td><td>更深入的睡眠</td><td>降低 CPU 电压</td><td>Pentium M 以上支持，但 Core 2 Duo E4000、E6000 和 Turion 64 上不支持</td></tr><tr><td>C4E&#x2F;C5</td><td>增强的更深入的睡眠</td><td>大幅降低 CPU 电压并关闭内存高速缓存</td><td>Core Solo、Core Duo 和 45-nm 移动版 Core 2 Duo 支持</td></tr><tr><td>C6</td><td>深度电源关闭</td><td>将 CPU 内部电压降低至任何值，包括 0 V</td><td>仅 45-nm 移动版 Core 2 Duo 支</td></tr></tbody></table><h3 id="2-设置USB启动"><a href="#2-设置USB启动" class="headerlink" title="2.设置USB启动"></a>2.设置USB启动</h3><p>在BOOT里把U盘设置为第一启动项。</p><p><img src="https://s2.loli.net/2024/08/18/p4xezHrG2oyPTbs.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="3-删除硬盘分区"><a href="#3-删除硬盘分区" class="headerlink" title="3.删除硬盘分区"></a>3.删除硬盘分区</h3><p>重启开机后，即可进入 Ventoy 界面，U 盘内保存的系统镜像都在列表中，选择要安装的镜像文件即可，选择启动WinPE64，按Enter键进入PE。</p><p><img src="https://s2.loli.net/2024/08/18/A1dl3YmgTFMhOcS.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>进到PE后，用分区工具把软路由硬盘分区全部删除(注意不要删错)，这里有个大坑，如果硬盘存在分区的话，很可能造成无法安装的bug，尤其是对于拆机的硬盘来说，一定要将上面的分区及隐藏分区全部删掉。</p><h3 id="4-加载ESXi8-0镜像"><a href="#4-加载ESXi8-0镜像" class="headerlink" title="4.加载ESXi8.0镜像"></a>4.加载ESXi8.0镜像</h3><p>删除之后，重启电脑，选择ESXi启动安装：</p><p><img src="https://s2.loli.net/2024/08/18/3wJcm8RZdFfS42q.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="5-修改ESXI的默认空间"><a href="#5-修改ESXI的默认空间" class="headerlink" title="5.修改ESXI的默认空间"></a>5.修改ESXI的默认空间</h3><p>在读秒阶段，快速按下Shift+O，调出命令行，来修改ESXI的默认空间大小：</p><p><img src="https://s2.loli.net/2024/08/18/4BrZG7qwXT5aMLo.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>在下面命令行输入：autoPartotionOSDataSize&#x3D;20480。命令注意区分大小写，我这里将默认空间设置为20GB。硬盘空间不足的话推荐设置8192(8GB)即可，大家可以根据自己的情况进行设定：</p><p><img src="https://s2.loli.net/2024/08/18/I6PyV7ZKoxeuvtQ.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>回车，开始跑码：</p><p><img src="https://s2.loli.net/2024/08/18/hJvFHy7wsaBjRN1.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>还在跑码，等待跑码完成</p><p><img src="https://s2.loli.net/2024/08/18/xJyKqmpC4Dk7XbZ.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>继续跑码，不用管，等着就行：</p><p><img src="https://s2.loli.net/2024/08/18/9yNumCapzt1ciXs.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>跑码：</p><p><img src="https://s2.loli.net/2024/08/18/JUsjgb92yWV8FaM.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>跑码：</p><p><img src="https://s2.loli.net/2024/08/18/YmLF7tk5y1qJdv6.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>这一步 <strong>Starting service vmtoolsd</strong> 的加载时间会比较长，一定要耐心等待，不是死机了。</p><p><img src="https://s2.loli.net/2024/08/18/V52oXGlrmwFixy4.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>一直等待到出现如下界面，选择 Continue，按回车，继续下一步：</p><p><img src="https://s2.loli.net/2024/08/18/SxNzKIF8BV3Z5yT.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>同意 VMWARE 的条款，按F11，继续下一步：</p><p><img src="https://s2.loli.net/2024/08/18/cr4RNepH83LzEWZ.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="6-选择安装位置"><a href="#6-选择安装位置" class="headerlink" title="6.选择安装位置"></a>6.选择安装位置</h3><p>接下来会扫描此计算机上的所有存储器(硬盘)，等待扫描结果：</p><p><img src="https://s2.loli.net/2024/08/18/JULE2dcfpZFnGPl.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>选择安装位置，可以看到有两个盘，一个NVMe的<code>固态硬盘</code>和U盘，用键盘上下键调整，选择第一个安装在固态硬盘。一定要看好，不要安装错位置。选择好了回车继续：</p><p><img src="https://s2.loli.net/2024/08/18/gCadXqHT4GwUluJ.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>选择键盘布局，回车继续下一步：</p><p><img src="https://s2.loli.net/2024/08/18/LVqEvxXRIjnlT8J.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="7-设置登录密码"><a href="#7-设置登录密码" class="headerlink" title="7.设置登录密码"></a>7.设置登录密码</h3><p>弹出密码输入页，这里输入密码，需要输入两遍，输入第一遍之后，按table键切换到第二行输入第二遍确认密码，输入一定要慢一点，因为不显示输入的密码，很容易输错，密码需要大小写带数字。</p><p><img src="https://s2.loli.net/2024/08/18/TE6542fiqQNjcrk.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>输入完毕后，回车进行下一步：</p><p><img src="https://s2.loli.net/2024/08/18/gaOhdtKGcBpwMbE.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>弹出确认安装位置选项，看一下安装位置有没有问题，没选错，按F11继续安装：</p><p><img src="https://s2.loli.net/2024/08/18/o8Iys9mJt2XFgvV.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>等待加载完成：</p><p><img src="https://s2.loli.net/2024/08/18/6RshOaS1TwQzFjE.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p><img src="https://s2.loli.net/2024/08/18/3tl6HCDhwVUzNL4.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>到这里拔掉U盘，之后按回车，重启。</p><p><img src="https://s2.loli.net/2024/08/18/mB3Iq62eGbgDnMw.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>回车继续：</p><p><img src="https://s2.loli.net/2024/08/18/e5LXlnhj7Gpa1T8.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>重启后开始跑码：</p><p><img src="https://s2.loli.net/2024/08/18/hBKytFj1DQ2IvcA.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>等待跑码完成：</p><p><img src="https://s2.loli.net/2024/08/18/XDugv6xW4dtzoeA.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>继续等待：</p><p><img src="https://s2.loli.net/2024/08/18/2TRGZ7PgKEFL3xV.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>继续加载，下方的安装指示条可以看到安装的进度，全程不用管：</p><p><img src="https://s2.loli.net/2024/08/18/D1T6wodjOimGUsa.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>有以下画面表示已经安装成功，按F2可进入管理后台，F12是关闭或者重启：</p><p><img src="https://s2.loli.net/2024/08/18/43hvyJnjNPUaK7X.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="四、ESXI虚拟机设置"><a href="#四、ESXI虚拟机设置" class="headerlink" title="四、ESXI虚拟机设置"></a>四、ESXI虚拟机设置</h2><p>按F2，弹出登录页面，输入刚才设定的密码。回车，进入ESXI管理后台。</p><p><img src="https://s2.loli.net/2024/08/18/L2Xxtkfyv1g7SCQ.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>可以看到第一项是修改密码，第三项是设置网络。</p><p><img src="https://s2.loli.net/2024/08/18/sfn38gUa6Oq4kXD.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="1-设置网口"><a href="#1-设置网口" class="headerlink" title="1.设置网口"></a>1.设置网口</h3><p>键盘上下键选择第三项，修改网络配置，回车进入：</p><p><img src="https://s2.loli.net/2024/08/18/OTn5FbpkrslR4XY.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>选择第一项，设置网口：</p><p><img src="https://s2.loli.net/2024/08/18/3xRF8avAcdmTGUq.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>上下键选择你要用来管理ESXI的网口，这里有些工程机的网口是错乱的，可以通过插拔<code>网线</code>来确定是不是正确。如果不正确的话，需要通过后面在web端设置进行接口对应。</p><p><img src="https://s2.loli.net/2024/08/18/TfsNH94EU6mRziv.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>经过插拔网线，四个接口的顺序和ESXi系统显示的网口是一一对应的。选择etho接口作为管理口。通过键盘上下键，移动黑色条框，按空格确定选项。</p><p><img src="https://s2.loli.net/2024/08/18/BPsJhVCHWKgqowp.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>回车保存，自动退回到【网络配置】页面：</p><p><img src="https://s2.loli.net/2024/08/18/dqBWaRbfijKk4Vc.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="2-设置IPV4选项"><a href="#2-设置IPV4选项" class="headerlink" title="2.设置IPV4选项"></a>2.设置IPV4选项</h3><p>选择设置IPV4选项：</p><p><img src="https://s2.loli.net/2024/08/18/XJzwYv7sU5p8LlP.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>键盘上下键，移动黑色条框到第三项，可以看到第三项前面的括号里有个圆圈(○)，按空格确定选项。</p><p><img src="https://s2.loli.net/2024/08/18/huUHeZcIk73zEAd.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>设置下面三个选项【IPV4 Address(ESXI管理地址)】、【Subnet Mask(子网掩码)】、【Default Gateway(默认网关)】：</p><p><img src="https://s2.loli.net/2024/08/18/ieIX7rZVFEgyLYc.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><blockquote><ul><li>IPV4 Address【ESXI管理地址】：192.168.50.3</li><li>Subnet Mask【子网掩码】：255.255.255.0</li><li>Default Gateway【默认网关】：192.168.50.1</li></ul></blockquote><p>这个管理地址是后面我们在web端进行访问的地址，千万不要和ikuai以及openwrt冲突。Default Gateway【默认网关】就设置为主路由的网管即可。我以ikuai作为主路由。这里就直接将网关设置为主路由ikuai的地址了。按回车保存：</p><p><img src="https://s2.loli.net/2024/08/18/mi3RnKMa65ozXG1.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>退出来之后，在页面右上角就看到我们设置的信息了，按ESC，退出：</p><p><img src="https://s2.loli.net/2024/08/18/v5gJUxmIz3X8Rsi.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>在弹出的页面，按Y，并自动重启网络：</p><p><img src="https://s2.loli.net/2024/08/18/JfkPXqziR2hp4EN.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>网络重启完后，可以看到，已经设置成功了，按ESC，回到首页：</p><p><img src="https://s2.loli.net/2024/08/18/tIjaskAhu1cvb2p.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>返回首页之后，也可以看到已经设置完成：</p><p><img src="https://s2.loli.net/2024/08/18/ejlu21p6PR3JHKc.jpg" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="五、连接ESXi-8-0网页端设置"><a href="#五、连接ESXi-8-0网页端设置" class="headerlink" title="五、连接ESXi 8.0网页端设置"></a>五、连接ESXi 8.0网页端设置</h2><h3 id="1-给电脑分配IP"><a href="#1-给电脑分配IP" class="headerlink" title="1.给电脑分配IP"></a>1.给电脑分配IP</h3><p>我们将网线一头插到软路由的eth0口，另外一端插到电脑上，因为ESXi没有DHCP(Dynamic Host Configuration Protocol, 动态主机配置协议) 功能，没办法给电脑自动分配IP地址，这里要手动修改一下：</p><p>打开控制面板—网络和internet——更改适配器选项</p><p><img src="https://s2.loli.net/2024/08/18/WHpdmoRX8rMLQC7.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>这时候电脑显示未识别的网络：</p><p><img src="https://s2.loli.net/2024/08/18/HbPASEBytlfsQkZ.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>右击网络-【属性】：</p><p><img src="https://s2.loli.net/2024/08/18/7RbiLTzWVodX9rw.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>双击IPV4协议，在弹出的属性内，填入相同的IP段：</p><p><img src="https://s2.loli.net/2024/08/18/39MnYgJUWZLExyj.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="2-访问web端"><a href="#2-访问web端" class="headerlink" title="2.访问web端"></a>2.访问web端</h3><p>打开浏览器，在浏览器内输入：192.168.50.3访问，用账户名：root和前面安装系统时设置的密码登录：</p><p><img src="https://s2.loli.net/2024/08/18/JKUhf6awWBvYskd.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>弹出的页面选择不加入改进计划，确认下一步：</p><p><img src="https://s2.loli.net/2024/08/18/yeTHEFB4gYUMLbo.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h3 id="3-激活"><a href="#3-激活" class="headerlink" title="3.激活"></a>3.激活</h3><p>在【管理】——【许可】看下激活状态，进来之后可以看到系统分配的60天的密钥：</p><p><img src="https://s2.loli.net/2024/08/18/7MT1E6nvSDokajf.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>然后点分配许可证，输入密钥激活即可：</p><p><img src="https://s2.loli.net/2024/08/18/UEth1AeSxq5BLCc.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p><img src="https://s2.loli.net/2024/08/18/HWM3VgiOlD1rLRw.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="六、开启直通网卡"><a href="#六、开启直通网卡" class="headerlink" title="六、开启直通网卡"></a>六、开启直通网卡</h2><p>选择【管理】-【硬件】-【PCI设备】，查看可以直通的网卡，这里网卡的顺序就是按照我们物理接口的etho、eth1、eth2、eth3顺序来的，第一个网卡千万不要直通，也就是我们前面设置的ESXi管理口，不要设置直通。如果把管理口也做了直通，ESXI 重启后 WEB 管理界面就进入不去了。</p><h3 id="直通的好处？"><a href="#直通的好处？" class="headerlink" title="直通的好处？"></a><strong>直通的好处？</strong></h3><p>直通是指虚拟化时将硬件管理权、使用权完全交给一个虚拟出的系统(使用这个网卡的虚拟机)，不经过虚拟系统的虚拟封装，以直接以原生方式使用硬件，达到最高性能。直通的效率更好，因为直接直通给了虚拟机使用，硬件使用中产生的数据不会再经过ESXI进行二次处理，可以节约一部分系统性能，不直通的话虚拟机在运行中会占用更多的cpu。</p><p><img src="https://s2.loli.net/2024/08/18/f4c2VZomaDSPnYe.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>选择要直通的设备，然点击切换直通，将三个网卡的直通全部开启：</p><p><img src="https://s2.loli.net/2024/08/18/yQ8SrRYDLqZzPV3.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><p>看到网卡直通状态变为活动后，就是直通开通成功了，这样后面我们安装路由虚拟机时，直接添加PCl设备就可以直通了，同时注意内存设置全部保留。这个放到安装ikuai和openwrt时具体再讨论：</p><p><img src="https://s2.loli.net/2024/08/18/qvpz93PYN8CstSu.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="七、设置网络"><a href="#七、设置网络" class="headerlink" title="七、设置网络"></a>七、设置网络</h2><p>在网络内对虚拟机VM Network进行设置，选择【编辑设置】——安全内的混杂模式、mac地址改变、伪传输都改为接受：</p><p><img src="https://s2.loli.net/2024/08/18/JLYzVI145RaEFMC.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="八、修改电源模式"><a href="#八、修改电源模式" class="headerlink" title="八、修改电源模式"></a>八、修改电源模式</h2><p>一定要电源模式改为高性能，否则会<code>路由器</code>会自动限制性能，百度网盘，迅雷等软件下载速度会限制在10MB&#x2F;S。</p><p>选择【管理】-【硬件】-【电源管理】-【更改策略】-高性能：</p><p><img src="https://s2.loli.net/2024/08/18/bEJdFVg6R1vIH4Y.png" alt="ESXi 8.0虚拟机必备知识与保姆级安装过程"></p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>本期的经验分享就到这里结束了，本期主要是安装ESXi8.0虚拟机和基本的配置，在安装过程中碰到的一些问题写出来分享给大家，下一步就可以安装路由虚拟机了，后面我们来安装ikuai及openwrt，继续折腾。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ESXi 8.0虚拟机必备知识与保姆级安装过程&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A8-工具" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="虚拟机" scheme="https://kanoc.gitee.io/categories/A8-%E5%B7%A5%E5%85%B7/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="虚拟机" scheme="https://kanoc.gitee.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>内存小于-1G，宝塔面板-9.0.0-无法安装-mysql-解决方法</title>
    <link href="https://kanoc.gitee.io/2024/08/08/%E5%86%85%E5%AD%98%E5%B0%8F%E4%BA%8E-1G%EF%BC%8C%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF-9-0-0-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-mysql-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://kanoc.gitee.io/2024/08/08/%E5%86%85%E5%AD%98%E5%B0%8F%E4%BA%8E-1G%EF%BC%8C%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF-9-0-0-%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85-mysql-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2024-08-08T04:36:15.000Z</published>
    <updated>2025-06-09T03:53:29.745Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>内存小于 1G，宝塔面板<code>9.0.0</code>无法安装<code>mysql</code>解决方法</strong></font></p><span id="more"></span><p>宝塔官方限制了内存小于<code>1G</code>无法安装<code>mysql</code></p><p><font color=#00b2c2 size=5 face=宋体><strong>解决方法：</strong></font></p><p>找到路径：<code>/www/server/panel/class</code> 下的 <code>panelPlugin.py</code></p><p><img src="https://s2.loli.net/2024/08/09/XxNRyJokGCQa6e9.png" alt="image-20240808124006141"></p><p>定位到&gt;&gt;&gt; 关键字 <code>limit_list</code> 将如下注释掉即可</p><p><img src="https://s2.loli.net/2024/08/08/WutVP8LYhXv9rxN.png" alt="image-20240808123340813"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;内存小于 1G，宝塔面板&lt;code&gt;9.0.0&lt;/code&gt;无法安装&lt;code&gt;mysql&lt;/code&gt;解决方法&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="_A3-linux" scheme="https://kanoc.gitee.io/categories/A3-linux/"/>
    
    <category term="宝塔面板" scheme="https://kanoc.gitee.io/categories/A3-linux/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    
    
    <category term="系统" scheme="https://kanoc.gitee.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="运维" scheme="https://kanoc.gitee.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="宝塔" scheme="https://kanoc.gitee.io/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>requests-支持Ja3指纹修改的golang请求库</title>
    <link href="https://kanoc.gitee.io/2024/07/03/requests-%E6%94%AF%E6%8C%81Ja3%E6%8C%87%E7%BA%B9%E4%BF%AE%E6%94%B9%E7%9A%84golang%E8%AF%B7%E6%B1%82%E5%BA%93/"/>
    <id>https://kanoc.gitee.io/2024/07/03/requests-%E6%94%AF%E6%8C%81Ja3%E6%8C%87%E7%BA%B9%E4%BF%AE%E6%94%B9%E7%9A%84golang%E8%AF%B7%E6%B1%82%E5%BA%93/</id>
    <published>2024-07-02T22:46:17.000Z</published>
    <updated>2025-06-10T00:58:58.471Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>requests：支持Ja3指纹修改的golang请求库</strong></font></p><span id="more"></span><p>随着Python的验证限制越来越多，网络请求被限制得很严重，想要修改指纹等信息，requests库显得力不从心</p><p><strong>于是转战Go</strong></p><p><strong>requests支持以下新特性：</strong></p><ul><li>支持http2，默认以http2进行连接，连接失败后会进行退化而进行http1.1连接</li><li>支持JA3指纹修改</li><li>支持http2+JA3指纹</li><li>支持在使用代理的基础上修改JA3指纹</li></ul><p><strong>下载requests库</strong>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/wangluozhe/requests</span><br></pre></td></tr></table></figure><p><strong>项目地址：<a href="https://github.com/wangluozhe/requests">https://github.com/wangluozhe/requests</a></strong>:</p><h3 id="http2：请求"><a href="#http2：请求" class="headerlink" title="http2：请求"></a><strong>http2：请求</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">func request(_url string) (string, map[string]string) &#123;</span><br><span class="line">req := url.NewRequest()</span><br><span class="line">headers := &amp;http.Header&#123;</span><br><span class="line"><span class="string">&quot;User-Agent&quot;</span>:                []string&#123;<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/112.0&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;accept&quot;</span>:                    []string&#123;<span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;accept-language&quot;</span>:           []string&#123;<span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;accept-encoding&quot;</span>:           []string&#123;<span class="string">&quot;gzip, deflate, br&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;upgrade-insecure-requests&quot;</span>: []string&#123;<span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;sec-fetch-dest&quot;</span>:            []string&#123;<span class="string">&quot;document&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;sec-fetch-mode&quot;</span>:            []string&#123;<span class="string">&quot;navigate&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;sec-fetch-site&quot;</span>:            []string&#123;<span class="string">&quot;none&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;sec-fetch-user&quot;</span>:            []string&#123;<span class="string">&quot;?1&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;te&quot;</span>:                        []string&#123;<span class="string">&quot;trailers&quot;</span>&#125;,</span><br><span class="line">http.PHeaderOrderKey: []string&#123;</span><br><span class="line"><span class="string">&quot;:method&quot;</span>,</span><br><span class="line"><span class="string">&quot;:path&quot;</span>,</span><br><span class="line"><span class="string">&quot;:authority&quot;</span>,</span><br><span class="line"><span class="string">&quot;:scheme&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">http.HeaderOrderKey: []string&#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line"><span class="string">&quot;accept&quot;</span>,</span><br><span class="line"><span class="string">&quot;accept-language&quot;</span>,</span><br><span class="line"><span class="string">&quot;accept-encoding&quot;</span>,</span><br><span class="line"><span class="string">&quot;upgrade-insecure-requests&quot;</span>,</span><br><span class="line"><span class="string">&quot;sec-fetch-dest&quot;</span>,</span><br><span class="line"><span class="string">&quot;sec-fetch-mode&quot;</span>,</span><br><span class="line"><span class="string">&quot;sec-fetch-site&quot;</span>,</span><br><span class="line"><span class="string">&quot;sec-fetch-user&quot;</span>,</span><br><span class="line"><span class="string">&quot;te&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">req.Headers = headers</span><br><span class="line">req.Ja3 = <span class="string">&quot;771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-21,29-23-24,0&quot;</span></span><br><span class="line">h2s := &amp;transport.H2Settings&#123;</span><br><span class="line">Settings: map[string]int&#123;</span><br><span class="line"><span class="string">&quot;HEADER_TABLE_SIZE&quot;</span>: 65536,</span><br><span class="line">//<span class="string">&quot;ENABLE_PUSH&quot;</span>:            0,</span><br><span class="line">//<span class="string">&quot;MAX_HEADER_LIST_SIZE&quot;</span>:   262144,</span><br><span class="line">//<span class="string">&quot;MAX_CONCURRENT_STREAMS&quot;</span>: 1000,</span><br><span class="line"><span class="string">&quot;INITIAL_WINDOW_SIZE&quot;</span>: 131072,</span><br><span class="line"><span class="string">&quot;MAX_FRAME_SIZE&quot;</span>:      16384,</span><br><span class="line">&#125;,</span><br><span class="line">SettingsOrder: []string&#123;</span><br><span class="line"><span class="string">&quot;HEADER_TABLE_SIZE&quot;</span>,</span><br><span class="line"><span class="string">&quot;INITIAL_WINDOW_SIZE&quot;</span>,</span><br><span class="line"><span class="string">&quot;MAX_FRAME_SIZE&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">ConnectionFlow: 12517377,</span><br><span class="line">HeaderPriority: map[string]interface&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;weight&quot;</span>:    42,</span><br><span class="line"><span class="string">&quot;streamDep&quot;</span>: 13,</span><br><span class="line"><span class="string">&quot;exclusive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">PriorityFrames: []map[string]interface&#123;&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;streamID&quot;</span>: 3,</span><br><span class="line"><span class="string">&quot;priorityParam&quot;</span>: map[string]interface&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;weight&quot;</span>:    201,</span><br><span class="line"><span class="string">&quot;streamDep&quot;</span>: 0,</span><br><span class="line"><span class="string">&quot;exclusive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;streamID&quot;</span>: 5,</span><br><span class="line"><span class="string">&quot;priorityParam&quot;</span>: map[string]interface&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;weight&quot;</span>:    101,</span><br><span class="line"><span class="string">&quot;streamDep&quot;</span>: 0,</span><br><span class="line"><span class="string">&quot;exclusive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;streamID&quot;</span>: 7,</span><br><span class="line"><span class="string">&quot;priorityParam&quot;</span>: map[string]interface&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;weight&quot;</span>:    1,</span><br><span class="line"><span class="string">&quot;streamDep&quot;</span>: 0,</span><br><span class="line"><span class="string">&quot;exclusive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;streamID&quot;</span>: 9,</span><br><span class="line"><span class="string">&quot;priorityParam&quot;</span>: map[string]interface&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;weight&quot;</span>:    1,</span><br><span class="line"><span class="string">&quot;streamDep&quot;</span>: 7,</span><br><span class="line"><span class="string">&quot;exclusive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;streamID&quot;</span>: 11,</span><br><span class="line"><span class="string">&quot;priorityParam&quot;</span>: map[string]interface&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;weight&quot;</span>:    1,</span><br><span class="line"><span class="string">&quot;streamDep&quot;</span>: 3,</span><br><span class="line"><span class="string">&quot;exclusive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;streamID&quot;</span>: 13,</span><br><span class="line"><span class="string">&quot;priorityParam&quot;</span>: map[string]interface&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;weight&quot;</span>:    241,</span><br><span class="line"><span class="string">&quot;streamDep&quot;</span>: 0,</span><br><span class="line"><span class="string">&quot;exclusive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">h2ss := transport.ToHTTP2Settings(h2s)</span><br><span class="line">req.HTTP2Settings = h2ss</span><br><span class="line">r, err := requests.Get(_url, req)</span><br><span class="line"></span><br><span class="line">errMessage := map[string]string&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">errMessage = map[string]string&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;false&quot;</span>, <span class="string">&quot;errMessage&quot;</span>: <span class="string">&quot;获取内容错误&quot;</span>&#125;</span><br><span class="line">//fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> r.StatusCode != 200 &#123;</span><br><span class="line">errMessage = map[string]string&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;false&quot;</span>, <span class="string">&quot;errMessage&quot;</span>: <span class="string">&quot;状态响应错误&quot;</span>&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">errMessage = map[string]string&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;true&quot;</span>, <span class="string">&quot;errMessage&quot;</span>: <span class="string">&quot;获取内容成功&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">//fmt.Println(r.Request.Headers)</span><br><span class="line">//fmt.Println(<span class="string">&quot;url:&quot;</span>, r.Url)</span><br><span class="line">//fmt.Println(<span class="string">&quot;headers:&quot;</span>, r.Headers)</span><br><span class="line">//fmt.Println(<span class="string">&quot;text:&quot;</span>, r.Text)</span><br><span class="line"><span class="built_in">return</span> r.Text, errMessage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;requests：支持Ja3指纹修改的golang请求库&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://kanoc.gitee.io/categories/Golang/"/>
    
    <category term="爬虫" scheme="https://kanoc.gitee.io/categories/Golang/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="视频" scheme="https://kanoc.gitee.io/tags/%E8%A7%86%E9%A2%91/"/>
    
    <category term="go" scheme="https://kanoc.gitee.io/tags/go/"/>
    
    <category term="爬虫" scheme="https://kanoc.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Django-ORM-存储JSON数据</title>
    <link href="https://kanoc.gitee.io/2024/06/26/Django-ORM-%E5%AD%98%E5%82%A8JSON%E6%95%B0%E6%8D%AE/"/>
    <id>https://kanoc.gitee.io/2024/06/26/Django-ORM-%E5%AD%98%E5%82%A8JSON%E6%95%B0%E6%8D%AE/</id>
    <published>2024-06-25T19:51:28.000Z</published>
    <updated>2025-06-09T08:33:19.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-ORM-存储JSON数据"><a href="#Django-ORM-存储JSON数据" class="headerlink" title="Django ORM 存储JSON数据"></a><font color=#00b2c2 size=5 face=宋体><strong>Django ORM 存储JSON数据</strong></font></h2><span id="more"></span><p>在<code>Django</code>模型中，如果你想要一个字段能够接受一个列表（例如，一个图片URL的列表），你需要考虑数据库的设计如何能够支持这种结构。数据库通常不支持直接存储Python列表这样的复杂数据类型，但你可以使用几种方法来模拟这种行为。</p><p><code>以下是一些方法，你可以根据你的需求来选择：</code></p><h3 id="使用JSONField（Django-3-1-）"><a href="#使用JSONField（Django-3-1-）" class="headerlink" title="使用JSONField（Django 3.1+）"></a><strong>使用JSONField</strong>（Django 3.1+）</h3><p>如果你的Django版本是3.1或更高，你可以使用<code>JSONField</code>来存储JSON数据，包括列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models  </span><br><span class="line"><span class="keyword">from</span> django.contrib.postgres.fields <span class="keyword">import</span> JSONField  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(models.Model):  </span><br><span class="line">    list_image = JSONField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)  <span class="comment"># 假设你想存储图片URL的列表</span></span><br></pre></td></tr></table></figure><p>然后你可以这样使用它：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">instance = MyModel.objects.create(list_image=[<span class="string">&#x27;url1.com&#x27;</span>, <span class="string">&#x27;url2.com&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="使用CharField或TextField并手动序列化-反序列化"><a href="#使用CharField或TextField并手动序列化-反序列化" class="headerlink" title="使用CharField或TextField并手动序列化&#x2F;反序列化"></a><strong>使用CharField或TextField并手动序列化&#x2F;反序列化</strong></h3><p>如果你不想使用<code>JSONField</code>，或者你的Django版本较旧，你可以将列表转换为JSON字符串（使用<code>json.dumps</code>），然后将其存储在<code>CharField</code>或<code>TextField</code>中。读取时，你需要使用<code>json.loads</code>将其转换回Python列表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(models.Model):  </span><br><span class="line">    list_image = models.TextField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)  <span class="comment"># 假设你想存储图片URL的列表的JSON字符串  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_image_list</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.list_image:  </span><br><span class="line">            <span class="keyword">return</span> json.loads(<span class="variable language_">self</span>.list_image)  </span><br><span class="line">        <span class="keyword">return</span> []  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_image_list</span>(<span class="params">self, image_list</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.list_image = json.dumps(image_list)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用时  </span></span><br><span class="line">instance = MyModel()  </span><br><span class="line">instance.set_image_list([<span class="string">&#x27;url1.com&#x27;</span>, <span class="string">&#x27;url2.com&#x27;</span>])  </span><br><span class="line">instance.save()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 读取时  </span></span><br><span class="line">image_list = instance.get_image_list()</span><br></pre></td></tr></table></figure><h3 id="使用关联模型"><a href="#使用关联模型" class="headerlink" title="使用关联模型"></a><strong>使用关联模型</strong></h3><p>如果你想要建立更复杂的关联（例如，每个图片都有自己的元数据），你可以创建一个关联模型来表示这种关系。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span>(models.Model):  </span><br><span class="line">    url = models.URLField()  </span><br><span class="line">    <span class="comment"># 其他字段，如标题、描述等  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(models.Model):  </span><br><span class="line">    images = models.ManyToManyField(Image)</span><br></pre></td></tr></table></figure><p>这样，你可以将多个<code>Image</code>对象与<code>MyModel</code>对象关联起来，并使用Django的ORM来查询和管理这些关联。</p><p><font color=red size=3 face=宋体><strong>根据你的具体需求，选择最适合你的方法。如果你只是想简单地存储一个图片URL的列表，并且不需要复杂的查询或关系，那么使用<code>JSONField</code>或手动序列化&#x2F;反序列化可能是最简单的选择。如果你需要更复杂的关联或查询功能，那么使用关联模型可能是更好的选择。</strong></font></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Django-ORM-存储JSON数据&quot;&gt;&lt;a href=&quot;#Django-ORM-存储JSON数据&quot; class=&quot;headerlink&quot; title=&quot;Django ORM 存储JSON数据&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Django ORM 存储JSON数据&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django_ORM" scheme="https://kanoc.gitee.io/categories/Python/Django-ORM/"/>
    
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS-7上安装Go-1.22</title>
    <link href="https://kanoc.gitee.io/2024/06/11/%E5%9C%A8CentOS-7%E4%B8%8A%E5%AE%89%E8%A3%85Go-1-22/"/>
    <id>https://kanoc.gitee.io/2024/06/11/%E5%9C%A8CentOS-7%E4%B8%8A%E5%AE%89%E8%A3%85Go-1-22/</id>
    <published>2024-06-10T20:01:46.000Z</published>
    <updated>2025-06-09T10:41:43.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在CentOS-7上安装Go-1-22："><a href="#在CentOS-7上安装Go-1-22：" class="headerlink" title="在CentOS 7上安装Go 1.22："></a><font color=#00b2c2 size=5 face=宋体><strong>在CentOS 7上安装Go 1.22：</strong></font></h2><span id="more"></span><h3 id="在CentOS-7上安装Go-1-22-2的步骤如下："><a href="#在CentOS-7上安装Go-1-22-2的步骤如下：" class="headerlink" title="在CentOS 7上安装Go 1.22.2的步骤如下："></a>在CentOS 7上安装Go 1.22.2的步骤如下：</h3><h4 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h4><ol><li><p>确保你的<code>CentOS 7</code>系统已经更新到最新状态，可以通过以下命令进行更新：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update</span><br></pre></td></tr></table></figure></li><li><p>检查系统是否已安装<code>Go</code>的旧版本，如果有，则先卸载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum remove golang</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、下载并安装Go-1-22-2"><a href="#二、下载并安装Go-1-22-2" class="headerlink" title="二、下载并安装Go 1.22.2"></a>二、下载并安装Go 1.22.2</h4><ol><li><p>访问Go的官方网站或使用提供的下载链接来获取<code>Go 1.22.2</code>的<code>Linux-amd64</code>版本。你可以直接通过<code>wget</code>命令下载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src  </span><br><span class="line">wget https://golang.google.cn/dl/go1.22.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压下载的Go压缩包到<code>/usr/local</code>目录下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> tar -zxvf go1.22.2.linux-amd64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>这将把Go的安装文件解压到<code>/usr/local/go</code>目录下。</p></li></ol><h4 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h4><ol><li><p>打开<code>/etc/profile</code>文件，并在文件末尾添加以下配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin  </span><br><span class="line"><span class="built_in">export</span> GOPATH=/opt/go  <span class="comment"># 或者你可以设置为其他目录，作为你的工作区  </span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure></li><li><p>应用更改：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>或者使用<code>su -</code>命令重新登录shell会话。</p></li></ol><h4 id="四、验证安装"><a href="#四、验证安装" class="headerlink" title="四、验证安装"></a>四、验证安装</h4><ol><li><p>在终端中输入<code>go version</code>来检查Go的版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>如果安装成功，你应该看到类似于<code>go version go1.22.2 linux/amd64</code>的输出。</p></li></ol><h4 id="五、解决依赖下载速度过慢的问题（可选）"><a href="#五、解决依赖下载速度过慢的问题（可选）" class="headerlink" title="五、解决依赖下载速度过慢的问题（可选）"></a>五、解决依赖下载速度过慢的问题（可选）</h4><p>如果你的网络环境中Go依赖包的下载速度过慢，你可以设置<code>GOPROXY</code>环境变量来使用国内的代理服务器，如<code>Goproxy.cn</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on  </span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>这样设置后，Go的依赖包将会从指定的代理服务器下载，通常会有更快的下载速度。</p><p>以上就是在<code>CentOS 7</code>上安装<code>Go 1.22.2</code>的详细步骤。请注意，Go的最新版本可能已经更新，但上述步骤对于安装任何版本的Go都是通用的，只需将版本号替换为你要安装的版本即可。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;在CentOS-7上安装Go-1-22：&quot;&gt;&lt;a href=&quot;#在CentOS-7上安装Go-1-22：&quot; class=&quot;headerlink&quot; title=&quot;在CentOS 7上安装Go 1.22：&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;在CentOS 7上安装Go 1.22：&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="_A5-安装教程" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
    <category term="Golang" scheme="https://kanoc.gitee.io/categories/A5-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Golang/"/>
    
    
    <category term="go" scheme="https://kanoc.gitee.io/tags/go/"/>
    
    <category term="安装" scheme="https://kanoc.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
    <category term="教程" scheme="https://kanoc.gitee.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>django获取请求进来的ip</title>
    <link href="https://kanoc.gitee.io/2024/05/31/django%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E8%BF%9B%E6%9D%A5%E7%9A%84ip/"/>
    <id>https://kanoc.gitee.io/2024/05/31/django%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E8%BF%9B%E6%9D%A5%E7%9A%84ip/</id>
    <published>2024-05-30T22:03:46.000Z</published>
    <updated>2025-06-09T08:36:40.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django获取请求进来的IP"><a href="#django获取请求进来的IP" class="headerlink" title="django获取请求进来的IP"></a><font color=#00b2c2 size=5 face=宋体><strong>django获取请求进来的IP</strong></font></h2><span id="more"></span><p>你可以创建一个中间件来检查请求的IP地址是否在白名单中。如果不在，就拒绝访问。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseForbidden  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WhiteListMiddleware</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.get_response = get_response  </span><br><span class="line">        <span class="comment"># 这里设置你的白名单IP地址  </span></span><br><span class="line">        <span class="variable language_">self</span>.white_list = [<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="string">&#x27;192.168.1.100&#x27;</span>]  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):  </span><br><span class="line">        <span class="keyword">if</span> request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.white_list:  </span><br><span class="line">            <span class="keyword">return</span> HttpResponseForbidden(<span class="string">&#x27;Access Forbidden&#x27;</span>)  </span><br><span class="line">        response = <span class="variable language_">self</span>.get_response(request)  </span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>然后，在<code>settings.py</code>中添加这个中间件：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [  </span><br><span class="line">    <span class="comment"># ... 其他中间件 ...  </span></span><br><span class="line">    <span class="string">&#x27;path.to.your.WhiteListMiddleware&#x27;</span>,  <span class="comment"># 替换为中间件的实际路径  </span></span><br><span class="line">    <span class="comment"># ... 可能还有其他中间件 ...  </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;django获取请求进来的IP&quot;&gt;&lt;a href=&quot;#django获取请求进来的IP&quot; class=&quot;headerlink&quot; title=&quot;django获取请求进来的IP&quot;&gt;&lt;/a&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;django获取请求进来的IP&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;</summary>
    
    
    
    <category term="Python" scheme="https://kanoc.gitee.io/categories/Python/"/>
    
    <category term="Django" scheme="https://kanoc.gitee.io/categories/Python/Django/"/>
    
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="请求" scheme="https://kanoc.gitee.io/tags/%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
</feed>
