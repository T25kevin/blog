<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://kanoc.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://kanoc.gitee.io/"/>
  <updated>2025-05-26T14:58:04.076Z</updated>
  <id>https://kanoc.gitee.io/</id>
  
  <author>
    <name>Kanoc Ge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu配置安装GPU转码</title>
    <link href="https://kanoc.gitee.io/2025/05/26/Ubuntu%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85GPU%E8%BD%AC%E7%A0%81/"/>
    <id>https://kanoc.gitee.io/2025/05/26/Ubuntu%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85GPU%E8%BD%AC%E7%A0%81/</id>
    <published>2025-05-26T14:07:58.000Z</published>
    <updated>2025-05-26T14:58:04.076Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Ubuntu配置安装GPU转码</strong></font></p><span id="more"></span><h2 id="ubuntu-测试使用-GPU-ffmpeg-转码视频"><a href="#ubuntu-测试使用-GPU-ffmpeg-转码视频" class="headerlink" title="ubuntu 测试使用 GPU-ffmpeg 转码视频"></a>ubuntu 测试使用 GPU-ffmpeg 转码视频</h2><h3 id="额外命令："><a href="#额外命令：" class="headerlink" title="额外命令："></a>额外命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a   <span class="comment"># 查看发行版本及代号</span></span><br><span class="line">lspci | grep -i vga   <span class="comment"># 查看是否存在gpu</span></span><br></pre></td></tr></table></figure><h3 id="第一步：安装ffmpeg"><a href="#第一步：安装ffmpeg" class="headerlink" title="第一步：安装ffmpeg"></a>第一步：安装ffmpeg</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install ffmpeg</span><br></pre></td></tr></table></figure><h3 id="第二步：1-安装-NVIDIA-驱动"><a href="#第二步：1-安装-NVIDIA-驱动" class="headerlink" title="第二步：1. 安装 NVIDIA 驱动"></a>第二步：<strong>1. 安装 NVIDIA 驱动</strong></h3><h4 id="1-添加官方驱动仓库并更新"><a href="#1-添加官方驱动仓库并更新" class="headerlink" title="(1) 添加官方驱动仓库并更新"></a>(1) 添加官方驱动仓库并更新</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><h4 id="2-查看推荐驱动版本"><a href="#2-查看推荐驱动版本" class="headerlink" title="(2) 查看推荐驱动版本"></a>(2) 查看推荐驱动版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">== /sys/devices/pci0000:00/0000:00:02.0/0000:03:00.0 ==</span><br><span class="line">modalias : pci:v000010DEd00001C82sv000010DEsd00001C82bc03sc00i00</span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line">model    : GP107 [GeForce GTX 1050 Ti]</span><br><span class="line">driver   : nvidia-driver-570-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-550 - distro non-free</span><br><span class="line">driver   : nvidia-driver-418-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-570 - distro non-free recommended</span><br><span class="line">driver   : nvidia-driver-545 - distro non-free</span><br><span class="line">driver   : nvidia-driver-535-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-535 - distro non-free</span><br><span class="line">driver   : nvidia-driver-450-server - distro non-free</span><br><span class="line">driver   : nvidia-driver-390 - distro non-free</span><br><span class="line">driver   : nvidia-driver-470 - distro non-free</span><br><span class="line">driver   : nvidia-driver-470-server - distro non-free</span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free <span class="built_in">builtin</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-安装推荐的驱动（如-570-版本）"><a href="#3-安装推荐的驱动（如-570-版本）" class="headerlink" title="(3) 安装推荐的驱动（如 570 版本）"></a>(3) 安装推荐的驱动（如 570 版本）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nvidia-driver-570</span><br></pre></td></tr></table></figure><h4 id="4-重启系统"><a href="#4-重启系统" class="headerlink" title="(4) 重启系统"></a>(4) 重启系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure><h4 id="5-验证驱动"><a href="#5-验证驱动" class="headerlink" title="(5) 验证驱动"></a>(5) 验证驱动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>正常输出应显示 GPU 状态：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 535.161.07   Driver Version: 535.161.07   CUDA Version: 12.2     |</span><br><span class="line">|-----------------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|=========================================+======================+======================|</span><br><span class="line">|   0  NVIDIA GeForce GTX 1050 Ti    Off  | 00000000:03:00.0 Off |                  N/A |</span><br><span class="line">| 30%   35C    P8              N/A /  75W |      0MiB /  4096MiB |      0%      Default |</span><br><span class="line">+-----------------------------------------+----------------------+----------------------+</span><br></pre></td></tr></table></figure><hr><h3 id="第三步：-安装-CUDA-工具包（可选）"><a href="#第三步：-安装-CUDA-工具包（可选）" class="headerlink" title="第三步： 安装 CUDA 工具包（可选）"></a><strong>第三步： 安装 CUDA 工具包（可选）</strong></h3><p>如果需开发 GPU 计算应用（如 AI、深度学习），安装 CUDA：</p><h4 id="1-访问-CUDA-Toolkit-Archive-选择版本（推荐-CUDA-11-8-或-12-x）"><a href="#1-访问-CUDA-Toolkit-Archive-选择版本（推荐-CUDA-11-8-或-12-x）" class="headerlink" title="(1) 访问 CUDA Toolkit Archive 选择版本（推荐 CUDA 11.8 或 12.x）"></a>(1) 访问 <a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive</a> 选择版本（推荐 CUDA 11.8 或 12.x）</h4><h4 id="2-通过命令行安装（以-CUDA-12-2-为例）"><a href="#2-通过命令行安装（以-CUDA-12-2-为例）" class="headerlink" title="(2) 通过命令行安装（以 CUDA 12.2 为例）"></a>(2) 通过命令行安装（以 CUDA 12.2 为例）</h4><ul><li>该命令需要去英伟达官网实时生成：<a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_local">CUDA Toolkit 12.9 Downloads | NVIDIA Developer</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin</span><br><span class="line">sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/12.9.0/local_installers/cuda-repo-ubuntu2204-12-9-local_12.9.0-575.51.03-1_amd64.deb</span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu2204-12-9-local_12.9.0-575.51.03-1_amd64.deb</span><br><span class="line">sudo cp /var/cuda-repo-ubuntu2204-12-9-local/cuda-*-keyring.gpg /usr/share/keyrings/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cuda-toolkit-12-9</span><br></pre></td></tr></table></figure><h4 id="3-添加变量"><a href="#3-添加变量" class="headerlink" title="(3) 添加变量"></a>(3) 添加变量</h4><p>虽然系统显示 <code>cuda-toolkit-12-9</code> 已安装，但 <code>nvcc</code> 的路径未添加到系统环境变量中。此时需要手动将 CUDA 的二进制目录加入 <code>PATH</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="4-验证-CUDA"><a href="#4-验证-CUDA" class="headerlink" title="(4) 验证 CUDA"></a>(4) 验证 CUDA</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure><p>正常输出应显示 CUDA 版本。</p><h3 id="第四步：-验证-GPU-加速是否生效"><a href="#第四步：-验证-GPU-加速是否生效" class="headerlink" title="第四步： 验证 GPU 加速是否生效"></a><strong>第四步： 验证 GPU 加速是否生效</strong></h3><h4 id="1、检查编码器"><a href="#1、检查编码器" class="headerlink" title="1、检查编码器"></a>1、检查编码器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -encoders | grep nvenc</span><br><span class="line"><span class="comment"># 应输出包含 h264_nvenc 的行</span></span><br></pre></td></tr></table></figure><p>正常输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@R7-13:~# ffmpeg -encoders | grep nvenc</span><br><span class="line">ffmpeg version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2000-2021 the FFmpeg developers</span><br><span class="line">  built with gcc 11 (Ubuntu 11.2.0-19ubuntu1)</span><br><span class="line">  configuration: --prefix=/usr --extra-version=0ubuntu0.22.04.1 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --<span class="built_in">arch</span>=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared</span><br><span class="line">  libavutil      56. 70.100 / 56. 70.100</span><br><span class="line">  libavcodec     58.134.100 / 58.134.100</span><br><span class="line">  libavformat    58. 76.100 / 58. 76.100</span><br><span class="line">  libavdevice    58. 13.100 / 58. 13.100</span><br><span class="line">  libavfilter     7.110.100 /  7.110.100</span><br><span class="line">  libswscale      5.  9.100 /  5.  9.100</span><br><span class="line">  libswresample   3.  9.100 /  3.  9.100</span><br><span class="line">  libpostproc    55.  9.100 / 55.  9.100</span><br><span class="line"> V....D h264_nvenc           NVIDIA NVENC H.264 encoder (codec h264)</span><br><span class="line"> V..... nvenc                NVIDIA NVENC H.264 encoder (codec h264)</span><br><span class="line"> V..... nvenc_h264           NVIDIA NVENC H.264 encoder (codec h264)</span><br><span class="line"> V..... nvenc_hevc           NVIDIA NVENC hevc encoder (codec hevc)</span><br><span class="line"> V....D hevc_nvenc           NVIDIA NVENC hevc encoder (codec hevc)</span><br></pre></td></tr></table></figure><h4 id="2、监控-GPU-使用情况"><a href="#2、监控-GPU-使用情况" class="headerlink" title="2、监控 GPU 使用情况"></a>2、监控 GPU 使用情况</h4><h5 id="2-1、nvidia-smi-watch-组合命令"><a href="#2-1、nvidia-smi-watch-组合命令" class="headerlink" title="2.1、nvidia-smi + watch 组合命令*"></a>2.1、<code>nvidia-smi</code> + <code>watch</code> 组合命令*</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每秒刷新一次 GPU 状态，适合快速查看核心利用率、显存占用和温度</span></span><br><span class="line">watch -n 1 nvidia-smi  <span class="comment"># Linux/macOS</span></span><br></pre></td></tr></table></figure><p>windows 方案：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="variable">$true</span>) &#123; nvidia-smi; Start-Sleep -Milliseconds 500 &#125;</span><br></pre></td></tr></table></figure><h5 id="2-2、nvtop（类-htop-工具）"><a href="#2-2、nvtop（类-htop-工具）" class="headerlink" title="2.2、nvtop（类 htop 工具）"></a>2.2、<strong><code>nvtop</code>（类 htop 工具）</strong></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 支持交互式操作和动态排序，适合多 GPU 服务器</span></span><br><span class="line"><span class="built_in">sudo</span> apt install nvtop  <span class="comment"># Ubuntu/Debian</span></span><br><span class="line">nvtop</span><br></pre></td></tr></table></figure><h2 id="第四步：使用GPU转码"><a href="#第四步：使用GPU转码" class="headerlink" title="第四步：使用GPU转码"></a>第四步：使用GPU转码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地文件转码</span></span><br><span class="line">ffmpeg -nostats -loglevel warning -hwaccel cuda -i ace.mp4 -vf <span class="string">&quot;scale=720:1270,setsar=1/1&quot;</span> -c:v h264_nvenc -preset p3 -rc vbr -b:v 0 -cq 23 -multipass fullres -tune hq -c:a aac -r 30 -y 3.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带请求头</span></span><br><span class="line">ffmpeg -nostats -loglevel warning -hwaccel cuda -headers <span class="string">&quot;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\r\nReferer: https://exx.tv/\r\n&quot;</span> -i <span class="string">&quot;https://xxx.m3u8&quot;</span> -vf <span class="string">&quot;scale=720:1270,setsar=1/1&quot;</span> -c:v h264_nvenc -preset p3 -rc vbr -b:v 0 -cq 23 -multipass fullres -tune hq -c:a aac -r 30 -y 3.mp4</span><br></pre></td></tr></table></figure><h4 id="命令详解："><a href="#命令详解：" class="headerlink" title="命令详解："></a>命令详解：</h4><h5 id="基础参数"><a href="#基础参数" class="headerlink" title="基础参数"></a><strong>基础参数</strong></h5><ol><li><strong><code>-nostats</code></strong><ul><li><strong>功能</strong>：禁用编码统计信息的输出。</li><li><strong>说明</strong>：默认情况下，FFmpeg 会实时显示比特率、帧数等统计信息，此参数可减少输出干扰。</li></ul></li><li><strong><code>-loglevel warning</code></strong><ul><li><strong>功能</strong>：设置日志级别为 <code>warning</code>。</li><li><strong>说明</strong>：仅显示警告和错误信息，抑制冗余日志，使输出更简洁。</li></ul></li><li><strong><code>-hwaccel cuda</code></strong><ul><li><strong>功能</strong>：启用 NVIDIA CUDA 硬件加速解码。</li><li><strong>说明</strong>：利用 GPU 加速视频解码流程，提升处理速度。</li></ul></li><li><strong><code>-i ace.mp4</code></strong><ul><li><strong>功能</strong>：指定输入文件为 <code>ace.mp4</code>。</li></ul></li></ol><hr><h5 id="视频处理参数"><a href="#视频处理参数" class="headerlink" title="视频处理参数"></a><strong>视频处理参数</strong></h5><ol><li><strong><code>-vf &quot;scale=720:1270,setsar=1/1&quot;</code></strong><ul><li><strong>功能</strong>：应用视频滤镜链。<ul><li><strong><code>scale=720:1270</code></strong>：将视频缩放至 <code>720x1270</code> 分辨率（注意宽高比可能被改变）。</li><li><strong><code>setsar=1/1</code></strong>：设置像素宽高比（Sample Aspect Ratio）为 1:1，确保方形像素显示。</li></ul></li><li><strong>说明</strong>：调整分辨率后需修正宽高比，避免播放时变形。</li></ul></li></ol><hr><h5 id="视频编码参数"><a href="#视频编码参数" class="headerlink" title="视频编码参数"></a><strong>视频编码参数</strong></h5><ol><li><strong><code>-c:v h264_nvenc</code></strong><ul><li><strong>功能</strong>：使用 NVIDIA NVENC 硬件编码器生成 H.264 视频流。</li><li><strong>说明</strong>：相比 CPU 编码（如 <code>libx264</code>），硬件编码速度更快，但压缩效率略低。</li></ul></li><li><strong><code>-preset p3</code></strong><ul><li><strong>功能</strong>：设置编码器预设为 <code>p3</code>。</li><li><strong>说明</strong>：NVENC 预设范围 <code>p1</code>（最快）到 <code>p7</code>（最慢但质量更好），<code>p3</code> 平衡速度与质量。</li></ul></li><li><strong><code>-rc vbr</code></strong><ul><li><strong>功能</strong>：使用可变比特率（Variable Bitrate）控制模式。</li><li><strong>说明</strong>：VBR 根据内容复杂度动态分配码率，相比 CBR（恒定码率）更节省存储。</li></ul></li><li><strong><code>-b:v 0</code></strong><ul><li><strong>功能</strong>：将视频目标比特率设为 <code>0</code>。</li><li><strong>说明</strong>：在 <code>-rc vbr</code> + <code>-cq</code> 模式下，此参数表示由质量参数（<code>-cq</code>）主导码率分配。</li></ul></li><li><strong><code>-cq 23</code></strong><ul><li><strong>功能</strong>：设置恒定质量模式的质量值为 <code>23</code>。</li><li><strong>说明</strong>：NVENC 的 <code>cq</code> 范围通常为 <code>0</code>（无损）到 <code>51</code>（最差），<code>23</code> 是常见高质量选择。</li></ul></li><li><strong><code>-multipass fullres</code></strong><ul><li><strong>功能</strong>：启用两趟编码（Two-Pass Encoding），使用全分辨率分析。</li><li><strong>说明</strong>：首趟分析视频内容，次趟优化码率分配，提升压缩效率（需更高计算资源）。</li></ul></li><li><strong><code>-tune hq</code></strong><ul><li><strong>功能</strong>：优化编码参数以追求高质量。</li><li><strong>说明</strong>：适用于对画质要求较高的场景，可能牺牲部分编码速度。</li></ul></li></ol><hr><h5 id="音频与帧率参数"><a href="#音频与帧率参数" class="headerlink" title="音频与帧率参数"></a><strong>音频与帧率参数</strong></h5><ol><li><strong><code>-c:a aac</code></strong><ul><li><strong>功能</strong>：使用 AAC 编码器压缩音频流。</li><li><strong>说明</strong>：AAC 是通用音频格式，平衡音质与文件大小。</li></ul></li><li><strong><code>-r 30</code></strong><ul><li><strong>功能</strong>：强制输出视频帧率为 <code>30 FPS</code>。</li><li><strong>说明</strong>：若输入帧率不一致，FFmpeg 会通过丢帧或插帧适配。</li></ul></li></ol><hr><h5 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a><strong>其他参数</strong></h5><ol><li><strong><code>-y</code></strong><ul><li><strong>功能</strong>：自动覆盖输出文件（<code>3.mp4</code>），无需用户确认。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Ubuntu配置安装GPU转码&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ffmpeg" scheme="https://kanoc.gitee.io/categories/ffmpeg/"/>
    
    <category term="GPU" scheme="https://kanoc.gitee.io/categories/ffmpeg/GPU/"/>
    
    
    <category term="转码" scheme="https://kanoc.gitee.io/tags/%E8%BD%AC%E7%A0%81/"/>
    
    <category term="gpu" scheme="https://kanoc.gitee.io/tags/gpu/"/>
    
    <category term="NVIDIA" scheme="https://kanoc.gitee.io/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>go交叉编译错误:sqlite数据库</title>
    <link href="https://kanoc.gitee.io/2025/05/26/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF-sqlite%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://kanoc.gitee.io/2025/05/26/go%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF-sqlite%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2025-05-26T01:18:39.000Z</published>
    <updated>2025-05-26T01:22:51.500Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>go交叉编译错误:sqlite数据库：</strong></font></p><span id="more"></span><p><font color=#f26522 size=4 face=宋体><strong>错误内容：</strong></font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o SaveVideo</span><br><span class="line"># runtime/cgo</span><br><span class="line">linux_syscall.c:67:13: error: call to undeclared function &#x27;setresgid&#x27;; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]</span><br><span class="line">linux_syscall.c:67:13: note: did you mean &#x27;setregid&#x27;?</span><br><span class="line">/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:593:6: note: &#x27;setregid&#x27; declared here</span><br><span class="line">linux_syscall.c:73:13: error: call to undeclared function &#x27;setresuid&#x27;; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]</span><br><span class="line">linux_syscall.c:73:13: note: did you mean &#x27;setreuid&#x27;?</span><br><span class="line">/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:595:6: note: &#x27;setreuid&#x27; declared here</span><br></pre></td></tr></table></figure><p><font color=#f26522 size=5 face=宋体><strong>错误说明：</strong></font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">嗯，用户遇到了在MacOS上交叉编译到Linux时出现的CGO错误。错误信息指出`setresgid`和`setresuid`函数未声明，而系统头文件里只有`setregid`和`setreuid`。我需要仔细分析这个问题，找到根本原因，并提供有效的解决方案。</span><br><span class="line"></span><br><span class="line">首先，用户使用的命令是`CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o SaveVideo`。他们启用了CGO，并且尝试交叉编译到Linux的amd64架构。错误来自C代码中的函数调用，说明在交叉编译时，MacOS的本地C编译器（可能是clang）在尝试编译针对Linux的C代码时找不到这些函数。</span><br><span class="line"></span><br><span class="line">接下来，我需要确认`setresgid`和`setresuid`在Linux中的情况。这两个函数是Linux特有的系统调用，用于设置真实、有效和保存的组ID和用户ID。在MacOS的标准库中，并没有这两个函数，取而代之的是`setregid`和`setreuid`，这解释了为什么编译器会提示函数未声明。</span><br><span class="line"></span><br><span class="line">可能的原因是，交叉编译时使用的C编译器（比如MacOS自带的clang）默认链接了MacOS的系统头文件，而这些头文件里没有Linux特定的函数声明。因此，当交叉编译到Linux时，需要确保使用适合目标平台的C库和头文件。</span><br><span class="line"></span><br><span class="line">解决方案方面，用户需要安装一个针对Linux的C交叉编译工具链，比如musl工具链，这样在编译时可以使用Linux兼容的头文件和库。同时，可能需要指定使用musl-gcc作为编译器，以确保正确的函数声明和链接。</span><br><span class="line"></span><br><span class="line">另外，用户可能需要检查代码中是否有直接或间接使用这些系统调用的情况。如果是某个依赖库（如go-sqlite3）使用了这些函数，可能需要查看该库的文档或问题列表，确认是否有已知的跨平台编译问题，或者是否需要特定的编译标签。</span><br><span class="line"></span><br><span class="line">总结步骤应该是：安装musl交叉编译工具链，配置环境变量使用正确的编译器，确保依赖库的安装，然后重新编译。如果问题依然存在，可能需要进一步检查代码或依赖库的兼容性，或者考虑在Linux环境中进行编译以避免跨平台问题。</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>此错误是由于在 <strong>MacOS 上交叉编译 Linux 可执行文件</strong>时，C 编译器使用了 MacOS 的系统头文件，而 Linux 特有的系统调用 <code>setresgid</code> 和 <code>setresuid</code> 未在 MacOS 头文件中声明。以下是分步修复方法：</p><hr><h4 id="1-安装-Linux-交叉编译工具链"><a href="#1-安装-Linux-交叉编译工具链" class="headerlink" title="1. 安装 Linux 交叉编译工具链"></a>1. <strong>安装 Linux 交叉编译工具链</strong></h4><p>需要安装针对 Linux 的 C 编译器（如 <code>musl-gcc</code>），以正确识别 Linux 系统调用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 musl 交叉编译工具链（MacOS）</span></span><br><span class="line">brew install FiloSottile/musl-cross/musl-cross</span><br></pre></td></tr></table></figure><hr><h4 id="2-配置编译命令"><a href="#2-配置编译命令" class="headerlink" title="2. 配置编译命令"></a>2. <strong>配置编译命令</strong></h4><p>指定使用 <code>musl-gcc</code> 作为 C 编译器，并启用静态链接：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=1 \</span><br><span class="line">GOOS=linux \</span><br><span class="line">GOARCH=amd64 \</span><br><span class="line">CC=x86_64-linux-musl-gcc \</span><br><span class="line">CXX=x86_64-linux-musl-g++ \</span><br><span class="line">go build -ldflags <span class="string">&#x27;-extldflags &quot;-static&quot;&#x27;</span> -o SaveVideo</span><br></pre></td></tr></table></figure><hr><h4 id="3-验证静态编译"><a href="#3-验证静态编译" class="headerlink" title="3. 验证静态编译"></a>3. <strong>验证静态编译</strong></h4><p>检查生成的二进制文件是否为静态链接：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查文件类型</span></span><br><span class="line">file SaveVideo</span><br><span class="line"><span class="comment"># 期望输出：ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查动态库依赖（应无输出）</span></span><br><span class="line">ldd SaveVideo</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;go交叉编译错误:sqlite数据库：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://kanoc.gitee.io/categories/go/"/>
    
    <category term="编译错误" scheme="https://kanoc.gitee.io/categories/go/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/"/>
    
    
    <category term="错误" scheme="https://kanoc.gitee.io/tags/%E9%94%99%E8%AF%AF/"/>
    
    <category term="编译" scheme="https://kanoc.gitee.io/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="交叉编译" scheme="https://kanoc.gitee.io/tags/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Go版本管理工具goenv-安装教程</title>
    <link href="https://kanoc.gitee.io/2025/05/26/Go%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7goenv-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://kanoc.gitee.io/2025/05/26/Go%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7goenv-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2025-05-25T22:55:33.000Z</published>
    <updated>2025-05-25T23:10:55.257Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Go版本管理工具goenv-安装教程</strong></font></p><span id="more"></span><h2 id="goenv"><a href="#goenv" class="headerlink" title="goenv"></a><strong>goenv</strong></h2><p><font color=#f26522 size=4 face=宋体><strong><strong>特点</strong>: 轻量级，类似 <code>pyenv</code> 或 <code>rbenv</code>，通过环境变量管理版本。</strong></font></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/syndbg/goenv.git ~/.goenv</span><br><span class="line"><span class="comment"># 在 shell 配置文件中添加（如 ~/.bashrc/zshrc）:</span></span><br><span class="line"><span class="built_in">export</span> GOENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.goenv&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$GOENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(goenv init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="root用户安装环境"><a href="#root用户安装环境" class="headerlink" title="root用户安装环境"></a>root用户安装环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/syndbg/goenv.git ~/.goenv</span><br><span class="line"><span class="comment"># 编辑全局环境变量文件（影响所有用户）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export GOENV_ROOT=&quot;/root/.goenv&quot;&#x27;</span> &gt;&gt; /etc/profile.d/goenv.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$GOENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; /etc/profile.d/goenv.sh</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v goenv 1&gt;/dev/null 2&gt;&amp;1; then\n eval &quot;$(goenv init -)&quot;\nfi&#x27;</span> &gt;&gt; /etc/profile.d/goenv.sh</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a><strong>常用命令</strong>:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">goenv install 1.21.0     <span class="comment"># 安装1.21.0版本</span></span><br><span class="line">goenv global 1.21.0      <span class="comment"># 设置全局版本</span></span><br><span class="line">goenv <span class="built_in">local</span> 1.20.5       <span class="comment"># 设置当前目录版本（生成 .go-version 文件）</span></span><br><span class="line">goenv install --list     <span class="comment"># 列出所有可安装版本</span></span><br><span class="line">goenv global 1.21.5      <span class="comment"># 所有项目默认使用此版本</span></span><br><span class="line">goenv <span class="built_in">local</span> 1.21.5       <span class="comment"># 设置当前目录版本  生成 .go-version 文件，仅当前目录生效</span></span><br><span class="line">goenv shell 1.21.5       <span class="comment"># 设置 Shell 会话版本</span></span><br><span class="line">goenv versions           <span class="comment"># 查看已安装版本</span></span><br><span class="line">goenv uninstall 1.21.5   <span class="comment"># 卸载版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看当前生效的 Go 版本及路径</span></span><br><span class="line">goenv version         <span class="comment"># 显示当前版本及来源（全局/本地/Shell）</span></span><br><span class="line">goenv <span class="built_in">which</span> go        <span class="comment"># 显示当前使用的 Go 可执行文件路径</span></span><br><span class="line">goenv <span class="built_in">rehash</span>          <span class="comment"># 刷新 Shims 缓存</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Go版本管理工具goenv-安装教程&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="程序版本管理工具" scheme="https://kanoc.gitee.io/categories/%E7%A8%8B%E5%BA%8F%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="go" scheme="https://kanoc.gitee.io/categories/%E7%A8%8B%E5%BA%8F%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/go/"/>
    
    
    <category term="go" scheme="https://kanoc.gitee.io/tags/go/"/>
    
    <category term="goenv" scheme="https://kanoc.gitee.io/tags/goenv/"/>
    
    <category term="版本管理工具" scheme="https://kanoc.gitee.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Django配置-channels-WS的ASGI服务器</title>
    <link href="https://kanoc.gitee.io/2025/05/22/Django%E9%85%8D%E7%BD%AE-channels-WS%E7%9A%84ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://kanoc.gitee.io/2025/05/22/Django%E9%85%8D%E7%BD%AE-channels-WS%E7%9A%84ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2025-05-22T01:06:19.000Z</published>
    <updated>2025-05-22T01:29:07.206Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Django配置-channels-WS的ASGI服务器</strong></font></p><span id="more"></span><h1 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h1><p>该环境几乎算是目前最新的版本的asgi服务器了</p><ul><li><p>系统环境：MacOS（M系列）</p></li><li><p>Python版本：<code>3.12</code></p></li><li><p>Django版本：<code>5.1.7</code></p></li><li><p>daphne版本：<code>4.2.0</code></p></li><li><p>channels版本：<code>4.2.2</code></p></li><li><p>asgiref版本：<code>3.8.1</code></p></li></ul><p><img src="https://s2.loli.net/2025/05/22/IktHlRLTXoCMpZq.png" alt="image-20250522090858536"></p><h2 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── MyPorject</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── routing.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── apps</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   └── consumers.cpython-312.pyc</span><br><span class="line">│   ├── consumers.py（位于主app下）</span><br><span class="line">│   └── **其他app**</span><br><span class="line">├── manage.py</span><br></pre></td></tr></table></figure><h2 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a>特别说明：</h2><p><font color=red size=4 face=宋体><strong><code>channels</code> 大于 3.0.5 必须配置<code>daphne</code>或者<code>uvicorn</code>使用</strong></font></p><h3 id="第一步：安装带达芙妮的-channels版本，以及其他环境"><a href="#第一步：安装带达芙妮的-channels版本，以及其他环境" class="headerlink" title="第一步：安装带达芙妮的 channels版本，以及其他环境"></a>第一步：安装带<code>达芙妮</code>的 <code>channels</code>版本，以及其他环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install channels[daphne]</span><br><span class="line"><span class="comment"># daphne==4.2.0  channels==4.2.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Django</span></span><br><span class="line">pip install Django==5.1.7</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装 asgiref</span></span><br><span class="line">pip install asgiref==3.8.1</span><br></pre></td></tr></table></figure><h3 id="第二步：配置-MyPorject-settings-py"><a href="#第二步：配置-MyPorject-settings-py" class="headerlink" title="第二步：配置 MyPorject__settings.py"></a>第二步：配置 <code>MyPorject__settings.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;daphne&quot;</span>,</span><br><span class="line">    <span class="string">&quot;其他app&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 开启 ASGI访问</span></span><br><span class="line">WSGI_APPLICATION = <span class="string">&#x27;MyPorject.wsgi.application&#x27;</span></span><br><span class="line"><span class="comment"># 添加 Channels 配置</span></span><br><span class="line">ASGI_APPLICATION = <span class="string">&#x27;MyPorject.asgi.application&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第三步：配置-MyPorject-asgi-py"><a href="#第三步：配置-MyPorject-asgi-py" class="headerlink" title="第三步：配置 MyPorject__asgi.py"></a>第三步：配置 <code>MyPorject__asgi.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> channels.routing <span class="keyword">import</span> ProtocolTypeRouter, URLRouter</span><br><span class="line"><span class="keyword">from</span> django.core.asgi <span class="keyword">import</span> get_asgi_application</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> routing</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;MyPorject.settings&#x27;</span>)</span><br><span class="line">django_asgi_app = get_asgi_application()</span><br><span class="line"></span><br><span class="line">application = ProtocolTypeRouter(&#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: django_asgi_app,</span><br><span class="line">    <span class="string">&quot;websocket&quot;</span>: URLRouter(routing.websocket_urlpatterns)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步：新建-MyPorject-routing-py"><a href="#第四步：新建-MyPorject-routing-py" class="headerlink" title="第四步：新建 MyPorject__routing.py"></a>第四步：新建 <code>MyPorject__routing.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yourapp/routing.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> apps <span class="keyword">import</span> consumers</span><br><span class="line"></span><br><span class="line">websocket_urlpatterns = [</span><br><span class="line">    <span class="comment"># xxxx/ws/x1</span></span><br><span class="line">    path(<span class="string">&#x27;ws&#x27;</span>, consumers.ChatConsumer.as_asgi()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="第五步：新建-MyPorject-apps-consumers-py"><a href="#第五步：新建-MyPorject-apps-consumers-py" class="headerlink" title="第五步：新建 MyPorject__apps__consumers.py"></a>第五步：新建 <code>MyPorject__apps__consumers.py</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> channels.generic.websocket <span class="keyword">import</span> AsyncWebsocketConsumer</span><br><span class="line"><span class="keyword">from</span> channels.exceptions <span class="keyword">import</span> StopConsumer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatConsumer</span>(<span class="title class_ inherited__">AsyncWebsocketConsumer</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.clientData = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.SendDataJsonKeys = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">self</span>.accept()</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, close_code=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">raise</span> StopConsumer()</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">receive</span>(<span class="params">self, text_data=<span class="literal">None</span>, bytes_data=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 传递回来的参数的转换</span></span><br><span class="line">            <span class="variable language_">self</span>.clientData = json.loads(text_data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;传递过来参数了&quot;</span>, <span class="variable language_">self</span>.clientData)</span><br><span class="line">            <span class="variable language_">self</span>.SendDataJsonKeys = <span class="variable language_">self</span>.clientData.keys()   <span class="comment"># 获取传递上来的参数</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> text_data == <span class="string">&quot;断开&quot;</span>:</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.send(<span class="string">f&quot;<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.send(<span class="string">&quot;网络连接断开！&quot;</span>)</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Django配置-channels-WS的ASGI服务器&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://kanoc.gitee.io/categories/python/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/categories/python/django/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="django" scheme="https://kanoc.gitee.io/tags/django/"/>
    
    <category term="ASGI服务器" scheme="https://kanoc.gitee.io/tags/ASGI%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="异步WEB" scheme="https://kanoc.gitee.io/tags/%E5%BC%82%E6%AD%A5WEB/"/>
    
  </entry>
  
  <entry>
    <title>python安装方式集合(ubuntu)</title>
    <link href="https://kanoc.gitee.io/2025/05/21/python%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%E9%9B%86%E5%90%88(ubuntu)/"/>
    <id>https://kanoc.gitee.io/2025/05/21/python%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F%E9%9B%86%E5%90%88(ubuntu)/</id>
    <published>2025-05-21T10:19:17.000Z</published>
    <updated>2025-05-21T11:21:58.676Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>python安装方式集合(ubuntu)</strong></font></p><span id="more"></span><h2 id="方式一：apt包管理器方式安装："><a href="#方式一：apt包管理器方式安装：" class="headerlink" title="方式一：apt包管理器方式安装："></a>方式一：apt包管理器方式安装：</h2><h3 id="1、解除仓库限制"><a href="#1、解除仓库限制" class="headerlink" title="1、解除仓库限制"></a>1、解除<code>仓库限制</code></h3><ul><li>官方仓库的 Python 版本通常较保守（如 Ubuntu 22.04 默认仅支持到 Python 3.10）。</li><li>若需更新版本（如 Python 3.11&#x2F;3.12），需添加第三方 PPA 仓库：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 deadsnakes PPA（Ubuntu 适用）</span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><h3 id="2、查看可安装python版本"><a href="#2、查看可安装python版本" class="headerlink" title="2、查看可安装python版本"></a>2、查看可安装python版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt list <span class="string">&#x27;python3.*&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、安装python3-13"><a href="#3、安装python3-13" class="headerlink" title="3、安装python3.13"></a>3、安装python3.13</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install python3.13</span><br></pre></td></tr></table></figure><h3 id="4、设置环境"><a href="#4、设置环境" class="headerlink" title="4、设置环境"></a>4、设置环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证安装路径</span></span><br><span class="line"><span class="built_in">which</span> python3.13</span><br><span class="line"><span class="comment"># 输出示例：/usr/bin/python3.13</span></span><br><span class="line">python3.13 -c <span class="string">&quot;import sys; print(sys.executable)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局python版本</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/python3.13 /usr/bin/python3 </span><br></pre></td></tr></table></figure><h3 id="5、安装pip"><a href="#5、安装pip" class="headerlink" title="5、安装pip"></a>5、安装pip</h3><ul><li>方法 1：使用 <code>ensurepip</code>（推荐）—— Python 内置的 <code>ensurepip</code> 模块可直接安装 <code>pip</code>：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为 Python 3.13 安装 pip</span></span><br><span class="line">python3.13 -m ensurepip --upgrade</span><br></pre></td></tr></table></figure><ul><li>方法 2：通过 <code>get-pip.py</code> 脚本 —— 若 <code>ensurepip</code> 不可用（如编译时被禁用），手动下载并安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==================== python3.13 安装</span></span><br><span class="line">curl -O https://bootstrap.pypa.io/get-pip.py <span class="comment"># 下载安装脚本</span></span><br><span class="line">python3.13 get-pip.py    <span class="comment"># 为 Python 3.13 安装 pip</span></span><br><span class="line"><span class="built_in">rm</span> get-pip.py    <span class="comment"># 删除脚本（可选）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== python3.8 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt install python3.8-distutils python3.8-venv</span><br><span class="line">curl -O https://bootstrap.pypa.io/pip/3.8/get-pip.py   <span class="comment"># 版本太小 需要使用专用的pip安装</span></span><br><span class="line">python3.13 get-pip.py    <span class="comment"># 为 Python 3.8 安装 pip</span></span><br><span class="line"><span class="built_in">rm</span> get-pip.py    <span class="comment"># 删除脚本（可选）</span></span><br></pre></td></tr></table></figure><ul><li>方法 3：通过 APT 安装（需仓库支持）—— 若 Python 3.13 来自第三方仓库（如 <code>deadsnakes</code>），尝试安装对应 <code>pip</code>：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3.13-pip  <span class="comment"># 实际包名可能不同（如 python3-pip）</span></span><br></pre></td></tr></table></figure><p>pip  pip3  pip3.13</p><ul><li>修复路径与权限 —— 安装后，<code>pip</code> 的可执行文件应位于：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/pip3.13    <span class="comment"># 手动或 get-pip.py 安装的路径</span></span><br><span class="line">/usr/bin/pip3.13          <span class="comment"># APT 安装的路径</span></span><br></pre></td></tr></table></figure><ul><li>设置全局变量</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/bin/pip3.13 /usr/bin/pip3</span><br></pre></td></tr></table></figure><h2 id="方式二：Pyenv多版本管理方式："><a href="#方式二：Pyenv多版本管理方式：" class="headerlink" title="方式二：Pyenv多版本管理方式："></a>方式二：Pyenv多版本管理方式：</h2><p>Pyenv版本优先级：Shell &gt; Local &gt; Global</p><h3 id="1、更新系统"><a href="#1、更新系统" class="headerlink" title="1、更新系统"></a>1、更新系统</h3><p>首先，你需要确保你的 Ubuntu 系统是最新的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure><h3 id="2、安装pyenv-前置依赖"><a href="#2、安装pyenv-前置依赖" class="headerlink" title="2、安装pyenv 前置依赖"></a>2、安装pyenv 前置依赖</h3><p>PyENV 需要一些依赖项才能正常工作，运行以下命令安装它们。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libbz2-dev libncurses5-dev libncursesw5-dev libffi-dev libreadline-dev libssl-dev libsqlite3-dev liblzma-dev zlib1g-dev wget curl llvm libncurses-dev xz-utils git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、安装-PyENV"><a href="#3、安装-PyENV" class="headerlink" title="3、安装 PyENV"></a>3、安装 PyENV</h3><p>执行以下命令，安装 PyENV</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/05/21/ihVmX4TtpKM7Jdg.png" alt="Installing PyENV on Ubuntu"></p><h3 id="4、更新Shell配置"><a href="#4、更新Shell配置" class="headerlink" title="4、更新Shell配置"></a>4、更新Shell配置</h3><ul><li><code>4.1：（非root用户）</code></li></ul><p>​安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 <strong>~&#x2F;.bashrc</strong> 文件，添加以下行，以便每次打开终端时它都会加载。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init --path)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>​使用 source 命令，使更改生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><ul><li><code>4.2、root用户安装方式</code></li></ul><p>​安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 <strong>~&#x2F;.bashrc</strong> 文件，添加以下行，以便每次打开终端时它都会加载。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑全局环境变量文件（影响所有用户）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;/root/.pyenv&quot;&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br></pre></td></tr></table></figure><p>​使用 source 命令，使更改生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使配置立即生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/pyenv.sh</span><br></pre></td></tr></table></figure><h3 id="5、安装不同的python版本"><a href="#5、安装不同的python版本" class="headerlink" title="5、安装不同的python版本"></a>5、安装不同的python版本</h3><p>现在您可以安装所需的任何版本的 Python。例如，要安装 Python 3.12</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install 3.12</span><br></pre></td></tr></table></figure><p>或者您可能需要安装 Python 2.7 等旧版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install 2.7</span><br></pre></td></tr></table></figure><p>列出系统上安装的所有 Python 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure><h3 id="6、设置全局python版本"><a href="#6、设置全局python版本" class="headerlink" title="6、设置全局python版本"></a>6、设置全局python版本</h3><p>您可以设置默认使用的全局 Python 版本，比如将 Python 3.12 设置为全局版本。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv global 3.12</span><br></pre></td></tr></table></figure><p>查看当前全局 Python 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/05/21/9xWJdsCVoDtKe2h.png" alt="PyENV Set Default Python Version"></p><h3 id="7、设置其他版本"><a href="#7、设置其他版本" class="headerlink" title="7、设置其他版本"></a>7、设置其他版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入你的项目目录</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置该目录的 Python 版本为 3.8</span></span><br><span class="line">pyenv local 3.8.12   # 假设已安装 3.8.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这会生成一个隐藏文件 `.python-version`，记录版本号</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 验证</span></span></span><br><span class="line">pyenv shell 3.8.12   # 临时设置</span><br><span class="line">python --version      # 应显示 3.8.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出临时模式（恢复全局或本地设置）</span></span><br><span class="line">pyenv shell --unset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全局版本</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">rm .python-version   # 删除版本标记文件</span><br></pre></td></tr></table></figure><h3 id="使用虚拟环境隔离项目（推荐）"><a href="#使用虚拟环境隔离项目（推荐）" class="headerlink" title="使用虚拟环境隔离项目（推荐）"></a>使用虚拟环境隔离项目（推荐）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建虚拟环境（基于 Python 3.8）</span></span><br><span class="line">pyenv virtualenv 3.8.12 my-legacy-env</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录并激活虚拟环境</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">pyenv local my-legacy-env  # 自动激活</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">python --version  # 显示 3.8.12，且环境独立</span><br><span class="line">pip list          # 显示该环境独立的包</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出虚拟环境</span></span><br><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure><h3 id="Step-9-验证版本切换"><a href="#Step-9-验证版本切换" class="headerlink" title="Step 9: 验证版本切换"></a>Step 9: 验证版本切换</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~  # 退出项目目录</span><br><span class="line">python --version  # 应显示全局版本 3.13.0</span><br><span class="line"></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">python --version  # 应显示本地版本 3.8.12 或虚拟环境</span><br></pre></td></tr></table></figure><h3 id="11、删除pyenv环境"><a href="#11、删除pyenv环境" class="headerlink" title="11、删除pyenv环境"></a>11、删除pyenv环境</h3><ul><li>1、<strong>删除 <code>pyenv</code> 本体及所有 Python 版本</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 pyenv 根目录（默认路径）</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.pyenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果自定义过安装路径（通过 PYENV_ROOT 变量），删除对应目录</span></span><br><span class="line"><span class="comment"># rm -rf /path/to/your/custom/pyenv</span></span><br></pre></td></tr></table></figure><ul><li><p>2、清理 Shell 环境配置 – 编辑你的 Shell 配置文件（根据实际使用的 Shell）：</p><ul><li><strong>Bash</strong>：<code>~/.bashrc</code>, <code>~/.bash_profile</code></li><li><strong>Zsh</strong>：<code>~/.zshrc</code></li><li><strong>Fish</strong>：<code>~/.config/fish/config.fish</code></li></ul><p><strong>删除以下内容</strong>：</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找并删除与 pyenv 相关的代码块，例如：</span></span><br><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span>  <span class="comment"># 如果配置了虚拟环境插件</span></span><br></pre></td></tr></table></figure><ul><li>**3、 移除已安装的 Python 版本（可选）– 如果之前通过 <code>pyenv</code> 安装了多个 Python 版本，可手动删除：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除所有版本（默认安装路径）</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.pyenv/versions/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果自定义过版本路径，删除对应目录</span></span><br><span class="line"><span class="comment"># rm -rf /path/to/your/python/versions</span></span><br></pre></td></tr></table></figure><ul><li>4、清除缓存和临时文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.pyenv/cache     <span class="comment"># 安装时的源码缓存</span></span><br><span class="line"><span class="built_in">rm</span> -f ~/.pyenv/version    <span class="comment"># 当前使用的 Python 版本记录</span></span><br></pre></td></tr></table></figure><ul><li>5、验证卸载 – 重新启动终端或执行：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 然后检查命令是否失效：</span></span><br><span class="line">pyenv --version      <span class="comment"># 应提示 &quot;command not found&quot;</span></span><br><span class="line"><span class="built_in">which</span> python         <span class="comment"># 应指向系统默认 Python，而非 pyenv 路径</span></span><br></pre></td></tr></table></figure><ul><li>6、残留环境变量</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多用户环境：</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/local/pyenv</span><br><span class="line"><span class="comment"># 插件清理：</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.pyenv/plugins</span><br></pre></td></tr></table></figure><h2 id="方式三：UV方式："><a href="#方式三：UV方式：" class="headerlink" title="方式三：UV方式："></a>方式三：UV方式：</h2><p>本文参考自：1、<a href="https://blog.csdn.net/muxuen/article/details/147544307">【Python】使用uv管理python虚拟环境_uv环境python-CSDN博客</a></p><p>本文参考自：2、<a href="https://blog.csdn.net/qq_41472205/article/details/145686414">uv 简易安装与更换国内镜像源_uv 国内源-CSDN博客</a></p><h3 id="1、安装uv管理器"><a href="#1、安装uv管理器" class="headerlink" title="1、安装uv管理器"></a>1、安装uv管理器</h3><ul><li>Mac || Linux安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><ul><li>Windows安装：</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1: 在 Windows 上：使用 Astral.sh 提供的安装脚本</span></span><br><span class="line">powershell <span class="literal">-ExecutionPolicy</span> ByPass <span class="literal">-c</span> <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2: 在 Windows 上：使用 scoop 安装 uv</span></span><br><span class="line">scoop install uv</span><br></pre></td></tr></table></figure><ul><li>pip安装方式：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure><ul><li>验证是否安装成功：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证安装是否成功</span></span><br><span class="line">uv --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看uv版本</span></span><br><span class="line">uv --version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/05/21/K5D4J9ovWYuiejn.jpg" alt="img"></p><h3 id="2、卸载uv："><a href="#2、卸载uv：" class="headerlink" title="2、卸载uv："></a>2、卸载uv：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv cache clean</span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv python dir)</span>&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv tool dir)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mac/linux</span></span><br><span class="line"><span class="built_in">rm</span> ~/.local/bin/uv ~/.local/bin/uvx</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uv.exe</span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uvx.exe</span><br></pre></td></tr></table></figure><h3 id="3、python管理："><a href="#3、python管理：" class="headerlink" title="3、python管理："></a>3、python管理：</h3><ul><li>查看python可用版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><ul><li>安装python3.13</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准安装方式</span></span><br><span class="line">uv python install 3.13</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他安装Python的方式实现，比如PyPy实现的python</span></span><br><span class="line">uv python install pypy@3.13</span><br></pre></td></tr></table></figure><ul><li>查找某个python版本的路径</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python find 3.10</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span></span><br></pre></td></tr></table></figure><ul><li>选用python版本（在具体的某个项目中，进入项目目录，使用如下命令指定选用的python版本）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python pin 版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令会在指定目录下创建一个 `.python-version` 文件，内容如下</span></span><br><span class="line"></span><br><span class="line">uv python pin 3.10</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Pinned `.python-version` to `3.10`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> .python-version</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 3.10</span></span><br></pre></td></tr></table></figure><h3 id="4、创建虚拟环境（项目）"><a href="#4、创建虚拟环境（项目）" class="headerlink" title="4、创建虚拟环境（项目）"></a>4、创建虚拟环境（项目）</h3><ul><li>方式1：创建项目有两种方式，第一种方式，先创建好项目目录，然后设置python版本并初始化uv虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python pin 3.10</span><br><span class="line">uv init <span class="comment"># 初始化</span></span><br></pre></td></tr></table></figure><ul><li>执行了uv init之后，会在当前目录下创建几个文件，同时也会在当前目录下执行git init创建出一个新的git仓库来</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv python pin 3.13</span><br><span class="line">Pinned `.python-version` to `3.13`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv init           </span><br><span class="line">Initialized project `test-code`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ <span class="built_in">ls</span></span><br><span class="line">README.md      main.py        pyproject.toml</span><br></pre></td></tr></table></figure><ul><li>方式2：另外一个方式是在init之后添加一个项目名，会自动创建项目文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uv init 项目名</span><br></pre></td></tr></table></figure><h3 id="5、添加依赖"><a href="#5、添加依赖" class="headerlink" title="5、添加依赖"></a>5、添加依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv add 依赖项</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如添加requests库</span></span><br><span class="line">uv add requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以指定具体版本</span></span><br><span class="line">uv add requests==版本号</span><br></pre></td></tr></table></figure><p>执行了这个命令后，会在当前目录下创建.venv虚拟环境目录（在vscode里面可以选择这个目录作为虚拟环境，否则代码解析会有问题），并添加我们要的依赖项，同时会新增一个uv.lock文件，用于存放依赖项版本相关的信息。pyproject.toml文件中的dependencies字段也会包含需要的依赖项。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ uv add requests</span><br><span class="line">Using CPython 3.13.1 interpreter at: /opt/homebrew/opt/python@3.13/bin/python3.13</span><br><span class="line">Creating virtual environment at: .venv</span><br><span class="line">Resolved 6 packages <span class="keyword">in</span> 13.85s</span><br><span class="line">Prepared 5 packages <span class="keyword">in</span> 5.55s</span><br><span class="line">Installed 5 packages <span class="keyword">in</span> 13ms</span><br><span class="line"> + certifi==2025.1.31</span><br><span class="line"> + charset-normalizer==3.4.1</span><br><span class="line"> + idna==3.10</span><br><span class="line"> + requests==2.32.3</span><br><span class="line"> + urllib3==2.4.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而且，从这个输出中也能看到，它自动使用了<code>.python-version</code>指定的3.13版本的python，和当前我们全局目录下的python3指向什么版本没有关系（我的全局python3指向的是3.10版本）</p><h3 id="6、运行程序"><a href="#6、运行程序" class="headerlink" title="6、运行程序"></a>6、运行程序</h3><p>依赖添加好后，就可以使用uv来运行python程序了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv run 程序文件名 [命令行参数]</span><br></pre></td></tr></table></figure><p>uv会自动按照我们的配置来运行程序，无序我们手动维护依赖项，也不需要手动去source各式各样的虚拟环境了。</p><h3 id="7、uvx命令"><a href="#7、uvx命令" class="headerlink" title="7、uvx命令"></a>7、uvx命令</h3><p>随着uv下载的还有一个uvx命令，uvx命令本质上是uv tool run命令的别名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uvx python main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv run main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv tool run main.py</span><br></pre></td></tr></table></figure><p>实际例子，如下这两个命令是等价的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ uvx --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line">    </span><br><span class="line">❯ uv tool run --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、设置下载包的镜像源"><a href="#8、设置下载包的镜像源" class="headerlink" title="8、设置下载包的镜像源"></a>8、设置下载包的镜像源</h3><p>uv下载第三方库本质上也是通过pypi源下载的，所以在国内网络环境中默认链接速度会很慢，可以在项目目录的<code>pyproject.toml</code>中添加如下内容来使用清华源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[tool.uv.index]]</span><br><span class="line">url = <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span><br><span class="line">default = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>运行uv add命令的时候也可以指定镜像源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv add --default-index https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br></pre></td></tr></table></figure><p>uv也提供了全局的配置项，可以通过环境变量<code>UV_DEFAULT_INDEX</code>配置镜像源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> UV_DEFAULT_INDEX=https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>全局的配置项优先级低于<code>pyproject.toml</code>中配置的镜像源。如果<code>pyproject.toml</code>里面配置了镜像源，则会使用<code>pyproject.toml</code>的配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;python安装方式集合(ubuntu)&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://kanoc.gitee.io/categories/python/"/>
    
    <category term="python安装" scheme="https://kanoc.gitee.io/categories/python/python%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="python管理器" scheme="https://kanoc.gitee.io/tags/python%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu22安装uv管理python</title>
    <link href="https://kanoc.gitee.io/2025/05/21/ubuntu22%E5%AE%89%E8%A3%85uv%E7%AE%A1%E7%90%86python/"/>
    <id>https://kanoc.gitee.io/2025/05/21/ubuntu22%E5%AE%89%E8%A3%85uv%E7%AE%A1%E7%90%86python/</id>
    <published>2025-05-20T16:13:25.000Z</published>
    <updated>2025-05-20T16:36:35.679Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ubuntu22安装uv管理器</strong></font></p><span id="more"></span><p>本文参考自：1、<a href="https://blog.csdn.net/muxuen/article/details/147544307">【Python】使用uv管理python虚拟环境_uv环境python-CSDN博客</a></p><p>本文参考自：2、<a href="https://blog.csdn.net/qq_41472205/article/details/145686414">uv 简易安装与更换国内镜像源_uv 国内源-CSDN博客</a></p><h3 id="1、安装uv管理器"><a href="#1、安装uv管理器" class="headerlink" title="1、安装uv管理器"></a>1、安装uv管理器</h3><ul><li>Mac || Linux安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><ul><li>Windows安装：</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1: 在 Windows 上：使用 Astral.sh 提供的安装脚本</span></span><br><span class="line">powershell <span class="literal">-ExecutionPolicy</span> ByPass <span class="literal">-c</span> <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2: 在 Windows 上：使用 scoop 安装 uv</span></span><br><span class="line">scoop install uv</span><br></pre></td></tr></table></figure><ul><li>pip安装方式：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure><ul><li>验证是否安装成功：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证安装是否成功</span></span><br><span class="line">uv --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看uv版本</span></span><br><span class="line">uv --version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/05/21/iSowqNnKdsv9CbB.jpg" alt="img"></p><h3 id="2、卸载uv："><a href="#2、卸载uv：" class="headerlink" title="2、卸载uv："></a>2、卸载uv：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv cache clean</span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv python dir)</span>&quot;</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="string">&quot;<span class="subst">$(uv tool dir)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mac/linux</span></span><br><span class="line"><span class="built_in">rm</span> ~/.local/bin/uv ~/.local/bin/uvx</span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uv.exe</span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$HOME</span>.<span class="built_in">local</span>\bin\uvx.exe</span><br></pre></td></tr></table></figure><h3 id="3、python管理："><a href="#3、python管理：" class="headerlink" title="3、python管理："></a>3、python管理：</h3><ul><li>查看python可用版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><ul><li>安装python3.13</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准安装方式</span></span><br><span class="line">uv python install 3.13</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他安装Python的方式实现，比如PyPy实现的python</span></span><br><span class="line">uv python install pypy@3.13</span><br></pre></td></tr></table></figure><ul><li>查找某个python版本的路径</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python find 3.10</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10</span></span><br></pre></td></tr></table></figure><ul><li>选用python版本（在具体的某个项目中，进入项目目录，使用如下命令指定选用的python版本）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python pin 版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个命令会在指定目录下创建一个 `.python-version` 文件，内容如下</span></span><br><span class="line"></span><br><span class="line">uv python pin 3.10</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># Pinned `.python-version` to `3.10`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> .python-version</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 3.10</span></span><br></pre></td></tr></table></figure><h3 id="4、创建虚拟环境（项目）"><a href="#4、创建虚拟环境（项目）" class="headerlink" title="4、创建虚拟环境（项目）"></a>4、创建虚拟环境（项目）</h3><ul><li>方式1：创建项目有两种方式，第一种方式，先创建好项目目录，然后设置python版本并初始化uv虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv python pin 3.10</span><br><span class="line">uv init <span class="comment"># 初始化</span></span><br></pre></td></tr></table></figure><ul><li>执行了uv init之后，会在当前目录下创建几个文件，同时也会在当前目录下执行git init创建出一个新的git仓库来</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv python pin 3.13</span><br><span class="line">Pinned `.python-version` to `3.13`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code                                                                                                      </span><br><span class="line">❯ uv init           </span><br><span class="line">Initialized project `test-code`</span><br><span class="line"></span><br><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ <span class="built_in">ls</span></span><br><span class="line">README.md      main.py        pyproject.toml</span><br></pre></td></tr></table></figure><ul><li>方式2：另外一个方式是在init之后添加一个项目名，会自动创建项目文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uv init 项目名</span><br></pre></td></tr></table></figure><h3 id="5、添加依赖"><a href="#5、添加依赖" class="headerlink" title="5、添加依赖"></a>5、添加依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv add 依赖项</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如添加requests库</span></span><br><span class="line">uv add requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以指定具体版本</span></span><br><span class="line">uv add requests==版本号</span><br></pre></td></tr></table></figure><p>执行了这个命令后，会在当前目录下创建.venv虚拟环境目录（在vscode里面可以选择这个目录作为虚拟环境，否则代码解析会有问题），并添加我们要的依赖项，同时会新增一个uv.lock文件，用于存放依赖项版本相关的信息。pyproject.toml文件中的dependencies字段也会包含需要的依赖项。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/data/code/python/test_code main ?6                                                                                              </span><br><span class="line">❯ uv add requests</span><br><span class="line">Using CPython 3.13.1 interpreter at: /opt/homebrew/opt/python@3.13/bin/python3.13</span><br><span class="line">Creating virtual environment at: .venv</span><br><span class="line">Resolved 6 packages <span class="keyword">in</span> 13.85s</span><br><span class="line">Prepared 5 packages <span class="keyword">in</span> 5.55s</span><br><span class="line">Installed 5 packages <span class="keyword">in</span> 13ms</span><br><span class="line"> + certifi==2025.1.31</span><br><span class="line"> + charset-normalizer==3.4.1</span><br><span class="line"> + idna==3.10</span><br><span class="line"> + requests==2.32.3</span><br><span class="line"> + urllib3==2.4.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而且，从这个输出中也能看到，它自动使用了<code>.python-version</code>指定的3.13版本的python，和当前我们全局目录下的python3指向什么版本没有关系（我的全局python3指向的是3.10版本）</p><h3 id="6、运行程序"><a href="#6、运行程序" class="headerlink" title="6、运行程序"></a>6、运行程序</h3><p>依赖添加好后，就可以使用uv来运行python程序了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv run 程序文件名 [命令行参数]</span><br></pre></td></tr></table></figure><p>uv会自动按照我们的配置来运行程序，无序我们手动维护依赖项，也不需要手动去source各式各样的虚拟环境了。</p><h3 id="7、uvx命令"><a href="#7、uvx命令" class="headerlink" title="7、uvx命令"></a>7、uvx命令</h3><p>随着uv下载的还有一个uvx命令，uvx命令本质上是uv tool run命令的别名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uvx python main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv run main.py</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">uv tool run main.py</span><br></pre></td></tr></table></figure><p>实际例子，如下这两个命令是等价的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ uvx --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line">    </span><br><span class="line">❯ uv tool run --directory ~/data/code/python/test_code python main.py</span><br><span class="line">Hello from test-code!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8、设置下载包的镜像源"><a href="#8、设置下载包的镜像源" class="headerlink" title="8、设置下载包的镜像源"></a>8、设置下载包的镜像源</h3><p>uv下载第三方库本质上也是通过pypi源下载的，所以在国内网络环境中默认链接速度会很慢，可以在项目目录的<code>pyproject.toml</code>中添加如下内容来使用清华源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[tool.uv.index]]</span><br><span class="line">url = <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span><br><span class="line">default = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>运行uv add命令的时候也可以指定镜像源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uv add --default-index https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br></pre></td></tr></table></figure><p>uv也提供了全局的配置项，可以通过环境变量<code>UV_DEFAULT_INDEX</code>配置镜像源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> UV_DEFAULT_INDEX=https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>全局的配置项优先级低于<code>pyproject.toml</code>中配置的镜像源。如果<code>pyproject.toml</code>里面配置了镜像源，则会使用<code>pyproject.toml</code>的配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ubuntu22安装uv管理器&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://kanoc.gitee.io/categories/python/"/>
    
    <category term="虚拟环境" scheme="https://kanoc.gitee.io/categories/python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="pyenv" scheme="https://kanoc.gitee.io/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>DrissionPage说明文档</title>
    <link href="https://kanoc.gitee.io/2025/05/06/DrissionPage%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/"/>
    <id>https://kanoc.gitee.io/2025/05/06/DrissionPage%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</id>
    <published>2025-05-05T18:50:20.000Z</published>
    <updated>2025-05-05T18:51:18.054Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>DrissionPage说明文档</strong></font></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">browser.new_tab()    # 创建新的标签页</span><br><span class="line">browser.tab_ids      # 获取tabs 的id值</span><br><span class="line">p = browser.get_tab(&quot;338350AA707BE2F467619372FD14CF03&quot;)    # 赋予p 为当前tabid的标签</span><br><span class="line">browser.new_tab(tab_id=&quot;E0D226A87D3&quot;)</span><br><span class="line">_ChromeClient.set.cookies.clear()   # 该方法不能用于标签页</span><br><span class="line">p.close()   # 关闭标签页</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;DrissionPage说明文档&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="DrissionPage" scheme="https://kanoc.gitee.io/categories/DrissionPage/"/>
    
    <category term="文档" scheme="https://kanoc.gitee.io/categories/DrissionPage/%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="浏览器" scheme="https://kanoc.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="说明" scheme="https://kanoc.gitee.io/tags/%E8%AF%B4%E6%98%8E/"/>
    
    <category term="文档" scheme="https://kanoc.gitee.io/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>windows安装配置pyenv</title>
    <link href="https://kanoc.gitee.io/2025/05/03/windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpyenv/"/>
    <id>https://kanoc.gitee.io/2025/05/03/windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpyenv/</id>
    <published>2025-05-03T05:44:09.000Z</published>
    <updated>2025-05-06T08:01:35.849Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>windows安装配置pyenv</strong></font></p><span id="more"></span><p>根据官方文档的命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-WebRequest -UseBasicParsing -Uri &quot;https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1&quot; -OutFile &quot;./install-pyenv-win.ps1&quot;; &amp;&quot;./install-pyenv-win.ps1&quot;</span><br></pre></td></tr></table></figure><p>直接执行该命令可能会出现错误。我们可以使用下面的方法：</p><ul><li>进入<a href="https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1">pyenv-win配置文件</a>的下载地址 ，将该名为<code>install-pyenv-win.ps1</code>的配置文件下载至电脑某目录(如<code>D:\pyenv</code>)</li><li>将脚本文件下载完成后，在终端(<code>PowerShell</code>) 中，使用cd命令切换到保存该脚本文件的目录，然后运行以下命令来执行脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./install-pyenv-win.ps1</span><br></pre></td></tr></table></figure><ul><li>执行完成后，运行下面的命令确认是否安装成功：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv --version</span><br></pre></td></tr></table></figure><p>显示以下画面，说明安装成功：</p><p><img src="https://s2.loli.net/2025/05/03/kTM8bmwgpzqLl9Q.webp" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;windows安装配置pyenv&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="main" scheme="https://kanoc.gitee.io/categories/main/"/>
    
    <category term="s" scheme="https://kanoc.gitee.io/categories/main/s/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>NVM、Pyenv安装的程序，在宝塔面板中无法识别解决方案</title>
    <link href="https://kanoc.gitee.io/2025/05/02/NVM%E3%80%81Pyenv%E5%AE%89%E8%A3%85%E7%9A%84%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%9C%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E4%B8%AD%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://kanoc.gitee.io/2025/05/02/NVM%E3%80%81Pyenv%E5%AE%89%E8%A3%85%E7%9A%84%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%9C%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E4%B8%AD%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2025-05-02T15:28:06.000Z</published>
    <updated>2025-05-02T15:31:03.168Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>NVM、Pyenv安装的程序，在宝塔面板中无法识别解决方案</strong></font></p><span id="more"></span><p>将 <code>nvm</code> 安装的 Node.js 软链接到系统全局路径 <code>/usr/bin</code>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s ~/.nvm/versions/node/v18.14.2/bin/node /usr/bin/node</span><br><span class="line">sudo ln -s ~/.nvm/versions/node/v18.14.2/bin/npm /usr/bin/npm</span><br><span class="line">sudo ln -s ~/.nvm/versions/node/v18.14.2/bin/npx /usr/bin/npx</span><br></pre></td></tr></table></figure><p><strong>验证</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which node  # 应输出 /usr/bin/node</span><br></pre></td></tr></table></figure><h3 id="Pyenv的处理与NVM的处理类似"><a href="#Pyenv的处理与NVM的处理类似" class="headerlink" title="Pyenv的处理与NVM的处理类似"></a>Pyenv的处理与NVM的处理类似</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;NVM、Pyenv安装的程序，在宝塔面板中无法识别解决方案&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="虚拟环境" scheme="https://kanoc.gitee.io/categories/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    <category term="node" scheme="https://kanoc.gitee.io/categories/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/node/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="node" scheme="https://kanoc.gitee.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-部署Pyenv-并使用不同环境</title>
    <link href="https://kanoc.gitee.io/2025/04/28/ubuntu-%E9%83%A8%E7%BD%B2Pyenv-%E5%B9%B6%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83/"/>
    <id>https://kanoc.gitee.io/2025/04/28/ubuntu-%E9%83%A8%E7%BD%B2Pyenv-%E5%B9%B6%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83/</id>
    <published>2025-04-28T13:07:42.000Z</published>
    <updated>2025-05-20T10:19:39.326Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ubuntu 部署Pyenv 并使用不同环境</strong></font></p><span id="more"></span><h1 id="Pyenv版本优先级：Shell-Local-Global"><a href="#Pyenv版本优先级：Shell-Local-Global" class="headerlink" title="Pyenv版本优先级：Shell &gt; Local &gt; Global"></a>Pyenv版本优先级：Shell &gt; Local &gt; Global</h1><h3 id="Step-1-Update-Your-System"><a href="#Step-1-Update-Your-System" class="headerlink" title="Step 1: Update Your System"></a>Step 1: Update Your System</h3><p>首先，你需要确保你的 Ubuntu 系统是最新的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure><h3 id="Step-2-Install-Prerequisites"><a href="#Step-2-Install-Prerequisites" class="headerlink" title="Step 2: Install Prerequisites"></a>Step 2: Install Prerequisites</h3><p>PyENV 需要一些依赖项才能正常工作，运行以下命令安装它们。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libbz2-dev libncurses5-dev libncursesw5-dev libffi-dev libreadline-dev libssl-dev libsqlite3-dev liblzma-dev zlib1g-dev wget curl llvm libncurses-dev xz-utils git</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Step-3-Install-PyENV"><a href="#Step-3-Install-PyENV" class="headerlink" title="Step 3: Install PyENV"></a>Step 3: Install PyENV</h3><p>执行以下命令，安装 PyENV</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/04/28/A6ftuGO3xJBviVI.png" alt="Installing PyENV on Ubuntu"></p><h3 id="Step-4-Update-Your-Shell-Configuration"><a href="#Step-4-Update-Your-Shell-Configuration" class="headerlink" title="Step 4: Update Your Shell Configuration"></a>Step 4: Update Your Shell Configuration</h3><p>安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 <strong>~&#x2F;.bashrc</strong> 文件，添加以下行，以便每次打开终端时它都会加载。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init --path)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>使用 source 命令，使更改生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Step-4-Update-Your-Shell-Configuration-root用户安装方式"><a href="#Step-4-Update-Your-Shell-Configuration-root用户安装方式" class="headerlink" title="Step 4: Update Your Shell Configuration(root用户安装方式)"></a>Step 4: Update Your Shell Configuration(root用户安装方式)</h3><p>安装 PyENV 后，您需要将其添加到 shell 配置中，编辑 <strong>~&#x2F;.bashrc</strong> 文件，添加以下行，以便每次打开终端时它都会加载。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑全局环境变量文件（影响所有用户）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;/root/.pyenv&quot;&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; /etc/profile.d/pyenv.sh</span><br></pre></td></tr></table></figure><p>使用 source 命令，使更改生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使配置立即生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/pyenv.sh</span><br></pre></td></tr></table></figure><h3 id="Step-5-Install-Python-Versions"><a href="#Step-5-Install-Python-Versions" class="headerlink" title="Step 5: Install Python Versions"></a>Step 5: Install Python Versions</h3><p>现在您可以安装所需的任何版本的 Python。例如，要安装 Python 3.12</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install 3.12</span><br></pre></td></tr></table></figure><p>或者您可能需要安装 Python 2.7 等旧版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install 2.7</span><br></pre></td></tr></table></figure><p>列出系统上安装的所有 Python 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure><h3 id="Step-6-Set-a-Global-Python-Version"><a href="#Step-6-Set-a-Global-Python-Version" class="headerlink" title="Step 6: Set a Global Python Version"></a>Step 6: Set a Global Python Version</h3><p>您可以设置默认使用的全局 Python 版本，比如将 Python 3.12 设置为全局版本。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv global 3.12</span><br></pre></td></tr></table></figure><p>查看当前全局 Python 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/04/28/aWyE9BJAwHVMdmT.png" alt="PyENV Set Default Python Version"></p><h3 id="Step-7-设置其他版本"><a href="#Step-7-设置其他版本" class="headerlink" title="Step 7: 设置其他版本"></a>Step 7: 设置其他版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入你的项目目录</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置该目录的 Python 版本为 3.8</span></span><br><span class="line">pyenv local 3.8.12   # 假设已安装 3.8.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这会生成一个隐藏文件 `.python-version`，记录版本号</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 验证</span></span></span><br><span class="line">pyenv shell 3.8.12   # 临时设置</span><br><span class="line">python --version      # 应显示 3.8.12</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出临时模式（恢复全局或本地设置）</span></span><br><span class="line">pyenv shell --unset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复全局版本</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">rm .python-version   # 删除版本标记文件</span><br></pre></td></tr></table></figure><h3 id="Step-8-使用虚拟环境隔离项目（推荐）"><a href="#Step-8-使用虚拟环境隔离项目（推荐）" class="headerlink" title="Step 8: 使用虚拟环境隔离项目（推荐）"></a>Step 8: 使用虚拟环境隔离项目（推荐）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建虚拟环境（基于 Python 3.8）</span></span><br><span class="line">pyenv virtualenv 3.8.12 my-legacy-env</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目目录并激活虚拟环境</span></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">pyenv local my-legacy-env  # 自动激活</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">python --version  # 显示 3.8.12，且环境独立</span><br><span class="line">pip list          # 显示该环境独立的包</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出虚拟环境</span></span><br><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure><h3 id="Step-9-验证版本切换"><a href="#Step-9-验证版本切换" class="headerlink" title="Step 9: 验证版本切换"></a>Step 9: 验证版本切换</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~  # 退出项目目录</span><br><span class="line">python --version  # 应显示全局版本 3.13.0</span><br><span class="line"></span><br><span class="line">cd ~/projects/legacy-project</span><br><span class="line">python --version  # 应显示本地版本 3.8.12 或虚拟环境</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ubuntu 部署Pyenv 并使用不同环境&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://kanoc.gitee.io/categories/python/"/>
    
    <category term="虚拟环境" scheme="https://kanoc.gitee.io/categories/python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="pyenv" scheme="https://kanoc.gitee.io/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>ESXi-8.0-VMFSL无法使用存储的问题</title>
    <link href="https://kanoc.gitee.io/2025/03/19/ESXi-8-0-VMFSL%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%AD%98%E5%82%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://kanoc.gitee.io/2025/03/19/ESXi-8-0-VMFSL%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%AD%98%E5%82%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2025-03-19T13:40:32.000Z</published>
    <updated>2025-03-19T13:47:39.939Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>ESXi-8.0-VMFSL无法使用存储的问题</strong></font></p><span id="more"></span><p>今天這一篇算是番外篇，藉由<code>VMFSL</code>來說明<code>Shift+O</code>能做什麼設定。<br>我想說這個問題在<code>ESXi 7.0</code>版本之後都會遇到，來分享一下我如何解決這個問題。<br>首先提一下為什麼要提<code>VMFSL</code>，因為在安裝完<code>ESXi</code>系統之後，剩下的硬碟空間會被做成一個儲存空間 ( <code>Datastore</code> )，你可以想像這是一個資源池，在沒有外接任何網路儲存裝置(<code>NAS</code>)，虛擬機所需的虛擬硬碟空間都需要從這個<code>Datastore</code>分享。所以<code>Datastore</code>的空間大小就很重要了。它關係到你能開多少虛擬機及多大硬碟規格的虛擬機。<br>講了那麼多，卻還是沒有提到<code>VMFSL</code>，什麼是<code>VMFSL</code>?，在<code>ESXi 7.0</code>版之後<code>VMFSL</code>是為了<code>vSAN</code>特別留下的空間用於提升<code>vSAN</code>的表現，那什麼是<code>vSAN</code>後面會解釋。總之因為這個為了<code>vSAN</code>而特別留下的空間，會影響到我們剩下的儲存空間。不囉嗦上圖解釋<br>圖一:<br><img src="https://s2.loli.net/2025/03/19/HlN9E7kPD2QVgo8.png" alt="https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;upload&#x2F;images&#x2F;20220916&#x2F;20152414dYC2eFodK4.png"></p><p>圖二:<br><img src="https://s2.loli.net/2025/03/19/nufALHI1z28obRT.png" alt="https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;upload&#x2F;images&#x2F;20220916&#x2F;20152414LX8uKPckUb.png"><br>不知道你有沒有注意到我在安裝<code>ESXi</code>的時候我所選擇安裝作業系統的硬碟大小是<code>142G</code>。而圖二就是安裝完的結果。你可以看到<code>VMFSL</code>的預設大小是<code>120G</code><br>。而<code>Datastore</code>的空間就是圖中那可憐的<code>VMFS 14G</code>的那個空間。<br><img src="https://s2.loli.net/2025/03/19/joqm2kUnuTf5ChK.png" alt="https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;upload&#x2F;images&#x2F;20220916&#x2F;20152414Bkx3RazIk0.png"><br>那我沒有要玩<code>vSAN</code>，<code>VMFSL</code>可不可以縮小?當然可以!標題的<code>Shift+O</code>可不是廢話<br>基本上在安裝<code>ESXi</code>上就要調整了哦，所以你已經安裝好了就重灌一次吧!<br><img src="https://s2.loli.net/2025/03/19/jdNGlEvPz8CiJWQ.png" alt="https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;upload&#x2F;images&#x2F;20220916&#x2F;20152414aVlkRoDXOz.png"><br>記得在這個畫面趕快按<code>Shift+O</code>，不然系統就會自動進安裝畫面了哦<br><img src="https://s2.loli.net/2025/03/19/cCzjDOx15BfH69N.png" alt="https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;upload&#x2F;images&#x2F;20220916&#x2F;20152414qcLPr1TnUD.png"><br>輸入如圖中的指令<br><strong><code>cdromBoot runweasel autoPartitionOSDataSize=8192</code></strong><br>接著按下<code>Enter</code>接著安裝的流程，修改完安裝的結果如下<br><img src="https://s2.loli.net/2025/03/19/5BU6wzWMIbiOdaL.png" alt="https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;upload&#x2F;images&#x2F;20220916&#x2F;20152414QhK9a5nMZg.png"><br><code>VMFSL</code>就只剩我們所設定的<code>8192(8G)</code>，而剩餘的空間就是<code>Datastore(VMFS)</code>。<br>至於可不可以完全不要這個<code>VMFSL</code>，又或者大小要多少，這一點我不是很能確定。希望能有高手補充!!<br>再補充一點，在不特別設定<code>VMFSL</code>大小的情況下，而你的空間又小於<code>120G</code>的情況下<br><img src="https://s2.loli.net/2025/03/19/hEqoJgkeHxuFB9m.png" alt="https:&#x2F;&#x2F;ithelp.ithome.com.tw&#x2F;upload&#x2F;images&#x2F;20220916&#x2F;20152414k54lumvXWp.png"><br>你會發現<code>VMFSL</code>把剩下的所有空間使用完了。<br>前面有提到安裝完系統及預設<code>VMFSL</code>的空間，剩下的空間會自動做成<code>Datastore</code><br>在大部分的情況下是這樣沒錯，不過如果你將系統安裝在<code>USB</code>內，就不是如此了，因為<code>VMware</code>預設不允許使用<code>USB</code>當<code>Datastore</code>。所以下一篇又是番外篇<br>我將教你如何將<code>USB</code>設定成<code>Datastore</code>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;ESXi-8.0-VMFSL无法使用存储的问题&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://kanoc.gitee.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://kanoc.gitee.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="虚拟机" scheme="https://kanoc.gitee.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Volume-数据持久化方案</title>
    <link href="https://kanoc.gitee.io/2025/03/14/Docker-Volume-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <id>https://kanoc.gitee.io/2025/03/14/Docker-Volume-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E6%A1%88/</id>
    <published>2025-03-14T07:19:50.000Z</published>
    <updated>2025-03-16T19:16:25.571Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Docker Volume 数据持久化方案：</strong></font></p><span id="more"></span><h3 id="使用-Docker-Volume-代替直接挂载"><a href="#使用-Docker-Volume-代替直接挂载" class="headerlink" title="使用 Docker Volume 代替直接挂载"></a>使用 Docker Volume 代替直接挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 volume</span></span><br><span class="line">docker volume create mongo_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除卷</span></span><br><span class="line">docker volume <span class="built_in">rm</span> mongo_data</span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d --restart=always -p 27017:27017 --name mymongo -v volume:/data/db -e MONGO_LOG_MAX_SIZE=5242880 mongo:latest --wiredTigerCacheSizeGB 1 --auth</span><br></pre></td></tr></table></figure><h3 id="查看-Volume-物理路径（MacOS）"><a href="#查看-Volume-物理路径（MacOS）" class="headerlink" title="查看 Volume 物理路径（MacOS）"></a>查看 Volume 物理路径（MacOS）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume inspect mongo_data</span><br></pre></td></tr></table></figure><h4 id="输出示例："><a href="#输出示例：" class="headerlink" title="输出示例："></a>输出示例：</h4><p>实际数据存储在 Docker 虚拟机中，避免直接操作宿主机文件系统。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;<span class="number">2025</span>-<span class="number">03</span>-<span class="number">14</span>T05:XX:XXZ&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/mongo_data/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;mongo_data&quot;,</span><br><span class="line">        &quot;Options&quot;: null,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="进入mongo容器"><a href="#进入mongo容器" class="headerlink" title="进入mongo容器"></a>进入<code>mongo</code>容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mymongo /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/03/14/DZOC8ImKc2T59G3.png" alt="image"></p><p>注意：这里的mymongo是容器的名字，不是镜像的名字。（忘记容器名字，可使用docker ps -a 查看容器名）<br><img src="https://s2.loli.net/2025/03/14/V7NiL5AWElx16va.png" alt="image"><br>2.3.2.进入<code>mongosh</code>中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入mongo shell</span></span><br><span class="line">mongosh</span><br></pre></td></tr></table></figure><p>注：<code>mongosh 6.0</code>版本之后使用，<code>mongo 6.0</code>版本之前使用，博主就是在这里出问题的，博主安装最新<code>mongodb</code>版本，但是使用的是 <code>mongo</code> 所以一直出现问题：<code>bash: mongo: command not found</code><br><img src="https://s2.loli.net/2025/03/14/9VQ3fFU5I4BJXe8.png" alt="image"></p><p><img src="https://s2.loli.net/2025/03/14/FPByZHwLNp7dRUv.png" alt="image"><br>2.3.3.进入<code>admin</code>数据库</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> admin</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/03/14/McbuCipRfOx1e3o.png" alt="image"><br>2.3.4 创建一个用户，<code>mongodb</code>默认没有用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.这里创建用户名为root，密码为mongo2023，角色（该用户的权限）为root，数据库为admin（你们按照你们自己的设置）</span></span><br><span class="line"><span class="comment"># 用户名：root，密码：mongo2023，角色：root，数据库：admin</span></span><br><span class="line"></span><br><span class="line">db.createUser(&#123;user:<span class="string">&#x27;root&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;mongo2023&#x27;</span>,roles:[&#123;role:<span class="string">&#x27;root&#x27;</span>,db:<span class="string">&#x27;admin&#x27;</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.认证登录db.auth(&#x27;用户名&#x27;,&#x27;密码&#x27;)，打印1则代表认证通过</span></span><br><span class="line">db.auth(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;mongo2023&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2025/03/14/KWStwbdhveoZOYU.png" alt="image"><br>到这里就完成了创建用户和设置密码，如果要退出 Ctrl+D 或者 exit 退出mongodb</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Docker Volume 数据持久化方案：&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/Docker/"/>
    
    <category term="mongodb" scheme="https://kanoc.gitee.io/categories/Docker/mongodb/"/>
    
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="持久化" scheme="https://kanoc.gitee.io/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Mongodb_错误收集</title>
    <link href="https://kanoc.gitee.io/2025/03/14/Docker%E9%83%A8%E7%BD%B2Mongodb_%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://kanoc.gitee.io/2025/03/14/Docker%E9%83%A8%E7%BD%B2Mongodb_%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86/</id>
    <published>2025-03-13T23:02:39.000Z</published>
    <updated>2025-03-14T04:52:13.259Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><strong>Docker部署Mongodb_错误收集</strong></strong></font></p><span id="more"></span><h3 id="WiredTiger-存储引擎无法正常访问数据文件"><a href="#WiredTiger-存储引擎无法正常访问数据文件" class="headerlink" title="WiredTiger 存储引擎无法正常访问数据文件"></a><strong>WiredTiger 存储引擎无法正常访问数据文件</strong></h3><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h3><h4 id="1-彻底清理残留数据文件"><a href="#1-彻底清理残留数据文件" class="headerlink" title="1. 彻底清理残留数据文件"></a>1. 彻底清理残留数据文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止并删除旧容器</span></span><br><span class="line">docker stop mongo &amp;&amp; docker <span class="built_in">rm</span> mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除宿主机映射目录中的所有文件（谨慎操作！先备份重要数据）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /path/to/your/mongodb_data/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /path/to/your/mongodb_data</span><br></pre></td></tr></table></figure><h4 id="2-确保目录权限正确（MacOS-特殊配置）"><a href="#2-确保目录权限正确（MacOS-特殊配置）" class="headerlink" title="2. 确保目录权限正确（MacOS 特殊配置）"></a>2. 确保目录权限正确（MacOS 特殊配置）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 授予容器用户（UID 999）写权限（MacOS需通过 ACL 配置）</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 777 /path/to/your/mongodb_data</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R $(<span class="built_in">whoami</span>) /path/to/your/mongodb_data</span><br></pre></td></tr></table></figure><h4 id="3-调整-Docker-运行命令（关键参数优化）"><a href="#3-调整-Docker-运行命令（关键参数优化）" class="headerlink" title="3. 调整 Docker 运行命令（关键参数优化）"></a>3. 调整 Docker 运行命令（关键参数优化）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mongo \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  -v /path/to/your/mongodb_data:/data/db \</span><br><span class="line">  -e MONGO_INITDB_ROOT_USERNAME=admin \</span><br><span class="line">  -e MONGO_INITDB_ROOT_PASSWORD=admin \</span><br><span class="line">  --user 1000:50 \  <span class="comment"># MacOS Docker 特殊 UID 配置</span></span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  mongo:latest \</span><br><span class="line">  --wiredTigerCacheSizeGB 1  <span class="comment"># 限制缓存大小适配小内存环境</span></span><br></pre></td></tr></table></figure><h4 id="4-验证容器日志"><a href="#4-验证容器日志" class="headerlink" title="4. 验证容器日志"></a>4. 验证容器日志</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -f mongo</span><br></pre></td></tr></table></figure><p>预期看到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;t&quot;:&#123;&quot;$date&quot;:&quot;2025-03-14T05:XX:XX.XXXZ&quot;&#125;,&quot;s&quot;:&quot;I&quot;,&quot;c&quot;:&quot;STORAGE&quot;,&quot;id&quot;:22430,&quot;ctx&quot;:&quot;initandlisten&quot;,&quot;msg&quot;:&quot;WiredTiger message&quot;,&quot;attr&quot;:&#123;&quot;message&quot;:&quot;WT_SESSION.create...&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="关键配置解析"><a href="#关键配置解析" class="headerlink" title="关键配置解析"></a><strong>关键配置解析</strong></h3><table><thead><tr><th align="left"><strong>参数</strong></th><th align="left"><strong>作用说明</strong></th></tr></thead><tbody><tr><td align="left"><code>--user 1000:50</code></td><td align="left">强制容器以 MacOS 当前用户（UID 1000）和 Docker 默认组（GID 50）运行</td></tr><tr><td align="left"><code>--wiredTigerCacheSizeGB 1</code></td><td align="left">显式限制 WiredTiger 缓存为 1GB，避免内存不足导致崩溃</td></tr><tr><td align="left"><code>chmod 777</code></td><td align="left">临时赋予完全权限（生产环境不推荐，开发环境可用）</td></tr><tr><td align="left"><code>rm -rf</code></td><td align="left">清除可能存在的损坏文件或权限冲突文件</td></tr></tbody></table><hr><h3 id="故障深度分析"><a href="#故障深度分析" class="headerlink" title="故障深度分析"></a><strong>故障深度分析</strong></h3><h4 id="错误日志解读"><a href="#错误日志解读" class="headerlink" title="错误日志解读"></a><strong>错误日志解读</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;msg&quot;:&quot;__posix_open_file:924:/data/db/WiredTiger.wt: handle-open: open&quot;,&quot;error_str&quot;:&quot;Operation not permitted&quot;</span><br></pre></td></tr></table></figure><p>表明 MongoDB 进程对 <code>/data/db/WiredTiger.wt</code> 文件 <strong>没有写权限</strong> 或 <strong>文件已被锁定</strong>。</p><h4 id="MacOS-特殊限制"><a href="#MacOS-特殊限制" class="headerlink" title="MacOS 特殊限制"></a><strong>MacOS 特殊限制</strong></h4><ul><li>Docker Desktop 使用虚拟机挂载文件系统（gRPC-FUSE），存在权限映射问题</li><li>MacOS 原生文件系统（APFS）与 Linux 容器权限模型不兼容</li></ul><hr><h3 id="高级方案（生产环境推荐）"><a href="#高级方案（生产环境推荐）" class="headerlink" title="高级方案（生产环境推荐）"></a><strong>高级方案（生产环境推荐）</strong></h3><h4 id="使用-Docker-Volume-代替直接挂载"><a href="#使用-Docker-Volume-代替直接挂载" class="headerlink" title="使用 Docker Volume 代替直接挂载"></a>使用 Docker Volume 代替直接挂载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 volume</span></span><br><span class="line">docker volume create mongo_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -d \</span><br><span class="line">  -v mongo_data:/data/db \</span><br><span class="line">  mongo:latest</span><br></pre></td></tr></table></figure><h4 id="查看-Volume-物理路径（MacOS）"><a href="#查看-Volume-物理路径（MacOS）" class="headerlink" title="查看 Volume 物理路径（MacOS）"></a>查看 Volume 物理路径（MacOS）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume inspect mongo_data</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-03-14T05:XX:XXZ&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mountpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/mongo_data/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mongo_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>实际数据存储在 Docker 虚拟机中，避免直接操作宿主机文件系统。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ol><li><strong>开发环境</strong>：使用 <code>chmod 777</code> 快速修复权限，清理残留文件</li><li><strong>生产环境</strong>：<ul><li>使用 Docker Volume 避免路径映射问题</li><li>通过 <code>docker exec</code> 进入容器检查文件权限</li><li>定期备份 Volume 数据 (<code>docker cp</code> 或专用备份工具)</li></ul></li></ol><p>通过以上方案，可彻底解决因文件权限导致的 MongoDB 启动失败问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;strong&gt;Docker部署Mongodb_错误收集&lt;/strong&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/Docker/"/>
    
    <category term="数据库" scheme="https://kanoc.gitee.io/categories/Docker/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="mongodb" scheme="https://kanoc.gitee.io/tags/mongodb/"/>
    
    <category term="数据库" scheme="https://kanoc.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>正在运行的-Docker-容器打包镜像方法</title>
    <link href="https://kanoc.gitee.io/2025/02/28/%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84-Docker-%E5%AE%B9%E5%99%A8%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F%E6%96%B9%E6%B3%95/"/>
    <id>https://kanoc.gitee.io/2025/02/28/%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84-Docker-%E5%AE%B9%E5%99%A8%E6%89%93%E5%8C%85%E9%95%9C%E5%83%8F%E6%96%B9%E6%B3%95/</id>
    <published>2025-02-27T17:16:05.000Z</published>
    <updated>2025-02-27T17:21:41.905Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>正在运行的-Docker-容器打包镜像方法</strong></font></p><span id="more"></span><h4 id="‌1-使用-docker-commit-命令直接打包‌"><a href="#‌1-使用-docker-commit-命令直接打包‌" class="headerlink" title="‌1. 使用 docker commit 命令直接打包‌"></a>‌<strong>1. 使用 <code>docker commit</code> 命令直接打包</strong>‌</h4><p>‌<strong>适用场景</strong>‌：快速保存当前容器的运行状态为镜像，适合临时调试或快速迁移。<br>‌<strong>步骤</strong>‌：</p><ol><li><p>‌<strong>获取容器 ID</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps  <span class="comment"># 查看正在运行的容器，记录目标容器的 ID ‌:ml-citation&#123;ref=&quot;1,3&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li><li><p>‌<strong>提交容器为新镜像</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit &lt;容器ID&gt; &lt;新镜像名&gt;:&lt;标签&gt;  <span class="comment"># 例如：docker commit abc123 my-app:v1 ‌:ml-citation&#123;ref=&quot;1,2&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li><li><p>‌<strong>验证镜像是否生成</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images  <span class="comment"># 检查列表中是否包含新镜像 :ml-citation&#123;ref=&quot;2,3&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="‌2-导出镜像为可迁移文件‌"><a href="#‌2-导出镜像为可迁移文件‌" class="headerlink" title="‌2. 导出镜像为可迁移文件‌"></a>‌<strong>2. 导出镜像为可迁移文件</strong>‌</h4><p>‌<strong>适用场景</strong>‌：将镜像保存为 <code>.tar</code> 文件，便于传输或备份。<br>‌<strong>步骤</strong>‌：</p><ol><li><p>‌<strong>导出镜像为 <code>.tar</code> 文件</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o &lt;文件名&gt;.tar &lt;镜像名&gt;:&lt;标签&gt;  <span class="comment"># 例如：docker save -o my-app.tar my-app:v1 ‌:ml-citation&#123;ref=&quot;4,5&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li><li><p>‌<strong>在目标服务器导入镜像</strong>‌</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -i &lt;文件名&gt;.tar  <span class="comment"># 从 `.tar` 文件恢复镜像 :ml-citation&#123;ref=&quot;4,5&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="‌3-其他注意事项‌"><a href="#‌3-其他注意事项‌" class="headerlink" title="‌3. 其他注意事项‌"></a>‌<strong>3. 其他注意事项</strong>‌</h4><ul><li><p>‌**<code>docker commit</code> 的局限性**‌</p><ul><li>此方法生成的镜像缺乏构建过程的透明性，难以追溯修改历史，不推荐用于生产环境 ‌23。</li><li>推荐使用 <code>Dockerfile</code> 构建标准化镜像，确保可重复性和版本控制 ‌23。</li></ul></li><li><p>‌<strong>多镜像打包</strong>‌</p><ul><li><p>若需打包多个镜像到单个文件，可使用 <code>docker save</code> 同时指定多个镜像名：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o all-images.tar image1:v1 image2:v2  <span class="comment"># 合并导出多个镜像 :ml-citation&#123;ref=&quot;7&quot; data=&quot;citationList&quot;&#125;  </span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="‌操作流程示意图‌"><a href="#‌操作流程示意图‌" class="headerlink" title="‌操作流程示意图‌"></a>‌<strong>操作流程示意图</strong>‌</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">运行中容器 → `docker commit` → 新镜像 → `docker save` → .tar 文件 → 传输 → `docker load` → 目标环境  </span><br></pre></td></tr></table></figure><p>通过上述步骤，可快速完成运行中容器的镜像打包与迁移。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;正在运行的-Docker-容器打包镜像方法&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/Docker/"/>
    
    <category term="打包" scheme="https://kanoc.gitee.io/categories/Docker/%E6%89%93%E5%8C%85/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="镜像" scheme="https://kanoc.gitee.io/tags/%E9%95%9C%E5%83%8F/"/>
    
    <category term="打包" scheme="https://kanoc.gitee.io/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>docker安装buildx插件</title>
    <link href="https://kanoc.gitee.io/2025/02/27/docker%E5%AE%89%E8%A3%85buildx%E6%8F%92%E4%BB%B6/"/>
    <id>https://kanoc.gitee.io/2025/02/27/docker%E5%AE%89%E8%A3%85buildx%E6%8F%92%E4%BB%B6/</id>
    <published>2025-02-26T19:38:58.000Z</published>
    <updated>2025-02-26T19:43:39.980Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>docker安装buildx插件，交叉打包</strong></font></p><span id="more"></span><p>错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; docker buildx build --platform linux/amd64,linux/arm64 -t xxxx/xxxxx:latest --push .</span><br><span class="line"><span class="comment"># 错误输出：</span></span><br><span class="line">unknown flag: --platform</span><br><span class="line">See <span class="string">&#x27;docker --help&#x27;</span>.</span><br></pre></td></tr></table></figure><p>提示无效参数：–platform</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install docker-buildx   <span class="comment"># 安装 buildx</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.docker/cli-plugins     <span class="comment"># 创建插件目录</span></span><br><span class="line"><span class="built_in">ln</span> -sfn $(<span class="built_in">which</span> docker-buildx) ~/.docker/cli-plugins/docker-buildx    <span class="comment"># 创建软连接到插件目录下</span></span><br><span class="line">docker buildx install    <span class="comment"># 安装插件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;docker安装buildx插件，交叉打包&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://kanoc.gitee.io/categories/Docker/"/>
    
    <category term="错误" scheme="https://kanoc.gitee.io/categories/Docker/%E9%94%99%E8%AF%AF/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="打包" scheme="https://kanoc.gitee.io/tags/%E6%89%93%E5%8C%85/"/>
    
    <category term="buildx" scheme="https://kanoc.gitee.io/tags/buildx/"/>
    
  </entry>
  
  <entry>
    <title>破解cloudflare拦截神器_puppeteer</title>
    <link href="https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/"/>
    <id>https://kanoc.gitee.io/2025/02/25/%E7%A0%B4%E8%A7%A3cloudflare%E6%8B%A6%E6%88%AA%E7%A5%9E%E5%99%A8-puppeteer/</id>
    <published>2025-02-24T18:52:13.000Z</published>
    <updated>2025-02-24T19:13:32.762Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>破解cloudflare拦截神器_puppeteer</strong></font></p><span id="more"></span><h3 id="安装番外：安装node-js环境"><a href="#安装番外：安装node-js环境" class="headerlink" title="安装番外：安装node.js环境"></a>安装番外：安装node.js环境</h3><h4 id="安装nvm管理器"><a href="#安装nvm管理器" class="headerlink" title="安装nvm管理器"></a>安装<code>nvm</code>管理器</h4><ul><li>第1步：mac 安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><ul><li>第2_1步：命令安装：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第2_2步：国内安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line">或</span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure><ul><li>第3步：添加环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、这是本地不存在配置文件的时候提示需要添加的配置</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、这是本地存在配置文件的时候提示需要添加的配置（推荐）</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><ul><li>第4步：加载环境：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>第5步：测试安装是否成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm -v</span><br><span class="line">或</span><br><span class="line">$ nvm use system</span><br></pre></td></tr></table></figure><ul><li>第6步：<code>nvm</code>相关命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install stable</span><br><span class="line">nvm install &lt;version&gt;     <span class="comment"># 安装指定版本 node</span></span><br><span class="line">nvm uninstall &lt;version&gt;   <span class="comment"># 删除指定版本 node</span></span><br><span class="line"></span><br><span class="line">nvm use &lt;version&gt;         <span class="comment"># 切换使用指定的版本 node</span></span><br><span class="line">nvm <span class="built_in">alias</span> default &lt;version&gt;   <span class="comment"># 永久版本 - 所有窗口生效指定版本</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">ls</span>    <span class="comment"># 列出所有安装的版本</span></span><br><span class="line">nvm ls-remote   <span class="comment"># 列出所有远程服务器的版本（官方 node version list）</span></span><br><span class="line">nvm current   <span class="comment"># 显示当前的版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;   <span class="comment"># 给不同的版本号添加别名</span></span><br><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt;   <span class="comment"># 删除已定义的别名</span></span><br><span class="line"></span><br><span class="line">nvm reinstall-packages &lt;version&gt;     <span class="comment"># 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</span></span><br></pre></td></tr></table></figure><h3 id="第一步：安装puppeteer"><a href="#第一步：安装puppeteer" class="headerlink" title="第一步：安装puppeteer"></a>第一步：安装puppeteer</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i puppeteer</span><br></pre></td></tr></table></figure><h3 id="第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth"><a href="#第二步：-安装插件-puppeteer-extra、puppeteer-extra-plugin-stealth" class="headerlink" title="第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth"></a>第二步： 安装插件 puppeteer-extra、puppeteer-extra-plugin-stealth</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install puppeteer-extra puppeteer-extra-plugin-stealth express</span><br></pre></td></tr></table></figure><h3 id="第三步：使用nodejs获取数据："><a href="#第三步：使用nodejs获取数据：" class="headerlink" title="第三步：使用nodejs获取数据："></a>第三步：使用nodejs获取数据：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StealthPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra-plugin-stealth&#x27;</span>)</span><br><span class="line">puppeteer.<span class="title function_">use</span>(<span class="title class_">StealthPlugin</span>())</span><br><span class="line"><span class="keyword">const</span> &#123;executablePath&#125; = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puppeteer.<span class="title function_">launch</span>(&#123; <span class="attr">headless</span>: <span class="literal">false</span>, <span class="attr">executablePath</span>: <span class="title function_">executablePath</span>() &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> browser =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>()</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://xxx.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Promise 来等待</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>))  <span class="comment">// 等待 2 秒</span></span><br><span class="line">    <span class="comment">// 获取页面的文本内容</span></span><br><span class="line">    <span class="keyword">const</span> pageContent = <span class="keyword">await</span> page.<span class="title function_">evaluate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span>;  <span class="comment">// 获取页面的所有文本</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印页面文本内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pageContent);</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;cointracker_home.png&#x27;</span>, <span class="attr">fullPage</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">close</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第四步：当然你也可以把他写成接口"><a href="#第四步：当然你也可以把他写成接口" class="headerlink" title="第四步：当然你也可以把他写成接口"></a>第四步：当然你也可以把他写成接口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.....</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;破解cloudflare拦截神器_puppeteer&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="逆向" scheme="https://kanoc.gitee.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="反爬" scheme="https://kanoc.gitee.io/categories/%E9%80%86%E5%90%91/%E5%8F%8D%E7%88%AC/"/>
    
    
    <category term="逆向" scheme="https://kanoc.gitee.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="nodejs" scheme="https://kanoc.gitee.io/tags/nodejs/"/>
    
    <category term="后端" scheme="https://kanoc.gitee.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="puppeteer" scheme="https://kanoc.gitee.io/tags/puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库的备份与恢复</title>
    <link href="https://kanoc.gitee.io/2025/02/23/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>https://kanoc.gitee.io/2025/02/23/mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</id>
    <published>2025-02-22T19:37:49.000Z</published>
    <updated>2025-02-24T18:53:46.281Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>Docker下：mongodb数据库的备份与恢复</strong></font></p><span id="more"></span><h2 id="备份篇："><a href="#备份篇：" class="headerlink" title="备份篇："></a>备份篇：</h2><ul><li>备份数据库名称：<code>ttd</code></li><li>本地备份容器：<code>126bf65cd37f</code></li></ul><h3 id="1、进入容器："><a href="#1、进入容器：" class="headerlink" title="1、进入容器："></a>1、进入容器：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps   <span class="comment"># 查看正在运行的docker 容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 126bf65cd37f /bin/bash   <span class="comment"># 进入ID：126bf65cd37f 的容器</span></span><br><span class="line">mongodump --uri=<span class="string">&quot;mongodb://username:password@localhost:27017/ttd&quot;</span> --out /path/to/backup/    <span class="comment"># 将数据库备份到/path/to/backup/ 文件夹下</span></span><br></pre></td></tr></table></figure><h3 id="2、打包备份文件"><a href="#2、打包备份文件" class="headerlink" title="2、打包备份文件"></a>2、打包备份文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -cvf /path/to/ttd.tar /path/to/backup/      <span class="comment"># 将/path/to/backup/ 文件夹下的备份数据库  打包到 /path/to/ttd.tar</span></span><br></pre></td></tr></table></figure><h3 id="3、复制备份打包文件到宿主机器"><a href="#3、复制备份打包文件到宿主机器" class="headerlink" title="3、复制备份打包文件到宿主机器"></a>3、复制备份打包文件到宿主机器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将备份的文件复制到宿主机</span></span><br><span class="line">docker <span class="built_in">cp</span> 126bf65cd37f:/path/to/ttd.tar /home/mycp/DataBases   <span class="comment"># 将打包文件 复制到宿主的/home/mycp/DataBases下</span></span><br></pre></td></tr></table></figure><h2 id="恢复篇："><a href="#恢复篇：" class="headerlink" title="恢复篇："></a>恢复篇：</h2><ul><li>恢复数据库名称：<code>ttd</code></li><li>本地备份容器：<code>126bf65cd37f</code></li></ul><h3 id="1、上传压缩包到恢复的宿主机器"><a href="#1、上传压缩包到恢复的宿主机器" class="headerlink" title="1、上传压缩包到恢复的宿主机器"></a>1、上传压缩包到恢复的宿主机器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里就不讲怎么恢复了！</span><br></pre></td></tr></table></figure><h3 id="2、传入docker-机器-上传后的路径：-home-cdd-DataBases-ttd-tar"><a href="#2、传入docker-机器-上传后的路径：-home-cdd-DataBases-ttd-tar" class="headerlink" title="2、传入docker 机器(上传后的路径：/home/cdd/DataBases/ttd.tar)"></a>2、传入docker 机器(上传后的路径：<code>/home/cdd/DataBases/ttd.tar</code>)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /DBFiles   <span class="comment"># 创建路径，不然可能报错</span></span><br><span class="line">docker <span class="built_in">cp</span> /home/cdd/DataBases/ttd.tar 8ba9426d45e3:/DBFiles   <span class="comment"># 复制到docker机器</span></span><br></pre></td></tr></table></figure><h3 id="3、解压缩"><a href="#3、解压缩" class="headerlink" title="3、解压缩"></a>3、解压缩</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf ttd.tar    <span class="comment"># 解压完成会出现一个新的文件夹：ttd</span></span><br></pre></td></tr></table></figure><h3 id="4、恢复"><a href="#4、恢复" class="headerlink" title="4、恢复"></a>4、恢复</h3><ul><li>避坑1：备份的文件夹中存在 <code>.json</code>文件，如果直接用文件夹恢复命令是会报错的</li><li>避坑2：必须要指定<code>--authenticationDatabase admin</code> 否则会提示权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongorestore -h 127.0.0.1:27017 --authenticationDatabase admin -u &lt;username&gt; -p &lt;password&gt; -d &lt;database&gt; /home/cdd/DataBases/ttd/Images.bson</span><br><span class="line"><span class="comment"># 如果没有 .json 文件 可以用下面的命令恢复</span></span><br><span class="line">mongorestore --uri=<span class="string">&quot;mongodb://username:password@localhost:27017&quot;</span> /home/cdd/DataBases/ttd</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;Docker下：mongodb数据库的备份与恢复&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/categories/docker/"/>
    
    <category term="数据库" scheme="https://kanoc.gitee.io/categories/docker/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="mongoldb" scheme="https://kanoc.gitee.io/tags/mongoldb/"/>
    
    <category term="备份与恢复" scheme="https://kanoc.gitee.io/tags/%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>一套JS可逆加密算法，基于crypto-js</title>
    <link href="https://kanoc.gitee.io/2025/02/21/%E4%B8%80%E5%A5%97JS%E5%8F%AF%E9%80%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%EF%BC%8C%E5%9F%BA%E4%BA%8Ecrypto-js/"/>
    <id>https://kanoc.gitee.io/2025/02/21/%E4%B8%80%E5%A5%97JS%E5%8F%AF%E9%80%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%EF%BC%8C%E5%9F%BA%E4%BA%8Ecrypto-js/</id>
    <published>2025-02-21T15:16:43.000Z</published>
    <updated>2025-02-21T15:19:50.975Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>一套JS可逆加密算法，基于crypto-js</strong></font></p><span id="more"></span><p>在JavaScript中，你可以使用多种方法来实现可逆加密。<br>这里是一个简单的例子，使用的是<code>crypto-js</code>库的<code>AES</code>加密方法。</p><p>首先，你需要安装<code>crypto-js</code>库。你可以通过<code>npm</code>来安装：</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install crypto-js</span><br></pre></td></tr></table></figure><p>然后，你可以使用以下代码来实现AES加密和解密：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">text, secretKey</span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(secretKey);  </span><br><span class="line">    <span class="keyword">const</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">lib</span>.<span class="property">WordArray</span>.<span class="title function_">create</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>));  </span><br><span class="line">    <span class="keyword">const</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(text), key, &#123; <span class="attr">iv</span>: iv &#125;);  </span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, secretKey</span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(secretKey);  </span><br><span class="line">    <span class="keyword">const</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">lib</span>.<span class="property">WordArray</span>.<span class="title function_">create</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>));  </span><br><span class="line">    <span class="keyword">const</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(ciphertext, key, &#123; <span class="attr">iv</span>: iv &#125;);  </span><br><span class="line">    <span class="keyword">return</span> decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 测试代码  </span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;mySecretKey&#x27;</span>;  </span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;Hello, World!&#x27;</span>;  </span><br><span class="line"><span class="keyword">const</span> encryptedText = <span class="title function_">encrypt</span>(text, secretKey);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Encrypted: &#x27;</span> + encryptedText);  </span><br><span class="line"><span class="keyword">const</span> decryptedText = <span class="title function_">decrypt</span>(encryptedText, secretKey);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decrypted: &#x27;</span> + decryptedText);</span><br></pre></td></tr></table></figure><p>在这个例子中，我们首先导入了<code>crypto-js</code>库。然后，我们定义了两个函数：<code>encrypt</code>和<code>decrypt</code>。<br><code>encrypt</code>函数接收一个文本和一个密钥作为参数，并返回加密后的文本。<br><code>decrypt</code>函数接收一个密文和一个密钥作为参数，并返回解密后的文本。</p><p>注意，这个例子使用了<code>AES</code>加密算法，并且使用了相同的密钥进行加密和解密。<br>在实际应用中，你应该使用一个安全的密钥管理方法来存储和传输密钥。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;一套JS可逆加密算法，基于crypto-js&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="逆向" scheme="https://kanoc.gitee.io/categories/%E9%80%86%E5%90%91/"/>
    
    <category term="JavaScript" scheme="https://kanoc.gitee.io/categories/%E9%80%86%E5%90%91/JavaScript/"/>
    
    
    <category term="python" scheme="https://kanoc.gitee.io/tags/python/"/>
    
    <category term="逆向" scheme="https://kanoc.gitee.io/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JavaScript" scheme="https://kanoc.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu-设置swap交换空间</title>
    <link href="https://kanoc.gitee.io/2025/02/17/ubuntu-%E8%AE%BE%E7%BD%AEswap%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/"/>
    <id>https://kanoc.gitee.io/2025/02/17/ubuntu-%E8%AE%BE%E7%BD%AEswap%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/</id>
    <published>2025-02-17T01:23:10.000Z</published>
    <updated>2025-02-17T01:29:15.060Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong><code>ubuntu</code> 设置<code>swap</code>交换空间</strong></font></p><span id="more"></span><p>在 <code>Ubuntu</code> 上设置交换空间（<code>Swap Space</code>）可以帮助系统在物理内存不足时使用硬盘空间来存储临时数据。以下是设置交换空间的步骤：</p><h3 id="步骤-1-检查当前交换空间"><a href="#步骤-1-检查当前交换空间" class="headerlink" title="步骤 1: 检查当前交换空间"></a>步骤 1: 检查当前交换空间</h3><p>首先，检查当前的交换空间是否已启用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure><p>如果没有输出，表示当前没有启用的交换空间。</p><h3 id="步骤-2-创建交换文件"><a href="#步骤-2-创建交换文件" class="headerlink" title="步骤 2: 创建交换文件"></a>步骤 2: 创建交换文件</h3><ol><li>选择交换文件的大小：决定你想要创建的交换文件的大小。例如，假设你想创建一个 <code>2GB</code> 的交换文件。</li><li>创建交换文件：使用 <code>fallocate</code> 命令创建交换文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 2G /swapfile</span><br></pre></td></tr></table></figure><p>如果 fallocate 不可用，可以使用 <code>dd</code> 命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dd if=/dev/zero of=/swapfile bs=1G count=2  </span><br></pre></td></tr></table></figure><h3 id="步骤-3-设置交换文件权限"><a href="#步骤-3-设置交换文件权限" class="headerlink" title="步骤 3: 设置交换文件权限"></a>步骤 3: 设置交换文件权限</h3><p>为了安全起见，设置交换文件的权限，使其只能由 <code>root</code> 用户访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 /swapfile</span><br></pre></td></tr></table></figure><h3 id="步骤-4-将文件设置为交换空间"><a href="#步骤-4-将文件设置为交换空间" class="headerlink" title="步骤 4: 将文件设置为交换空间"></a>步骤 4: 将文件设置为交换空间</h3><p>使用以下命令将文件设置为交换空间：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure><h3 id="步骤-5-启用交换空间"><a href="#步骤-5-启用交换空间" class="headerlink" title="步骤 5: 启用交换空间"></a>步骤 5: 启用交换空间</h3><p>启用交换空间：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure><h3 id="步骤-6-验证交换空间"><a href="#步骤-6-验证交换空间" class="headerlink" title="步骤 6: 验证交换空间"></a>步骤 6: 验证交换空间</h3><p>再次检查交换空间是否已启用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure><p>你应该能看到 <code>/swapfile</code> 列在输出中。</p><h3 id="步骤-7-设置开机自动挂载"><a href="#步骤-7-设置开机自动挂载" class="headerlink" title="步骤 7: 设置开机自动挂载"></a>步骤 7: 设置开机自动挂载</h3><p>为了在系统重启后自动启用交换空间，需要将其添加到 <code>/etc/fstab</code> 文件中：</p><ol><li>打开 <code>/etc/fstab</code> 文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure><ol start="2"><li>在文件末尾添加以下行：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/swapfile none swap sw 0 0</span><br></pre></td></tr></table></figure><p>保存并退出编辑器（在 <code>nano</code> 中，按 <code>CTRL + X</code>，然后按 <code>Y</code> 确认保存）。</p><h3 id="步骤-8-调整交换空间使用策略（可选）"><a href="#步骤-8-调整交换空间使用策略（可选）" class="headerlink" title="步骤 8: 调整交换空间使用策略（可选）"></a>步骤 8: 调整交换空间使用策略（可选）</h3><p>你可以调整系统使用交换空间的策略。默认情况下，<code>Linux</code> 系统会在物理内存使用到一定程度后才会使用交换空间。你可以通过调整<code> vm.swappiness</code> 参数来改变这一行为：</p><p>查看当前的 <code>swappiness</code> 值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure><p>临时设置 <code>swappiness</code> 值（范围 <code>0-100</code>，值越低，越不倾向于使用交换空间）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=10</span><br></pre></td></tr></table></figure><p>要永久更改 <code>swappiness</code> 值，可以编辑 <code>/etc/sysctl.conf</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在文件中添加或修改以下行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.swappiness=10</span><br></pre></td></tr></table></figure><p>保存并退出编辑器。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上步骤，你可以在 <code>Ubuntu</code> 上成功设置和启用交换空间。这将有助于在物理内存不足时提高系统的稳定性和性能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;&lt;code&gt;ubuntu&lt;/code&gt; 设置&lt;code&gt;swap&lt;/code&gt;交换空间&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="系统" scheme="https://kanoc.gitee.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/categories/%E7%B3%BB%E7%BB%9F/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="https://kanoc.gitee.io/tags/ubuntu/"/>
    
    <category term="swap" scheme="https://kanoc.gitee.io/tags/swap/"/>
    
    <category term="交换空间" scheme="https://kanoc.gitee.io/tags/%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>docker-push到harbor错误解决方案</title>
    <link href="https://kanoc.gitee.io/2025/02/17/docker-push%E5%88%B0harbor%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://kanoc.gitee.io/2025/02/17/docker-push%E5%88%B0harbor%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2025-02-16T21:50:52.000Z</published>
    <updated>2025-02-16T22:08:19.756Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#00b2c2 size=5 face=宋体><strong>docker push到<code>harbor</code>错误解决方案</strong></font></p><span id="more"></span><p>系统信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPU信息: Apple M1</span><br><span class="line">内存信息: 8 GB, </span><br><span class="line">系统版本: 14.3.1</span><br><span class="line"></span><br><span class="line">Docker version 27.5.1, build 9f9e405801</span><br><span class="line">colima version 0.8.1</span><br><span class="line">runtime: docker</span><br><span class="line">arch: aarch64</span><br><span class="line">client: v27.5.1</span><br><span class="line">server: v27.4.0</span><br></pre></td></tr></table></figure><h2 id="错误1："><a href="#错误1：" class="headerlink" title="错误1："></a>错误1：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The push refers to repository [192.168.31.7:7315/ka/ppds]</span><br><span class="line">Get <span class="string">&quot;https://192.168.31.7:7315/ka/ppds/v2/&quot;</span>: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ul><li>第1步：设置不安全的注册表</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑colima默认信息</span></span><br><span class="line">colima start --edit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在打开的栏中找到 docker配置</span></span><br><span class="line">docker:</span><br><span class="line">  insecure-registries:</span><br><span class="line">    - harbor.jakehu.me:31104</span><br><span class="line">  registry-mirrors:</span><br><span class="line">    - docker.registry.huwenxi.com</span><br></pre></td></tr></table></figure><ul><li>第2步：开始重启 <code>colima</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Colima列表</span></span><br><span class="line">colima list</span><br><span class="line"><span class="comment"># 启动Colima</span></span><br><span class="line">colima start</span><br><span class="line"><span class="comment"># 停止Colima</span></span><br><span class="line">colima stop</span><br><span class="line"><span class="comment"># 显示Colima状态信息</span></span><br><span class="line">colima status</span><br><span class="line"><span class="comment"># 通过SSH连接到Colima</span></span><br><span class="line">colima ssh</span><br></pre></td></tr></table></figure><ul><li>第3步：查看是否添加成功了</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system info   <span class="comment"># 终端输出的内容中包含 docker.registry.huwenxi.com 那么就是成功的</span></span><br></pre></td></tr></table></figure><ul><li>第4步：验证登录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login docker.registry.huwenxi.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 出现下列内容 则添加完成了</span></span><br><span class="line"><span class="comment"># Username: xxx</span></span><br><span class="line"><span class="comment"># Password: </span></span><br><span class="line"><span class="comment"># Login Succeeded</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=#00b2c2 size=5 face=宋体&gt;&lt;strong&gt;docker push到&lt;code&gt;harbor&lt;/code&gt;错误解决方案&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/categories/docker/"/>
    
    <category term="harbor" scheme="https://kanoc.gitee.io/categories/docker/harbor/"/>
    
    
    <category term="docker" scheme="https://kanoc.gitee.io/tags/docker/"/>
    
    <category term="错误" scheme="https://kanoc.gitee.io/tags/%E9%94%99%E8%AF%AF/"/>
    
    <category term="私有仓库" scheme="https://kanoc.gitee.io/tags/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
</feed>
